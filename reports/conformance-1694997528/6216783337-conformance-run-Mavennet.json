{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8ffdf9b4-ca1d-4ec8-9845-4598b07ba7e3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f1114fb7-8db2-4ef4-97c2-a696b75f9c66",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5d873c8-87ad-4084-9fbb-1721aafbf042",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "09a9b78a-5627-4aee-91c2-539a432f66f1"
                }
              }
            ]
          },
          {
            "id": "751c0377-a9cd-461a-b5f2-5cf3b4dc56cd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f05b99a3-6af1-4faa-ae47-95b99647d587",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72898c9a-20c1-415d-8a80-6e4a6d1c375a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "efcc06ed-7897-4c61-93a4-8c4df3012151",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3d1220e6-77bf-42c6-aa36-3bfb1cf12bb2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ea0ab71-389f-4646-b142-de5aa9a1a4ab",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08b63158-86dc-4885-ac57-c68817766a9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1109d44-9211-4b7b-976e-32265b5c43e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61facc3f-e867-426d-ac34-4a57e450c005",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8a597a2-bc48-4049-93f5-602bd995c9d9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5eabc850-d0f6-424a-b2c8-18b3f1778c75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "680cf704-05b3-4534-aeed-9341f75712b4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "18db2871-9a6b-4b33-8464-c758e0201be8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0fd5ed7b-57fc-4e4c-a59d-00b62f6a405d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c905646-8fed-4bb0-8c80-9520cc91bfa0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa6318a2-9dcd-4c83-9ce6-542c19a336a1"
            }
          }
        ]
      },
      {
        "id": "bc2e2704-d576-467b-956d-2ebc4bdac731",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "33038fda-94b0-436f-863e-aa9a7d1087ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f391e1bd-562c-49b1-91db-146c69b9d685",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f450090f-a739-409a-b48c-b323631370bc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3fb3e7-852a-45be-b533-811695743ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b0f3457-d52f-4236-b847-14373a98034d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea11b7e8-0b3f-4283-a0ae-3a9928aaa1cb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40ee3f0-71b5-4fda-8cf8-bd05b8fb19f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4b15f45-dff5-433d-bfc4-9b43486037d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baf7ac1-167b-4cba-8279-ccf2ee56a1b7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc14f0d-646f-4169-b416-36c13a218a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1609cf2-097a-48b7-8555-1202ffbfd1e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "688593a3-e53c-40a6-83bc-010ac86cc00c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96f13949-c181-4c6f-a179-2172b04a98de",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07d2ff6-24d3-4dcb-9433-7e39cb4ee76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "094e85fe-11ce-4051-9c37-1e50785438cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52e52ca-707f-4c14-9bb6-e4eae7fe9a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e339a8-9c81-4dd4-84cf-d347b1ae9603"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74e0112e-df41-4952-833f-9056978d16b7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d9611ec-5395-4885-974b-212f2139c9e5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6cd7f57-1fab-45b9-968d-a3998f8c49cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6271dc89-6e13-4e21-b500-e3a46615ba12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b886ab3e-047f-44a4-be69-5215c8336178",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f64be7dc-9a89-4abf-9928-cf3fd6e6647e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "833eb9ee-1b3f-4999-a53d-2aa9df7f8252",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0db1fae8-3718-4e82-9548-c86ba2997601"
            }
          }
        ]
      },
      {
        "id": "8659dace-5899-427b-9100-c64a56fc0f95",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "da28079e-dc80-4178-9dde-debd0ea1ec67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9017b1c-b8a8-4abc-a1b3-e0c8953adf8a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "347819c3-e71d-429b-91f7-8b1882e4ebe0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c93d83-5f47-42a2-ab9a-869fc07d91ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c61c5c-1a88-4ca3-9936-43535965a06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d941aa-9916-426b-a350-233c26e1892b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d19b8385-5ca4-43d9-a25f-80f6139e75a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af13dda8-37bb-4a07-a585-9eb12bda40ce",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c475f5f-60a3-45a7-9fc8-b0e657f4f78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c094daa2-f6dc-4c8a-b99c-1a774105aa68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6cf0df-fee0-4938-8ffd-97a932f4509b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d70e5df-0d94-4c2d-b8d8-5b01874957af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2dd77fc-7bfa-4849-8d40-649ef47a0456",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ded656b-fc5b-4bbe-9f8c-01bb5de92b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e85ad1-1f0f-485e-8737-680f5d1d2732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e425fe-082e-4d53-9e05-1a2d5b643694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "822282f1-9f80-4fa1-a028-ee1f4ebf149a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c759c7a3-a41f-4f36-904d-872114caabe6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ea9767-6a65-4552-9953-c7b03208ff36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4717f6a-1300-4269-8210-fe75bdd975b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5adfa31-103e-4564-9ac0-1b419d6b0398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c48cd056-f32b-4287-be64-d6d4d89e1c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6ecd0b-2325-403f-a27d-e759e1ff0b0e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca517eb-d60f-45fd-a2d7-e0323b6b9d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068cb307-c087-4b67-bbd6-ab68573e588e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7579a14-4a3c-4a06-b920-6946f2351169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf4e555d-8f2a-42fb-b3b9-941bcaa7927d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2ab024-02d3-4a81-94a5-86ad96a8ad04",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1569beab-51a7-4bd1-bf98-fb1dc30a2280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f6a3fc-e326-41d8-a1c4-90c5c1a638d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614f9317-e2a8-4f97-918b-8ca7a49020a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff5528ca-0c04-4f96-b058-3de55a3b0734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d09fb6-c418-4830-813f-7572b7d817fa",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605cc42f-6b71-4351-addd-9dbde6bebc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55a31c3-aed5-4573-9a27-a403d17d4ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404f7043-433b-4276-bc54-a920f58b02f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dba06ed-1026-4ac5-8b69-42af24668dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306cbf62-ef49-4342-8c6d-f226d6a50661",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89160ca-19bb-4f2f-b638-3adef304f4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41724228-bcd0-4a74-9231-17651d4cfde9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f06b159-671f-4cc0-ba8f-e3a9646fd051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "765cbe51-c1c8-40ad-ac5b-78f54e2a1a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84807995-7526-4718-ba04-f42af83e7d29",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812a397c-a44a-4d2b-9640-4eae6fe9ff6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0de169-b4f4-4a7b-8005-3babe3fba4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae766a-011c-4008-a4dc-e09299df621d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6975a3ae-e0ce-4fbe-895a-024652a77e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6c704e-1a23-426f-bd32-dd048b827b79",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb14612-1d7e-44df-9a90-6b89b9113ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8eb9465-e16a-4457-9ed2-36faa94776a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d30697-693e-42b2-a948-e5c1b6377b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "438fed31-0154-4cba-8382-6136c66d670e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1594edbe-7573-4188-a350-181c479d6ad6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6a6615-311a-431c-a2b3-a2c18536b456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dc7e73-bfad-48a6-9e0a-7f194d7654e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4826ba-651a-4748-a469-9a6ca0828be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b10c76e6-76bd-45d8-b4d7-f80aa8c406c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bd6889-fdab-4577-b55d-edd417e6b289",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c397fa-c52b-450f-a4ae-a78171934368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5fe7b5-f235-4851-aded-b3a5f3c69c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3140a4eb-1c6d-44d6-9b71-c3defe64d8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c7baa72-eb98-46cd-bc8d-95690e4ee4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb08736-f7b7-4fd7-a226-4e2b51c06c98",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b312c1-3aa2-4c98-a582-a161f4de5487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7350204f-af7b-4ac9-9e71-ba2d795b1614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc0e213-a69a-40dc-be4c-1da301244d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7778f6bc-2b8c-4a09-8800-46a396a333cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acd6337-6726-4cb3-a431-3c7514bfa4dc",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f987812c-52c6-4832-b150-32b0ce90f98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1b7383-bf93-4cd8-aa51-70558e5c8307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a83afb-5458-482c-8f00-86b47bc62e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "369a74e3-d972-436a-8038-712a4ea7cc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1a154a-5b4d-46e3-b333-b1df796b2860",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c4a9f8-74a0-49dc-aef4-9e91f604c66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f31f30-6443-44df-ac87-ccdf679020ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da05c625-f647-402f-a386-0ef4419d3081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e567292-f982-4033-b08d-0ca133d48697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822a6c55-d442-422a-8b31-c41e09297a6a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47538cc5-8be9-4e5c-9504-8517b312326c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd147d1b-5b8c-4744-8174-dba0b8c05bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288cfbac-db68-4609-8604-ab137ea01e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14d90d1a-607b-4fce-b515-f8377efabafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8cdab8-6332-448a-9d73-04fee333363b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd12d11-98c1-46fe-9e05-8efb9a04fc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7c96024-39ea-4de1-a9b7-a43bc8bb3774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd23b3cc-064b-4bad-85d9-571184aba41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25ce5d68-4ff5-4f21-ae8c-dd9254eda4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c108abce-50b5-48c3-88ee-ed10ae00a5de",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c95e501-76fc-46fe-8578-b4a7761ddb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d3c758-bbb9-4f4a-a508-c5efaede5d5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fcf2b5-3829-498d-8c7c-22f7994002e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c59f56a1-3ce7-4c0e-a059-709d729e6ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff8cf1d-bcaf-4adb-8dc3-a8dacbea7731",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6b48f6-43f4-40dd-b93f-b9497ecddd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7f7850-0322-499d-a1b7-678aa517203e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c6b410-2ea1-44c9-9beb-51180efc5cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f7df7b-9301-4856-81c1-85a36bafb30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3331c115-11c3-4905-95d4-678f42255ad4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c669e5-79bd-4694-82e5-6bfac0353ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaf0502-e178-4c8c-8354-c10ba9d496b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee7686b-62b3-44ab-82e0-b365bac4d183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "818d3f46-c21b-49d2-bdb9-ee8e3811d767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5ad462-b4b5-4cfe-baa9-77578050311f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76484e80-8dcf-43a6-98a8-5b6ac7355f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c929b49e-5de1-42bd-8b81-211046b5ee44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df24257a-7487-4de7-9147-9162f577bc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "923bae2c-5d28-4d86-91f5-15a82b484067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461f9bb1-f5c3-41bf-a41d-ccd580a25f50",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c951d7-0056-42a3-be18-5c2351d4995f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a070147d-1508-40cf-9f2f-b17d778beac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e50b57-c401-4f59-a8f6-9f227504221a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2b5b24-0c5b-4fc7-9878-deff0f487776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fea5273-ca21-48a6-9ffd-96761095c81a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cce34f-8cb3-41fd-b7c2-afc7d9cd0bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fa5f61-f837-404f-bd4d-3b67c3a4da16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b239e5ab-e216-4f52-9a86-9d35b00f78bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84556beb-58a5-4b0f-9115-d214c4252d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3304823a-fa76-4bca-b822-5a2cbb527d4a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c6c9d2-ba1a-401e-ba03-a2f2db6d6486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5336a70-3453-4671-99c1-686fb1563b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3248e03e-b84f-402b-89d3-0b05be484461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3715e460-cb70-43f8-a9c2-0aa11670b88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b6130b-5308-4886-b187-5e909033c4ad",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1b74dc-e875-45e0-8e77-1eb2cc7b2960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0256ad-5ec7-400d-90e9-70a113c18d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9fce0a-ce35-4986-867c-17aa9471d9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92b5f893-aa00-4f1c-a1b9-a8c6fafe890d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f28d2e0-9bd7-487a-8de4-06f3a8fd62ed",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f7f838-5897-4c03-9c24-885177e3e9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf28f48-6bc2-4f15-9474-b0a3530a29a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6a62b7-005f-458b-b271-c3b3aff7d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d12276f1-959e-439d-9397-e10bc2229163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59323736-54fa-4914-893a-777369c1cf3d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e06bb4-c5d0-4f15-8af0-a1a988ef5539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4a8a5f-56ae-4a64-b272-46536c1819e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ec617b-1582-4ed3-8e28-74cc7081943e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a9917f-bbb0-41a9-99a7-4ebb5137b848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f30f743-79f7-43eb-a924-067c8e20dac6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b320293-23dd-423f-8e5e-5de605247dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5059fac2-1316-4299-ab35-6cbd5d0503c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36105634-98df-4df6-9414-a20723b0f7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6771ed7-34cf-46e9-b385-6bb24b3196c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64622fa9-26d1-4447-b9cf-05b5435bda14",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa23046a-a8ce-44cf-99a5-d4ea20404363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925a3e7b-e389-401c-8e0c-95de4cd0585b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478f7e6f-1f5f-498e-8f63-174377596aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07050ec9-e0e4-4ebb-9920-4e27df17849d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdffd829-6355-4b19-8954-ac3fabb45ec8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426ac3f7-67b4-4815-8abc-d7b9dec2f593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3acdbf05-eb10-4e82-a17d-3caa62f9d9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb5cc16-27e9-4bc2-b2fa-d852ec8dfb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c89adc0f-b1a1-4221-b818-ad13d950158d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8925345b-627c-454a-95c9-a6bafa40528e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9302c8-fbeb-4e32-83ed-3985a1d5e919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93367888-1625-40f4-b1bb-431b3b71bafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54106204-9796-4b86-afff-62efbbd1581f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73f7756-b3ca-4423-bb4a-694a4c392dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382e081c-583b-4647-8a84-ee7490d23c40",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3737625-9cc7-4909-b742-c98bdfe643ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46d01a9-fc8a-40bf-8f66-1560bfdc0612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae25cda8-08f7-4fd3-85f9-db5be956cbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a66c6fe-88ef-4771-9810-acd4f612980f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0073e174-d3d2-4264-a88f-7be4abf1ee02",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297827b1-a6e5-46e0-8d82-9702695480bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33d2f03-34ac-4d64-95a3-e85308c7329f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d5ff43-48be-483b-880c-4136270f54b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ab4ea7-5dd3-416a-a73b-62f2841d65ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d37551-29b7-4ceb-bd3f-01809c469e3d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c11c462-431d-48ad-ad5d-5197bae2f60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb16952-460e-40c1-b019-081487bc2683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79953093-5006-42bd-9f71-66ea8e929f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c09de99d-ab09-4948-83c7-5d19da74cca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cca6611-5b20-47d3-838f-6e78286cd68e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200747ee-4abe-449d-aa8c-5b4abf102e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385b63e8-10e2-4468-add7-39fc79029f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b97ff0-c977-44d6-b9a2-6758a5ccf62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b96e3b8b-4c4c-4a2d-ac89-ad54e8e02adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15788516-eda8-494d-aef8-24f53d3fba85",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240bee54-7ad0-46f4-bded-92b0f5168ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca1383c2-1715-472e-be57-69fc6a55691b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387e5110-fe50-4b40-9414-d74c58911f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6929aa09-1a70-4a0e-9f66-6a6aa41bec18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301c86ee-4660-4c48-beb8-8c76df5921c4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cb0a04-6571-4638-886c-8256ffb8f4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b675ed35-16e3-47bc-9093-fe7b86959851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f38ba25-1bc7-485d-a292-9b14e4dfcbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09acfc8-6923-4c61-a35e-a85f8033e4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a47d79-e069-4d33-b3ee-4090615fdaaf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41ec2ac-ef99-4523-8909-94ff1d6dac49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a433e51b-76a4-4c05-bf2e-efc15aa83cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866d58e9-83be-4e2b-96ed-1bf2e7da8d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f856c9ab-0ba0-4b16-8398-baca243909b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4055ba8-01b4-47d6-96a0-2209f99166f2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7c7621-27ff-4649-9f9c-d292246f9a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe07707c-99f7-4c0b-92dd-2ddebb0485c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707e2780-a7a2-4d64-87a9-15879d7a5fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d73545b0-52a2-4e50-b735-91968775e8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e6f343-0ca3-4012-bdac-a90cddf22b8a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a40dd0c-eb66-4504-a8dd-2d7a8ff18ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfbca34-a270-4a3e-87ac-db8205fc954c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81545fb2-a292-4b69-86d2-9e96d5dbad7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac916af7-f633-483d-964a-72d4d8eaa625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81006b83-759a-4953-9c0b-77a6c476eefd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b80013-0304-4265-9aa2-10ae1e926be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fe418c-2c68-489a-aee3-959d6d3c9df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75167ac9-c45a-477d-810f-b9f58d593385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "62cf5a42-8e29-446c-8e80-b2753f9f8d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8967eb-bc28-4820-ba41-bfbcd24e3227",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d774c9c8-00cd-4b7a-ae84-f535e183d94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba7a0c2-c4db-4d1c-a7c8-35f6c79a0887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096f21f0-7c98-44d2-b2b8-373f6c7ba5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3646c45f-1005-4a11-a077-f070a8b98756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7e7780-9430-400e-8cad-4f826b08deae",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8d4c54-5c23-4333-a7d8-9fd61cc2d104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb2403c-5815-4d3b-9356-2efbb0488bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8746105a-a869-4861-b855-03dc67f891bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed57f14-3663-4f41-8685-c7a9a0954314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5814dbcb-fa75-4be0-852b-b74d45093e64",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2f486e-34e6-4f52-a551-f07b365bd928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba96bc32-adfb-460f-9516-42ca29bf47ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068125b5-3362-4d0b-b6ea-93708abf3629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6012c998-7caf-4148-95f7-7e38537cf744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0e1b33-9dcb-4227-b849-625289daf40b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20dd9929-290b-4a8a-9113-08e2427c1c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316c2fed-e80a-4be3-9957-8bdc79fa33de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7ea7a5-8046-4f28-9261-795b83d523a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "408f698f-2a12-47f6-a386-252dcddb7bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730a19d3-483d-462d-aa36-d83f949a0e69",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2555bf-0e1e-4887-b20a-cec9f73bdca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fee01b-2775-4290-9342-60efbc68638d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dcb821-8e47-41b6-b769-70b966316cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34d1ad77-bc3e-4dbf-ad65-c2c1bb007605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212da3da-5b3f-4d89-97b5-36616458252f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66f88c8-b897-4f6c-bf1b-532bd00e1523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50c0d64-17f3-4b54-ac2d-f0310bb65537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813bb5f7-9eea-4207-b05c-1e13d807e760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7e046f8-8f0f-45d7-976b-7effd5612c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95415cb8-540b-4fa7-b0cb-171709f4909c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f67e18-1c8b-42cd-b049-0b71e79e4b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc421395-2140-4c31-800b-877a5dbbbbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37384e4d-e64f-4b67-9911-aebdf0f692c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa376b6-0719-4ad5-b8b2-dd345f3483f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5832edb9-9154-40d8-92f5-2ffddd80e66a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a343b12-5e02-4d97-b7e6-13a9a1458999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92645b08-b299-4ea4-bab8-e8ea1a592685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079aa12b-b910-4870-962f-b7fd5718f426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54f47725-3cba-43f3-a0a3-9f519703df0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce296f8-c466-4edd-aeb9-0f1b4b413fe9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7fce7b-421a-4274-a620-3c549acfec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7642a767-b8fb-41c3-9728-9f2e83704800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6aa44fb-a849-4605-985b-afacf7322756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13736b6c-9139-4957-8241-a41e23b72844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2daf74d-7315-4bb9-a7e2-7fa5f78331c3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c3d926-cdf0-4a7f-9c72-055a0a2a0b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97a10694-6c96-40be-ad1b-b23572dc427c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8491a26-4c2c-4547-9772-2e270d837f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d9c657-67ae-49cd-b4e7-642624048640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a581c48a-e04f-4d39-982f-52b6cc5d0976",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0415795-fd1d-4d4f-8a9a-2fad7bb00d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706a443d-c95b-41fd-8a9f-b3efca0f40d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e97460-f6ce-4ad2-b19e-ca4946e1f9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84313782-83d6-4511-8166-28e79f32bb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afffe64-cba9-443d-bd7f-7573aae9efe8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70760191-207d-4267-afd4-4997a7970712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2949e0-8ef9-407a-9d34-fb9a5bf91001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f682a927-1eb4-465b-836f-52096e8515c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c96448-71c9-4dad-ad38-e10cf761f974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3a6f7d-975a-4dd2-99c3-9e547d2457c2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36314a63-a2c8-4863-b0e3-5c8e273c443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dab8bb-76eb-465a-a682-945597a96bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac5e58b-8384-4958-af04-6965ccdac543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2c43ef-cc8d-4b1c-a55c-a8cd42322786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f445021a-02e3-4ec2-9680-72c51582ab68",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbc6f25-35f5-4907-9072-d40361232d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1321091a-92ea-4119-ac92-f386659c27b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5423b42-d2ac-4b23-9edb-ed93b867d7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b96ca468-9b6a-4260-9220-f4bc1fa055ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da96d041-9560-488e-9c83-fc9ff493c28b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32df4c7-fff0-455d-a4a0-c556df784502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af410442-7542-4b9d-8208-7dd0da7fda68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6b6e16-4272-427e-b4ea-740695f3b736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "48c8221f-8389-4d3d-a2e7-657a3cc358f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d835a3d-c9a0-4ec9-86ac-55ccd38f75c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfce6542-f5af-401f-a234-52b653440f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0902c252-cb49-489a-b289-07120880b432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9257cd-249c-4de0-a27a-4e5cdc517cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d763a2-1f6e-465a-ab06-e0096d0fd1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3dffdd-f283-42de-bb19-d163f4344964",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bf6e74-3d72-4d00-a94f-f66617618fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dcd829-42bc-4595-8713-fa5fcf094a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cf8958-27b0-4117-a1fc-2b18b21c90f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c07cd5cc-880c-4aad-bff2-beb629762b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0885d5-7b98-451e-ac37-c200b8ddd35c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c748e9ab-e201-4ca4-94bb-c07c7838f18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31873d17-bea1-4d33-a233-a24684527229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84dba492-a795-4a35-b25f-62f8dbd1dab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d14244c3-f796-49e1-aa6c-3ea50683a5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f768a51-dfb7-48a7-b5df-0bc81ab81dbb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e521bb7-97f6-4ad7-b96d-1bea8f596a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa09680-94ff-465f-bd34-c9248eb66207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3c0512-daa2-43ea-988a-cf45f28f6120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aec4111-4b11-4708-8616-157c948e517e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e86b9d-1a2c-4b87-84b0-8c362d01b3b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f623cea3-9b68-4693-8de3-0e1b74773615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0178f6-e290-4dda-a163-d97118d76429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f6e240-cf78-460e-b3fa-63c7c7011182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fca42d76-8ee2-4c21-8d08-44499bd90a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35310c74-9eab-4b38-a44f-5c7ee7de33c1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373a2625-2ddd-40fd-b731-a0cbc6bda9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe5cc4d-19d4-4465-a085-0cfe46acb9fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda92009-cca2-4264-a6d6-b08c7957e953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f031da-ab6e-47a5-9459-a88d073ebe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fad9c96-6372-4acb-b445-5e6768f6518e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf8991b-f974-4624-9a15-d14fa3751d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d56da76-7ceb-4319-a9cc-16001dca22cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc37bffd-15a0-41e3-9b96-5e279c30db77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4365c7d2-27b8-49ab-a2a6-44e26237d81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccd9ca4-7b6c-4d49-8b10-d51cdf5c8bf9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc8f8c69-1060-4bd5-8b6e-67293939c77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332fb9fd-c050-4edc-9bb3-40432a566780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055951ed-7e06-4832-92a7-39bdc1f62306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cf988b-c786-4883-8e86-28f778d5c9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d974f3f8-2736-4396-adcf-ca276a60ce90",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4621e4be-5a23-41a1-a81c-ca27d17e61d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34d66e5-76cc-48f6-a77c-95f3f600198b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ee4257-697e-4340-be7b-7e663541bdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2784e3-14a5-4766-bc30-0ef44f89dcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43811f0-4f29-479e-9cf4-70785e07f038",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1091952d-0bb4-4a7c-a9f6-126afacc76b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac236020-8d57-4f33-b222-c585b1627d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9deb791-c6a3-465e-a64a-a934cdc15eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb085ce9-fa78-47dd-af31-85430bc7a2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec9139f-d3b3-46fa-a295-40700de083b7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b806c583-cdd3-4e50-8dd6-a83011ddc5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7de576-d9a7-4be9-b7ec-27f24ce86c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238b26cd-78d0-48ff-ac14-e87c98bb0ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8c1730-39c0-495b-b9cd-b0df3522cdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae74032-f342-44aa-b01c-8a962e9e306d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8653b3-4f9c-48ef-96ef-49c296069053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0926a4ec-790b-47e2-afa2-ac0f5a33447c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51186e93-2306-40d4-b64e-49eb7a67b680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c29c6c8-7924-4f06-9f73-ce6f8e32278e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec0e167-6a45-4979-93fa-739567f536db",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c019542f-4832-4b93-994b-758de6f9f172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a2a0e3-0748-40b8-8391-97413d3a90c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846dab45-0344-4ef3-aea1-799cf60c5932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede44722-333b-4872-bd03-1ea98974d39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992a86e9-e0d5-4a25-bed6-40b48741ab3a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66172428-3974-41d5-82b8-4e74710e5be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74cefe1-65e7-417d-9540-e18476b80c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ed987e-96d9-42f2-82e3-870ee805687d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "478378e6-fd90-4c60-b080-eda0095f4b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9d4359-4797-445d-b3f7-1ba19941816a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64581ba1-28f7-4573-8bf4-9ffe7351147f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f1e027-7565-46dd-ad86-e7794c205b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed772df-2e55-48cb-9f5b-4688a69e4953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1efaa176-b7cd-4ba7-9641-04194f85b1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc398e9-9982-46b3-8a70-7066db6fe104",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fa2da4-234a-4c45-ba79-cd329044c216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a5762a-75e7-4884-b944-b2032e04a8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1657ec3d-2008-4198-9e85-c82c029d13cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aabd0f1-af54-47b4-ae0f-738387c59ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38d7267-5db1-4e10-9619-371fc93f01c9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77208f18-0e06-4119-9376-45b4bfe8e006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef74121-943d-458a-b52e-c7c92e6d418b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70060482-3309-4be9-8f74-35ffa28f3015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ead86b25-7816-4d88-a0e6-7e5228f50b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ddea8b-9251-418e-a703-346ada1752bb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5b316b-0746-4fe5-b637-5746d035dd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91169e15-ea69-4936-b246-ff5a21c35ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446e4744-b14b-40e2-8a90-d98f92cebe6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75592baf-755b-44b9-b9d2-ed4d99c30a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ebce0c-3fe3-4f8f-81f3-5037628983d6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff8bbf4-832a-4749-9287-02dc75a8f6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8f1b8c-c46d-4ad4-99e0-251626dcb220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd4a541-61e9-4b69-a74a-35f5886f0f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31c2e5b-a13c-4a3b-bd69-d9809aee5258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92eaeada-2e48-4ed8-9d21-cab1190f721b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbdad8f-d595-4428-8b28-b03a68689412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98701a21-d929-468f-98e1-2712b80632d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c025edfd-198f-48ea-a176-b0dc53855a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e40d85-db79-478a-98ff-94580e83eb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b86d414-b18b-4a72-9ec3-190eef1b8f0e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917d10d0-8649-4a2d-adc4-9e2d4aa3657f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4fc7fe-b682-41fb-85da-213044998658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d026626-21b4-4158-86df-525f0e9cb761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd386c9-dbe9-498d-bfa7-4e97b640de08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72903136-59ee-438e-8814-4c4861b42772",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a917065-3c20-4259-94c7-b02e9ebb7172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15851a1b-28ed-4357-a58b-d410918ea4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230baa64-d895-43bc-b7a3-7588436b4da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1472cec-8e3c-449d-bf4e-419fdad1cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b950cd24-bd85-4567-87b8-4ee01d7a7445",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f3579f-7995-46cb-a102-caa449818a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6964ed94-8561-41e1-8c2a-710d0e431a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a72c64-370f-4308-b2cc-31223bb6b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85101d32-ee6b-4f6c-94df-c6023451eebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3e455e-baf0-49ad-bf41-be5111bc5dcc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fdeb2d-ed10-44f7-a6ae-8b650b300031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8d5f68-f08b-44da-9201-90235b6458ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adbacbe-5d6a-485b-843c-55738b1b2771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c535c9-555e-459d-bfc8-256dd3f61eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79164fd1-7e78-4bd2-a11b-e86569cc867c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc82b390-054b-41b2-9bf9-0f7f3b7d58dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aabfe2-bfed-4cfe-80df-70b1f12d1a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f917cac-f0bd-42c9-9d1b-50de56c9c89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dde6934-e010-41cc-8936-418a4e8f9aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffa4d46-bd92-4253-ac14-58442a694678",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a378cdb2-cd98-4ee4-a197-71e4f3dc5c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3027332-b328-4a8f-8800-43969a89b89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fa449b-7389-4540-a3c5-70f306b218c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1284b94b-0b87-4c72-a8f3-0c75ffafa93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0447d6e-35a2-44ef-b97b-2fb2c9a85e1d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5afb725-5c7b-4571-88fd-e3d6f2673a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c601639-1c91-467e-9e25-3f3110195cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdbd489-2c74-4508-b145-214491265c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9db472c-2584-42d7-825d-0325b004ea4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654e314e-f8fc-442e-be03-21e4d416ac3f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d0036a-5f42-41cb-bcf7-bf3e383479e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f5ad06-ba5e-4949-bcd8-14999a5591e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26689d5-0fc6-44f9-b4db-7d2f6de4bedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "656945f1-fada-4e73-9886-f9c15a12f6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230c936b-d915-4280-83cc-0ca5d15f8a44",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99ecad2-b518-489e-b912-181437027fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee726f5-0ce1-4ea8-bbe3-490c1db96a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4b0e6a-2562-432f-bad3-497a30cab015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc999497-b460-49b1-b5cc-a94c6e24fabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafe5c5f-b6be-4011-ba7e-d91d1543f81c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb36c66e-c34b-4a74-9209-4367a6ef437d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32dd107-eed7-471e-857d-a931eed39bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26527c94-7fde-463d-858f-5a1e96b62ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32d320ac-64e2-4066-8138-5ffedc918cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8175aa98-193f-473c-ad0c-1bc67aaf2430",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd426ea-b48c-4a24-98f4-0d718aad0d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b5e6d4-8d26-4de2-b0d2-5fc102e5ba9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca99c988-17db-4e2d-973e-865c395643f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "965565ad-560e-4021-a7de-bc7ee9297c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4734a2b-29f7-4f99-8c30-86bfd44105b6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f085732-9b94-4f02-84d4-7f1a042d3f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ad802a-c10f-4339-b9e4-d0e131aa4291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cdf2e9-a48a-46bd-9440-e734b44b9589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b30913-5096-49a2-a37f-1037c5904222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5ea839-a79a-4cdd-b90f-aecd9907e963",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb2912f-d690-40e4-aa1a-df42cbddcf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9e5d06-0a99-428a-87c7-502a9e01ea6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05105cf-3d7f-4ae7-bf2b-cea9f63d3080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2493fc5-6387-4589-ab69-a216c180fb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd2b99c-fece-40f3-8c4e-2b9f5fa785a7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84d6104-89bc-4ab7-a5d1-c80a876ce8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a0b4f7-1cbd-4994-8d2c-04474e0b7db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c423ab5c-270c-46d2-9ea6-e5ea931de65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f667bf80-0380-4aa3-9240-875828e53e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0fec47-b9af-424b-ac2f-a70b4a635d7c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075a18d6-b7ca-4146-8922-61bd35d54d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518af9db-3553-4f98-a982-d7247d969c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082e218c-9bc5-4b4c-bdcf-fd2de94ec6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "de700fe8-2920-402e-8606-bb62b424253f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f49be5-fcca-4a49-8856-3e9a2e35d9db",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6305f1-eeed-4d40-801e-ed7440371753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "64022773-1cee-4460-bf4c-bb22e6d11859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2c535f-abff-4304-81e4-3ab6cd0b2a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "418c6c46-ea3a-464a-a2ed-d2dd7299885a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "518ea5d3-2939-4f1a-9ccf-b9668e8fd4a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ab504658-8d20-4809-8fe4-967c72a8be01",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1c68f9-44b8-406c-bce3-c105e85d2dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d64ca6e7-981a-4654-ae92-e3a576187f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3aaf213-5e87-4444-b1f5-7d82fb489fc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddb2e1d8-b822-4163-8d79-6d484f966a7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "245acc08-a3bf-46c5-aea0-c9e34e72ab88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b144677d-ec50-443a-af97-5f36bb5b9bd5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad6e4605-ec75-4a49-924d-b64b8350b2da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4eb34f1-8d77-47e9-b45b-9cc46bca0ac6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54c7edf7-4418-496a-bff0-51dd9dc52553",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "508b227b-dce4-42f6-837c-9c2b576a2d2a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f478e9e3-1165-4ac7-9460-fed3868834ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0273fea2-82d6-40b0-a5a4-c557ccd372e2"
                }
              }
            ]
          },
          {
            "id": "df925c92-02a3-4d34-ac13-1a639827e738",
            "name": "Positive Testing",
            "item": [
              {
                "id": "21171148-913a-4d7d-96f2-1866c92cd3a2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fa849eb-8d3b-4adf-9360-316cd00b9b6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0695e48c-f90a-4cb1-afb7-4799109834e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e3c46cf-b4d8-4fd0-b8d3-750dea2580bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c9b2c00-fc63-4e73-8929-1ba8935efa90"
                    }
                  }
                ]
              },
              {
                "id": "68751666-6f09-4ed4-a7d7-c03948f95e57",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e40afae3-104a-4eef-87e4-216f478c730d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8bb1c02a-4e1e-4ad6-84c0-5864aa7b0382"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a20cdf41-1648-45ae-9d1b-9dfa7c71bcb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e0ad3c7-0213-467b-9218-e01875c17889"
                    }
                  }
                ]
              },
              {
                "id": "98f2feda-4df5-4ce1-a191-9df533770607",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae8b63b2-2ab8-47a1-96bb-63b4b8854fd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee023e4b-cb23-4349-b13d-ed24e17c888d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6922587-765d-441a-ae52-72dab21efab2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c914064-c7de-467c-abf4-e34389b90091"
                    }
                  }
                ]
              },
              {
                "id": "38db7934-ed2a-4d4c-a3be-035c85067c64",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bfbb1a1-86f7-4b65-834a-71c7a7f651f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a714d71b-aefe-49b1-85b7-6907435c2881"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "018a7f8c-a997-43f5-b692-7d83d5b01bff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5f2fee0a-0f41-492a-954e-212543769b9c"
                    }
                  }
                ]
              },
              {
                "id": "c2ac57b9-b057-4770-a44c-32faa95797bf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d496c498-6626-45fa-98d3-1442a7f23fc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8bbf2533-ca4b-4ae0-aead-e0937394c974"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4776186-0b9e-4e4a-ac18-6bef48e6af64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "513144e2-c48b-4ca6-b335-9fab3a714403"
                    }
                  }
                ]
              },
              {
                "id": "b30dbbd7-3825-40fc-a05e-d4472b3ad133",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e1f489a-67c6-408a-a68b-9899766aa29e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0c4e04e-4b6c-4f98-b5c9-98b5571a909c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "368dffbd-c8a0-4a33-a863-d4f7af4b808e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ea24efde-4390-4008-b934-5f28679242a7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7d85300-7ef4-4353-87c7-2cac67f25fc1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "896df0ab-3d99-400e-97e4-e655582fc9d5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "222122ae-ac04-4d7a-97e3-080d3bb81c6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6fe66a3-c996-40e8-8e45-9b4c46b819ad"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24381f83-f98f-4caa-a2a7-5b815e09eaa6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bf21aa58-a485-4e4c-b592-e3583655f228"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8a380e2-2ef2-4616-92d2-afc6ac41ae05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d5daca1-054c-4d2f-aed0-09616ea75baf"
            }
          }
        ]
      },
      {
        "id": "8948fd08-51b9-4319-85fe-12ebc754bc93",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a36aad47-e5a9-4a43-addb-0209d2fe6208",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22401419-fd69-4901-b8f5-301424f6c3ed",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "601c1457-1fc4-43de-8a44-943935395b68",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e1deb2-2187-4ff6-8dd7-9142e62d0292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3ac660-91d2-49dd-9b64-7b35c5fb447d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de74c05-ee89-42f8-8be8-ea327cc30438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "91a3aa8d-705d-4341-b38c-62bdc9998475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d337f797-a82a-4ddf-8e57-466d15683e80",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f9b141-b492-4805-9bd2-87bb161698cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d850c9-885b-4d89-9a3b-f49dfb2a84d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a40933f-5023-45eb-a5fe-5491199f2db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9695b6d9-e917-43a5-8d56-5daca8c93ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41fcf3a-bec0-4bbb-ad78-261f1c41b3e0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f29a03b-8d9c-4546-991d-25c2a9c0539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a11eb6-8283-4fd6-bde2-9be49b3c1fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1558c8a3-eec3-41bf-9832-bbe9d66ac80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64f23089-1d34-4df2-8788-eb21efbf2e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cb088c-a027-4021-b8fd-b09b128b2750",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a6b333-8c1b-4df9-ab50-1d3da3d8d29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf952fe8-34b0-4bcd-b3d9-db0c550f17d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a555e9-1854-4089-8873-e7fb0e9438c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd67c7c-8eac-4e5c-afb7-59b21f081e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaa14a4-116c-45b7-b2a8-edc102cef03c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbdd9dd-3d24-4180-8186-dedce0dcc517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c0f45f-a77e-4faf-a01c-611abe82ed84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f600e-444e-4976-869b-d8b93c62d334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae249b94-3b64-4776-9f74-15dec44286de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c995f0c-031e-49ea-ace7-6020845e258e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9759a737-104c-43d8-a350-659a22b80861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2633344-b100-4a0b-b9d6-ea804a699a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7252e5-5176-4bb6-9130-40b4fbbe280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7d141c-ed20-4784-9b9c-8f252417d23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee743ea-b9bb-40f4-a612-91ab107039a7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5fd167-071a-4e24-abe1-4bc851fbba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15485d8-229c-4b1e-9f12-66a1e0a58428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd232821-edf1-411e-b8fb-cceefd4f477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ced081-18f8-4eef-acd0-33d196252b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af6d256-102e-40aa-9477-2747c521de8d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1ce879-6801-49a2-9dfe-a887bb0258ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cac22e4-c710-41cb-99a5-54de4ecaf547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60353707-290a-439a-beb0-089e8741961a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1db71c0c-6c29-467c-bb6f-01e85cd3653a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b573800e-9746-4178-9e13-6817b01cc82d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4cc474-72dc-4ce8-98ce-949bc036ce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05923e38-8df0-4ee8-9729-bfe4c9a809bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47c094c-b3ff-4271-bc73-da028c2e897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9bc86a-e21f-4d0d-a18c-f4185b27ef67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d0b581-3b60-44ce-baef-f618f94a588b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd47649f-388e-4419-999d-0b63e53946d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088c727f-9a3f-45b5-b922-a6841be9bad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c142b6-1935-48ee-8650-8fef1124413e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd1394d-3750-445f-b121-a541d6fcb0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f7c022-a6c0-4144-bca5-296e60dc52a7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b4268a-3e33-4612-b9d7-eab6d56c18bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d572b2-125e-4eb5-af73-e62899a49f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8b317b-7769-4c3d-aa65-d08ab2bf3497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc318ad-a032-4bfc-bb9b-72f6f2a8ff8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518ba906-3f5d-4869-87f0-e4b1c674cc9a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86f54a5-1280-45da-9348-0d0bc3ceda36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f409e714-5a63-4049-b59e-2c7e5a489d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b90574d-cc48-49cf-bcc0-9307a5d60cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51343c26-b175-4531-801b-08d6004472ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d771b6d8-fbcc-4b5c-8220-6e8bc3d03cdc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a31910-d68a-4227-b4ea-22310b30a448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670d7c53-994b-4170-9b36-87278bcd1e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e991c37b-354d-4108-b64f-1e4cc5d41368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa19941-f60f-4a25-b912-67fc43cc4019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff00590-239f-4021-890a-43f1f845ae93",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14885f84-fe69-4359-825a-a93ac4405fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d9c73f-10e2-4168-a2db-35b70617a211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150bfbbe-3efa-41e1-80d5-2966148b8a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e21296-2e40-4f7e-bfa6-653407d26c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf08b045-7273-400b-b6c2-5b93e09ccb60",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffd7ab9-cd62-4bb5-8360-0b9bbd7e7af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe6e2f9-37e8-46bf-9c7a-06d2505ea31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604036da-b3a0-43f0-bd1a-1922e7c70c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45a733e-7d2d-4669-bbe8-e7b49dbd983f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1dbac6-9fed-42a8-8360-c222ee25d68c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650553a9-034e-4dd3-b103-355242f7c2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e6f4c6-937c-4f48-a073-171ee143f5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3920695b-8714-46fd-826c-ce39d6c8e732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7edb3a-5862-4da9-94c0-a8170c186cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a70fa9e-6475-4bfb-b9c0-e681b34f27b2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d052c500-ea91-4d08-840d-5c09757461a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f8c2ff-da78-4efa-b117-a0871aa348dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983bc766-efa1-4dfe-9349-709bc15ad8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1013fc97-194a-4e25-a00b-75b6327ea0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76413772-4585-4615-9310-74c00d6fcb96",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d901d4-5d8a-4f21-91a0-0fb833d399ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66694f2b-bba8-4cbe-9668-ffe85e64a67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f531e7c4-bfd3-4662-9c24-d36a6d50d94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4719838c-4ef7-4640-9b57-c52fe2671d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925ae1d7-2ef4-4fd7-a607-598efe13ae87",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451649f1-ed59-4821-9e34-a3061c4d5ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211521a9-e1e2-42a8-8b88-e87d34c13ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fb8592-2cad-4b8d-954b-b676e97ce9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "346880b8-99f0-4653-820a-7b7275835761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60418d6d-bb4d-4c37-81bf-c3848b6e042e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fd3a6b-19de-46d0-9b0c-84b0c03751e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d5e565-54e5-4265-84fa-349a3dd78792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13ea004-c0c6-4f81-911e-2d47fad7d26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "913f4b7d-0fd1-44ba-95d7-a8f6ab30d6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c555609-6d24-469e-a95b-84977e616a99",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8bfe43-08a7-47e8-9c2b-72000319f611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d3eca6-6e2b-4939-a0c7-5753c3658428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7298fb31-04b1-4784-9aec-65efe1c1e80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a642d34-f3e2-46e3-a7e7-7f9b1cefc0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388a317d-85f3-45a9-a162-b764e4ca6139",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595aba19-ddcb-4f19-85e2-036fe93fdf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c579b9-c8fc-4178-8587-99d00138b52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4163b950-97e9-4227-83b6-c2f2d6665794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a79f2fbe-91f3-4514-8d35-32e8ffc4c655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa14d0cd-25b0-497c-b0e9-b0aaa883c278",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a282bf85-d3e4-46ca-87b6-8a02f947d82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb4d0f5-818a-4a88-8e20-a3906c46c19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11525c40-a2ff-4936-946c-473aad9f1808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2801ed7c-5e69-43bf-9e5f-f5ea1d615c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ca698-a5b3-45f8-8e91-416a8e5c0594",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebf2d02-bd26-43d5-93e5-70f167a039f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bee411-f119-4095-9121-599b12d48590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036ccc45-52f3-44ef-b546-bcc4eb39627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c080a96f-ef3c-4477-9823-a0aa7adab15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc87a45e-94e7-4146-a60c-c16b43abf788",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d5b47-e470-495a-9d2c-bdd3bc80d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6045179a-bb48-47ac-8e62-f9435253d5d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5fdf17-3fa1-4d60-ab46-05809064c060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e80bd281-95ed-497a-b9f3-cc6e4827c17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fe015b-6930-4c98-8166-e1db8805ab6c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b0faff-5289-410d-9a04-e02fd0499e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0068d4c-bad5-4265-84ab-b0a2e5127e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a6dce0-3335-41cb-bed5-3dee186df7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d20093-8a63-4c74-8007-84ceafdc533a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d83d39-8b6e-4dcc-9b8a-9cc3e832798d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2a20c5-2eb7-4da6-bfaf-8f380290c9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95bd0d98-64be-49d2-b9f7-f80bd83af501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f83dd6b-4b68-482a-82ec-c21849a30284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc010c1c-05f0-40ca-a9e7-5a3a866eee87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22362fd-2066-487d-bd13-a5a79e735dc3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e11e1c3-47db-435e-9bad-13eff5516729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410810e9-ec46-4c80-82d1-969acacbb6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fed7ffe-c83b-44c1-bfe6-e01bd6f25e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e677ff12-df0d-4ce7-8087-629016c360dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ed0621-9dfa-43f6-a3d1-68e5c3605a7f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf70ae19-a9e2-4a80-b341-148afb149cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a484750-be96-4fb5-9f60-f5f9709090f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4dff88-2698-42be-93ef-fbc83207fddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb540edb-0903-40ad-a10b-cd55c985652b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f87075-ad31-4475-be42-8574d69a89ba",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f11eddc-d7c2-4dff-a667-1b2c7c37be83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0c471f-f79c-4206-864a-322ca6dd5d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337be9a7-2816-4604-9678-f3ca6473c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8b191b-efa5-4e7c-b0d2-1cbf55659015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f991ebb2-ffcd-4415-b4bc-6e6c46241c97",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914da20b-52bc-471f-9d2f-4868a8bf6fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05fdf9b-d684-4190-a4f4-99deb79f7f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cea9a4b-dfc5-4f19-b503-2d3b538f9773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecf0902-1483-4ea0-95f2-fabbc723da60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31eafe16-c6f9-4250-959b-d74237e3572e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9496bee-935f-4e5b-8a27-ca7553f940ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2c93a3-9964-4c08-a9a1-f0c798519777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a341145a-14f2-43bd-b52c-994271a78f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "920320f2-2272-4830-889e-bd83f513837a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e68b1239-e36b-4650-8ce4-68643195495d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32ed2063-36ee-445a-82c6-8f8018cc0d96",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d0582b-a547-4c57-99a2-a68628ace467",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa2bcdc-239a-44a9-bfa2-3511d5eb3b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f59ef2-587d-45ff-b735-7f51b8b9e758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f48475c-89be-4635-96c7-e30688a4ed76"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7c7b625-b321-411c-9c75-eaaf80c985fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f38b560c-7767-4ac8-ac4b-238c36ed5fc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a43edb9-985b-4213-9a05-a15c5bc8b68c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7682c8ad-c176-464f-8dc7-a710f3b1b5e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e271edc-2380-4dc5-8263-002b5daf9264",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "228b6f8f-6865-4106-a357-648940adb653"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f929aab9-8ca7-445b-91a9-9906b6b17f04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc24a6b2-b0f2-426a-a671-29abacb94913"
            }
          }
        ]
      },
      {
        "id": "50d2e9ab-44bb-465b-8121-ea6702836509",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ba79ca14-3a79-44cd-b5e1-f502f084d660",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e2d7ee3-1cef-4ea6-a4a6-f235af1c9a29",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d332138-81d6-4fbb-92ea-1ba0ac9d90e9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe25fcba-a6c1-41cc-b65f-f3df25a879cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c215070a-7d96-4cd7-9b3b-419b1ec91c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d653fa-852e-43b7-b90e-a32bad0865d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4ca9dc-c758-4975-851b-afa3965284c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dd6070-0dd1-413c-bc8a-51994fd78b4e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc52344-7aca-4cae-b157-ba74aeaba7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82b9789-5776-440d-823c-b1eb66f0f859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114e1d3-e3c9-4d6b-b75c-4a965aba1d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd395f38-d10d-40cc-833f-85206549a0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e37e5e6-e23f-4b5f-994d-fa968458bf6f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ac7462-fd07-4cce-a79a-f9bdbc662d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d42c6f-8b07-4652-a2b1-c60460b6e35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de19a65a-3426-4a49-87d6-47547136134a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "289e25ff-7561-4c29-8d3f-0af054044c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7bd548-8824-4d17-b272-e659b72bac7b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f888ef38-85d2-4df6-a0f6-1a5dc321bffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1cfdf8-0325-4eb0-82b7-5898bf27610b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3de6579-7d59-4a0e-a231-60d16b648e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6d4a24-5fd6-407d-aef9-ed44537b3d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94359b78-51be-4501-a4fa-ed513bd63875",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c154b1db-c6c1-4aaf-aff0-b4dd4eff5e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac86170-1ebf-4ece-92ed-cf347ff57612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df4bdea-370a-4572-b2f6-d3953a074483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c16ddb7f-9a54-4cee-901e-7a67c804df5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a051c4-7d4a-4cc1-b146-6441d5fc4822",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e756f4-a0db-4c81-993e-975423b3c603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eccc43-46d6-4a28-9a21-5ac3e86bafba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc8b261-ab7b-49bc-adb9-ee7af1f0ea0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2090a47-c8ab-46ae-bf71-762026801fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdb8ba6-8e16-45c2-80d8-9151db0fd0c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6f25d1-1935-4df7-b4af-27f95db4e80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5077a81-bd13-4c06-b13a-41a9f5ab978b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c227290e-92f4-40c4-8f84-e3917d8738aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3d857d-35e9-435e-bdf6-dc2fcd953038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e54b25d-6e46-4c20-908b-b78e28ad3366",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6b8583-63d4-407c-889a-180d4a15acf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe0007a-3912-46ac-bbb6-c4498c1af21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f080c6-b11e-453d-9647-f464549d4dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b7ccc4-44c6-40ca-8354-4dc63cc2daea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f854e832-39a7-48ad-999c-83a69c927223",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d63289-08ef-4fc1-b098-f6272096ac16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7aa249-8aa0-4033-a282-df01664bbf93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57b00af-d42c-48b7-bbbb-20a586c965a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef231cb2-53c2-43ce-b283-677c28982a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68aa31a3-548d-4e66-8613-9f703f5d73a8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df57d952-3c3a-4b4e-ad86-9ed7d26fe5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7bcbae-b5d6-43e5-ad1e-3d303c09b6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32310998-6b03-4158-ae3b-f560aec8c3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9a8834-81f1-4f5c-9cb6-bdcfdf82cdb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74c6909-6cd5-44dd-8df8-f0ba2ca74dee",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcf1db4-5963-4840-a08a-4c97be278b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f61bd79-d690-4205-a4af-ecfbdfd40809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fe0223-e8fb-4e33-aa3d-b1bd3e4b9d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "38635435-8c50-430a-82c7-78db1f8e84c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2648bd67-8d60-457b-9fff-3501999d19dc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ea62d0-070b-45a5-bec8-7c0d67dbc893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade54052-79be-458f-bf51-b88c62bde489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffdd849-a2c2-4fed-b0d0-f57badd92b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b2a872-fefb-4107-b225-804b06a9c853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937ac929-4a6d-4657-8614-336482f5c132",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cef245-4111-43d4-875d-89d0410275b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51dd5c04-c2e1-4ce3-99e8-e726dd37758f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b77b461-9f50-4289-83f4-c39fed9aa41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "55921fee-3fd7-44f6-90ad-6c4aef4e814a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18083876-aee0-4cdf-acc3-419a017a5abe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f372eeb-bfbb-4430-8906-04dfaf03403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33aa95eb-1162-4484-acde-31803d8a48c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434247fe-e81f-492d-99c7-825b01f55dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfaaf63-3df6-4bfe-afb4-13b63c9b0c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6324bb71-5bf8-4b3f-bfa0-bb8e8ba1a824",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e54c0c-b87c-49d1-9024-abceb1afc530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6833877f-ebb4-4916-90b6-c15af82dacf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77d4d02-0a6c-436c-bc33-93065dc9a0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc33dd38-c4e1-4021-acf1-2f45a20e23bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca1d1b5-10ec-479d-b4dd-365580835b78",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba191ba7-d34e-4bdd-8dd5-59e009e65a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ad90ef-dd23-49c3-b414-04e83d96dd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87673d7f-5b76-4be8-a1cf-0922e81adcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e2333b-e9b8-4ac4-93a2-fa51dda43d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f28c89-0256-4947-a97e-33204af1a1a5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97caaff9-3971-4dc8-8a93-3230a59ac2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f9b807-3ef1-469c-9032-55ca51484f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76c3a7f-1f28-4fa1-b0e1-c431a955f108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3662cceb-32bb-4bfe-9ea4-5760f287963a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a210d7f5-f767-4426-905f-35707fce637f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e167c4e7-0e65-4675-bc9e-ddc9be45b5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2264a58-d625-47c2-99b5-552e82d172ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2ff8e0-4de5-49b8-8958-a361ad399a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d052f29b-4227-468d-8a10-03c829e76459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94991d2a-68c7-4d3b-87ff-00506a6d411f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d34eb69-33cd-45dd-b5e0-7e41680e31aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d62d38-b34d-46f0-b937-6172cc016b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d2760b-0be7-4e35-b5d3-b7c3fdf30d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4478980-5171-4aee-b747-6e17f4fcd4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040a71d7-b3ed-4e04-ae8a-385cd7e74cea",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f65cfc9-1145-4629-8260-306faecec43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7def17-6b4a-4bdd-9515-635b80ce1776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caae7fd9-da09-4481-94a5-3ccb75d697d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ae63ee-ed1b-4f91-a2de-3f9bd34e3875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d01a0b-bc33-4ede-afe5-3411ff1a4552",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4ba626-582e-498d-8650-1b39d5e9b3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25161ee-fdcf-41a5-a926-b507aec728d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e54bda-3bb9-4775-aabe-166fc57887e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1a5410-dbf0-491e-b554-588aa59fbbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52014824-81ac-4894-9989-4690b950428c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ff9080-9f6e-45fc-92a2-2b35ae08cc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a5f282-e1c2-4f71-8eea-7313a9d09cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0eaad1-51da-4ae0-b4cb-9bdd1e0c0575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33aaee02-ab3b-476a-b847-95f631034b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0866e04-9e14-406d-80c9-4abd3e0ea64f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6360d27-e3b0-45ab-b40c-3ca0d997c33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9913bf-2225-406f-8f59-583a3af0f9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7f21ad-f6c7-4e85-85f1-78fdfda74ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1ea262-614c-43d4-a418-3a03f0fa6953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c32d3b0-bbaf-4116-8a1b-a87d8e5513b2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b9e565-15c9-4237-9d01-a85c9efa833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733e9644-dfd3-4a00-9848-7b297e7a86ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be7636c-0e15-4682-94c7-c24879c7c0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f2a379-cb5b-4b2d-b0df-96d645dd0199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29e71cb-ed21-42dc-a401-2cd4bea7454a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41942d4-d3eb-45e8-8c51-9759cfc21c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2da3fa-c2a9-41f3-a741-8987188dfabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ea668e-44b0-4c16-932d-61682e5ce7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc37e4e-5c87-40f5-a401-72fa1ab7b3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995f20eb-47b1-4fa6-9e39-59828c561b47",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e13983-40d4-4f00-a07c-3d0e251d2962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da01018-760a-435b-9cdc-fc3d897c79e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4528f16f-8645-47f8-87fe-c70c6e3f62ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "562c0937-cb36-43c8-9cf9-362c362d03ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee68738-a1b2-4a38-baa2-f07bbe054d71",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba05dbf-a6f4-4ad4-97a5-299e65579727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ee86cb-0963-4e8c-8d88-4908e5701cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6cb1c8-1dd1-4436-95ba-de4a4adc7aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2efb761-1c9d-4992-89e1-601614d2ccc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765f7c16-904f-4d13-aaac-8a89dcfc61d6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f6e3ad-72b3-4445-b82d-b14523b60466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b37617f-edf2-4fa9-920d-7888349c8c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34d5c12-e390-4b75-9de7-b0fab5b56433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19052b04-0ab1-4071-8430-f1ad6540cbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e917cbd-61af-47af-a485-0c8bd9964210",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc9e6a9-71eb-4c28-829d-3a74b778ad37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cad6f5-1637-4a0b-b21f-387e381a0ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5013b0b6-82bb-4df8-94d5-8e71ada3af5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da0a3dc3-f9d1-4263-a5c2-630e585d8bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867a351a-dfff-4fe6-9ed7-a7939c67f4b6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f61ecf-de58-4b79-b196-bd8839abb179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aadac21-044d-44ff-b596-238e937c32d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02afef70-ced5-4d41-a57d-cea6a4f73216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7b2783-d9d5-4885-b2a5-32032def6bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9737d212-e7e4-4964-bef9-5db16ad0b7ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd913ca-bd91-487a-88ad-bebb99a8bf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4556fb-9b62-47c3-a5a7-c96cba400fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e76aa40-d90f-4b05-9845-8a5adf3cfe91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58a5b5e3-d891-4012-a568-b757773d77b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2f19b1-aac7-4c14-b144-2a1d17a55969",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7029da-b7a3-416f-98c1-3f530c5330c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d38a033-2140-478b-9e2c-85556b20340e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2df5811-0942-4f9b-9f3b-2fda3909bcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa00432-5249-460f-9a9e-0a16118e8f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41368a61-1cf4-4f51-b23a-85965af826a5",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2467c1c-c463-4a6b-a048-9d825529cdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30a9232-f79f-4d3d-93d6-906cfa34e2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483e3e82-0b95-46ce-95cd-4937a65d9e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6283261a-981d-45d3-86e3-91ca8f7a55aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14d3fea-529f-44b3-aaad-8eed12a60d07",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16efe5e-12f4-44fc-b7de-cd91bdb50fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a16b1e8-a5dd-4a25-bf62-3dacca440a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674d3c06-96c9-4174-bbc7-d118d82915d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68db4821-12e9-4e7a-997a-5f7e31dc310d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4425acf-0f73-426a-ab7b-86d9e38ae562",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415181d4-97ef-4dbe-a23c-c1626ca68186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cc48fb-6ec5-4ed6-ac7a-fd429fa97d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43480c0e-85a2-452c-98c4-c53217bef1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1513792-fa4f-4cb5-aeb5-d4b62d9d5bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0df8ae5-52fe-4bf6-9fef-b50356a8dc9b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaff060-45b1-4c61-859b-8825752aaea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae65360-3dd7-4356-9c5f-b13bc8338a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec99df53-2769-4dde-b8a6-629a1e0cb25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2378ee55-56eb-4903-80f5-4de0513dac45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f26d88-f340-4f79-a5cc-30fc2a84c80d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30743a0-faf5-4334-bf5c-0df99e455af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6311972-b50f-4da5-b469-8d5118bb0194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893ce6f8-6bd5-4ffd-8baf-a59ad9c1b090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06878176-c243-45c1-bb54-7f63f13c3f78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ba37f3d-3325-4466-b0d8-8a7866725bf8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81f7c09f-4c4c-4c81-b728-4babff596aee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60af2ec5-946f-4f1c-a0d1-45a44d392289",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "602d680b-1f7d-4b2e-9fc4-1efa7ff6f014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4e847a-20a5-45f6-8404-198924810f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "795c2dc2-db17-4fc9-bb88-b22d4abb4927"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1edccfe8-704b-43a9-80d5-64169bbcc2d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3015d9b1-c995-4c31-add5-3830ebd6c8f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efdfdee8-2cb8-4b24-886d-6143f39138de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb09d873-42e2-4016-bccc-6daff05c0d1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a8736f1-4d28-47a6-bf55-cdbf50738221",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8c35bda-af99-4a39-8b58-7bd8352602a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f54bc60-61b5-474b-8ed9-5569de6a8690",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c407baac-01ba-4ffc-bf2b-072fb93df814"
            }
          }
        ]
      },
      {
        "id": "dfe71f70-858f-459c-a7be-0b6014e84364",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7158cef7-6fa7-4340-9160-46809e6ee358",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89f1bf13-f095-475c-b31b-332d85d51122",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "523d74e4-aa5a-4a94-9d1f-91d3747cca49",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b346571-04d5-46b9-8487-83a3dfeb226f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fd6a3a-e9b1-4e03-8916-70e728fd6c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89219d6-ad72-4486-a52b-9e073a94ebeb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8e3e66-b080-4617-88cf-71055a02ce05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93cf81b5-e456-4924-8785-57be3d1d2d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7169d2f8-f986-46c2-aa85-87c5e2f4e43b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c433bb3-f60c-47b9-9658-d7277ea5af7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868289dd-5882-43f1-9b7d-01599ee140a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a1c345-51b2-4239-a6f6-4d83ba20ace0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02329f70-b1e5-4066-9b5c-9836d680888c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afadc89-a7e9-4382-8db6-8f7fc6541cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4aa76c7-d8a0-46d6-974a-18b8fdd58c80",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a859f233-035d-413d-b235-ba4727061fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caceebcf-f4ea-48ca-8882-3f73becd9937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac92e28a-3e73-4f55-8d5a-329103118292",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66693aec-5e95-4f7a-8cfd-0d1a8c4d4d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc9a3f22-9e6d-4d6f-9e49-9821ae8c234a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280db227-7b4b-4d11-b379-986ba9feaa0a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072df565-e08d-4d82-8894-968a719fd0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad93a1f-732e-474a-b827-08bbbde19316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98e3ab3-9268-45db-81d0-cbe326e35bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712c30c2-18f1-48cf-be33-1531c7df6675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0af3491-e328-464e-814c-295446c86c7b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c74a4ba-e791-4ab9-8461-13f0c41703a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "520bc3a4-b209-4123-a5cb-276188312dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9439f419-abfd-4bf6-b3ea-80ef5dab78ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579b4265-74aa-40af-a63a-2f7a221bd9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0014f34-60dc-4567-a1e9-1eb23a74d607",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502dc854-90c0-4d19-83bf-6d2b1b0f393c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac054c8-a295-4d11-9430-ecfefac7373c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19637fda-c7f5-4eaa-bed1-867332b949a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f8df27-11a5-4360-81e9-1f2eafc05f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1334ebfd-23db-4ac6-9438-0eddf2938959",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7003ebf0-e843-4e00-98d4-758b47f6b795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd12c59-b3fa-4544-9be3-23736aa66307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8024a7b4-78a5-4f93-8f29-54ce7a49ac0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8767d65f-f3a4-4b3d-9564-137cf78d40c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bba5fdd-d803-4aa7-be0e-005a126dbef4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d5a064-a1ce-40fb-893e-b10a52c49e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c14d99e-267f-4218-b6e7-121abb4d54a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6875d38-5015-479c-a2da-c1e88e750df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa071e8-9d2c-4c0a-8d5a-860be7b8d8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f044a6-109a-4d0d-880d-de7b17577b87",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0733c8c6-cf44-496f-9754-00f050756523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b39fd0e-d90c-4ec6-93e4-496db55a65f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee26d5fe-b31c-45e7-a001-be77508e97bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d047d41f-2d1e-4eb1-ae65-4df8770224c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491b3808-037d-47f8-837c-2a084c83e2b8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f81ee3-8d9f-405f-ba44-c48986e56e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e55fbd-811e-4625-a76a-1ad16a763d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1a2900-9949-4e8e-af2f-098c609226e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce27dadf-3ad1-4e16-9284-cefadd8881c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9ce9ca-498a-4da3-8f81-f0f3b96b9c67",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35c5af4-2233-4ddf-8076-36531850e270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f35734e-f1b4-4a32-92e8-1f9b789adc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8c86ba-31a5-4c9f-9d7b-a0739c2adfd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75df79f5-083d-4e73-9cf2-2b8c8e12b3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15716054-8506-4c13-a5b3-b8d309e24325",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0290c70-0687-4d72-99cf-a2b249511026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "560cc821-7a3c-4420-8ef6-24de91a32a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "498b8515-cbb2-439c-8a6a-630b8ea5f9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6855be7f-b455-4b79-b74c-26b38faff1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72773687-bfa6-47d7-91f2-a0c505db67f1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6f475e-4edd-4207-b542-536b2e558cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab1c638-fa7e-4557-9804-9c2b527bba9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598d7e83-0e1b-40c1-b57d-5573e784fb9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279080bf-d07d-4555-8022-2bdf067cfa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d75a74-25db-45c1-9c15-4c082f9083e7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d38520-d975-444e-8e9d-36e4ce264fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701ddbae-677b-4685-94ae-68ff947b1245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f79409-3139-4ee5-aab8-5354894c5a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee42811d-83fc-473d-8218-2e994d9f9871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b38f310-08db-4719-92aa-742b629d4fc8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22155d3-e148-4a18-ad6b-c586ef94caf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67e74ad-0df8-43d6-9f44-cd5c938bd3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1e0025-053d-4b72-93c8-88d3d1ac2b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89fc036-ed5e-407b-98b0-b7057481a10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f585c945-6787-49a5-b9b5-716db9f65149",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87419db5-0f57-4a27-a240-277d29b18d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a304d4-4777-4ff1-909b-9ec3620e22b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c9d872-003d-47a6-9ea1-683477648283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d4dc9a-6db9-4528-9853-544796dcb03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6230828-2b58-472b-bfa1-4104f49a7ea0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49cfb00-4d7e-4e14-b4ed-1c5810dad263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719d3dbb-da8d-4515-b3f0-1937b90c33c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2620495a-4686-445d-989c-5ea287c5b231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2618444-b492-4f64-b61a-c11c27e8661b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b3a4a1-e2e3-4fb7-8163-346bea4b9161",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a3722a-3fa3-4a8b-b3cb-c79f76782115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb997e79-45ae-4727-8ff8-d01990891ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dc7685-2806-4ad6-832f-30572ebd48d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf698c0-6975-4985-9fb5-d9d82007b81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee37a21-38d2-48ae-b741-b869e8a90500",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6583146-d300-49db-8986-856796b7b03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75babeb8-1f19-4ece-97f2-f93a370da6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd30d8ec-f8d1-4e3d-a645-e8179c71cd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acee8e6b-e786-4a76-ad28-83a819510a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad20513-8327-4c02-9a6d-456a0bdd29f1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48179858-03e2-48cb-a2e3-51c6bd8b9a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8acb306-8eb0-451f-b26d-d7dc6d2024a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f52d43-3cbe-425e-9840-b7a3e0adadb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25511a3d-2a33-461b-a927-7d7a2d89903a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24808c1-7b93-4d73-8ead-1bd33542dcbe",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63344579-f5da-49eb-9c00-8b88e833a8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3419ce2d-9091-45fb-970a-309b377c0028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29b125a-2aed-47f5-b9d8-ba9fde1c202c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca271d29-9b24-4721-83a6-16a80084ee25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a00a806-6e6e-4558-b814-26d6d8a07c39",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42276f2-e869-4f88-91d1-2689e744ba95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f1f2148-aead-45df-b1a7-6e122d102586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f66655a-d3e8-48fe-943d-2f0243b08263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8137e916-0078-49ed-9ea8-4b8c95fbfb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc031f00-b21c-42c3-807a-a69f1a710471",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318171db-5c4f-4ded-8edc-5b84ac8b8009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a195c443-a460-4542-ad38-c342724d18ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ef3009-6081-420b-b16f-230aaa76f407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216bf598-2c94-4ffc-80fc-258d2c91a348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2b6736-1a9f-4de6-8202-39fb7e69b040",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c684e1ec-7c77-4666-8b33-e680257f44bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5561066-c73e-4029-a78e-14251f34cb54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f90b3f-4435-4130-baa0-429ed79b2030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f6c11c-dfea-4c23-a0c3-f7e4955e993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d134c21e-7b36-4384-8196-f1463ab7205a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c521a17-65e3-4e75-a5c5-e1ad95c3d5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3c285f-1497-4f18-929e-21e09da63b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46d46bf-2b05-4f44-a437-402e32ff3934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d91fc74-a7f8-47bc-a1dc-8b57221f2254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89e49ae-ee95-40bd-8bcb-ec4c6a0b2a59",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0b91fa-14fb-432b-923d-026cc53b357c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68876f04-c21f-4fe5-96c7-c8a994df7a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b44e0f-af5c-4143-a423-a062068e1367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20faa0da-0efc-4077-9a67-2b31cf850e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff504f6-0df2-4ee2-811b-c0a46e6a0d77",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bf3f3a-3c93-4099-b997-2b49d4385437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "473fcca0-c305-4093-a952-09aa07c0d783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7595607-52c2-417c-b79c-73f108f3a26a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a0988c-2da8-42d9-a777-7d0e5f9818a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddecc3b-cc09-42f6-80f9-c1dc44ea50fc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1befa1-641f-4367-94f1-61703e02e009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9128473-5625-4a37-8714-d3684e80c350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87df146e-b51c-430c-8912-5c99ac59c27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6118f2a3-b98c-46e5-894f-ef5824412394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002d6375-e0d1-4c5e-88f6-b3abe86bc2d0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f9fb91-5ae4-4e61-b8ec-2d2175417c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217d440e-3fcd-4c78-a094-bce865b524d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab34bc0-05d5-460d-9120-bac29ca70412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71ed6a7-651c-42d6-8b24-9a3604d34807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ca7af1-3e4c-4676-9269-997e5a12fe46",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9af421-9c87-4bef-bffe-e3d44a17b87f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a575582b-77c4-44f7-9e06-b562a20480a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d010ef-76fa-4550-b351-69731d3e83e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8445fc93-0478-4b7a-bb94-7dfff88e31b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db71f7d4-5309-4e94-85a5-79d56605a127",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a26b90-fbbc-401d-af65-2c06029255b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e8c1c40-b017-48bd-bac5-74ca4091120f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4227d28b-30a9-4643-93bc-9d85637ab0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f7e01e-1ad6-40df-95ad-8e1e2e2d4026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94b4bbb-aa3b-483b-8cdb-bb41471d155f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20292181-1548-4f08-b9d6-2bba62a53cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae22dbe1-92b0-49be-882f-fd5058e42fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb9e9e0-45f1-4c7c-930a-1d32d2fe872e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be326fd-51bd-4609-be50-0a81dbe07353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba2fdf1-c6ee-4293-94a8-43c9fb1121ca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d88532-25e2-413e-b4b8-b54ce2282763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483ef240-a540-4946-a775-cb1f9745e933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64586eec-5978-4294-a471-2a576858697b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7c08c3-ae51-4267-a683-5c33e2ab72bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9ce948-1958-4722-ae3e-333b3846fbc2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6ac288-cc3b-4af2-8381-3be25f656719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2d136c-e580-4018-ae4b-3a21e99bf284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c06cbbe-9c49-4b19-ae00-ae65a36084c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07922d1a-08e9-4397-bdef-5e99cfcb8002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dca8780-6b81-4578-84d2-30191fb23801",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9108670a-6b1c-4c63-a642-61c1accc591f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511288b2-6788-4151-b2cd-66b6e41860af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a927365-7155-4af5-abd5-b6be8ec26488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3039768e-68aa-43dc-bb5b-e538580dad40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc52631-63e6-4236-8082-f3c6ef53de8f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142bb2cb-a217-4322-b124-1b20459ed6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afdb920-f913-4748-9c98-87e9efa079fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a7231f-243b-4ba2-bee8-44a89b149370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb66660-f363-45e1-95e3-dea8694a605f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fde53c-82e3-40b1-b2ee-6af0141b2414",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a81cf2a-a031-4fbf-8c89-d34b89d33160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe845354-ffc4-4106-bcf5-daf83c78755e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a8cdb2-15c7-49a7-aa1a-d0d608e22e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d322d195-8445-4a6d-abbf-cc2a7c8eec38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8528d0f7-cd43-48d2-ae8a-e0d8d4fc799b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdb7402-04a3-4906-bd27-02e6a6e0b730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154c0c67-7bfe-4a01-8584-89237be3cd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010041d0-8503-4902-bf32-05cf4e73d25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a32047-1479-4b70-bd46-8fbd3b79e72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d331c656-4775-45df-bc38-08825e33182c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d723fb-c662-471c-9020-4caa22ec0d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c71de3-080b-4b23-9df3-a5ef1b4c352b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c61abb-ce62-4dc3-85f2-2df2b4416112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74afe858-2773-4ae0-b841-34b4fb675903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045e3535-4986-44c4-ad34-1a5223a83800",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b191ad-aafd-4f29-a006-3e82e6306b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1089c7e-c591-48fc-8e93-a86221b28d65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c22d80b-5816-41b6-b616-1a70c330e68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94316111-06e8-420a-87d0-ee1fd893ab3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61b9b6f-392d-4bd8-8352-f9f70ee93d22",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd15789f-01f0-4c8f-b349-bce2d75cf559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a35656-94df-429d-8678-f9d120e06fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7192d0-c0ab-4402-b48b-69bb94b16d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34b372a-5f81-434d-9c96-98ea005eabdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f362f323-ddac-4dd1-88a2-13c6cb142b88",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ff86d2-a150-450c-b8ff-9ae41c9db78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06d3f3f-cec6-4cbb-9918-b07edfbdba74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfbf2e3-cf42-4852-8354-de8a288ccb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59dbd5e-80bb-40d0-ba16-9e138e2c6529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c279d7b-7f63-4c8a-b735-0c2141e044b1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2f5c50-1eb4-454b-8763-01dda6a22586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4f47fe-4559-46cf-a633-232581c18e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f02619c-3874-4ca3-945e-21b6a81c0452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7763a90-23df-4ecb-b0bc-ee4d646ebb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6c69f0-b121-4fa4-8ba3-bf8beb53244f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79fb52e-dbc5-4b7c-b200-87fc63e6b990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5995d18-78aa-42b1-9f5c-e14ec3cf7eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033e37d7-034b-4fec-9b5b-3da9ad5ccd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd54388-87fd-48bd-a8e6-bfc95d80dade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e086359-3a2a-499d-a29e-9f62aeb5bdbc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5882bc00-a828-457b-9f51-eaf02e5dc79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d3f870-b40e-4343-8951-99e659224b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fb2fb3-fa50-41a8-8b8c-2ba4f15b314a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae76c5f-7fd1-4ff1-b8f4-8988bcf5aee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313c5af3-e9f3-453b-8bfa-1629adb0f900",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8550bad8-3fc1-46d0-9941-e44b58f69fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb7c31c-9d6f-4744-baff-4b83bb21c3d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a954382b-a2ff-413f-bec6-a9b86f57dc0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa57626-c2af-4bb4-ae44-32b2620264ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21808c89-cb2d-4e72-9b9c-5542a41e4bcd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b95b7b5-c15b-4ea7-acee-49440c8369dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c35bfda-1e24-4ad7-a0f9-e0e021a9dce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7deeb65-d9cb-46bd-8c75-d6fd6095058a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bb3162-c7fc-41c9-bc00-810126603892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70aa9b2d-5731-4caa-88f5-69215ef74ef7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fb9eff-ead8-410f-9519-2407eb974af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32365284-2393-4ce6-a534-449a5c1bfb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed68608-89bb-4f4a-b589-18ea32c54f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17dc00cb-8a09-438a-b0d5-0c2d34d4c01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841744f8-4f92-4dc2-b9f0-6c7885842772",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bd546c-ba25-4cb5-92c5-93f5a9c99db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2593ee3e-ccc0-4ed4-bdfb-4e81ea11b1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a934bc-810c-4be4-a366-7c3ba2677922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b69f8f5-9d5e-4746-9d4e-6326f3dd3d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045d4076-40f6-4d2e-8f72-090508b22837",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4c08cc-a212-463d-a3a7-373a1b4fc3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c37f864-35b5-4f42-9226-6d1ea44ba5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b678ccb-3809-4137-bf1c-87ebc62192d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62062a30-a806-4288-9367-b7146167c84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2384351c-d7e1-4592-b960-0222c3814631",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95034bc-7d62-47e6-b580-344a184dd7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cdc6d1-b81d-4414-9806-524be19d194c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40ab1f1-723a-4746-a4a8-a372da352225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990e5244-01b1-4605-9e3e-3c856988dcfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7409d111-925c-4e28-ae9c-e8637ffb1777",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464d6966-d200-488b-9e1c-f7e0fe121c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c8bcd4-3cce-4735-af06-ea23c34e155e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da86028-2331-4e47-a640-cddd05896a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f80223-5488-476c-96a1-245e0af762b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e58b64-f0df-4fb4-b54e-14d4ed7254fe",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1cfd8e-e138-4240-b979-2d177ce7e338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39955859-9ef9-4d54-91db-535074c2bf9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8b7136-eb0e-4fa2-bf84-e10ef9c87d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0ceac5-32d1-4f7b-92b4-7da0a673b232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b66013c-55f2-48ca-8101-96e01ac3016f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5930af3-3746-4fb1-a541-55772da0a6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2c6a81-02c9-461c-84e2-bcf323e55b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565dbc1f-9f74-49e0-bdc3-8855545144b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc2ba23-abda-4d05-8a17-99d3f8d8ddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de53bbd4-2091-41aa-a1ed-8b2399a5d8bb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a307b576-b453-434c-82c3-7eeb55421de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc231cf3-a697-4bba-88fb-2848fbbc43b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9778bce-b048-4c2c-abd8-8bc0411fb22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b71dfcd-21e1-4aca-990d-7e020898d10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ec71ec-4858-4b63-a47b-d8c8f4b2290d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4524c08-d9c8-461e-a920-141709ebe7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c931ea-3246-4e3c-9e12-9638f64f81a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e084565-f692-4ad7-8921-1c099eda86b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33700bf8-d43d-46e7-9065-717ff88c527f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292d6ca7-12a7-4bd0-9f52-7f5400a6efa4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f467e3-7c58-4772-8b77-1d30e6257e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4173d5fe-1adc-4804-8ad2-f267ce309aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f428dc9-cf43-436e-8949-ea0ab9ab6923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ff01cc-1d9a-4109-8ad9-f247ec35c172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa172b00-5e9f-4b42-9890-fdb10acf5f00",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8e69e9-0e66-4fa7-8ac2-2428c61ba278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee06400f-4794-4f2e-8611-10f7a3974a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112f7aff-a930-43cc-afb5-8f29a12554f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d90e952-1635-4f3d-96fa-cc57c93bb3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26993afe-3aa0-420c-9b73-f3281258f496",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159f579c-b5c3-4be6-a442-937a2ba62115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edad515b-9f15-4310-bf1d-7a90855bad02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d374eb-b3f5-425c-be46-22337d9a07d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08695950-216c-474b-875a-834c052db15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f12643-9157-4b54-9884-cde19b5e1700",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7e9dab-1dbe-4a01-8181-835f84c81bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b7185e-1c8f-47f9-a079-a19e8194eef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e72930-e72a-4286-a3d5-14411c57cd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98840eff-5ec7-43cb-b4aa-1d56b2c0d418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2864b2a3-9522-4dd5-b37d-bed8689d3d2f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d0c811-46ac-48cd-9297-af76c84c1101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9857f4-14c1-4a78-a914-c07fc0645068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7e168f-db87-4f96-b20f-37343e08a334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f097ae76-0316-4a77-8508-b6dbb235a6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78972d5f-9094-4f8f-af6b-a73e4a0eb288",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdae7ba6-dead-463c-baca-ec4f1a1059df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4b7703-6237-4e9c-9ff2-0fad3966c5e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6cc15b-992b-400b-a990-a887d2ae4b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4324abc4-7a25-4d67-acb3-2b7b7ad9286f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975542ce-6e09-4567-ab1a-edb6c38251de",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5994e265-4b9e-4199-8682-7cec263676c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c91ad90-e44e-4cb3-8fac-76a050bad42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e6ae96-45e0-445b-a1ea-e4f22272eb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93c0148-9a7d-4b53-9330-aa81e97f8918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a639a8e8-2f43-4e12-9fe9-6d66bd9a1be0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e46268-cad2-406a-b3d8-f460fd06a556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9773b3b6-4a80-4314-9a4a-a93cd9c959ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54f554a-4687-4822-9206-a41074ec0d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff2dc6f-0dbd-435b-9d9e-f603532fe5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdb0b48-5818-47db-82cf-e73068235639",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8cb605-4d28-4a4c-b8d5-2832e2211c5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "262c485b-86a8-4e14-8395-24dd23357998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad065beb-b8a3-47a6-b532-132ab25c5db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dcb007-6f66-476b-92d2-c851d015746a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234c1394-42b2-4c02-96e0-66bd20daf497",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcac0a2-e4d6-4131-a69a-013a97e74017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90ce62e2-7984-40bd-b978-82c7b1549008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abca906-605a-4d8b-9c5b-c7e967f88d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df192d9-33cf-4232-8c32-2e4cccedeec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe4b9a7-bb0d-4a79-afd5-a4258877eae9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125ef2af-f4f8-44c3-9fc9-8b2f878d0c6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ccc07b5-28bc-4ae6-ab3d-d155b43cc241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d80894d-3c3f-4040-a066-fd790797bb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e962142-f067-48ee-b40a-cb32023fff2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c214e9d-a94a-45b2-bfdd-e08b5ad6c9cb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d36eab-4a29-408d-be86-548384a47f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16295409-2679-458e-a179-dd33184f63ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd84ff6-dc88-4551-a4d4-1467e3e08dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395e6b6c-acc0-4a81-b872-2a20654e0615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94f43d7-8c33-4770-951f-a108c6277897",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a9342d-1ff8-47b2-96e0-ff7504346f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c564f08-f518-4deb-a722-5e730a249114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc62efb1-ee75-4c22-b9a1-816a952c5cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef330647-1743-4218-9e01-00e3e0d997cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565954eb-0bb5-49b5-bb4a-a32446930300",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6733041c-b64e-4f1c-8bb0-0ac684b8abc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e42c599-042b-4b1d-ad86-77b4f0a9c3ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01316c93-0651-4119-85a1-428077c84b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb5f075-bc9f-4f36-9e20-b8004d99aa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e925c2c9-6dd8-42f7-ba12-f6f2f0f22947",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b299e03a-7be5-4178-b7d0-60e7fb987351",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac960f3-a846-4a80-afe0-ab53ae717f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7967cd-46a4-43ec-8d66-0ae93e02ad1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36f8775-a239-404c-ad10-bb2fb3960b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3463b548-d465-4937-99af-2e39a456978b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001b1c64-fa64-44d2-9b3f-382fa3deee64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38723629-16c9-4191-ac77-cee941eb9b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33e25d3-b995-41cd-9c18-1d2c100d383c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6ec84e-97e0-45ab-8f39-8d5fc038eced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11f6d01-52b5-43ab-b2d4-f88fbe9e7006",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc330e7-6624-40fa-89c8-e8e01ad17921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d230fb0-3d89-47bf-9cee-80f5987dfaa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "947d0e94-a05c-4569-93f9-7f622c96c69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bf1783-90df-4af8-909a-78be4bc54cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425da09b-473b-4cfb-9836-201d3f58559c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ed52c8-8234-4d49-bbd7-4c3bec8f5d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ba388a-d398-41a9-a264-d8a87ef6e865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb73fc6-c77b-4714-8580-25e97aca1bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8425634b-c0a6-432d-ab60-cc636205a62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18494314-48c3-498e-b28b-e32b0334a4a6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e6705e-ec36-4e1f-bbdd-9c083e8dfcde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c117bd08-b33b-4421-b29a-969174f6cb93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d97273c-868a-470c-a7b4-389b2eb31705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5f99f0-0ac1-4ac6-8748-a10b5c76eeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b755f6-82f8-4a58-814b-cb032006992c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800152ec-0383-41be-b8f4-0bba0d1a2b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f391b0-cc0d-4ee0-a303-cf03e5e92e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea710463-84fb-4253-bb31-9b64bfb697cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa00191-1d11-4c32-87d8-cfb36ebcb98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1e8eab-2e24-46fb-8cc5-8a83c585847b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e45c745-5388-4bd7-a828-07e5be91c88a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7805118-ae37-4c55-8707-86dbb7ce52d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53022fce-a31c-400b-864d-34bd8409b91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca16c3e-7ddd-4dc3-9466-e2816db4167a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df66de63-8231-46bd-95ce-b148725847f1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6775774d-8a5d-42fe-b23e-85dcfdcfae9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d33e1f8-751a-44bc-886d-986e90731ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8e3d21-8460-4156-8986-af22e79ecb75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f073b08-16e9-4abf-a2ae-b2c3dfecdd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a710011e-eba7-4119-b15d-76ad8530c6e9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ade26e-7bf6-4c14-bfa8-014daa40628a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95be81f7-e4bc-4290-b713-f1d2b212b457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a561ae4d-5d6b-48a1-a53d-909d3702ae4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74607ebd-ade9-4125-8e0f-dae91158d3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8f94c4-71db-4762-ab61-f30ff25efe83",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa654359-8e28-4a0d-9ec7-6853c08abf70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34daccd8-28a5-4b8c-9ca8-68278d747120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0bdb14-6e7c-4b65-a1c5-652848fdda75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db287fe-d8ed-4add-a606-d4d8c6ad399d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff0dfec-93ef-4975-a172-c069799eb88c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1621a7-34cd-4e1e-b8aa-1ec1aa47e847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38e04bef-3499-41b5-809b-83d6be2d16ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d9be84-b9c9-443a-b28a-8602a199b1bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0da4cf5-a3bc-4b59-9fdf-a0755597e513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5c7beb-03fc-4330-b791-7c763da9fa07",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c514246f-6fab-4d36-ad40-60e6201471d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c1b5196-562f-4520-b1da-4ee5dc7c0d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39026364-40b4-46cb-a0b6-71192fe4ea84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b011d4d7-9b1f-45fc-9e18-386f1b836b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e649c1-28f6-4b42-a257-91c6abd4f9ae",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686270d0-c1d9-4438-b583-57e96a41e85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f37ad5a-dd6b-4b0c-835a-e90c2b4e97a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f34ce4-b3ed-42f8-8c8c-31559ed4d710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05dd46e4-50d1-4060-a887-8a62ced50d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e3c83b-bb5e-4fb6-97a2-9a0f2060a32c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d9ebad-05be-4bde-a94e-4bb1c5c2be7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fad34b6-1931-486f-8631-c3e89ed3ae68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98330b4-1e76-4098-89a5-478044978eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a39561d-5d44-45fc-bb70-144b50cc6ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f255031-a5e1-44bb-b2ad-0d07ec28ee61",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6056f53-bb29-46ee-8581-f1868686299b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ddfb118-add7-4960-afd1-25682fb8f095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4555fd-c664-4ed8-affc-10f023374410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbd65b5-cbf2-4800-94fb-5bccf01a4a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460fc2c8-c67f-40a6-83a1-9c6d58af4eb6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486e64bc-4e6a-4947-b9af-c754a3fd392d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3318f3-393c-4a83-a798-b37210a535ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11adf517-71a4-4f5d-82fc-9052445847dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3deeac40-c6f6-4fea-8bb6-c52b398ebf1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5f7e62-01ee-410a-bca4-d0e954862898",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c1eb6f-03c9-4aa5-839b-4a6ea7998fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac066144-e888-462f-a25d-abceee381d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d645f60d-6be9-4941-8b43-64ca8e29390e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c09c64-bf69-457c-b246-f3ef0902c744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ded6d31-5e79-443a-99be-b18dc0d6fb04",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616858f5-6e38-4494-8d09-e2b92d8b5f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17ec1303-9eb7-4b64-93dc-0d61bdb81009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab005f53-7a48-44b3-a74e-003313c5b374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fe1eec-940e-4910-a151-14000546df5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b32775-0aa0-4d50-b3ae-a1827cc8daac",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8226757-e670-4517-b056-48cf5f43e49d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e37f02-2dc4-4588-aba2-eb54001af261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79201e8a-c119-4a36-b184-463e94221655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54f3293-3e1a-4305-ad79-c35658ddb883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe184b1-ce74-4398-bb26-14d22a2a1624",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825d7522-e034-4857-9e67-c68c874ed91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6a67709-ac7d-43c2-915e-957489229413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13429883-4bd2-4376-8470-f8194b55a798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa50d80-94fa-4213-90cb-d7b72ba6c35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0a08b2-3bc0-4d49-860c-da052d8e4cd4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab275de-d5c5-449d-ab4a-40faa59aefda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ca7895-88ca-4e27-b447-c94ad863ae5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e417171-b95f-4ebc-8528-1de52c4e2570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d83671-76d2-4388-970b-97eea309a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec734ed2-3934-42a4-bd19-d1a9942d32cb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943c7aae-c00b-43d5-89bf-4d2f24de495b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6104b68-e37a-4ecf-b3f2-798dcb14cf0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64366fc0-144a-4afb-902b-57f7aa67e3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7af6af-0270-4a0d-bd20-961d167024af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3791aac7-9df6-432d-bd30-26ec6c0c45c8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032e85a5-4c1f-4ffa-9193-150fe1bd3321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "636a9bb5-62a2-4f71-97ca-9b03a9e61acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9eec8a-b14d-4d09-805f-50c0862e8276",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1fdeb4-55e4-46ad-bea6-b64fefb58424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848e05bf-7bee-4eeb-9c7a-eb6001818b2a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185dce18-9595-4830-a673-4ac72e625735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0597a8-4adb-4a50-aeb9-24cefcb5c03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2020d99-441c-40f7-809d-24f978f1e82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674b5201-e7d8-4ae4-96e4-04e0e6529f1a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29d97f64-f9d0-46dd-8007-3fc1d1380676",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a5bcb7f-4d0f-4786-a6cb-a80acb4cbd3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7c99600-f100-4817-adb5-bb7b79470d62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b60d942-b744-445d-af00-ae433270e86d"
                    }
                  }
                ]
              },
              {
                "id": "d8b41938-9827-40fc-8acd-d77d08e92306",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9271608e-3eed-4620-9b19-67ef30cabe1b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c96cab-9e42-4fff-8cb5-f7c05cf915cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "baf5dd93-8c3f-4257-b5fa-30f346d352b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d21047-433a-4464-aecc-7f36c4cc47f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2cc1c03-1e58-4899-a27b-a1798090591a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c863362-dd04-4ba6-9a97-ddedf7a22e5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48cf451c-08b6-4693-af78-10d5ffbf4989"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86a4a9f8-141f-4c80-b73e-c5273515e520",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffabe86a-412c-4e26-a558-dd3434efbf7f"
                    }
                  }
                ]
              },
              {
                "id": "0d9fbaf6-bfd7-438c-a1d3-9b28ce449df6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b767ad53-7844-478c-934d-1486293d5785",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f98969-a4e0-4139-9958-782cde440edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cd52c7cc-8084-434b-b887-fba45ae3b037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d38981-e76d-47b8-9930-978b28a0ab83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f01d57-3f04-4764-bf25-b73fee397660"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3177d765-e9b7-42f5-bda4-108ee1037a6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d262c67a-bbc3-4926-a20b-3413dc7bc948",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24973c62-a0f0-4646-b4ff-8398eee84fe6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9cf7cb9c-037f-4565-a16c-9eb02efcefac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e59acbb-1ebe-404d-925a-f6ba4a9df37e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90cbb65c-05a0-47cc-b715-56211be1fe5e"
                    }
                  }
                ]
              },
              {
                "id": "253fdad5-c6d2-4c02-a8f9-d81109e9a7ee",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e88881c-e427-4a45-a6bf-622b155b4952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9ab69bd0-569d-415e-9597-e53e4f432a84"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d586115-dcd3-46ba-937a-f099e2c40ea2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98803ce8-8736-4e08-a12b-56df5f0dcf27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b8100cf-058d-47da-9c13-16c52ece86ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "965f26e6-c40e-4867-9ad9-cb6867fbb0bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a6ed357-a6ac-434f-8587-0a30c0021024",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "287d72d8-54b8-4b3f-8316-78c18be748d9"
            }
          }
        ]
      },
      {
        "id": "b2724bef-cfc9-4542-bbf0-0ef6f6f3ffc2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d398e687-e91d-4bd1-9cfe-d1108a4c6e76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4236325b-71f8-400c-943f-fc1201e21e97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b650c3a7-b049-4746-88f1-2fc4545af239",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029c5a44-912e-47da-a03a-b911206e49e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29848d43-7efc-42fe-8eaf-a7cee9db0e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dd4653-cc89-4701-98ee-31f558e05217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "575e22f7-1987-45bf-bd3a-1b3c7738fdb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9209659-26b0-4bab-8614-764eef8b9fc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1eea78e3-2067-407d-8ecf-53db5ef46997"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d83a1e19-83f8-4f8a-96fa-960b35e8e414",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5c993ca-fcfb-4ee2-a032-6e2d876eeb38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0057096-3942-4060-9af4-12fd6c8cf77a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9807475e-2688-4035-90a2-b4ba9b0390f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d2628f4-dda3-46d6-944f-ddb2d0a7e94a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42ff1406-7c2d-451b-8356-8c3129029966"
            }
          }
        ]
      },
      {
        "id": "455f2783-e1d3-443a-8339-10d870bb7ede",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "982799e8-6d44-4f48-a806-790ea79332f6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92129e36-b015-49a5-84af-c74c79dc4520",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ea22485-eac7-48a9-a5ac-2a9187a86941",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33edfcf-ac81-420f-9059-bfdaf5a1a897",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "117f4eb1-4747-41f5-81c4-9cf4fcc74fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88f82f3-9a52-49a2-bc6b-2f59b539514d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b336dcff-ed61-48b9-b215-3f738a64319c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "822b9380-4244-46de-846f-bbb36918955b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "450c318b-2f5b-4534-9285-758530f6f110"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7fc602d-5239-41d8-ba61-d25cb8636ad3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d51ee6f-e3a5-4078-915e-8e7484d0d8b9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b926136-74c7-4819-868a-6542c2fde6bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5e722f9b-dcbc-4e68-b517-5f2799765ec5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf67edb4-8680-4f45-af8c-d30986848d99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1396f3f1-3519-4e82-86c9-a1f418a1d60f"
            }
          }
        ]
      },
      {
        "id": "f43c659e-588e-470c-9530-5febc0428475",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1250d4c5-b644-401d-bbc4-33bfd7ffd894",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef49b183-fd68-4129-851e-ddd8d34a9655",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5fad7fe-b16d-4044-9117-ad0fd9499f1d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a9130d-78e4-436b-90ff-51a1275919db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4a47ccb-96c6-4b0e-8fc9-b27a75d58d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78b77df-7b31-4e3d-b3d9-5cea1163b24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "121ab309-177f-40c4-bb0d-43cb9c505019"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b46608f-ef36-4ad0-8344-6c16116d685b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6db474f-cca4-4fec-84e3-138f0d64f6c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dc0993e-1abc-45cf-9b3e-e87bfe034098",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bd05383-0a4e-443e-bfee-679b7065e6dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90de7f97-0972-4d6d-b204-42245ded8737",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ae428518-8387-40f7-9dc5-1cd9f65ed3cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "511661da-9928-4d19-91bd-e53a9e55ce32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84303238-0de6-45e4-84ae-c7e11492b0f2"
            }
          }
        ]
      },
      {
        "id": "a3016cdf-3a39-417e-8017-39c37eeb1efe",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b61f0d0-3cef-4e34-bc53-e5a176416e13",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f984a8d6-e360-4fd4-a0a8-aab69bf66b2c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "762bee03-699b-495b-9c81-b863a65606d7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af7de0fc-8bca-4858-9e1b-a82f9cada6a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "826559cb-d77d-4ee6-8560-fac456111fab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 142.09154929577466,
      "responseMin": 19,
      "responseMax": 1843,
      "responseSd": 314.4596170792935,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694997204605,
      "completed": 1694997257574
    },
    "executions": [
      {
        "id": "f1114fb7-8db2-4ef4-97c2-a696b75f9c66",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "68969d44-adac-4689-8fae-a8e95d66e5c0",
          "httpRequestId": "8c537b03-4db7-46c3-bb5c-ed1896438b3e"
        },
        "item": {
          "id": "f1114fb7-8db2-4ef4-97c2-a696b75f9c66",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "675fde49-f0b7-4d55-b80c-fae7b977cca8",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 0
        }
      },
      {
        "id": "751c0377-a9cd-461a-b5f2-5cf3b4dc56cd",
        "cursor": {
          "ref": "c6919dd1-1714-4736-9d69-a5e559833fa7",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1380f333-b049-453f-bba2-0844a226b12f"
        },
        "item": {
          "id": "751c0377-a9cd-461a-b5f2-5cf3b4dc56cd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "943773fc-2f7f-46fb-b35f-c609456b7209",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "0ea0ab71-389f-4646-b142-de5aa9a1a4ab",
        "cursor": {
          "ref": "92a8ee48-14e5-4a26-9c0e-f2f05d27cfae",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f4dac963-ba16-4b83-9e32-3a28d3943774"
        },
        "item": {
          "id": "0ea0ab71-389f-4646-b142-de5aa9a1a4ab",
          "name": "did_json"
        },
        "response": {
          "id": "19d73f5b-42b5-42fe-a941-be05d3d65e89",
          "status": "OK",
          "code": 200,
          "responseTime": 379,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f450090f-a739-409a-b48c-b323631370bc",
        "cursor": {
          "ref": "6e51327d-c6cd-4321-ba96-fa33ad556c7a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "953d6c51-08a8-4aa7-aeec-7931c0a9b7b9"
        },
        "item": {
          "id": "f450090f-a739-409a-b48c-b323631370bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b4bfc96-2bf9-4f7f-a66b-5bdf1eca3dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f450090f-a739-409a-b48c-b323631370bc",
        "cursor": {
          "ref": "6e51327d-c6cd-4321-ba96-fa33ad556c7a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "953d6c51-08a8-4aa7-aeec-7931c0a9b7b9"
        },
        "item": {
          "id": "f450090f-a739-409a-b48c-b323631370bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b4bfc96-2bf9-4f7f-a66b-5bdf1eca3dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea11b7e8-0b3f-4283-a0ae-3a9928aaa1cb",
        "cursor": {
          "ref": "08f002d0-5bb9-453e-aef5-983612eb3325",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "605fd4d4-da24-4ac1-ac30-f16f3af0db70"
        },
        "item": {
          "id": "ea11b7e8-0b3f-4283-a0ae-3a9928aaa1cb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c813bf04-699e-4ca9-a413-5e35b34cdbfa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 113,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baf7ac1-167b-4cba-8279-ccf2ee56a1b7",
        "cursor": {
          "ref": "35d6a2d4-e947-456e-8f77-c6545d6900d0",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "42a85459-164a-48be-8e81-18b01803fe81"
        },
        "item": {
          "id": "0baf7ac1-167b-4cba-8279-ccf2ee56a1b7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6e6b89fb-6ca1-411f-b3ef-179d8202f37a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f13949-c181-4c6f-a179-2172b04a98de",
        "cursor": {
          "ref": "1c68b680-dffb-4a04-b829-93e6a1e6dfad",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "70dee2e8-38c4-42fb-9de9-ba85fe4c36f9"
        },
        "item": {
          "id": "96f13949-c181-4c6f-a179-2172b04a98de",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bf3eaf94-4434-43d7-b711-11a1871ac155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9611ec-5395-4885-974b-212f2139c9e5",
        "cursor": {
          "ref": "f9cbdfdc-7d9a-481d-a378-4c3092b5e34c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c60677bf-b0a5-4d78-9078-12f538b6628c"
        },
        "item": {
          "id": "1d9611ec-5395-4885-974b-212f2139c9e5",
          "name": "identifiers"
        },
        "response": {
          "id": "4e738430-d97f-4ea4-be0b-411631271a68",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347819c3-e71d-429b-91f7-8b1882e4ebe0",
        "cursor": {
          "ref": "964fa0a4-8881-477f-813a-14c98670847f",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "798a8c96-80ef-4d4d-8336-71f16af6190d"
        },
        "item": {
          "id": "347819c3-e71d-429b-91f7-8b1882e4ebe0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "94498b06-2297-4c50-afb8-12f3b900c578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af13dda8-37bb-4a07-a585-9eb12bda40ce",
        "cursor": {
          "ref": "7467f857-4786-4d7d-bf81-17a9034492ff",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "07bdd74c-1857-45b2-9937-23eda9a764ff"
        },
        "item": {
          "id": "af13dda8-37bb-4a07-a585-9eb12bda40ce",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c73c4111-2aac-4feb-ab43-5d5f88a3ca25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2dd77fc-7bfa-4849-8d40-649ef47a0456",
        "cursor": {
          "ref": "fa9f627a-b5a1-420c-be7d-faef5024fbaa",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0fbc9d2e-6af8-42bb-91e7-493f997a2ff4"
        },
        "item": {
          "id": "d2dd77fc-7bfa-4849-8d40-649ef47a0456",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "76eb286b-4558-4165-8950-c50ceabc83e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c759c7a3-a41f-4f36-904d-872114caabe6",
        "cursor": {
          "ref": "baf1c938-860e-4101-80bc-8a6dbc02cd40",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d57e2a42-1a78-4ac6-8136-48ed23530ead"
        },
        "item": {
          "id": "c759c7a3-a41f-4f36-904d-872114caabe6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "66a5f2d0-ef3d-4ac2-b210-ec5592b5c054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6ecd0b-2325-403f-a27d-e759e1ff0b0e",
        "cursor": {
          "ref": "bfbfd866-9f72-47ac-893d-da22eac58c53",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f2ec3dcb-211a-44b9-b396-7f4cac2db2c8"
        },
        "item": {
          "id": "2d6ecd0b-2325-403f-a27d-e759e1ff0b0e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4b0caa33-426a-48fe-84d0-4099770d5646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2ab024-02d3-4a81-94a5-86ad96a8ad04",
        "cursor": {
          "ref": "9cc04a59-2705-4ff8-9add-2b21ec56c210",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9c72705d-ea94-4afa-a5c7-5ea1d94411b7"
        },
        "item": {
          "id": "df2ab024-02d3-4a81-94a5-86ad96a8ad04",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "992862a6-02a9-4d57-a1cc-6edeeac0257b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d09fb6-c418-4830-813f-7572b7d817fa",
        "cursor": {
          "ref": "54470b83-8272-406e-855b-63402f03459a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "952cae93-6228-4c40-99f1-77d67178d059"
        },
        "item": {
          "id": "56d09fb6-c418-4830-813f-7572b7d817fa",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "72732f65-ec70-4d55-b88e-f9bc7394c310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306cbf62-ef49-4342-8c6d-f226d6a50661",
        "cursor": {
          "ref": "f82076b9-5708-409e-b18a-a4cab40fe55e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9b342fcf-5571-4f1d-a1a5-1f9f18d07e98"
        },
        "item": {
          "id": "306cbf62-ef49-4342-8c6d-f226d6a50661",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "15338e76-2050-43c2-82da-fb9e37a7de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84807995-7526-4718-ba04-f42af83e7d29",
        "cursor": {
          "ref": "f245b378-6f48-49cf-ba0c-f997abe286dc",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1c411f41-dc16-421c-af06-dff7c47379f0"
        },
        "item": {
          "id": "84807995-7526-4718-ba04-f42af83e7d29",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3d24bef0-4ccd-4286-9eac-351b11ffb1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6c704e-1a23-426f-bd32-dd048b827b79",
        "cursor": {
          "ref": "ed7981d4-941d-46d6-9a6c-c3291e7cda8b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "54fa2afa-b385-4530-a9af-f6436501c430"
        },
        "item": {
          "id": "6a6c704e-1a23-426f-bd32-dd048b827b79",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "da6dfc68-6255-42c8-92a8-3a162b95b71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1594edbe-7573-4188-a350-181c479d6ad6",
        "cursor": {
          "ref": "ee185efa-34ab-4730-946d-0c04dc3ba88d",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7c473aaf-6df1-4b9d-a1b5-ae86f1751686"
        },
        "item": {
          "id": "1594edbe-7573-4188-a350-181c479d6ad6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a1f45c53-fca9-4264-899a-e6f07bd31081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bd6889-fdab-4577-b55d-edd417e6b289",
        "cursor": {
          "ref": "421f30bb-9aee-4160-bc23-24d30bcbe29f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "052d81a0-5d5a-40a3-9e02-8852fb2509e7"
        },
        "item": {
          "id": "f9bd6889-fdab-4577-b55d-edd417e6b289",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "62195747-6ad1-4d39-ba15-dc7350889707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb08736-f7b7-4fd7-a226-4e2b51c06c98",
        "cursor": {
          "ref": "41b88011-2702-44c0-9909-cd8d5feebe5f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92ccf738-57d5-4bb8-8a42-d49eaeaf3700"
        },
        "item": {
          "id": "dfb08736-f7b7-4fd7-a226-4e2b51c06c98",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bc9562c0-c97c-4253-b3f2-debb72ac9fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acd6337-6726-4cb3-a431-3c7514bfa4dc",
        "cursor": {
          "ref": "b28af957-5801-4062-9589-9d6b8e89ff50",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "796351f0-286d-4cfe-9635-5ff370ee6105"
        },
        "item": {
          "id": "9acd6337-6726-4cb3-a431-3c7514bfa4dc",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0eafea8f-1e24-4ea5-8f70-0716104333e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1a154a-5b4d-46e3-b333-b1df796b2860",
        "cursor": {
          "ref": "0ceb46f1-643f-445c-bf9b-6a21280699ec",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b0689c39-f5e0-432f-87a6-3aedc94b6734"
        },
        "item": {
          "id": "cd1a154a-5b4d-46e3-b333-b1df796b2860",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5030113f-0ebd-4063-87ee-90d76292d2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822a6c55-d442-422a-8b31-c41e09297a6a",
        "cursor": {
          "ref": "37a654f7-330d-4feb-b2dd-3b5c60a9d963",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "46d469e1-6cc4-4bf8-9ddc-dade339d7e93"
        },
        "item": {
          "id": "822a6c55-d442-422a-8b31-c41e09297a6a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5430e852-40e0-4585-90af-fc5af3348a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8cdab8-6332-448a-9d73-04fee333363b",
        "cursor": {
          "ref": "23a68bb0-b9ed-40c0-b5ee-19df6daa5919",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7466f7f6-f79b-4183-a2f3-27b1aa14d254"
        },
        "item": {
          "id": "0e8cdab8-6332-448a-9d73-04fee333363b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "55d3365a-5160-4c97-9e8d-abfe59a4a4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c108abce-50b5-48c3-88ee-ed10ae00a5de",
        "cursor": {
          "ref": "0f9331b2-f1c8-46f1-b032-391413ccc14b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7e84063d-7544-456b-a821-e33717979942"
        },
        "item": {
          "id": "c108abce-50b5-48c3-88ee-ed10ae00a5de",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bed80d4a-8b21-4e64-9ba3-c25e8bf9764d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff8cf1d-bcaf-4adb-8dc3-a8dacbea7731",
        "cursor": {
          "ref": "b80c8faf-8d5d-4108-a19d-dc627f6c85a5",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6c3e80fb-33f2-4503-8ad2-06f7d8378ced"
        },
        "item": {
          "id": "7ff8cf1d-bcaf-4adb-8dc3-a8dacbea7731",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3ba9dae6-146b-45bc-893f-3658b84cae89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3331c115-11c3-4905-95d4-678f42255ad4",
        "cursor": {
          "ref": "19401f35-948e-49f7-a5e2-30e29a82ad3a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dac92f5a-58f2-4703-84cd-1529f7e25ee2"
        },
        "item": {
          "id": "3331c115-11c3-4905-95d4-678f42255ad4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "02f705d2-9d15-4d53-ba8e-5c7df93e5769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5ad462-b4b5-4cfe-baa9-77578050311f",
        "cursor": {
          "ref": "13405593-ac38-464d-9442-35d43b577321",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5178e1ae-7e31-434d-a662-12abcb722348"
        },
        "item": {
          "id": "0c5ad462-b4b5-4cfe-baa9-77578050311f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e3c0fb1f-636b-445e-860c-0d54533f4e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461f9bb1-f5c3-41bf-a41d-ccd580a25f50",
        "cursor": {
          "ref": "cebcb2b2-3e38-4ba2-986c-0c1bf6d8f439",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e0ab821d-f308-4d34-a827-c46441e3ce95"
        },
        "item": {
          "id": "461f9bb1-f5c3-41bf-a41d-ccd580a25f50",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "edf5c063-c9db-4377-80ca-822fdcd417c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fea5273-ca21-48a6-9ffd-96761095c81a",
        "cursor": {
          "ref": "53c5b941-39b7-4688-9756-13b38709fd30",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4c9219cd-1663-4fae-abb1-a68db9ff33da"
        },
        "item": {
          "id": "9fea5273-ca21-48a6-9ffd-96761095c81a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "64e8c87f-0679-4093-896f-dc73b23cca2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3304823a-fa76-4bca-b822-5a2cbb527d4a",
        "cursor": {
          "ref": "f31addf9-e36d-4c64-9669-b874c7999f19",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ad9e6779-8b35-4a85-ad91-10dcf45bbded"
        },
        "item": {
          "id": "3304823a-fa76-4bca-b822-5a2cbb527d4a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7340fbb1-6218-40da-99c0-5dcec1e35f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b6130b-5308-4886-b187-5e909033c4ad",
        "cursor": {
          "ref": "38bba65a-f3ba-4acf-ac2e-4038abceb70e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "56ca8fea-a798-4d33-a18c-54a9d3936d97"
        },
        "item": {
          "id": "b9b6130b-5308-4886-b187-5e909033c4ad",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "997a0c5b-f10b-4b14-a056-19e26db424e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f28d2e0-9bd7-487a-8de4-06f3a8fd62ed",
        "cursor": {
          "ref": "8b54080f-4085-40ad-9bc8-6e3efd0c3f79",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "75d37de7-3150-40b5-b7e6-bd030b856cf5"
        },
        "item": {
          "id": "6f28d2e0-9bd7-487a-8de4-06f3a8fd62ed",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "72773dfe-81c7-4ddb-b708-aca916ee3673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59323736-54fa-4914-893a-777369c1cf3d",
        "cursor": {
          "ref": "bd9c0792-367f-4623-b22a-0d89cee751fa",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a6015ef-cd1e-43d8-b7d9-4e623fa31acf"
        },
        "item": {
          "id": "59323736-54fa-4914-893a-777369c1cf3d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "64369d43-24d8-4cdc-a39e-265790162577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f30f743-79f7-43eb-a924-067c8e20dac6",
        "cursor": {
          "ref": "822d823d-a5b6-4152-aad7-0bf09fe7abf7",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aa5639ef-f5e4-46a7-9312-3a099355e57c"
        },
        "item": {
          "id": "0f30f743-79f7-43eb-a924-067c8e20dac6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "560daa8f-144f-419d-9130-9a3574f43b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64622fa9-26d1-4447-b9cf-05b5435bda14",
        "cursor": {
          "ref": "9a2155c3-0a1b-4f4c-b3e6-a67801d83606",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ca570aab-4265-42c6-b547-208fe027d815"
        },
        "item": {
          "id": "64622fa9-26d1-4447-b9cf-05b5435bda14",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "bfa0f9d4-7569-4fd9-8095-306dd9f2aa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdffd829-6355-4b19-8954-ac3fabb45ec8",
        "cursor": {
          "ref": "e65cc81e-c4c4-4c7a-a8d6-a0bd75b06b48",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "519e8304-d3e8-4538-823d-31a22850f286"
        },
        "item": {
          "id": "bdffd829-6355-4b19-8954-ac3fabb45ec8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "db41987f-8b58-4f3d-a5f6-d1aaf5e27891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8925345b-627c-454a-95c9-a6bafa40528e",
        "cursor": {
          "ref": "efced0a6-53df-48a8-8051-d2447071c46a",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2bade393-c0a5-4bdb-9a00-fa19da5d35a9"
        },
        "item": {
          "id": "8925345b-627c-454a-95c9-a6bafa40528e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "354fd669-08f6-49a1-8c9d-eafe54169f4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "382e081c-583b-4647-8a84-ee7490d23c40",
        "cursor": {
          "ref": "eb666b8e-f374-4433-bcef-7d4827d4af67",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fb963fd7-33d4-485f-b1a9-4b2b206cd2c3"
        },
        "item": {
          "id": "382e081c-583b-4647-8a84-ee7490d23c40",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eae338ad-2a62-479a-b9df-07104c4692e1",
          "status": "Created",
          "code": 201,
          "responseTime": 1843,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0073e174-d3d2-4264-a88f-7be4abf1ee02",
        "cursor": {
          "ref": "944d7a8a-7ff1-4968-aacd-c50afa5e3d74",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "33fc0301-bb3c-4bb1-9fdf-53c5e508a47c"
        },
        "item": {
          "id": "0073e174-d3d2-4264-a88f-7be4abf1ee02",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dcfd6cac-0bcb-436e-902f-0143322d815a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "59d37551-29b7-4ceb-bd3f-01809c469e3d",
        "cursor": {
          "ref": "fe21c691-5edc-4ace-a663-64fd30f47f2b",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bd35afc9-8cdf-4876-b32c-fefce78ee1b9"
        },
        "item": {
          "id": "59d37551-29b7-4ceb-bd3f-01809c469e3d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f1984a41-4ccf-41b5-bb83-a302729628eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cca6611-5b20-47d3-838f-6e78286cd68e",
        "cursor": {
          "ref": "c42da0d2-2ed4-4773-9af3-4b7e409e2e44",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5afbbb6f-2423-4ab8-b199-347d7b0f0c90"
        },
        "item": {
          "id": "1cca6611-5b20-47d3-838f-6e78286cd68e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2761ba1d-fd2d-4eb1-9d8f-4e04954a74f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "15788516-eda8-494d-aef8-24f53d3fba85",
        "cursor": {
          "ref": "c6361035-8bcf-46df-b3eb-2af6f646da43",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0603b3a3-e5a0-452c-9d1e-b299bb4f4464"
        },
        "item": {
          "id": "15788516-eda8-494d-aef8-24f53d3fba85",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5936ea9b-8ee3-4c5d-97b3-37dae27baf36",
          "status": "Created",
          "code": 201,
          "responseTime": 1386,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "301c86ee-4660-4c48-beb8-8c76df5921c4",
        "cursor": {
          "ref": "3b054552-7bc9-4733-a14d-da7382005d3a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "afb988ca-0486-4f71-a0f6-d0431c2ba48e"
        },
        "item": {
          "id": "301c86ee-4660-4c48-beb8-8c76df5921c4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "68f2aea9-77ea-48ad-9373-426dd5c67342",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "31a47d79-e069-4d33-b3ee-4090615fdaaf",
        "cursor": {
          "ref": "8445c5e1-eddc-4b0a-b91b-c5a797b727de",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8a1e2845-c6d0-432a-aa12-b5d764a32f9f"
        },
        "item": {
          "id": "31a47d79-e069-4d33-b3ee-4090615fdaaf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "70a1f793-a685-4ec8-a1e8-9cbc6c945515",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1191,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a4055ba8-01b4-47d6-96a0-2209f99166f2",
        "cursor": {
          "ref": "d7021bcb-ed38-4e43-abf0-748681791291",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ffeadda7-2146-4156-92c2-cce4b3f4c646"
        },
        "item": {
          "id": "a4055ba8-01b4-47d6-96a0-2209f99166f2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4af94ac5-e062-44ce-abb4-3519d3592b47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e9e6f343-0ca3-4012-bdac-a90cddf22b8a",
        "cursor": {
          "ref": "6543ec30-13a5-4961-bb0d-f457dac6440d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "45f52bf8-5bc3-4094-bd3c-8a58b81a9377"
        },
        "item": {
          "id": "e9e6f343-0ca3-4012-bdac-a90cddf22b8a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2aab735e-06d7-456d-8fae-a3a614ade9b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "81006b83-759a-4953-9c0b-77a6c476eefd",
        "cursor": {
          "ref": "e94d1083-62a9-4399-9712-4c51f0fbc54a",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2edcf423-a320-4990-afe5-4ae0b85a6470"
        },
        "item": {
          "id": "81006b83-759a-4953-9c0b-77a6c476eefd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b6886c13-1418-4e9c-9c6c-5459288ecd26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6e8967eb-bc28-4820-ba41-bfbcd24e3227",
        "cursor": {
          "ref": "69d6ae1f-da7e-487f-b831-6da635f92d56",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bcd0ec41-43be-4d23-8af8-977eef4f20b9"
        },
        "item": {
          "id": "6e8967eb-bc28-4820-ba41-bfbcd24e3227",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fcdfc7d3-9e6b-4443-8fc9-b53672ab7099",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9a7e7780-9430-400e-8cad-4f826b08deae",
        "cursor": {
          "ref": "4136a110-c76d-4407-831a-af80a7098b99",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8a8bfc18-f73a-4737-86c8-c4ad92b41c2f"
        },
        "item": {
          "id": "9a7e7780-9430-400e-8cad-4f826b08deae",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3a4a34ad-8a1b-4c37-9a51-4e703993cd90",
          "status": "Created",
          "code": 201,
          "responseTime": 1391,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5814dbcb-fa75-4be0-852b-b74d45093e64",
        "cursor": {
          "ref": "150aedac-0738-4108-97a7-593a569bba15",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cf3ba835-9882-48bd-88ef-6162ba5b86b0"
        },
        "item": {
          "id": "5814dbcb-fa75-4be0-852b-b74d45093e64",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "94b78919-12e5-4793-b89b-fee2cdebc2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0e1b33-9dcb-4227-b849-625289daf40b",
        "cursor": {
          "ref": "066f4e6f-22c9-4597-b5c7-f0560587d095",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ad997f9b-07eb-4db0-8799-d1ee6de45eda"
        },
        "item": {
          "id": "4c0e1b33-9dcb-4227-b849-625289daf40b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "588c2aa7-35a5-46cf-a187-42fa3ae05ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730a19d3-483d-462d-aa36-d83f949a0e69",
        "cursor": {
          "ref": "2c459a92-f828-4f3c-be35-dcd8ecca9ef6",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0dd791b5-8440-4fe5-ae96-a021538547a7"
        },
        "item": {
          "id": "730a19d3-483d-462d-aa36-d83f949a0e69",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "509b64fc-e8be-4375-b9e9-075406f080a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212da3da-5b3f-4d89-97b5-36616458252f",
        "cursor": {
          "ref": "6b10e3f3-a104-4785-8e64-badddaaa1d6e",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "18dbfb7d-8b1b-4dde-986a-c7f2e0ce059f"
        },
        "item": {
          "id": "212da3da-5b3f-4d89-97b5-36616458252f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b77226b8-1056-4a56-a9d1-31212fdc1ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95415cb8-540b-4fa7-b0cb-171709f4909c",
        "cursor": {
          "ref": "3917e2db-7476-41bd-b96a-77f883a81c36",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "94e712e7-c79f-4b62-b232-011837a1f046"
        },
        "item": {
          "id": "95415cb8-540b-4fa7-b0cb-171709f4909c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "71383db8-5872-4424-a303-0b1c26e93379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5832edb9-9154-40d8-92f5-2ffddd80e66a",
        "cursor": {
          "ref": "82d61284-bcdf-4e91-b763-8f9962bcac90",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "95496027-50b5-4b6c-a4f7-d1485501784f"
        },
        "item": {
          "id": "5832edb9-9154-40d8-92f5-2ffddd80e66a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "afc02551-5836-4af9-bd49-81dbd44e6994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce296f8-c466-4edd-aeb9-0f1b4b413fe9",
        "cursor": {
          "ref": "bf554401-566e-4b4e-8736-f84de6ce8fd6",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ef212f60-c867-4b1b-b82d-634f5235564a"
        },
        "item": {
          "id": "fce296f8-c466-4edd-aeb9-0f1b4b413fe9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dc0bae79-5d5e-464d-8230-cbfe9af4adb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2daf74d-7315-4bb9-a7e2-7fa5f78331c3",
        "cursor": {
          "ref": "3f1b1d7f-6ee1-40e2-bee9-fa84458b062f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7c60c1d3-747c-44e0-9125-5f4b632d9f41"
        },
        "item": {
          "id": "c2daf74d-7315-4bb9-a7e2-7fa5f78331c3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c96d1386-56cd-43fb-b8cd-dc6d5d4f7ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a581c48a-e04f-4d39-982f-52b6cc5d0976",
        "cursor": {
          "ref": "79a7d9aa-de6a-49e5-8700-9466d0326cd5",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "257d14c8-f912-47ca-9ffe-d1add26598f5"
        },
        "item": {
          "id": "a581c48a-e04f-4d39-982f-52b6cc5d0976",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a1e5d371-645a-46b9-a39f-e26f5a5e6227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afffe64-cba9-443d-bd7f-7573aae9efe8",
        "cursor": {
          "ref": "1c0fe88c-cfcf-4603-8a66-807499c29091",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "44dcb0d3-3706-4a7c-913b-3e0417e44ef2"
        },
        "item": {
          "id": "9afffe64-cba9-443d-bd7f-7573aae9efe8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ba6d32de-1a02-441c-b966-f4c6888e6130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3a6f7d-975a-4dd2-99c3-9e547d2457c2",
        "cursor": {
          "ref": "e4eb5072-cc67-4c33-88e9-d24c4f13a381",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5afee187-2092-478a-8fa4-e27dbcbad6ed"
        },
        "item": {
          "id": "ec3a6f7d-975a-4dd2-99c3-9e547d2457c2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "348e3b3e-2b8b-4bd8-85b2-6709c3bf62bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445021a-02e3-4ec2-9680-72c51582ab68",
        "cursor": {
          "ref": "a6307f4f-40e4-4425-9470-6c90c679a540",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3360fdfb-fbdb-4720-a696-2a3f6fe25db8"
        },
        "item": {
          "id": "f445021a-02e3-4ec2-9680-72c51582ab68",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "24852184-6240-4fbb-88c0-80fead70929c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da96d041-9560-488e-9c83-fc9ff493c28b",
        "cursor": {
          "ref": "526c9319-2a7f-44b3-9c30-0259e49d6f48",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e2d3ff46-1dfa-46d3-82ab-b9f2952b2c02"
        },
        "item": {
          "id": "da96d041-9560-488e-9c83-fc9ff493c28b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a0e3cb26-4749-4a61-b906-4fc4bef7a78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d835a3d-c9a0-4ec9-86ac-55ccd38f75c7",
        "cursor": {
          "ref": "b19da138-cd76-4b64-a501-46c5166a31f0",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1e4cc29e-56f1-4b6f-b0fa-500419306cf7"
        },
        "item": {
          "id": "6d835a3d-c9a0-4ec9-86ac-55ccd38f75c7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "52306579-5ec2-4e7b-99f5-203b847e25e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1158,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3a3dffdd-f283-42de-bb19-d163f4344964",
        "cursor": {
          "ref": "f67f0c67-238c-4458-a654-4888e92b53ee",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bbd39fb3-6197-4835-9e83-85d5e1e1c8ab"
        },
        "item": {
          "id": "3a3dffdd-f283-42de-bb19-d163f4344964",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "05926b6a-632f-4c57-82f8-efff56edae50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1195,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1f0885d5-7b98-451e-ac37-c200b8ddd35c",
        "cursor": {
          "ref": "b3df0fab-eee3-472f-b6a5-28d169f1a27f",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e75feb8a-5f07-44cb-ae1f-edbae5134061"
        },
        "item": {
          "id": "1f0885d5-7b98-451e-ac37-c200b8ddd35c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a366c593-125f-460b-8b31-08a8eb515f58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5f768a51-dfb7-48a7-b5df-0bc81ab81dbb",
        "cursor": {
          "ref": "a1a9c3ee-9e91-492a-9169-5f5d94ea7be1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c5b905bd-3796-42dd-8121-6cdbab2b69c3"
        },
        "item": {
          "id": "5f768a51-dfb7-48a7-b5df-0bc81ab81dbb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "74a3e382-8e0a-424a-a9da-60aed1b4ddca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1168,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c2e86b9d-1a2c-4b87-84b0-8c362d01b3b3",
        "cursor": {
          "ref": "35663ee3-e248-4efb-8684-5e2e8963d622",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f6074178-8926-4026-907e-cdf255ae21eb"
        },
        "item": {
          "id": "c2e86b9d-1a2c-4b87-84b0-8c362d01b3b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "65545515-314b-40cf-86f4-39baaea17c0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "35310c74-9eab-4b38-a44f-5c7ee7de33c1",
        "cursor": {
          "ref": "2c542ae3-ad94-4949-9de6-b6f363b29bca",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "23d8aa19-5cf4-4869-8b56-11080d116978"
        },
        "item": {
          "id": "35310c74-9eab-4b38-a44f-5c7ee7de33c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "421da4c4-5bc4-43bf-9ec9-c9ab09413525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fad9c96-6372-4acb-b445-5e6768f6518e",
        "cursor": {
          "ref": "1809e708-b007-4129-bc12-b348152aa5b1",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c3cfcf9-b41b-463a-b89c-ed289dd6347d"
        },
        "item": {
          "id": "6fad9c96-6372-4acb-b445-5e6768f6518e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "daa67265-706a-4c89-9af9-7e43a91e297a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccd9ca4-7b6c-4d49-8b10-d51cdf5c8bf9",
        "cursor": {
          "ref": "42f27af5-1955-4277-b899-17b4ac663b08",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cd7a02b3-2142-41f3-9195-4bba68a9212e"
        },
        "item": {
          "id": "cccd9ca4-7b6c-4d49-8b10-d51cdf5c8bf9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9739fd7a-4dbe-46bb-b0d9-59988317e795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d974f3f8-2736-4396-adcf-ca276a60ce90",
        "cursor": {
          "ref": "21f77b28-6f7a-4616-93e7-8f50505c46d3",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "038cae96-6a05-4353-a079-f37a8ca2f78c"
        },
        "item": {
          "id": "d974f3f8-2736-4396-adcf-ca276a60ce90",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8b95e9cb-b6ec-48a1-9bb9-cffe03efd9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43811f0-4f29-479e-9cf4-70785e07f038",
        "cursor": {
          "ref": "a5ffc3b2-5266-49cd-a73b-dc4669ae1a22",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "571f048d-dff5-4664-bdc4-0333b00dbe81"
        },
        "item": {
          "id": "d43811f0-4f29-479e-9cf4-70785e07f038",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "55eac3eb-003e-427c-8464-dc0fe2f3851d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec9139f-d3b3-46fa-a295-40700de083b7",
        "cursor": {
          "ref": "1532cad1-af24-48ad-af7a-fed6476448b9",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f577c8f5-a0ee-4698-88da-9fedbca78e0a"
        },
        "item": {
          "id": "6ec9139f-d3b3-46fa-a295-40700de083b7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f8d1dc2f-6b1c-46c3-b8c9-e214cce97254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae74032-f342-44aa-b01c-8a962e9e306d",
        "cursor": {
          "ref": "eca3d90b-6b50-41b4-ba10-6aa3e20753f2",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "37b1fdbf-1522-4abc-a1af-b1ebd01adf17"
        },
        "item": {
          "id": "2ae74032-f342-44aa-b01c-8a962e9e306d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "252ffb4c-a01c-44c0-b0fa-229ebd81944e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec0e167-6a45-4979-93fa-739567f536db",
        "cursor": {
          "ref": "69c32564-54bd-4c0c-88f6-605321b08b5d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7dc67416-4d83-40a5-abe6-bcef1ec632c8"
        },
        "item": {
          "id": "bec0e167-6a45-4979-93fa-739567f536db",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "341c1593-0962-4fe0-b2a0-ed1e7e35ff4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992a86e9-e0d5-4a25-bed6-40b48741ab3a",
        "cursor": {
          "ref": "57b3fdce-793d-44cc-acc7-210bb63f2e20",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e38487af-f8c6-4562-b026-0d9b937078fb"
        },
        "item": {
          "id": "992a86e9-e0d5-4a25-bed6-40b48741ab3a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dd53e7e0-f43d-4249-944c-50be72ce18eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9d4359-4797-445d-b3f7-1ba19941816a",
        "cursor": {
          "ref": "0cc6757b-f098-41f5-af59-aaf6cde14a09",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a3f575e6-1288-4234-8beb-4f7006623574"
        },
        "item": {
          "id": "2a9d4359-4797-445d-b3f7-1ba19941816a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ba86c2a0-d51c-4437-903a-1ed0000e5b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc398e9-9982-46b3-8a70-7066db6fe104",
        "cursor": {
          "ref": "e769eabf-11b1-4928-aa29-f87615b887c5",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3477f276-d102-46a7-b169-156314fd2f25"
        },
        "item": {
          "id": "3bc398e9-9982-46b3-8a70-7066db6fe104",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3b36c765-a42f-4e01-bc78-99a7be99d27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38d7267-5db1-4e10-9619-371fc93f01c9",
        "cursor": {
          "ref": "654b0109-d9ac-464f-a4c7-e33b74656f18",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "38d1167f-2db7-4985-a3c9-ac3f13fb0246"
        },
        "item": {
          "id": "d38d7267-5db1-4e10-9619-371fc93f01c9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b433afca-bdc8-489a-8320-a1fad21a6451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ddea8b-9251-418e-a703-346ada1752bb",
        "cursor": {
          "ref": "a2a03b3a-41a3-4f96-829f-8ee1a4f2cc4e",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5f5ec75f-b207-4030-b3ba-ea5003f37b56"
        },
        "item": {
          "id": "f6ddea8b-9251-418e-a703-346ada1752bb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1cb55015-6094-4cce-b7a3-d4722394589e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ebce0c-3fe3-4f8f-81f3-5037628983d6",
        "cursor": {
          "ref": "5e6cf589-21a9-4501-b217-c8593360d31e",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f2e0c56c-4b29-48eb-a86f-65510091d305"
        },
        "item": {
          "id": "26ebce0c-3fe3-4f8f-81f3-5037628983d6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "594ec026-2ea3-4f02-a1f3-eabd48ce9110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92eaeada-2e48-4ed8-9d21-cab1190f721b",
        "cursor": {
          "ref": "1c36bd32-29d2-417c-a09f-0277d553d867",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "949b8484-ed44-4501-97f5-be4a9a74e6ec"
        },
        "item": {
          "id": "92eaeada-2e48-4ed8-9d21-cab1190f721b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bbdea5f9-a89a-49c1-9171-0b63fe2c0ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b86d414-b18b-4a72-9ec3-190eef1b8f0e",
        "cursor": {
          "ref": "58a1f218-af9a-47d4-9bbd-66f89c2ec369",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "acfcf73b-ddcf-4b75-b7d0-f250ce54ab14"
        },
        "item": {
          "id": "7b86d414-b18b-4a72-9ec3-190eef1b8f0e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "27e39c55-e565-40fc-8a0e-c337869f7037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72903136-59ee-438e-8814-4c4861b42772",
        "cursor": {
          "ref": "ff9f03eb-35b7-435d-a1a8-6d46795cb695",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "99d4a539-5508-4d15-8827-523f838bc3bd"
        },
        "item": {
          "id": "72903136-59ee-438e-8814-4c4861b42772",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cddccfe5-94bc-4fd7-a7b4-ae2219d5283b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b950cd24-bd85-4567-87b8-4ee01d7a7445",
        "cursor": {
          "ref": "9aee9452-f00a-4c24-b22a-003b17b5a8b0",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c225f66d-af11-4a39-9e49-3f44427ad756"
        },
        "item": {
          "id": "b950cd24-bd85-4567-87b8-4ee01d7a7445",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "63099e39-61e2-431a-b472-a3ce18b709d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3e455e-baf0-49ad-bf41-be5111bc5dcc",
        "cursor": {
          "ref": "24e8040d-ee5a-444e-b323-2ce4e152dd12",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1383d7f4-2faf-4d73-be86-c24fbedf7086"
        },
        "item": {
          "id": "dc3e455e-baf0-49ad-bf41-be5111bc5dcc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4a55ca0f-e2a6-4a8c-979c-20bc16ecbe8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79164fd1-7e78-4bd2-a11b-e86569cc867c",
        "cursor": {
          "ref": "49099ea8-5b7e-4f86-bc59-75651b13366e",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bcd07689-4502-42b6-92de-513cc55cb4bb"
        },
        "item": {
          "id": "79164fd1-7e78-4bd2-a11b-e86569cc867c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c1b0da24-a315-43bf-bead-6db4f96cadca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffa4d46-bd92-4253-ac14-58442a694678",
        "cursor": {
          "ref": "6ec6194a-e107-4bfd-845f-f14a143b40bd",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f9a549eb-8461-46ec-a6a6-8f6aa8ad5c5e"
        },
        "item": {
          "id": "9ffa4d46-bd92-4253-ac14-58442a694678",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cb6bf45b-ceee-4c1d-9437-206cc1d0ef17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0447d6e-35a2-44ef-b97b-2fb2c9a85e1d",
        "cursor": {
          "ref": "2f974f35-beb6-48a2-a855-2a01be860a3d",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5f3bd084-f3df-44b3-a76e-08e6ab312889"
        },
        "item": {
          "id": "e0447d6e-35a2-44ef-b97b-2fb2c9a85e1d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d137cdf-71ae-40ff-abbf-7aee7f5c241f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654e314e-f8fc-442e-be03-21e4d416ac3f",
        "cursor": {
          "ref": "1081fc0c-9b11-4515-aac2-694e7c173f44",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e6e1b301-892a-44a8-823b-736e8c6d0e0c"
        },
        "item": {
          "id": "654e314e-f8fc-442e-be03-21e4d416ac3f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2ea4414c-c31d-409e-bb60-9c21ae2e40e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230c936b-d915-4280-83cc-0ca5d15f8a44",
        "cursor": {
          "ref": "cdeb906e-b7ad-4d8c-a143-f77a0541d00d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "43341a7a-1fe6-4a6e-a0a7-1dc889289ea5"
        },
        "item": {
          "id": "230c936b-d915-4280-83cc-0ca5d15f8a44",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7f7d8dc9-06a4-4527-82b4-6ecd31aa5098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafe5c5f-b6be-4011-ba7e-d91d1543f81c",
        "cursor": {
          "ref": "15ce55b4-fcdd-48e6-8d99-6d94dd81d4ab",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "39a3be82-33e9-42ed-aa0d-a4409343398e"
        },
        "item": {
          "id": "cafe5c5f-b6be-4011-ba7e-d91d1543f81c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29fa6fd3-247d-4e71-97fe-ffc747047532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8175aa98-193f-473c-ad0c-1bc67aaf2430",
        "cursor": {
          "ref": "c4ab08d8-ea19-415f-86af-df996facefed",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f00fc038-7c4c-4e28-8de8-9e8059fa6ab1"
        },
        "item": {
          "id": "8175aa98-193f-473c-ad0c-1bc67aaf2430",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e7eac16-9046-444f-8a20-37b5618a6766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4734a2b-29f7-4f99-8c30-86bfd44105b6",
        "cursor": {
          "ref": "ad9d55c1-34be-4e74-a0c9-40c629ece847",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "29e788d5-e212-454f-9f9d-27748c5352a4"
        },
        "item": {
          "id": "c4734a2b-29f7-4f99-8c30-86bfd44105b6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6488c756-e17c-493a-bcb6-0bc6c855e814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5ea839-a79a-4cdd-b90f-aecd9907e963",
        "cursor": {
          "ref": "df81cec2-88c8-4280-b779-cb4bd29c7e49",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e7f4f1d1-a9a2-479d-bb95-f295d1fc546f"
        },
        "item": {
          "id": "3d5ea839-a79a-4cdd-b90f-aecd9907e963",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ea8230a3-3a98-4752-a340-6250081642db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd2b99c-fece-40f3-8c4e-2b9f5fa785a7",
        "cursor": {
          "ref": "6bc36b48-e66a-406f-ac7c-19d2b7511712",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5073cfd4-4fb9-4d9c-9a8d-ea657b65ecc4"
        },
        "item": {
          "id": "5fd2b99c-fece-40f3-8c4e-2b9f5fa785a7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d7c0c764-17fe-4b84-a78e-6877ca22532b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0fec47-b9af-424b-ac2f-a70b4a635d7c",
        "cursor": {
          "ref": "546d2aed-7608-4634-aec9-8d7040b09d6a",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "96219558-7a68-4324-af01-f5c41f973fc1"
        },
        "item": {
          "id": "bf0fec47-b9af-424b-ac2f-a70b4a635d7c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f1c4afb1-0587-4e9f-83c6-f7756b6ab53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f49be5-fcca-4a49-8856-3e9a2e35d9db",
        "cursor": {
          "ref": "2c689f3f-3c8a-4e86-a670-a463a6c8c8e3",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "99c2944f-340c-4ebc-9cc7-f7b660298d43"
        },
        "item": {
          "id": "75f49be5-fcca-4a49-8856-3e9a2e35d9db",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7f67b244-50ad-4f6b-93e0-4cb4dd5ca8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab504658-8d20-4809-8fe4-967c72a8be01",
        "cursor": {
          "ref": "43e08742-1eac-4539-8b9d-158d9b4a1648",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "24ec5fdd-0807-4d5a-9402-f35ceefc437c"
        },
        "item": {
          "id": "ab504658-8d20-4809-8fe4-967c72a8be01",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fe54fc18-3dd9-4f60-bdee-a5917620b7d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21171148-913a-4d7d-96f2-1866c92cd3a2",
        "cursor": {
          "ref": "5c361531-ae4b-4ed4-92b0-0a7178f10107",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "611afb55-b3f3-4877-9689-5c1a393b8c24"
        },
        "item": {
          "id": "21171148-913a-4d7d-96f2-1866c92cd3a2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5f4f9e2b-a7d5-4ae3-b6a1-4c459147a4ad",
          "status": "Created",
          "code": 201,
          "responseTime": 1572,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "68751666-6f09-4ed4-a7d7-c03948f95e57",
        "cursor": {
          "ref": "418f1388-acbc-4923-911a-079a8d79ad21",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1f51cb0b-ff92-494a-a3d5-37e896c3d08e"
        },
        "item": {
          "id": "68751666-6f09-4ed4-a7d7-c03948f95e57",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "96fe3dcf-8de2-4218-bedd-c1a8c8ae0db7",
          "status": "Created",
          "code": 201,
          "responseTime": 1400,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f2feda-4df5-4ce1-a191-9df533770607",
        "cursor": {
          "ref": "c0cc5fbb-1aa3-4360-bfd2-f089b7197b4f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f9c9e1e3-1e44-4f4f-8eec-9506e51d3d86"
        },
        "item": {
          "id": "98f2feda-4df5-4ce1-a191-9df533770607",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3b43542c-7d0e-4439-a59a-dda51f0cf55c",
          "status": "Created",
          "code": 201,
          "responseTime": 1396,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38db7934-ed2a-4d4c-a3be-035c85067c64",
        "cursor": {
          "ref": "3ff0789a-6642-4e40-a4b4-bcecadb5605e",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "93024fa1-adac-4be4-a1cb-95acaf518d93"
        },
        "item": {
          "id": "38db7934-ed2a-4d4c-a3be-035c85067c64",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "95a06c8e-7734-4ea5-8531-8ae5c6f0efc7",
          "status": "Created",
          "code": 201,
          "responseTime": 1383,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ac57b9-b057-4770-a44c-32faa95797bf",
        "cursor": {
          "ref": "b54bc844-71db-4476-a465-fcf7b4492495",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1e2c9507-a929-457d-b99d-5350c0e58609"
        },
        "item": {
          "id": "c2ac57b9-b057-4770-a44c-32faa95797bf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a509f0a9-7a6f-4f35-a592-3da1f7010686",
          "status": "Created",
          "code": 201,
          "responseTime": 1426,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30dbbd7-3825-40fc-a05e-d4472b3ad133",
        "cursor": {
          "ref": "10a6b4d2-76c1-4ed5-bc91-3bf1ef38f064",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c4db06eb-2747-4d90-a0e5-2e99c2951153"
        },
        "item": {
          "id": "b30dbbd7-3825-40fc-a05e-d4472b3ad133",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a661a8cc-01a4-49c9-92c7-c800e66dd68b",
          "status": "Created",
          "code": 201,
          "responseTime": 1411,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601c1457-1fc4-43de-8a44-943935395b68",
        "cursor": {
          "ref": "bd79fef6-9efd-46c1-8fc0-15b440496d91",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a91c95d9-b193-4050-a551-3a13cc84e14d"
        },
        "item": {
          "id": "601c1457-1fc4-43de-8a44-943935395b68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c60b20a-99af-4df3-8d3a-a49dc4ec04bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d337f797-a82a-4ddf-8e57-466d15683e80",
        "cursor": {
          "ref": "d57fe80f-7d35-4b5b-bfcd-5bbfc5c37a3c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "860f7063-3275-4369-a341-6278162bec8d"
        },
        "item": {
          "id": "d337f797-a82a-4ddf-8e57-466d15683e80",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5103067f-eff3-444e-be07-32e6b3b7d2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41fcf3a-bec0-4bbb-ad78-261f1c41b3e0",
        "cursor": {
          "ref": "d13fcd9e-4d56-45a3-9fea-0a55155b169b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4386729f-1497-4668-b520-ebb60be1c110"
        },
        "item": {
          "id": "f41fcf3a-bec0-4bbb-ad78-261f1c41b3e0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7a8dbb90-e8bd-432a-9c74-3af010d41647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cb088c-a027-4021-b8fd-b09b128b2750",
        "cursor": {
          "ref": "9cde2164-5fb7-42f9-b205-d5cc6199e9de",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b23081b-1193-48aa-a0e8-a2adfb5a3ca8"
        },
        "item": {
          "id": "c6cb088c-a027-4021-b8fd-b09b128b2750",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51777ca9-1d99-4fb1-902f-1262adfa0712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deaa14a4-116c-45b7-b2a8-edc102cef03c",
        "cursor": {
          "ref": "3ddaa5a3-3101-4e32-bb25-9e44e7a859f8",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2bd5497c-c574-47af-b335-e30e5e8987f7"
        },
        "item": {
          "id": "deaa14a4-116c-45b7-b2a8-edc102cef03c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5d7ce7e1-0ca1-4283-af23-ba79fa364fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c995f0c-031e-49ea-ace7-6020845e258e",
        "cursor": {
          "ref": "728d1925-f0d2-43a4-bd1b-5b10affaef92",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "833876f2-8da9-42a8-9bf5-5166d66f12a7"
        },
        "item": {
          "id": "7c995f0c-031e-49ea-ace7-6020845e258e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ca3f20f1-cd3d-4ba3-a4d0-1c3a6970e98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee743ea-b9bb-40f4-a612-91ab107039a7",
        "cursor": {
          "ref": "d514ba2b-2b88-4c25-b165-6f546efc8db3",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "55b4160b-2024-4db7-8fdb-cfef3158886f"
        },
        "item": {
          "id": "bee743ea-b9bb-40f4-a612-91ab107039a7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a4548db9-02e2-4259-a05c-52b2c5da97ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af6d256-102e-40aa-9477-2747c521de8d",
        "cursor": {
          "ref": "9f3f6906-a612-4697-a020-b2fa461d8e46",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "04ab59b0-0c61-4f68-9a2d-792b0559c981"
        },
        "item": {
          "id": "8af6d256-102e-40aa-9477-2747c521de8d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1f0238a9-488a-48a8-9a6c-16c5f8766d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b573800e-9746-4178-9e13-6817b01cc82d",
        "cursor": {
          "ref": "77c637af-c037-481d-8dff-3994dcc5db8e",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "995aaedc-e410-42b6-93e0-e8d339dae024"
        },
        "item": {
          "id": "b573800e-9746-4178-9e13-6817b01cc82d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "85a74073-08ba-4d8f-9bcd-0d53a6baebf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d0b581-3b60-44ce-baef-f618f94a588b",
        "cursor": {
          "ref": "9d77e3f6-72ef-41ed-8440-6c027b50b237",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "faf97f68-85e0-4ffe-95ae-3c1c34ad7ad7"
        },
        "item": {
          "id": "f9d0b581-3b60-44ce-baef-f618f94a588b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bdff8d5c-c675-4873-b326-dad04c11357d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f7c022-a6c0-4144-bca5-296e60dc52a7",
        "cursor": {
          "ref": "46bfae8b-0289-4c34-838b-05f58519e81d",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e8bf67d2-b95d-4ea6-a9aa-79ca7b25623d"
        },
        "item": {
          "id": "67f7c022-a6c0-4144-bca5-296e60dc52a7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "87e5804b-3e5a-4d79-82a8-62396aaf2461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518ba906-3f5d-4869-87f0-e4b1c674cc9a",
        "cursor": {
          "ref": "328ee383-ef65-4a6a-9640-ab29386872ad",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a53b9cf0-0e48-45f7-8738-7e30d2aacf31"
        },
        "item": {
          "id": "518ba906-3f5d-4869-87f0-e4b1c674cc9a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d73253cd-b768-419f-91dc-a54767c274c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d771b6d8-fbcc-4b5c-8220-6e8bc3d03cdc",
        "cursor": {
          "ref": "d0b9b4b6-8f7f-467b-9ca6-052433c3d3a7",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "88425d58-1081-47c7-a22c-1b320d2bbd6c"
        },
        "item": {
          "id": "d771b6d8-fbcc-4b5c-8220-6e8bc3d03cdc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5adfab89-a986-4e8f-baf9-a986983732e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff00590-239f-4021-890a-43f1f845ae93",
        "cursor": {
          "ref": "2687bee9-c7b1-4c6e-8c7e-7f101f294563",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5127a2e3-7fbe-466d-a94b-5e6470f841ed"
        },
        "item": {
          "id": "2ff00590-239f-4021-890a-43f1f845ae93",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b8937276-be98-41a8-af2f-f582d716188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf08b045-7273-400b-b6c2-5b93e09ccb60",
        "cursor": {
          "ref": "fb8443fa-b762-41d8-864b-9e681afaf881",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7448e982-e7da-44a3-a04a-618b53d0d09c"
        },
        "item": {
          "id": "cf08b045-7273-400b-b6c2-5b93e09ccb60",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "03e134b9-de9d-424f-8e63-6896505ad89b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1dbac6-9fed-42a8-8360-c222ee25d68c",
        "cursor": {
          "ref": "ca29e06b-b4f4-465e-acd7-c5d4b04ca927",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2d69d152-2fcf-4ebd-b151-1bcd7a1d18cf"
        },
        "item": {
          "id": "af1dbac6-9fed-42a8-8360-c222ee25d68c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b3f7eb65-9b30-4545-aa86-9186f52f01fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a70fa9e-6475-4bfb-b9c0-e681b34f27b2",
        "cursor": {
          "ref": "d80f6acc-fb39-47e2-9859-68d8f8b85c15",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "073d0e6a-b921-4fc9-80b7-061fd4d8a3ff"
        },
        "item": {
          "id": "7a70fa9e-6475-4bfb-b9c0-e681b34f27b2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4e15763b-a56c-41a9-aa1f-922a6c35ed3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76413772-4585-4615-9310-74c00d6fcb96",
        "cursor": {
          "ref": "55fadf66-b173-4e29-bbf5-3cbf474c2c2a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e88abd2e-d61c-4358-88d5-f5e7eb04f697"
        },
        "item": {
          "id": "76413772-4585-4615-9310-74c00d6fcb96",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "056847dd-2a5e-4da8-8757-9c2807e97c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925ae1d7-2ef4-4fd7-a607-598efe13ae87",
        "cursor": {
          "ref": "c9e72e2c-8fa7-439c-b4a4-6efa6b7abcbf",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b73b6385-8016-4e6b-a10a-e105d5805792"
        },
        "item": {
          "id": "925ae1d7-2ef4-4fd7-a607-598efe13ae87",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c3850369-6eb9-40b8-b502-07f02df5656d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60418d6d-bb4d-4c37-81bf-c3848b6e042e",
        "cursor": {
          "ref": "4bf84898-9a15-4c18-8ec9-ab4dc0fa5520",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f89c24cd-70a1-43aa-9ce5-98860e31e3b5"
        },
        "item": {
          "id": "60418d6d-bb4d-4c37-81bf-c3848b6e042e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c0c98718-d0dd-412e-98e8-9ab2ef3a3bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c555609-6d24-469e-a95b-84977e616a99",
        "cursor": {
          "ref": "ade98be1-be7f-4d75-bc68-ae8547a530a7",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2f99a934-8c90-4924-953c-9c17b982e107"
        },
        "item": {
          "id": "3c555609-6d24-469e-a95b-84977e616a99",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a49d5067-ecbe-4de8-9f1b-c28235ca6a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388a317d-85f3-45a9-a162-b764e4ca6139",
        "cursor": {
          "ref": "5d208099-4760-4c44-9ed8-d479c422dbe1",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "670c8006-ceb5-40ce-aeeb-40404575515f"
        },
        "item": {
          "id": "388a317d-85f3-45a9-a162-b764e4ca6139",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f7b717f0-3287-48e5-a448-5a6bbbf4d290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa14d0cd-25b0-497c-b0e9-b0aaa883c278",
        "cursor": {
          "ref": "f361b23c-cad2-4bc8-b3b1-61f81769509d",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "32d866f8-320d-4802-ac56-770ba19576f9"
        },
        "item": {
          "id": "fa14d0cd-25b0-497c-b0e9-b0aaa883c278",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f708e48e-7a06-4f0c-8e67-a1aadccd4012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193ca698-a5b3-45f8-8e91-416a8e5c0594",
        "cursor": {
          "ref": "b130b849-a01b-431a-bf36-5f47ff06036f",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a8f3bf84-3f88-4c4e-9907-ee5d1bb018b7"
        },
        "item": {
          "id": "193ca698-a5b3-45f8-8e91-416a8e5c0594",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1c8c9fae-df4d-4b52-91b3-2f5ae2c75eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc87a45e-94e7-4146-a60c-c16b43abf788",
        "cursor": {
          "ref": "f6578a62-012d-40ac-9a5e-04b45d31423a",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6755f63f-3799-4057-a7c9-d958cd6d8156"
        },
        "item": {
          "id": "bc87a45e-94e7-4146-a60c-c16b43abf788",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cc20f7d9-8700-484c-bda1-d3d20fd104be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fe015b-6930-4c98-8166-e1db8805ab6c",
        "cursor": {
          "ref": "2017133b-a089-41b0-b854-b00f69971942",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1dc31361-6458-4840-871f-65d994d6fefb"
        },
        "item": {
          "id": "84fe015b-6930-4c98-8166-e1db8805ab6c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cbed67ff-dc0d-4309-861f-1c18d5f0e9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d83d39-8b6e-4dcc-9b8a-9cc3e832798d",
        "cursor": {
          "ref": "ba4bc0b2-9063-4099-b840-0aca4f0543e0",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "923aa103-63db-469b-9847-803cac15bede"
        },
        "item": {
          "id": "35d83d39-8b6e-4dcc-9b8a-9cc3e832798d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8bf96d15-1440-4e05-a50f-338ff6dd652a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22362fd-2066-487d-bd13-a5a79e735dc3",
        "cursor": {
          "ref": "cfc7020b-036c-4a70-ad3c-65da1c611b5d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a457b883-539d-43a4-a571-e7023e5a8214"
        },
        "item": {
          "id": "d22362fd-2066-487d-bd13-a5a79e735dc3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c12015d8-d55c-4869-8dbc-5435216d7ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ed0621-9dfa-43f6-a3d1-68e5c3605a7f",
        "cursor": {
          "ref": "5175ae6c-de4a-4315-8825-623477e7c5da",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fac2b01e-04a4-4fb3-9d7b-07f5a767461a"
        },
        "item": {
          "id": "32ed0621-9dfa-43f6-a3d1-68e5c3605a7f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b8589258-d97f-46d5-b728-f40a9e008e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f87075-ad31-4475-be42-8574d69a89ba",
        "cursor": {
          "ref": "eb1316ac-5dc8-4f94-9ddc-c79b47eac035",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6af9e9a5-0476-4cc8-8438-aac490ab1fb6"
        },
        "item": {
          "id": "74f87075-ad31-4475-be42-8574d69a89ba",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7e808d57-43db-459b-854c-1b447274b928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f991ebb2-ffcd-4415-b4bc-6e6c46241c97",
        "cursor": {
          "ref": "cb65ac15-87ef-405b-9921-bc2e5566ec3a",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "193ff539-bef7-4263-be2f-01a3966e5c29"
        },
        "item": {
          "id": "f991ebb2-ffcd-4415-b4bc-6e6c46241c97",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8cfcfd60-88f7-470e-8cc4-55e63c58817c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31eafe16-c6f9-4250-959b-d74237e3572e",
        "cursor": {
          "ref": "8f4d14ae-56cf-4cc1-81d2-63980e6e0889",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "331acabc-f79e-45b1-aede-d8e2cb4bad6f"
        },
        "item": {
          "id": "31eafe16-c6f9-4250-959b-d74237e3572e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8fda0467-3a0b-45b0-b353-5ef7f0001417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ed2063-36ee-445a-82c6-8f8018cc0d96",
        "cursor": {
          "ref": "99572409-2ae6-4078-9de0-56a1728293d2",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "616be035-505f-424c-9813-6c142c3b9b0b"
        },
        "item": {
          "id": "32ed2063-36ee-445a-82c6-8f8018cc0d96",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "360db8c3-63f7-41a5-925f-53e1e6679c9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d332138-81d6-4fbb-92ea-1ba0ac9d90e9",
        "cursor": {
          "ref": "5d8c7279-6a41-4df3-a2be-c19aabc29e2e",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b3c3c8b8-e0ac-4ffb-92f3-decb53b170c0"
        },
        "item": {
          "id": "0d332138-81d6-4fbb-92ea-1ba0ac9d90e9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "965cd56f-9534-4dce-b578-761b828150d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dd6070-0dd1-413c-bc8a-51994fd78b4e",
        "cursor": {
          "ref": "196cbd40-4987-46c8-ab9b-041f642e08b1",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "839e9368-9fe2-4e97-a6cf-bb5ec588acd2"
        },
        "item": {
          "id": "84dd6070-0dd1-413c-bc8a-51994fd78b4e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "83fd812d-3e12-438b-9ade-3c2debecf7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e37e5e6-e23f-4b5f-994d-fa968458bf6f",
        "cursor": {
          "ref": "d9843caa-b5f7-457b-b8ab-36ff4379dbda",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "22a49d70-257f-46ac-87fb-70f7e22a3431"
        },
        "item": {
          "id": "6e37e5e6-e23f-4b5f-994d-fa968458bf6f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c3082bb-dbbc-4a8c-9511-11b516e1a84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7bd548-8824-4d17-b272-e659b72bac7b",
        "cursor": {
          "ref": "a42399e2-3116-4f73-abe4-ea6d673bdb3f",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "92dad048-0905-4833-9d47-eef6e7c1274d"
        },
        "item": {
          "id": "6d7bd548-8824-4d17-b272-e659b72bac7b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "70f573f3-2ab0-48e9-af23-4253114613d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94359b78-51be-4501-a4fa-ed513bd63875",
        "cursor": {
          "ref": "95c187e6-6507-458d-b487-9dfe5868155b",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a64ef925-b65b-41b5-84ab-856ce0b3d38a"
        },
        "item": {
          "id": "94359b78-51be-4501-a4fa-ed513bd63875",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3ecf3e4c-e1fb-4cc4-adcb-0bdfe48fe93c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a051c4-7d4a-4cc1-b146-6441d5fc4822",
        "cursor": {
          "ref": "4b6a6e41-69c6-44fc-93b8-64ab927058ca",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5d2b9d46-a6ab-42f4-b9bd-8b1dd78f2a2a"
        },
        "item": {
          "id": "d5a051c4-7d4a-4cc1-b146-6441d5fc4822",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "992c2da8-72fa-4903-94e2-5ee70f4ce101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdb8ba6-8e16-45c2-80d8-9151db0fd0c9",
        "cursor": {
          "ref": "def42e79-caf0-480c-bd53-d3ff71ef1d88",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b361fbac-1a1e-4184-acc6-721ccfab2aca"
        },
        "item": {
          "id": "8fdb8ba6-8e16-45c2-80d8-9151db0fd0c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "33a9ef80-f804-4a5b-84bc-2e64a5fc7202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e54b25d-6e46-4c20-908b-b78e28ad3366",
        "cursor": {
          "ref": "e1cdbedf-6465-4bdf-96f0-89a0b942f5ad",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f0dc0a8d-1a77-451d-ae22-473bd7873a23"
        },
        "item": {
          "id": "9e54b25d-6e46-4c20-908b-b78e28ad3366",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "80c5db18-2870-40f1-a0ba-ab6476613c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f854e832-39a7-48ad-999c-83a69c927223",
        "cursor": {
          "ref": "1267668a-75ac-4a8d-bf06-cfacfda0f568",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8325bf50-44a4-4c4e-86de-91689d8a4c9a"
        },
        "item": {
          "id": "f854e832-39a7-48ad-999c-83a69c927223",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7839b367-3124-4f00-b196-18b3ac729a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68aa31a3-548d-4e66-8613-9f703f5d73a8",
        "cursor": {
          "ref": "e7590556-2053-46d4-9c3a-0ad5dac531b2",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7cfd2c55-7ee7-4594-8e37-0d2aa54e5019"
        },
        "item": {
          "id": "68aa31a3-548d-4e66-8613-9f703f5d73a8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "84c7ac25-2093-41a6-bd89-ed8d4bf415de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74c6909-6cd5-44dd-8df8-f0ba2ca74dee",
        "cursor": {
          "ref": "afa82777-74da-484c-8b4b-0df18e5bdecb",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e7ab0b81-7729-4187-b7bc-4bf657b2a34a"
        },
        "item": {
          "id": "f74c6909-6cd5-44dd-8df8-f0ba2ca74dee",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e4d0c63e-c4ea-4bfc-a01d-c86eef1118ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2648bd67-8d60-457b-9fff-3501999d19dc",
        "cursor": {
          "ref": "f80a5f66-e717-4ebd-a25f-a5e8d5c39aff",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7969d262-4a87-4b2c-a4b6-350113fb186f"
        },
        "item": {
          "id": "2648bd67-8d60-457b-9fff-3501999d19dc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7e0b9531-0539-4f45-af4f-17e8709b1350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937ac929-4a6d-4657-8614-336482f5c132",
        "cursor": {
          "ref": "ad222c7c-51bf-4121-a325-b406713c66a4",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ed6dd541-b012-434a-b161-de61a8833a81"
        },
        "item": {
          "id": "937ac929-4a6d-4657-8614-336482f5c132",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5b3e2e3e-da4c-4ea0-bf28-6a84508b9d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18083876-aee0-4cdf-acc3-419a017a5abe",
        "cursor": {
          "ref": "b14ad2d8-bb6f-4105-a81f-5866459a4341",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "98f51d68-d401-49be-9032-6f5fca69d41f"
        },
        "item": {
          "id": "18083876-aee0-4cdf-acc3-419a017a5abe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "632e56a1-a20f-48d0-a3ea-30cab74719f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6324bb71-5bf8-4b3f-bfa0-bb8e8ba1a824",
        "cursor": {
          "ref": "de51a67c-9d7d-4d33-8335-40429e02e913",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2c07c0ba-7647-451e-9a16-d7f66c470ead"
        },
        "item": {
          "id": "6324bb71-5bf8-4b3f-bfa0-bb8e8ba1a824",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1d82c449-bee4-48a8-af42-d944b84f3740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca1d1b5-10ec-479d-b4dd-365580835b78",
        "cursor": {
          "ref": "9272f517-4055-4cc4-aa68-835373ab5958",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "eddf0d13-3b1a-4846-899d-ddf77ac9363a"
        },
        "item": {
          "id": "cca1d1b5-10ec-479d-b4dd-365580835b78",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cb611b7a-76dc-4d29-95b3-4c6872a72b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f28c89-0256-4947-a97e-33204af1a1a5",
        "cursor": {
          "ref": "bd8b6b04-49af-4f0c-9b6d-b0cb245f273c",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "054050b8-1530-4457-b4dc-e70263079b63"
        },
        "item": {
          "id": "d6f28c89-0256-4947-a97e-33204af1a1a5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ed78a123-3a1b-4215-8f2a-e14610e51a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a210d7f5-f767-4426-905f-35707fce637f",
        "cursor": {
          "ref": "b159fcc8-6661-4d74-bd9d-0de543fb69bf",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "812a3054-e64f-45e9-b5e7-84f84bbf136e"
        },
        "item": {
          "id": "a210d7f5-f767-4426-905f-35707fce637f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80d049b0-ad92-4e1d-b950-98983e0a0475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94991d2a-68c7-4d3b-87ff-00506a6d411f",
        "cursor": {
          "ref": "02905b73-9bc9-43eb-8d12-b77a89555de3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "02470dad-cab9-4b56-a4c0-c05ffdecfa14"
        },
        "item": {
          "id": "94991d2a-68c7-4d3b-87ff-00506a6d411f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b09b5406-6b24-4db1-a81e-ff3cb2050b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040a71d7-b3ed-4e04-ae8a-385cd7e74cea",
        "cursor": {
          "ref": "1b5d8749-e2b8-43a8-8933-f733b6b07311",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "43796644-05de-45d5-9a8c-7eb52a2ece02"
        },
        "item": {
          "id": "040a71d7-b3ed-4e04-ae8a-385cd7e74cea",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f9022b5f-ddde-4f4d-ba2e-53110b87bb4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d01a0b-bc33-4ede-afe5-3411ff1a4552",
        "cursor": {
          "ref": "8da88edb-5585-4a8b-9c8f-91213d8376e5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d25d4185-f802-418a-9618-9aa5c3a22841"
        },
        "item": {
          "id": "88d01a0b-bc33-4ede-afe5-3411ff1a4552",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "df02dac8-7dcb-4167-a9ba-f8c255e80f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52014824-81ac-4894-9989-4690b950428c",
        "cursor": {
          "ref": "3ab7c5b9-6df2-4f14-a750-6baa57e19ef9",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5b78f6a2-5fcf-4e51-a071-e5b038314634"
        },
        "item": {
          "id": "52014824-81ac-4894-9989-4690b950428c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "95871e85-91bb-49ae-8d8d-63642dba484d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0866e04-9e14-406d-80c9-4abd3e0ea64f",
        "cursor": {
          "ref": "d5952a66-aee4-4db1-9397-8b9cd09505f9",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cdbaf746-44bb-47a9-988f-e2d798a30cf5"
        },
        "item": {
          "id": "b0866e04-9e14-406d-80c9-4abd3e0ea64f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3ff47563-1965-4244-bc02-8628faeac898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c32d3b0-bbaf-4116-8a1b-a87d8e5513b2",
        "cursor": {
          "ref": "7a0b4c2c-efca-431e-b5ef-d5f6ac187fb1",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "90b47a8c-7055-4aec-8415-225405ac8eb7"
        },
        "item": {
          "id": "7c32d3b0-bbaf-4116-8a1b-a87d8e5513b2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "006eb59c-1f63-436d-8d76-7ffe5d866ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29e71cb-ed21-42dc-a401-2cd4bea7454a",
        "cursor": {
          "ref": "37610915-e9e7-4e24-8c55-573ab2b3492c",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6c31df67-2a45-404f-b819-88ab3f3bf29c"
        },
        "item": {
          "id": "b29e71cb-ed21-42dc-a401-2cd4bea7454a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d50160b-a010-42e2-a527-200479e569e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995f20eb-47b1-4fa6-9e39-59828c561b47",
        "cursor": {
          "ref": "74dd5988-de49-42bf-a36b-830a2a5a17a3",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d2c33cba-3641-4940-89b0-abc02c77e0a1"
        },
        "item": {
          "id": "995f20eb-47b1-4fa6-9e39-59828c561b47",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dcabf094-b653-4b04-83df-068ccec31c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee68738-a1b2-4a38-baa2-f07bbe054d71",
        "cursor": {
          "ref": "53ab2f83-d9c6-4893-b1c4-d20fa0907d87",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ec8b4181-c317-44ac-915c-5dc5cffb1ef4"
        },
        "item": {
          "id": "6ee68738-a1b2-4a38-baa2-f07bbe054d71",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3822c8f0-9fac-467d-bcf1-65ae364f63f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765f7c16-904f-4d13-aaac-8a89dcfc61d6",
        "cursor": {
          "ref": "ea91221d-fba6-4628-8ff9-e6e6b376c7cb",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2defb9ce-0fb7-4fc4-bb74-76af1d1ae3af"
        },
        "item": {
          "id": "765f7c16-904f-4d13-aaac-8a89dcfc61d6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c1739d13-1ff9-481f-8a03-9d11b1b6b70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e917cbd-61af-47af-a485-0c8bd9964210",
        "cursor": {
          "ref": "01dac253-1c66-4212-81ac-701229e043b1",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8e06d713-5a88-4073-957e-6fc1a13dbea7"
        },
        "item": {
          "id": "7e917cbd-61af-47af-a485-0c8bd9964210",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81d9524d-1644-40c7-9361-27246bfa7d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867a351a-dfff-4fe6-9ed7-a7939c67f4b6",
        "cursor": {
          "ref": "8b53b57f-5f37-4d92-a958-043d6299cdd7",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c071776f-7934-44de-96b2-2471236a4b3c"
        },
        "item": {
          "id": "867a351a-dfff-4fe6-9ed7-a7939c67f4b6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3d046714-ad2d-47a6-b187-172bb7da4aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9737d212-e7e4-4964-bef9-5db16ad0b7ae",
        "cursor": {
          "ref": "00897a6e-c360-4acd-a97d-e34ae9321ff9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c93b6859-ed2d-4898-9385-62aedd0bef6c"
        },
        "item": {
          "id": "9737d212-e7e4-4964-bef9-5db16ad0b7ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2a70e118-8fae-46e6-88cd-57395392e217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2f19b1-aac7-4c14-b144-2a1d17a55969",
        "cursor": {
          "ref": "02c51c22-5826-4ad5-87b7-93817707ef28",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "de2ec437-118d-4006-a7ee-110da69a03b5"
        },
        "item": {
          "id": "7e2f19b1-aac7-4c14-b144-2a1d17a55969",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9a8c343b-1c3d-4905-bc44-07637fde958c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41368a61-1cf4-4f51-b23a-85965af826a5",
        "cursor": {
          "ref": "c3f8c12f-5b68-4771-8dd9-89eb39ecf0fd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "38ba23e3-9f3b-42b9-92c3-6592641cea6e"
        },
        "item": {
          "id": "41368a61-1cf4-4f51-b23a-85965af826a5",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f59451fb-29f0-4d86-9e0e-132a5e67841a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14d3fea-529f-44b3-aaad-8eed12a60d07",
        "cursor": {
          "ref": "68fdd794-1ff0-4307-9d7c-b0bd19a96e00",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0cf8ff28-6bef-4b55-8edb-1fb9194b1339"
        },
        "item": {
          "id": "e14d3fea-529f-44b3-aaad-8eed12a60d07",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0fd18205-d160-4651-b632-7b45fcf5de27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4425acf-0f73-426a-ab7b-86d9e38ae562",
        "cursor": {
          "ref": "4ac79c80-eae5-405e-ba7c-86a02fab0e15",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9d73675f-e4d2-4dc0-946e-a54fb2e2e49d"
        },
        "item": {
          "id": "f4425acf-0f73-426a-ab7b-86d9e38ae562",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3c7aa7ba-3e24-473e-bb88-e20217a5b031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0df8ae5-52fe-4bf6-9fef-b50356a8dc9b",
        "cursor": {
          "ref": "f9a951e3-f307-488d-9702-af96577c8961",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "313ebb8f-6276-448e-842c-8ccdb1c8c772"
        },
        "item": {
          "id": "f0df8ae5-52fe-4bf6-9fef-b50356a8dc9b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "97879b81-f083-4e28-96ec-064fe98033b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f26d88-f340-4f79-a5cc-30fc2a84c80d",
        "cursor": {
          "ref": "ddaa54d7-d07b-4b12-98c9-f2699503b3d0",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9811e861-57a2-4e4d-bdd2-921b97997df8"
        },
        "item": {
          "id": "03f26d88-f340-4f79-a5cc-30fc2a84c80d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0682af8e-a641-4956-a738-6c97236b183f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f7c09f-4c4c-4c81-b728-4babff596aee",
        "cursor": {
          "ref": "e079c190-5014-4f63-869c-dc80f7c3c716",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "834a30ce-7f96-4a24-b2d4-4a291186ecf9"
        },
        "item": {
          "id": "81f7c09f-4c4c-4c81-b728-4babff596aee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "adde6090-f37f-489e-9e7a-ad417236a456",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "523d74e4-aa5a-4a94-9d1f-91d3747cca49",
        "cursor": {
          "ref": "75738f9c-4d20-4ec3-8fbe-a9ed99c25afa",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "72cb4cc4-9bea-494f-b8a9-59a3af57bbb7"
        },
        "item": {
          "id": "523d74e4-aa5a-4a94-9d1f-91d3747cca49",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ee93906a-ad3b-4930-8a69-7ed27f2e3a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89219d6-ad72-4486-a52b-9e073a94ebeb",
        "cursor": {
          "ref": "a17eb8b9-2c26-4f77-afcf-6ada4b3070a0",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b7bdc3f7-e662-40da-9e06-06fe9be0ea4a"
        },
        "item": {
          "id": "a89219d6-ad72-4486-a52b-9e073a94ebeb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4bbc46ab-ef98-4d79-b340-526bb45e7808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7169d2f8-f986-46c2-aa85-87c5e2f4e43b",
        "cursor": {
          "ref": "5ece82b3-e8ef-4890-b3e7-16b4f5af63c0",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "94711112-f93f-44ca-bc6e-beb29b3a4e5b"
        },
        "item": {
          "id": "7169d2f8-f986-46c2-aa85-87c5e2f4e43b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "46d8e0cd-a710-49c8-9054-0863da2b678f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a1c345-51b2-4239-a6f6-4d83ba20ace0",
        "cursor": {
          "ref": "d930ce44-07cb-4e3b-ada8-49c63ab6cd7b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "76b5a81b-1d88-4f59-9265-87cad8d2a06e"
        },
        "item": {
          "id": "a3a1c345-51b2-4239-a6f6-4d83ba20ace0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8a3d2f86-6596-4b91-a8a4-e630e8f6d3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4aa76c7-d8a0-46d6-974a-18b8fdd58c80",
        "cursor": {
          "ref": "1b3fc2a0-db5e-4c99-a1b6-331baaf30deb",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6a1d07d3-6815-4763-a1d8-d2b2ccf8d480"
        },
        "item": {
          "id": "c4aa76c7-d8a0-46d6-974a-18b8fdd58c80",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0b28b9b2-1cd2-41ab-8a6d-d3634d4343b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac92e28a-3e73-4f55-8d5a-329103118292",
        "cursor": {
          "ref": "66669cae-33dc-4c3f-bb3e-7696d7866d1a",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "44c8befd-2369-4a58-9615-dcd695ec3c1b"
        },
        "item": {
          "id": "ac92e28a-3e73-4f55-8d5a-329103118292",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fc09d5aa-ecf4-45c7-9922-d3641ba497c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "280db227-7b4b-4d11-b379-986ba9feaa0a",
        "cursor": {
          "ref": "92a7882b-4329-4555-86e8-60971fc12f86",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "19b4cb2d-71b4-45f9-8afa-eeb57f320451"
        },
        "item": {
          "id": "280db227-7b4b-4d11-b379-986ba9feaa0a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3fd8f985-a421-47b1-8743-3acee96b9dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0af3491-e328-464e-814c-295446c86c7b",
        "cursor": {
          "ref": "4a6b9243-b743-42a3-9145-45feaab945ab",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ca9a27e0-b7c0-4290-9a8e-fed6637645af"
        },
        "item": {
          "id": "a0af3491-e328-464e-814c-295446c86c7b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "60dd40e5-7152-4648-92f3-a2240f199285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0014f34-60dc-4567-a1e9-1eb23a74d607",
        "cursor": {
          "ref": "601f4822-31d9-4156-aaf4-2222496d0bc6",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a5c6744e-02a0-425e-a8a8-06034b125c0d"
        },
        "item": {
          "id": "b0014f34-60dc-4567-a1e9-1eb23a74d607",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "30e35a1a-80b9-4097-afd7-874c50736a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1334ebfd-23db-4ac6-9438-0eddf2938959",
        "cursor": {
          "ref": "916c82b7-d235-4fa3-a2f0-a255d3eb99e2",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a13bcb5f-18a8-4cb8-948b-70340b353844"
        },
        "item": {
          "id": "1334ebfd-23db-4ac6-9438-0eddf2938959",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d49ab636-25e7-49cc-98cb-00af1985d502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bba5fdd-d803-4aa7-be0e-005a126dbef4",
        "cursor": {
          "ref": "a2dbe070-0801-4b5a-92dd-cc34a46e9cc9",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b2a15a58-42b5-44fc-a3da-873f0d8bccd6"
        },
        "item": {
          "id": "2bba5fdd-d803-4aa7-be0e-005a126dbef4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "41a12220-f3ba-4203-93f1-c3372eab0d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f044a6-109a-4d0d-880d-de7b17577b87",
        "cursor": {
          "ref": "5f2f414b-a2ba-4db9-8e14-71644c7a6603",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "713ec531-f12a-4ed4-86a7-ce75bb31fd0c"
        },
        "item": {
          "id": "07f044a6-109a-4d0d-880d-de7b17577b87",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e2d0408a-5728-4baf-b3d0-7e9c2188d473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491b3808-037d-47f8-837c-2a084c83e2b8",
        "cursor": {
          "ref": "8e42f4f6-16b3-48e1-8a0a-73eb5e0a9a0d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3f6fb7da-8258-4ae9-af44-40f9338f3f07"
        },
        "item": {
          "id": "491b3808-037d-47f8-837c-2a084c83e2b8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "327e8a69-cac4-47b6-85ec-ef93fe9ad00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9ce9ca-498a-4da3-8f81-f0f3b96b9c67",
        "cursor": {
          "ref": "3434f1a1-dbac-4626-98e4-7ab29be6a41e",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a69a4d00-9dae-4369-b142-5cce186f6731"
        },
        "item": {
          "id": "ed9ce9ca-498a-4da3-8f81-f0f3b96b9c67",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "45ca0bea-d22b-4f57-8d9d-705cd6a2dfe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15716054-8506-4c13-a5b3-b8d309e24325",
        "cursor": {
          "ref": "170c3c45-a6c3-4268-ad36-5f7d0ea68997",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "153d9937-c261-46dd-85fb-2a909769ccf1"
        },
        "item": {
          "id": "15716054-8506-4c13-a5b3-b8d309e24325",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a323ca24-670f-4ebd-be21-f7baeac221cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72773687-bfa6-47d7-91f2-a0c505db67f1",
        "cursor": {
          "ref": "bee345a8-b3a1-427f-8765-fb55f0ab0221",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "aa44cf01-afe0-4365-9414-db12cec101fa"
        },
        "item": {
          "id": "72773687-bfa6-47d7-91f2-a0c505db67f1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9fc64e79-7491-43da-96ac-abc057e0083b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d75a74-25db-45c1-9c15-4c082f9083e7",
        "cursor": {
          "ref": "051f1e42-8c1b-41f5-a473-bb70f8194167",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "447a56ed-6700-47e8-b031-23157e87b611"
        },
        "item": {
          "id": "69d75a74-25db-45c1-9c15-4c082f9083e7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2a339c23-f02a-4c4c-80c8-864543d4ed8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b38f310-08db-4719-92aa-742b629d4fc8",
        "cursor": {
          "ref": "c86d338d-dd6c-4f28-b072-d579f13c149e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "72af1ad2-72dd-4cd2-99af-52f1979ed8e8"
        },
        "item": {
          "id": "3b38f310-08db-4719-92aa-742b629d4fc8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e873bdc6-16bf-4c90-9158-9bdc2892e100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f585c945-6787-49a5-b9b5-716db9f65149",
        "cursor": {
          "ref": "16075d6f-b2b3-4613-884c-ca2f5bf7b298",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6012901c-c536-4725-9797-56e8cef4a48b"
        },
        "item": {
          "id": "f585c945-6787-49a5-b9b5-716db9f65149",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fe192823-fc26-4952-9ab4-1d9a737c205e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6230828-2b58-472b-bfa1-4104f49a7ea0",
        "cursor": {
          "ref": "b46d082d-36bc-4724-85b8-4522eeb4c4d0",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6d1d96c7-61e5-43ca-b052-ff77654a517c"
        },
        "item": {
          "id": "b6230828-2b58-472b-bfa1-4104f49a7ea0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "38dab8c9-1be0-4855-881e-c9c3f4db3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b3a4a1-e2e3-4fb7-8163-346bea4b9161",
        "cursor": {
          "ref": "2707c26a-41f3-458f-adc6-107fc075ea49",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "92cebf2b-9b43-477a-928f-87ba7f10080c"
        },
        "item": {
          "id": "a4b3a4a1-e2e3-4fb7-8163-346bea4b9161",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2e9664ff-6564-4d8b-a416-9ac06e1a87fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee37a21-38d2-48ae-b741-b869e8a90500",
        "cursor": {
          "ref": "ad47ca1c-290c-4f2d-9a2a-7e5187595aa9",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3dec843f-323e-4b7b-8820-9edc607973b9"
        },
        "item": {
          "id": "7ee37a21-38d2-48ae-b741-b869e8a90500",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "80324d6f-3f08-4c96-9650-cffa8023d8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad20513-8327-4c02-9a6d-456a0bdd29f1",
        "cursor": {
          "ref": "ac8389fc-f5d3-4dd2-84b0-7e73dd3f26f0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "23badd5d-5e19-4c01-b0db-f95b048374b5"
        },
        "item": {
          "id": "2ad20513-8327-4c02-9a6d-456a0bdd29f1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "80f6ad4f-f83f-480c-b0a7-450dfaf47aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24808c1-7b93-4d73-8ead-1bd33542dcbe",
        "cursor": {
          "ref": "4defd74c-a531-4717-8195-252ef87a7175",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "06088661-77df-4ae3-ab91-8b1db582003e"
        },
        "item": {
          "id": "b24808c1-7b93-4d73-8ead-1bd33542dcbe",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3dec3116-2823-4c09-89da-33911fa5622c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a00a806-6e6e-4558-b814-26d6d8a07c39",
        "cursor": {
          "ref": "9f6b221c-3328-46bb-8e02-c56d602fe2df",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3ad7875f-0078-4e20-9ea5-f265b92f1fc4"
        },
        "item": {
          "id": "1a00a806-6e6e-4558-b814-26d6d8a07c39",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "26c55c73-36d3-4bae-8404-ee04fdfc02b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc031f00-b21c-42c3-807a-a69f1a710471",
        "cursor": {
          "ref": "3f84080b-0c92-4a3e-af36-44eb10f65ee3",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a9abaac1-17d3-435e-8ddd-467ba32aba89"
        },
        "item": {
          "id": "fc031f00-b21c-42c3-807a-a69f1a710471",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0f1b8e65-61ed-4beb-84b6-10d62b05f5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b2b6736-1a9f-4de6-8202-39fb7e69b040",
        "cursor": {
          "ref": "aef702b0-36b1-417c-9b6e-dd04fb45d1f7",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2687c49a-5817-4a60-82cf-c9cada5eab2f"
        },
        "item": {
          "id": "3b2b6736-1a9f-4de6-8202-39fb7e69b040",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e5eb932f-6b42-49b2-9c1f-244ca6715990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d134c21e-7b36-4384-8196-f1463ab7205a",
        "cursor": {
          "ref": "d594aeeb-cf26-4326-bbc6-10f9f6c7c687",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1b4533c7-3d12-4ef1-9a76-5da0348a283c"
        },
        "item": {
          "id": "d134c21e-7b36-4384-8196-f1463ab7205a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "163ccef9-eefc-48a7-a59f-9d9a7be111d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89e49ae-ee95-40bd-8bcb-ec4c6a0b2a59",
        "cursor": {
          "ref": "7292dea8-cefe-4e3c-8a0f-ebaf7146149b",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "30f6c3f6-c897-47f4-b073-c7f9df66adbb"
        },
        "item": {
          "id": "a89e49ae-ee95-40bd-8bcb-ec4c6a0b2a59",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3ad31d95-8425-4381-9469-d0734c8234bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff504f6-0df2-4ee2-811b-c0a46e6a0d77",
        "cursor": {
          "ref": "d92a65b9-64bf-43e6-b44a-7fc0d4a60035",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "495a8a60-4152-41da-bc4a-0d29790bb8ed"
        },
        "item": {
          "id": "7ff504f6-0df2-4ee2-811b-c0a46e6a0d77",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6cccd4e-f3df-4bc3-a4af-52ef8445611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fddecc3b-cc09-42f6-80f9-c1dc44ea50fc",
        "cursor": {
          "ref": "131af352-7ffa-4226-8ebf-90dc8ae4a76a",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8d4d15ca-39d2-4f62-a2df-1526d3a52d12"
        },
        "item": {
          "id": "fddecc3b-cc09-42f6-80f9-c1dc44ea50fc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "700dff42-2269-4de2-8ae6-8983a1dde4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002d6375-e0d1-4c5e-88f6-b3abe86bc2d0",
        "cursor": {
          "ref": "c7123032-6990-4d35-b868-d2a64c35df3a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2217bfa5-7e01-40be-9b5b-7ce737cf5d36"
        },
        "item": {
          "id": "002d6375-e0d1-4c5e-88f6-b3abe86bc2d0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "17a1c273-5b37-4bbe-a82f-9b3797124fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ca7af1-3e4c-4676-9269-997e5a12fe46",
        "cursor": {
          "ref": "1a073544-f2f0-41ba-8ad0-d3eb5223abeb",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "77aaf288-1ab4-4f54-8a6f-a72d638c2a22"
        },
        "item": {
          "id": "66ca7af1-3e4c-4676-9269-997e5a12fe46",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "59a81c4a-aeae-4fcd-910c-24ea5f5793a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db71f7d4-5309-4e94-85a5-79d56605a127",
        "cursor": {
          "ref": "8443ac6f-4ef9-40ee-bf21-91ef1bc397d0",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a102ab18-d1d2-46bd-859f-b2be21447b31"
        },
        "item": {
          "id": "db71f7d4-5309-4e94-85a5-79d56605a127",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7e501775-2008-45bc-89ff-991b34d67579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94b4bbb-aa3b-483b-8cdb-bb41471d155f",
        "cursor": {
          "ref": "10c0361d-7d8a-4a78-ac49-2ff065873a49",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4ec1a605-00a9-40ff-a21d-35d184b10b0d"
        },
        "item": {
          "id": "a94b4bbb-aa3b-483b-8cdb-bb41471d155f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c7bc8cbe-6b98-46cd-be8b-bfe8dda316e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba2fdf1-c6ee-4293-94a8-43c9fb1121ca",
        "cursor": {
          "ref": "17491d1d-8fc4-497c-bb47-b96ff8df1ca0",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f2aa85ef-7113-4548-b14a-9225943c76ff"
        },
        "item": {
          "id": "1ba2fdf1-c6ee-4293-94a8-43c9fb1121ca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e0f83943-6dca-4c35-ba7e-5f6319baad64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "8e9ce948-1958-4722-ae3e-333b3846fbc2",
        "cursor": {
          "ref": "3a692ebc-b015-4856-8eab-f136920d2a98",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b872163b-8506-4713-ac8e-445e058735de"
        },
        "item": {
          "id": "8e9ce948-1958-4722-ae3e-333b3846fbc2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cdbf8d63-0557-4986-8ad4-ed505d16e7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9dca8780-6b81-4578-84d2-30191fb23801",
        "cursor": {
          "ref": "15336592-dc06-4dd8-b5a0-09f77f96942d",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "279d14d0-fcee-44e2-8e36-a4ec55a35d93"
        },
        "item": {
          "id": "9dca8780-6b81-4578-84d2-30191fb23801",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "256763a2-2a34-4016-81b2-b91ea73a5d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ffc52631-63e6-4236-8082-f3c6ef53de8f",
        "cursor": {
          "ref": "3ec80e58-067f-4bc7-83bd-803e0fb15042",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "36abe4c0-92ac-4f10-b566-45d634fe6876"
        },
        "item": {
          "id": "ffc52631-63e6-4236-8082-f3c6ef53de8f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f0a9c251-d0c4-4725-b4e4-3bc4336023d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fde53c-82e3-40b1-b2ee-6af0141b2414",
        "cursor": {
          "ref": "2f890f95-cb63-404e-a04d-e0c380ee8e97",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fb7704f6-60eb-4792-b24e-0e28748b793e"
        },
        "item": {
          "id": "e1fde53c-82e3-40b1-b2ee-6af0141b2414",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d3960704-90f5-41ae-b833-ec8a4fb2ec8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "8528d0f7-cd43-48d2-ae8a-e0d8d4fc799b",
        "cursor": {
          "ref": "bb8eae9b-5309-43a1-a969-b4d32983c303",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "24945ff4-007f-4c3b-b0fe-4e607f04bd11"
        },
        "item": {
          "id": "8528d0f7-cd43-48d2-ae8a-e0d8d4fc799b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d78503b3-5658-4a85-9c47-228f4878f172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1130,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d331c656-4775-45df-bc38-08825e33182c",
        "cursor": {
          "ref": "e2e9c664-a15a-455d-978d-9e6211998029",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "85ebb790-6de5-4191-ba30-71b36f4d7d66"
        },
        "item": {
          "id": "d331c656-4775-45df-bc38-08825e33182c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6b9f63de-5b9b-46ad-b7e7-c2dddfc6fe60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "045e3535-4986-44c4-ad34-1a5223a83800",
        "cursor": {
          "ref": "59db70eb-87fc-4bd6-bb09-ed0f7872d97c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5daff503-889f-4502-92ee-d99aadbaae69"
        },
        "item": {
          "id": "045e3535-4986-44c4-ad34-1a5223a83800",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "188212c2-b24b-401e-9b35-9176906321f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e61b9b6f-392d-4bd8-8352-f9f70ee93d22",
        "cursor": {
          "ref": "cf4e1c4a-17c7-4d2f-895c-0d91e771b880",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6fee70fc-fc81-4eca-acc1-02e124ce73d3"
        },
        "item": {
          "id": "e61b9b6f-392d-4bd8-8352-f9f70ee93d22",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "166cf74e-640b-4bcf-95f3-ceb26c8aa737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f362f323-ddac-4dd1-88a2-13c6cb142b88",
        "cursor": {
          "ref": "b7d3bf11-30b1-4703-97ba-e63ff274dd64",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "225ea15b-e455-4b85-817d-1bad5a5713a4"
        },
        "item": {
          "id": "f362f323-ddac-4dd1-88a2-13c6cb142b88",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a1938da6-e888-4945-9602-6303bf949d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9c279d7b-7f63-4c8a-b735-0c2141e044b1",
        "cursor": {
          "ref": "40d8f3ef-d31d-47b3-ac35-f0626c9cd141",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cd0f44e3-53c8-4fb9-9b41-a548d77a9d5c"
        },
        "item": {
          "id": "9c279d7b-7f63-4c8a-b735-0c2141e044b1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e46b9568-8878-4fe2-bff8-77902327ee11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6c69f0-b121-4fa4-8ba3-bf8beb53244f",
        "cursor": {
          "ref": "d6502f42-6789-406f-94c2-1e9ced78f1bf",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fdf19d46-fb1d-4a2c-9f68-d2a023e925e3"
        },
        "item": {
          "id": "2c6c69f0-b121-4fa4-8ba3-bf8beb53244f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "acc3508c-4a35-4c93-8c8c-fc0908be9483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e086359-3a2a-499d-a29e-9f62aeb5bdbc",
        "cursor": {
          "ref": "268227ad-04e1-4a63-b7e0-72e7d834a885",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "92c6566a-7679-4063-806e-f75096cff548"
        },
        "item": {
          "id": "3e086359-3a2a-499d-a29e-9f62aeb5bdbc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1ca172ce-567e-4205-9631-8d5b983a6ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313c5af3-e9f3-453b-8bfa-1629adb0f900",
        "cursor": {
          "ref": "8445b6cd-42c7-41f3-a8ba-d5a029266a98",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "efe2343b-b6ed-4c84-baa6-9d12f9dfc431"
        },
        "item": {
          "id": "313c5af3-e9f3-453b-8bfa-1629adb0f900",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e0e08943-a22e-45cb-9e45-218841d3515d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21808c89-cb2d-4e72-9b9c-5542a41e4bcd",
        "cursor": {
          "ref": "c9d37cd6-954a-43f4-b943-a8728dc0ae63",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "719ab8a1-e796-4381-b78f-e5a44978c68c"
        },
        "item": {
          "id": "21808c89-cb2d-4e72-9b9c-5542a41e4bcd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c6988ab9-73c6-4b2e-a602-c620e00cf1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70aa9b2d-5731-4caa-88f5-69215ef74ef7",
        "cursor": {
          "ref": "dbd3f87d-a19b-4244-a5f9-9f2ebeff51d8",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9aac357a-1518-4c7c-bc10-ff03ba878e16"
        },
        "item": {
          "id": "70aa9b2d-5731-4caa-88f5-69215ef74ef7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2385e9f4-0d60-4cd2-a05e-c582685eded6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841744f8-4f92-4dc2-b9f0-6c7885842772",
        "cursor": {
          "ref": "ba184d87-445c-40fb-9f5d-318b09a09292",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c24a4acb-629b-4c24-89c1-72a3337f2be9"
        },
        "item": {
          "id": "841744f8-4f92-4dc2-b9f0-6c7885842772",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ae3f44f1-22e1-41d6-865d-d19845c28575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045d4076-40f6-4d2e-8f72-090508b22837",
        "cursor": {
          "ref": "7d6d774a-c12f-4ee0-b69d-b33724345896",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "fcf6d8e4-ab8c-43f0-ac06-e4e505b89551"
        },
        "item": {
          "id": "045d4076-40f6-4d2e-8f72-090508b22837",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "93db0b74-4f53-47ab-b872-67fd6b5e720c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2384351c-d7e1-4592-b960-0222c3814631",
        "cursor": {
          "ref": "492611b2-206b-49b1-8a19-d7e65b85e080",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "be4f37b3-70ef-42bf-acca-2bfb424b623a"
        },
        "item": {
          "id": "2384351c-d7e1-4592-b960-0222c3814631",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8f7ad13d-d9a1-4bdc-ac10-c534f548316f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7409d111-925c-4e28-ae9c-e8637ffb1777",
        "cursor": {
          "ref": "2a7c9881-8974-408e-b5bf-193a3c4fc3da",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6b66d428-9774-48d6-809a-1f3e7cb19e19"
        },
        "item": {
          "id": "7409d111-925c-4e28-ae9c-e8637ffb1777",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b50f38fd-f436-45d2-bc92-ea4bcc3a286b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e58b64-f0df-4fb4-b54e-14d4ed7254fe",
        "cursor": {
          "ref": "55d66009-45d8-4e36-bad9-e6165eaddbda",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "19fcc5d7-2d28-4530-928c-ef7f0ba7ba94"
        },
        "item": {
          "id": "00e58b64-f0df-4fb4-b54e-14d4ed7254fe",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "724b6a25-73dd-41f5-ad44-416c854c5740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b66013c-55f2-48ca-8101-96e01ac3016f",
        "cursor": {
          "ref": "357c4323-161c-474f-8d4d-b841e395af5a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d81e3b63-44b8-43f0-9882-8349830c2c89"
        },
        "item": {
          "id": "1b66013c-55f2-48ca-8101-96e01ac3016f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "315ac2b8-0c6e-45ce-ba56-fa98c0482dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de53bbd4-2091-41aa-a1ed-8b2399a5d8bb",
        "cursor": {
          "ref": "528d658b-5c45-4edd-b65a-a0fbc69252c4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "336fb5ed-f2a8-4def-8a9a-f1df3ae3ce0b"
        },
        "item": {
          "id": "de53bbd4-2091-41aa-a1ed-8b2399a5d8bb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "71456720-af6b-43e5-9113-95406ffe5363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ec71ec-4858-4b63-a47b-d8c8f4b2290d",
        "cursor": {
          "ref": "1721bc7f-4817-4092-a9e9-3e3d0bcfd077",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d828d570-0733-4465-806d-c1266a774fba"
        },
        "item": {
          "id": "48ec71ec-4858-4b63-a47b-d8c8f4b2290d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2fb0c806-488b-45c0-b333-d591cbe29342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1114,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "292d6ca7-12a7-4bd0-9f52-7f5400a6efa4",
        "cursor": {
          "ref": "9b92684f-1d41-4507-a991-f8d12e2a583a",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c93f66cf-b41a-48c8-9ddc-019d519f57ee"
        },
        "item": {
          "id": "292d6ca7-12a7-4bd0-9f52-7f5400a6efa4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bdb222ec-91f7-4d25-8ff1-efd848333fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1111,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "aa172b00-5e9f-4b42-9890-fdb10acf5f00",
        "cursor": {
          "ref": "3a1dab23-85cf-4ea5-b651-d0dbbba30e37",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0e7bc889-1e96-41e7-96e3-e6de1731a339"
        },
        "item": {
          "id": "aa172b00-5e9f-4b42-9890-fdb10acf5f00",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1f9e2784-7dd9-4fd0-b6cc-acee4b6b98bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "26993afe-3aa0-420c-9b73-f3281258f496",
        "cursor": {
          "ref": "c4135988-02ee-4134-af3b-2487bd7f1b5d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "880e0f7f-4868-4335-a890-acd28ce76287"
        },
        "item": {
          "id": "26993afe-3aa0-420c-9b73-f3281258f496",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "63be1454-aab2-4439-ba98-1531234b16ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1162,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "81f12643-9157-4b54-9884-cde19b5e1700",
        "cursor": {
          "ref": "0dea453e-26a5-460e-9055-2294a4eda775",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "aa62af87-06f3-4483-a38f-617a96d82ec1"
        },
        "item": {
          "id": "81f12643-9157-4b54-9884-cde19b5e1700",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c47d04da-041f-4bdf-b4e5-f5afc2417c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2864b2a3-9522-4dd5-b37d-bed8689d3d2f",
        "cursor": {
          "ref": "73d9eb6c-b6c2-41b8-b807-9df684cca300",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2b6945aa-8cb7-4e1c-b315-7e5e0173189f"
        },
        "item": {
          "id": "2864b2a3-9522-4dd5-b37d-bed8689d3d2f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e122f0c8-a7ef-44fc-b7ef-677af8f120cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78972d5f-9094-4f8f-af6b-a73e4a0eb288",
        "cursor": {
          "ref": "41b7a9aa-e3ca-44f0-a011-ba0b4b7cbd77",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "83ce85af-f6e1-4ee5-ba87-418a44d4f5ce"
        },
        "item": {
          "id": "78972d5f-9094-4f8f-af6b-a73e4a0eb288",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "495421c2-883e-4b2b-947a-19c8928add24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975542ce-6e09-4567-ab1a-edb6c38251de",
        "cursor": {
          "ref": "9c3eba77-34a2-442f-a949-f626e5b17df9",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b2b2ba27-4a5e-4215-b664-6692fe6772c8"
        },
        "item": {
          "id": "975542ce-6e09-4567-ab1a-edb6c38251de",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9bfea4af-e5a5-458e-a8e4-bfd81f027496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a639a8e8-2f43-4e12-9fe9-6d66bd9a1be0",
        "cursor": {
          "ref": "cf2b53cd-491a-4f1c-9a22-7fd305bad617",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d39c9f2c-8d74-4f27-a47b-53342857aec6"
        },
        "item": {
          "id": "a639a8e8-2f43-4e12-9fe9-6d66bd9a1be0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "53736fbe-08be-41b8-bcde-f42152bedb99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdb0b48-5818-47db-82cf-e73068235639",
        "cursor": {
          "ref": "53cce05a-9f2b-4a37-8c58-7990f8c6a14b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "01af500a-ae8a-4286-aa5b-8c684354294c"
        },
        "item": {
          "id": "4fdb0b48-5818-47db-82cf-e73068235639",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bb661560-510f-45ca-b090-5a23f8c412e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234c1394-42b2-4c02-96e0-66bd20daf497",
        "cursor": {
          "ref": "ed571029-cc8e-43a2-b252-e288f1110471",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "503bfb6e-5f5f-402d-8451-a10178803f5c"
        },
        "item": {
          "id": "234c1394-42b2-4c02-96e0-66bd20daf497",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "83d06f1b-7015-4228-aed6-4748056fa7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe4b9a7-bb0d-4a79-afd5-a4258877eae9",
        "cursor": {
          "ref": "31866322-d7de-499e-bc46-e0e03185608a",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "73c0f3ab-4a1c-4033-8894-60d968ccaa5e"
        },
        "item": {
          "id": "3fe4b9a7-bb0d-4a79-afd5-a4258877eae9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9189af49-c870-4530-9d0c-937cc57b1fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c214e9d-a94a-45b2-bfdd-e08b5ad6c9cb",
        "cursor": {
          "ref": "06184cb5-f56f-460f-b39d-c9346921efbb",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "917b822f-34fc-464d-af59-8be4cd59d804"
        },
        "item": {
          "id": "4c214e9d-a94a-45b2-bfdd-e08b5ad6c9cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "250919c6-ecdd-4e0f-8207-0c8323f2dae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94f43d7-8c33-4770-951f-a108c6277897",
        "cursor": {
          "ref": "3525f009-bf41-43a4-800a-a94218a3ef2c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e02ba95e-aea6-47b6-8bcc-84405a1807ef"
        },
        "item": {
          "id": "a94f43d7-8c33-4770-951f-a108c6277897",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9ba69480-2f76-483b-b615-07a803be5c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565954eb-0bb5-49b5-bb4a-a32446930300",
        "cursor": {
          "ref": "bc0b09cd-4e9e-497d-88e2-f424eb193bb6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2d911f54-2e05-46f7-a9e1-9c0eaa7fd995"
        },
        "item": {
          "id": "565954eb-0bb5-49b5-bb4a-a32446930300",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "990f8b5e-5f31-40e1-8539-a01f844e22a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e925c2c9-6dd8-42f7-ba12-f6f2f0f22947",
        "cursor": {
          "ref": "ece5455a-0350-4cf2-9325-340c2830bbaa",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2924c63d-0b25-48b3-85bf-9c5e59ba92e1"
        },
        "item": {
          "id": "e925c2c9-6dd8-42f7-ba12-f6f2f0f22947",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c490e15d-acb1-44ee-b373-e412831fc6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3463b548-d465-4937-99af-2e39a456978b",
        "cursor": {
          "ref": "1582eb52-9742-4337-8d10-e8ec967f1ca2",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1d99db7e-8d55-45ec-98d4-a25844a8662e"
        },
        "item": {
          "id": "3463b548-d465-4937-99af-2e39a456978b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4d85b242-cd2d-48f0-b015-3ce2af015adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11f6d01-52b5-43ab-b2d4-f88fbe9e7006",
        "cursor": {
          "ref": "0936ea53-713a-46b8-a20a-d576e0d3d968",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1c9e7dcd-e8a4-4ac9-87b1-481f75f07e07"
        },
        "item": {
          "id": "d11f6d01-52b5-43ab-b2d4-f88fbe9e7006",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "91fb0b7b-8b68-4fa1-9715-bb167d46d74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425da09b-473b-4cfb-9836-201d3f58559c",
        "cursor": {
          "ref": "f759c73a-2a29-4f0c-b361-3975616a5953",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "7d00fe29-645f-4f58-8a63-d039d6322d43"
        },
        "item": {
          "id": "425da09b-473b-4cfb-9836-201d3f58559c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "32dd3146-6faf-447a-9af7-3a28bea95244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18494314-48c3-498e-b28b-e32b0334a4a6",
        "cursor": {
          "ref": "c6659ef0-a09a-42d3-a763-359e7d312fc5",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "00c14f9b-622d-46b2-be13-30367ab97553"
        },
        "item": {
          "id": "18494314-48c3-498e-b28b-e32b0334a4a6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "86ccacfe-fd33-4623-997c-a67c33f33c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b755f6-82f8-4a58-814b-cb032006992c",
        "cursor": {
          "ref": "b64773cd-3b80-4814-b4e7-95431378ed68",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "da90cff7-8847-44ad-aa90-5b46343ca142"
        },
        "item": {
          "id": "e0b755f6-82f8-4a58-814b-cb032006992c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b6a6f73e-9a54-496b-a8c0-d633c0c661ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1e8eab-2e24-46fb-8cc5-8a83c585847b",
        "cursor": {
          "ref": "73eb01d8-4500-409f-97b5-30f689c22956",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "efe1a3ef-dc61-4c91-a9ea-c13566f89f5d"
        },
        "item": {
          "id": "bc1e8eab-2e24-46fb-8cc5-8a83c585847b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "33d5de06-1ca1-42a2-ae49-85ed1f65cb40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df66de63-8231-46bd-95ce-b148725847f1",
        "cursor": {
          "ref": "bcf8c194-db49-4ee8-84e2-31155738576b",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f5eb3ea9-e59a-4f0e-bbce-6226f6130c54"
        },
        "item": {
          "id": "df66de63-8231-46bd-95ce-b148725847f1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8b44acbf-bd41-494b-9eb5-633ead0eee77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a710011e-eba7-4119-b15d-76ad8530c6e9",
        "cursor": {
          "ref": "d562d588-a050-4b9f-b181-8a60bd70de3e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b2518c94-1ad6-4c4c-9ef2-ae6c4b0ab0e2"
        },
        "item": {
          "id": "a710011e-eba7-4119-b15d-76ad8530c6e9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d3f2645d-5a9d-4988-8098-02676453692d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8f94c4-71db-4762-ab61-f30ff25efe83",
        "cursor": {
          "ref": "5fd94671-5f3d-40be-9304-2867363ba095",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c4510293-a0a9-4e6e-9efd-586a8f5618ab"
        },
        "item": {
          "id": "3e8f94c4-71db-4762-ab61-f30ff25efe83",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9779797b-d698-4e06-a03c-b9e830462193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff0dfec-93ef-4975-a172-c069799eb88c",
        "cursor": {
          "ref": "c3fe1fdb-c4a7-40c0-9735-ea5b8ad08cf7",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c30d1000-187f-4bf8-922d-a35b776abc75"
        },
        "item": {
          "id": "fff0dfec-93ef-4975-a172-c069799eb88c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "06bb2e4f-a333-47a0-90e4-f38520d9356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5c7beb-03fc-4330-b791-7c763da9fa07",
        "cursor": {
          "ref": "37edb671-ca8b-424e-8452-57f6917d397c",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8df2d2f0-32c1-4f5a-9640-f3dc3fef7ced"
        },
        "item": {
          "id": "cf5c7beb-03fc-4330-b791-7c763da9fa07",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "50e2dcc3-87f3-4134-98b6-84c1b8dcd9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e649c1-28f6-4b42-a257-91c6abd4f9ae",
        "cursor": {
          "ref": "cd6482f2-2c4f-4fa6-b8ac-ffadd95fc8fa",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "51027ce7-c878-4295-9f2e-c024ad988450"
        },
        "item": {
          "id": "c9e649c1-28f6-4b42-a257-91c6abd4f9ae",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "324b7184-f1bf-498c-b0d6-6c322337a3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e3c83b-bb5e-4fb6-97a2-9a0f2060a32c",
        "cursor": {
          "ref": "3612b064-4203-499a-b534-4de28c16a1f6",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9060f475-3b4a-46c4-b505-18c0abfc7c4d"
        },
        "item": {
          "id": "97e3c83b-bb5e-4fb6-97a2-9a0f2060a32c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1841257c-0bd3-4a76-8a03-72c3ed40aa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f255031-a5e1-44bb-b2ad-0d07ec28ee61",
        "cursor": {
          "ref": "7f1c7fe9-b320-48f2-aac8-ad855beb8f1e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6574f1f8-f5b1-4baf-852a-e365324f7987"
        },
        "item": {
          "id": "4f255031-a5e1-44bb-b2ad-0d07ec28ee61",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1cbad98d-f26c-417d-952d-728b0ec12056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460fc2c8-c67f-40a6-83a1-9c6d58af4eb6",
        "cursor": {
          "ref": "3d252b5b-8f7d-4f97-a994-9cd2029c39fb",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f86c7afd-c75d-4817-b7b4-f107f2ff584b"
        },
        "item": {
          "id": "460fc2c8-c67f-40a6-83a1-9c6d58af4eb6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2953115f-3fce-469a-911a-658858ed55aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5f7e62-01ee-410a-bca4-d0e954862898",
        "cursor": {
          "ref": "6086b83b-f889-4016-8cba-7c067ae2fbae",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "473281c4-dc63-4f69-8424-69e756e43b98"
        },
        "item": {
          "id": "4d5f7e62-01ee-410a-bca4-d0e954862898",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5bd9b9e7-19be-4feb-8089-9419b1936afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ded6d31-5e79-443a-99be-b18dc0d6fb04",
        "cursor": {
          "ref": "0812d2f3-58e3-4b25-ab9d-53baba953f2d",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bea648c9-e7c9-4287-8f62-4dc8ea920fdf"
        },
        "item": {
          "id": "8ded6d31-5e79-443a-99be-b18dc0d6fb04",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8b2105ab-4c79-47b9-8b4b-2e3e770e26ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b32775-0aa0-4d50-b3ae-a1827cc8daac",
        "cursor": {
          "ref": "2ffc69f1-8d54-4285-9300-960f1f7e4c60",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d8568bc5-8fb6-49c4-b65c-6c76e64aed02"
        },
        "item": {
          "id": "64b32775-0aa0-4d50-b3ae-a1827cc8daac",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "45348dae-5907-4656-8694-8ed9a714750e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe184b1-ce74-4398-bb26-14d22a2a1624",
        "cursor": {
          "ref": "849f4633-9b21-45fc-82ba-3c28bc3f34b1",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "24d9d478-a94d-41dc-8336-f2223dd8b5be"
        },
        "item": {
          "id": "6fe184b1-ce74-4398-bb26-14d22a2a1624",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "83ea1e43-aec5-4386-a1c4-346ffe007ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0a08b2-3bc0-4d49-860c-da052d8e4cd4",
        "cursor": {
          "ref": "e6eae3f2-09fd-4b46-905d-ea81c23347e3",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "43dda7ee-66a4-4bec-b3e3-a17b4adcd57b"
        },
        "item": {
          "id": "7c0a08b2-3bc0-4d49-860c-da052d8e4cd4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "36d92212-71eb-4bdd-923f-cfda8238db74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec734ed2-3934-42a4-bd19-d1a9942d32cb",
        "cursor": {
          "ref": "6c5501cc-bc03-4761-9b0f-c8d62d08a67d",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "36e312e2-1f3d-4702-824a-37cf45105846"
        },
        "item": {
          "id": "ec734ed2-3934-42a4-bd19-d1a9942d32cb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e353f37e-fcf9-46fd-bf83-70dda6948322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3791aac7-9df6-432d-bd30-26ec6c0c45c8",
        "cursor": {
          "ref": "e0727858-c228-4d90-877a-94b3323d57f0",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "77f539d8-025f-4eca-ac75-be80ebbba361"
        },
        "item": {
          "id": "3791aac7-9df6-432d-bd30-26ec6c0c45c8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "86799442-868f-4405-8888-db3eac9a4bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848e05bf-7bee-4eeb-9c7a-eb6001818b2a",
        "cursor": {
          "ref": "5f40f498-ef10-47fb-a33e-940ff4aa775a",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "346cc9fd-75fd-4d5b-b7fc-18243ea982fc"
        },
        "item": {
          "id": "848e05bf-7bee-4eeb-9c7a-eb6001818b2a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "941b03e5-ff03-48db-b8b5-f073c7cb393c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9271608e-3eed-4620-9b19-67ef30cabe1b",
        "cursor": {
          "ref": "10962f54-0cab-420f-b4ab-e7d14fed9405",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f4fd8f03-7a2b-4fe2-ab43-3c6be00f0bd0"
        },
        "item": {
          "id": "9271608e-3eed-4620-9b19-67ef30cabe1b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e5674332-4e5a-41c1-8bb2-169142857399",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b767ad53-7844-478c-934d-1486293d5785",
        "cursor": {
          "ref": "18d9078d-5a6f-41a2-951a-9f64ae4fd1a5",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c606301a-5b3f-48e9-ae99-c13dbb7baf1e"
        },
        "item": {
          "id": "b767ad53-7844-478c-934d-1486293d5785",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e9986cbe-182c-4bc4-b2cb-c7e9c1258027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d262c67a-bbc3-4926-a20b-3413dc7bc948",
        "cursor": {
          "ref": "1909112f-a27c-4217-aa7f-d1e04312721a",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c2fa34a6-d985-4c8c-a6e6-fcdb06cb92bf"
        },
        "item": {
          "id": "d262c67a-bbc3-4926-a20b-3413dc7bc948",
          "name": "credentials_verify"
        },
        "response": {
          "id": "51d24be6-359b-49c3-b82a-d0b069f93b27",
          "status": "OK",
          "code": 200,
          "responseTime": 1087,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "253fdad5-c6d2-4c02-a8f9-d81109e9a7ee",
        "cursor": {
          "ref": "0a8c118c-5fd0-4ce0-980e-305b0603daf9",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "39329735-31da-476d-8f7b-06dbd36725d2"
        },
        "item": {
          "id": "253fdad5-c6d2-4c02-a8f9-d81109e9a7ee",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "037037e3-7cf6-4964-a6ed-704dde151301",
          "status": "OK",
          "code": 200,
          "responseTime": 1156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b650c3a7-b049-4746-88f1-2fc4545af239",
        "cursor": {
          "ref": "c44eff9a-4092-40e5-98ae-bbbb76570ece",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d6913273-71ce-4a98-ab75-f785ea6bac1f"
        },
        "item": {
          "id": "b650c3a7-b049-4746-88f1-2fc4545af239",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "008e1179-3598-43fa-9ebd-f043b1ca4972",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b650c3a7-b049-4746-88f1-2fc4545af239",
        "cursor": {
          "ref": "c44eff9a-4092-40e5-98ae-bbbb76570ece",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d6913273-71ce-4a98-ab75-f785ea6bac1f"
        },
        "item": {
          "id": "b650c3a7-b049-4746-88f1-2fc4545af239",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "008e1179-3598-43fa-9ebd-f043b1ca4972",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea22485-eac7-48a9-a5ac-2a9187a86941",
        "cursor": {
          "ref": "14eee145-18c9-4a82-95a0-0bd586b64463",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8a0b6b9d-7cd7-406e-a95a-fa347d7f6f13"
        },
        "item": {
          "id": "5ea22485-eac7-48a9-a5ac-2a9187a86941",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ffceebe4-1f11-42e9-b433-7928f25a30c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fad7fe-b16d-4044-9117-ad0fd9499f1d",
        "cursor": {
          "ref": "4be325f5-1ab9-458e-8a7d-8526da2e0639",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f8150e1d-4ee4-4465-a82b-96fddd4adc09"
        },
        "item": {
          "id": "e5fad7fe-b16d-4044-9117-ad0fd9499f1d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d9934d9c-9c02-4e2e-a3db-431cfb7c8874",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}