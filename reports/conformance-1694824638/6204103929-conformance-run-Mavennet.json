{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e23ab57c-9440-41d2-b487-d9231d9d81d2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2feda721-9e15-4b8c-a8b6-b14dbdb408f1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c514ba9c-b3c0-4bde-a420-4eafaf87a9ee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2fc93c75-0000-422b-b3b2-b72bacded03a"
                }
              }
            ]
          },
          {
            "id": "eb5a35c6-d233-41cf-bc64-4234ac59cfe9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "667369aa-1591-4865-ae1d-63efa70bd18e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cd205c7d-845d-41e2-b003-71b70ff5e85f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "145411be-6bf6-45d1-81c8-aa3cc7fcb855",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f77db044-cddf-459f-8a11-78a2c309350a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23a8b984-f998-4a33-b5b2-d3da3900b5a9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d22aa54-83d4-4d7a-88ac-39fa25a9764d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b017373-b5d6-421e-bede-87fc58ce54f7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11ffa815-922f-47b6-8c32-4229902ae9cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bae5cd8e-a813-434e-b244-51ba50fb27a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ea279ea-6e46-4d54-8623-b9a94664bf01",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3df15160-5a53-4e1f-ae4b-686a1119f111"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c181d66-7faa-4747-a701-9bf571dd0bad",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "45c1764f-5f4a-4452-8b83-e583f2a4a8b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb970a2b-8af3-4c06-933c-450f37d511a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4eaf6ba5-95ce-4f61-9a13-7894170f7f5f"
            }
          }
        ]
      },
      {
        "id": "4e01358f-bfb0-4bbd-8cee-e046cf1ed1d9",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3b30d2c5-45f9-4c1a-bdd9-78576e3eb065",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd599dc5-8221-4ed8-af62-4c9f085754d5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "357de21c-54a0-47bd-b976-a477b02a5beb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fedaf5-a9a8-46cd-a4de-d17cdf19c153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99f38d04-812a-4894-8e95-6b70125a7619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524c2c5b-b9a9-44be-8fa7-fab79a3bb133",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b16d5b-f9e8-4c47-aaba-96f39cc6af39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fea2564a-ac8f-4909-bd17-1ff737c7049f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a704c7-fa7f-43d1-bbe8-762ed55f20bb",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5239ca33-4e5e-40d1-a887-e2c0fd662a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91c1c55b-b001-4c37-aa9f-69380cae4fd6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bd734b98-41d0-4eb7-b6f6-0872e07a8c8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b34b8c8-cea9-4e2d-98f8-1ffa8b79e295",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46967bb6-d176-46ac-967b-c5478d686a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "569163fa-29e1-49db-a47e-458d38435340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624e0986-6a2d-450a-942d-5c026d5e083f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90a58e9-8ba2-4da6-a0c5-630bc3dbb7ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3c15ea25-0eb8-41af-8245-50c5600497f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f3f0d38-c1cb-42c5-acd2-46f729c23498",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a96f9322-4041-4e28-a4b6-055cbee9c053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7ed81e13-604d-4951-9d4b-68fb41d17b47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c286ce2-c92d-4e7f-8a17-5bf3ea7f9ad7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d4073c68-90b7-4060-8b6c-8e689cc962c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4f0e495-9026-4cef-a113-4918d3dcf21e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0636c569-222d-4748-b910-5ccb183176ed"
            }
          }
        ]
      },
      {
        "id": "ae2b6b28-8ff8-494d-b4f8-5060f5eb65c3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "21d56ecf-a0d0-4a9a-a665-0129479690fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b07ecf57-0e16-47ca-8d7b-927660fc78b9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "51fb57c4-5ffd-4998-a2bb-413e387d4644",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ddf3fe-5efd-4bec-8fc7-9d630e02e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee0ae92-0796-417e-913a-8c471457f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dbcb93-9b5f-4794-80fc-9ecfa0505401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42c09a1c-0834-4e72-a852-fcff52759bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fed5cf-ce6c-4735-b2a3-1db6a939dc43",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1e76d5-36a0-4d65-8af2-31a2c7099220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599d01f7-bfa3-4432-a733-8c8bcb5fdfc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97fa1f6-5c84-430d-89b0-ef4830a14a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6c5a620-5834-4097-9022-269a3c71327c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78ba13d-de67-4e0d-8143-f1326bf84bd3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee488ab0-e9ed-48a7-b533-f6d40070da31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197606f3-6c5f-46c6-8256-abed9195c175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01798a84-e51e-4207-bd43-6811e52515c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f89fee66-abe4-40a1-9ba3-589dca27c71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a325e9de-24a1-42e8-aff3-1286e633a655",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b5a7c-e7d8-45e7-be2e-9a5f9eb7c875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce61d060-8b65-421f-9a72-d0c28ff58cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a28aa45-87a9-48d2-9b91-6e868ad426da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beac70a9-a3a2-4a95-ba2e-fe1ecbd7b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec92310-4288-4d2f-bfe5-0ede7a016ec7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8e4057-77ce-4a94-a1db-52c9927dfdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508fabd6-5778-4708-b452-641ab2fcad85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d083846-0657-49f5-bc61-30ed5c3f15d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3247300-248e-40cd-a3f2-e9c41edd4d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e21e0b4-d542-4b6b-9397-5835bb343936",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f69f76-4829-4134-bf9d-5df620028836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489fdd7a-73bc-42b5-9f9e-52604db2eff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7d562b-6b07-42aa-8303-e379950bebca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5063621-60f2-4296-a9fa-0874c44eb8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40a0efa-5e7e-4f18-87a7-53147b3a0585",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "876b8ad3-0525-452f-b03d-6b3c3ee9e823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beae57d7-5dcb-4502-94cb-9f1aa488ee23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f03cb1-5b6d-4c73-9d5d-812f4ab3886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b78ae45a-d4b8-4d3c-b1ed-e2ec1c6e2223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed64a0e-c67f-49f3-8dfe-5d8e50c8db7e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a80ac62-4b48-4783-ae5e-4a93a72563b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9973d837-ed20-472d-80d2-7bc9654a0d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecffc78-abb5-491e-b684-20ce00b4a83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3c0bd58-88d4-465e-85d5-aa35630744a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9731e728-b6d1-4fd4-bd6e-d36eee994466",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e532cc-e045-4023-a647-a4c8c7e0d6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf107dc0-585e-4117-a2ab-9f47920b8079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632677a8-db4e-4a8b-99be-662a9f8511c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39f8fd2d-6720-4d56-8a97-71be052c42a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc9f5fa-5d1b-4dcb-a4c8-b27a9124060b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f76cba-a921-4ca5-a557-faa8212ad020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bcc124-fb94-468b-98cc-97e5e7030a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443cbd9d-f5f7-4a17-a003-52ea32a1062b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3028396b-6d3c-49f7-88ac-8fcd78bbdbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358fc327-efe1-4c8b-bc93-3672231f5cea",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26f0235-999e-4de7-aef0-7f5322c8841e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9531f5af-b007-41b4-8246-124cbc39c6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0a0673-988c-47c2-b47e-4f9f54cb8a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "758c3de9-8530-4f93-8e86-667ef93ab2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d41eda-355b-4b01-a822-eb7f7cd9a1b1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2542149-fcd2-4f8f-8ba4-6a2198f3cac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea1c071-ea49-411f-a276-db92e7c1454f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16eb68e5-7c6c-464e-b38d-99fe7dce97ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27f467e1-9d65-4efa-b426-2b2f2b2253ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddff527-ee46-4e0e-82f7-6bf14812f84c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48e5656-2a13-449e-828e-44b2fc500d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2c5446-b844-40c2-a8d5-d1def28f407c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f8336a-61f3-44a6-ad53-10d2dd952a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8932c71-c79e-4ba0-b623-186d860471d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2620e0-0323-4072-8b9f-48f4bcbb3c67",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0e739c-90d3-4aab-b31a-26bf6888f7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e4908-3981-4ccf-b30d-912a500c8ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f823f3-e315-4659-97de-b412e1495d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "993927c6-8c4e-4df4-a198-6c2fd605d73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2423b1f-a39e-41cf-a65a-1b2b9362abf9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790bc08d-5c20-4f3e-87df-ac0bd5aaff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cb8037-7c81-4886-afb4-2bd52244e723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd5709b-460f-4492-b152-ac3ec2251f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dabbd63-dfbb-4da9-b4a2-4c1e15b9c500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63903f25-2f50-4edd-909b-b7211d2de238",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0418e4-3c1f-4475-81c0-340ae7be4b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d0ac5c-9fd9-41cb-8dd2-b3eccf496772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4e6291-4bf3-49f4-a588-593f3ca07ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dec1752e-25ce-4349-a0de-6a72484d1ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb743adb-ca0e-4c1b-9379-d4fb9b18e629",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9486692-2a9d-4664-9326-204e7db0db3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fa305a-8aaf-4047-aa76-46ce103d788f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a900a3-4c07-460d-9619-0370889b722e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca208a46-b506-493f-b10d-ee4909c7f242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9817e1d4-0e77-40ce-a01e-650e5c29e503",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188fb94c-28a6-49e2-b310-c705f25abeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0fd276-9d55-4dfd-abc2-8b343f2af96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0ffaf2-257f-43c8-a775-fb7c18ff5332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e258edba-e3dc-4437-a207-520d99c1acc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dbf18e-c726-450d-b4b8-162f393a73a8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ed71c6-b893-4919-84f0-ad71e799a98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f13e3982-4295-462c-9d00-6f6b6c09830e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70ccbe0-9a4d-4e57-9216-6e0f77dd1eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "497e9bc7-fbf4-465c-9cc8-939bb4c103cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a23ad12-99bd-411b-bd18-8ad6ac32d345",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7682cc6b-0355-4797-a323-98e0767fba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d7c033-1f03-4e2b-9c31-122bea584d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d696de85-cd4c-4414-bd30-4591dd1d12e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c978329b-b095-41a3-b17d-fd60e08999be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d50edd-34b5-4806-ac0f-7da8a602422d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e3807f-7629-4d50-85e7-75a6ba3d1c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f13c44-b59e-4e72-834f-d9bf0072e249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70948c4d-fafb-4c8f-8dab-38030252a1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5742809b-1563-4933-9877-ccd714edcda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0001d0-8ead-4fd5-a93b-12ec9fdb911f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3be350-7e09-4480-be92-8e4f6f42c63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ee6528-aeca-4839-9cff-3a8070d88d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c35be4-f26f-4e96-b2ac-61e6091e5111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4cbf8a6-51ab-48cd-bf49-4c79c357bec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372cd00d-8a58-4f45-8a28-abaf4da2af2d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08899766-6913-4535-a32d-5cb478df4d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ecb3ed-5d5d-4025-8c0c-4c5654fe05bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b29dae-bc3f-4072-bd62-8449e71a0306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "318501dc-bb79-43dc-a0c9-6d2b4c7b1b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df588b3-bb41-48a5-bd81-289e47a9fff7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beedb3c-98b1-4a9c-91db-bcd1f80754a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771e3da0-83dd-40a2-92be-0f5b69b344b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4303dd7-002f-4f38-b6ee-dd2db84f9823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a818049-a622-47c8-abaf-29bf22ae8f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ae0818-fcef-43cc-9af6-c169119bb7dc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b7e540-f1f3-4db5-a14f-a82695ce85df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea34617-ea01-4058-aa77-a0be0d42c753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4f675b-8462-4270-8404-bfe2d6fb2e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1142397-a6a0-4496-8ecf-47c20623cca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253fde5b-8246-4394-ac75-b45b4d03dc8e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdd16ba-c374-45a2-8774-a706964b3076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8898800b-8afe-4560-aab4-24c5f123e8f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39a0bbf-8570-473e-a9c9-026320cd82e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac75a2a0-745e-47f3-902a-5d0f1d56e4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c73c96e-c555-431f-b4ea-ca72bfaecbcf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6996e8ed-722c-435b-9e89-5571ef36a262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf5349d2-5edb-4c41-9eac-be66ac84e9f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f3f062-8534-42b8-aab3-e7145257ec53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eaa6e98-8ece-4b54-adda-92a8d810aaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bee1b3c-5d38-4203-959d-b9070520b49d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d8e990-548a-4a40-97b6-7d35047a4af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be237c6c-5674-42dd-9b13-78ec467c44a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5f3735-b455-49de-b16b-95815bf9ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19048d22-0d6d-42eb-9b19-b257e0eec049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f09e706-9312-40b1-8db4-c5e0e707237d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f651be1d-e42b-4bcd-8167-dc2401afc45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaab1285-5d7f-4673-9d90-b802bd429768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5778ba2-1037-40cf-9207-cc0061a3ef50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdea6c5-4790-449e-84c8-de19b2a68be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3545c1aa-a3d0-48e2-b336-d2c2d67025f5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ec4d66-1c3b-4fe0-b647-287d96755546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782395e9-fc42-42e3-a6ca-10954778aa79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011f2518-43c8-419d-82de-04e10cc3c6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "54ea4388-1c55-4e56-b4a6-1a9cf4f9447b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee773bd-0a96-4809-ab0f-fc850efa9965",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c5599a-7bee-4294-93a1-c3edc65882ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e51cd9d-0bf5-4f48-8395-ff916716bd3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12afb0f7-511a-4331-8bd2-9962313eaba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28131fd4-ba30-467d-b264-339557cf79df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120cdeb4-9532-4238-864e-f91924a1c5b9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a933815-6c4e-4fee-86ad-e911df86b03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7915e688-6dd8-49c9-be13-69ba3c2a5dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aa79a6-2402-4c9f-8bb3-5553763f64ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4bccfb-c96c-488b-b986-db91788b3488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9c7130-0c9d-4e7e-a23e-40787b4b9840",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0141dfd-f7c3-4cf5-b65f-c0319c000cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ffb92d-2ac1-4eca-ab40-a0211151edf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff341b06-24d5-4b3e-8049-b13b80c3ed1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "763e3509-cfd4-42fd-aef3-38992f4459e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fed20e-1e3a-435e-a07d-2f0e0a844047",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008c5f6d-6708-484a-849d-4cbc892a892b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4839fb04-6e2a-4701-b420-7f354769d4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0708de08-32c6-48e3-8b12-017fb34be36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b225f120-1bdd-45b8-804c-be4fa5b87d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ad8de8-cff8-40e3-933c-382462b5826a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7edb8c-5917-441f-9ad8-8927de1155b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0972ca-dcbc-4964-ae3e-3c77dd21d448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601577a3-8e81-4641-aa8d-f40f822c6a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "059ebaf7-2f1d-42df-afda-73d1ed4ae7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ba9101-ada9-4041-abac-89e7f20095b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f986939-9cf1-4723-8647-72faeda9f42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab278364-42b0-4ac8-b61c-824005ac6437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222fa8d2-ae2e-413d-8929-942286db8649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf02661-05fe-425e-bda4-336daa4e802a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca34cf92-a434-47d3-bb1a-a5b9fcce2992",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99e8348-e8ce-46bb-9d33-f7f3cc97ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458495a2-16cf-455a-bb1d-3b47e93bd68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7307425-d752-477a-9f9d-88b0bac08ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "261d2046-05e6-4d2d-ac89-5327a3306ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d0ae35-eb6d-4136-9edc-18646113afa1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c6a1e0-a33e-46b7-a2ae-3d9e5d30b4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ed9e28-cad1-41bd-884f-93f8da39ab55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58709037-e78c-4da3-8823-57d46a33a386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6fa5e8-ae6c-49a0-bf41-969f0517b501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f98a67-8dbe-4ab7-8cf6-a64f3ea7e08f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78961b87-29e6-4dc4-b053-cd88d6fc5c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953a95a1-46a0-4712-aa0a-c37dd7d767a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677af320-22c1-4256-bf7f-c121c0333f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7879e59f-ed21-4b3e-ad70-93defc640a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396342e9-09f5-4fd6-98b2-8c994c3aa3ce",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30812342-331a-4c28-a608-40131f7a8d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62125232-7186-4b25-a4bc-cc8426468d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e0b243-f891-4d2d-9606-0e716c39b7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "38aaee18-bcc3-465e-a248-b27dcd012eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75293449-e3c6-4dd7-999d-23ef4ee0f626",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e373f50-3ca8-4730-844f-e36f22192e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf583c3-4bda-4670-b594-47ff5753a7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25d57ce-b593-4f4d-a50e-374b3848c638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "05fb0489-cf58-4e60-bd20-bbb135894b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5230593-9cf8-46fb-a06c-4767a5ab73d2",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decd3736-608f-41e9-b8cf-c8cef55f254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025745d6-5226-470c-9584-a0ddc7c4227b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece2863c-f7e9-43da-92e3-5c669a5e97b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "89e539c7-1ba8-45f8-8f23-8bb27e652ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976b90f5-d8c5-4008-91ca-1b70d9121d64",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2119a7f-0dc0-4993-afdf-37b9c2671628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5496563-6eba-4815-bf95-4d7f33eed751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f3abd9-5a22-48dd-92a5-5540449bf86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc70f70-8438-4721-8e8f-9d625656a070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632c000a-3e5d-44ec-a7da-d602fa31ef95",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94820ba4-cf0b-4b4f-908d-be1dff9dc9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53fc383-2a28-4915-a56e-97b1f9b91d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d7be05-8d36-4be1-b763-9afaf8baf0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e718b9f-105e-457c-8871-f2fde0761418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68eb76ac-0293-4180-b6af-a85567ab1944",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cb9f37-c0a0-42ff-9895-5019423bb46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db87bac-3221-4644-b971-68b3cf6c50f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca07fd68-bbeb-4dab-9a4c-9ca328d51316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac08e25-cb82-42ed-acbf-69f80fc9888c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751caefe-db51-475a-ba8c-d8fb1049f5d4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062e7e0f-00b2-4467-b77f-04bee3d05037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c4f92d-961c-40b1-ad61-1b1eedead951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d6ed34-ea71-4fc9-9245-6be81b42eb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "994da3b7-bf1b-434d-80e6-995ece1899c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88f6e1d-fc00-4e2e-b272-c0bfdc4fe3c1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f1a9ab-2377-47d5-9438-d09d9c736456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70a8d5e-6319-49b4-bc62-b447228d478e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51fb651-d120-4356-b97b-821b71e1c5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3f898d-8421-4711-8d04-645e4f87ea00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8d5d2f-aa35-476b-8d07-41decd33e8d9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307465a-3fe3-440b-a163-f36672611377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1a2962-48a7-4a89-aee1-724971d07e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7516185d-d2c6-4afd-b9ab-6ad1c3c52603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5807421-14c8-444f-b0ae-b1210d94f03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81cfdbb-e704-462d-83ac-302e4e8c5359",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490be102-e0dd-48a1-b608-15dc224b9fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66510c3-bca7-4ed0-b150-c3cd2f85e696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdb6940-6ce6-4f70-ae16-bf551978275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a77bd6ff-c07f-4bc6-870c-b3fac6bf038a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca6d625-548d-495e-aa76-a1c82b12a586",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7ee370-9108-464e-a58f-b5598a6edb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d0c96e-fe95-4843-a8fd-9eac20d09ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfac1f1a-7541-4bb6-9296-a2fbf24dbf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef6fc32-9b1f-4160-8266-ff98505cb67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e940fb0-3d89-475f-b166-972462a829ae",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914ec905-a13c-4f5c-b833-04d5be54a492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99971848-3e02-4b12-a7cf-1b8053a1e94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da32772-e057-4b94-9ea5-6c5a8264f3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2caa6503-0e03-4814-8098-ad1528bd0ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a0dc69-1988-435b-b4b6-1b2b6e78078d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e7fbb1-88b2-490d-963a-5507c98c71e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bfa94b-79b5-4ae0-9c77-834de9015974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c87b98-66e2-494e-8568-d80451d7ec7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3677808a-9947-41e0-bb36-4d60300bd1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94627d60-1af1-4d9f-8098-745aa8f2e15d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7baae1ff-a630-43a2-8f08-114311c7db80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7a204f-1c10-4b18-8ce3-b0d72785c2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86907bd9-2051-4754-b4cb-c32266621251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb3e771-b5c5-486f-a173-74b6d6ca2fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e424867-3106-4965-919b-62173e6c62c5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3be470-97f4-424c-aeab-649a8de7ec5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa993afc-42c9-4bea-ba5e-0a1b82242e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbce42a6-d010-41b4-8d78-ee01a51c2389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3a56f7-8098-4be7-b0cb-8d8f3a268b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d096d554-b0a0-489e-ac45-69947dfe1534",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cb7a7c-268b-41d3-9529-f58544019449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d120d1e7-2843-4c84-ba73-9a309ae666e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51e0019-7f3e-4bd0-856a-b08515377449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74112f4c-7e5d-4779-b087-ec114797ed14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39438865-67e6-4e8e-99a0-3b21c1ea07db",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f91ae0c-e7c2-452c-801c-ed60bb62296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdb18e5-9b67-4111-92eb-ad5cdd05f79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6600c31-1767-41c3-a5b0-a63ec8595520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fd311d32-e9ca-412c-9f09-85639e4af084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d08519-666d-43b4-8bd0-3153e5a103d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1813847c-28bc-46e1-a16d-2783e8802325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64266f2e-ae31-4388-bcd6-ab935694511b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dfa6ff-0d6a-4963-ba7b-fd67a19abec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cab07798-3b8a-48bd-a648-c352e3fa4095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257167ae-e2f1-4d66-9058-4b2121c59309",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4201c5-ec0e-41cb-af98-7f3e78269a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6f7357-07d8-471f-86d6-537a35467814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530f69c9-39cb-4b11-9fb0-780914cc4d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "50b5e998-71d0-449a-b226-9e87e427b5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38db6bd4-c5de-4089-8bfd-e51d756eb835",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b39cfce-daf4-49db-ab2b-3a06476734a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeb767f-799f-4569-bc79-743d93d6d375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be16927c-2c7c-450f-96fa-286e53bc3ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a67a606-86b9-47a1-b3f9-c3eb532ff61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d231f2-3d39-4b2d-9a81-130c78f6d362",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57875d48-fbee-49e1-86ec-82c95c5d0eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5784242-f0b7-4e81-b6fa-c47d3f340c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f78d989-419f-4f30-8743-304ef365f34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1e965b-4a2b-4c78-a7f5-8643e6220962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4eb1cd-6ddc-45f2-813b-431966fd68cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e553490e-964f-41b4-b992-d853e76bfaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625dfc2f-87b5-474b-8443-bda9f19c2914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2971e31-6186-42c2-8c2b-1dfb9f6cd1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3986361-51b7-4042-9514-c80d7aea935c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7f2393-4a37-438e-bc21-bf15f53a4070",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8705c05-bb31-40d7-a40c-c3a82a6b3352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42deaa47-9755-48aa-abf9-8c91f7e381ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312adcd4-c22d-4431-b81a-e66dbf19530b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "df4bfafd-111a-4f32-bbba-c6656135ebaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85e9eb6-dad4-4a57-bda2-547b25f960b1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6943dc68-20cc-44c9-a5a6-8d4e25cb36e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41048bf2-3afd-4c8b-bd17-f5434fa28315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a093cd-4a17-4735-a587-f227d11fdb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e36950d-27ce-470f-9a9f-fc9d66a405d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392881f2-0df1-4c8c-a030-65d7bf8abd4b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4ecce8-638f-42e0-a448-93f8b452796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52977cb4-5a0e-492e-aee5-2927cb2453db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd44ed4-c944-4e76-9cd3-09d6f0080a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfda6cd5-249d-4dfe-81f7-1490eb01baee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a9a860-ce8f-42f1-b940-ed7cbdd1cfd4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b961a6-b627-4dbe-a07b-047fbb9a9d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472b6ebb-6b51-4464-899d-2a7248d74886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d57d133-9529-4b6d-9a41-cd02973da728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3333dcbd-af00-4dcb-84f4-b365340cc9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b47159a-373a-4f76-be2d-41fc8ab8d889",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc92bae0-3e47-4bf9-955b-472e35ea41d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235eeeb6-fe66-4844-9a90-a6085ed5c997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1da649-d9e7-4c4f-b4bd-81eac42bc324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "874df84c-fe28-4ae6-a057-772c276d4b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a51971-632f-4de1-95f5-ddaf7abecfbe",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e8ed4a-b2ac-4c15-9827-7c7cdbdcd790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f22817-2067-4190-ab17-66d64c1f8dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b382669-579d-4118-ae2e-c79f9e8f310b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d0158e-1aba-47c1-a35c-0fa291d99686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edca03a7-2c73-45b1-9bd7-bcf25ddb6c13",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a720c52-9560-4b70-b968-6684240a396a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31523f1-ebf8-4a8b-9c8a-438ca76e57f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a0f05f-7ce3-4b93-8bde-c0885bd95ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1fe324-34bd-466a-8d57-973efadf7974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6992ba-4682-41f1-b613-4b09179dea53",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037b4a96-16f0-47e9-891d-fd35738c4e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8b2559-b611-4fba-ac3b-6329894e89b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50155063-1a38-40b3-8819-d05bacd39e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "455683f5-151a-489c-8c55-45f01be0d11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9aa5e1-fec9-4b14-a9f1-926e0826afb3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf29703-2f45-477e-a1b4-f6e4f9f29518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf39927a-8b29-447f-b482-cc88cb001498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5043418-a8da-4d63-a3ff-1fae0990fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78cd0f4d-4cad-417c-8b46-112ea96be257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed9ef3a-4d16-45a3-add5-a58ccf2f95bf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd968e2-7e22-4c1f-8d3e-c122c05316c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27cdfc8-50ce-436f-9abb-9366b051c682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43529543-ce1f-4a82-827b-cebb98d43d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b264d88a-ed13-49b7-8383-731b6b9ebd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa02ec2-ca81-4264-87b2-412b144927b1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff081034-42ff-4f34-af0b-1af551c0269b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23aa4b90-002d-4d84-8ff0-b3022d5ad8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9cc4ca-2d18-451c-a937-e9e4e3d7ffa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34fdf23-8959-4aa8-956a-168dd647f2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6be4ef1-3bd9-454d-b507-db3459ffe9f3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774cf72e-b801-4f8f-a77e-b3cbfe2f4833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6c5f54-4bc1-4ec2-ae9f-19664c097060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a1827b-60c8-40a9-b44e-7b87b39b95b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8a17fd-3814-489b-93e8-f806fe9bfb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79651af1-ffc0-4c73-8096-fd7b38ee9365",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13937ebf-eac5-406b-83f7-3a8b3d6bdb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0faa783-c654-4a30-964f-f0fa57a20226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb85588c-3aa6-4a07-88f9-f8cda81b66ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f5abbd1f-5b90-41dc-afb7-19359dad6b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab58a9a-b7e9-44bd-b157-ff42627ca92a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9717819-02fb-407a-81e8-bd128fec0bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5adfc8-2303-46d5-9bfd-ae70c3bff234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0ad328-9131-46dc-8033-73a5e1fe2093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41e78a6f-1a52-4759-aaaf-1bb09bbf75ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80946de-4be8-41c4-a24f-8d79969bb21e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7127c946-7035-464d-8bb5-e21ab77a8ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8cd24c-500d-48fd-bb28-8cca7bcda0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0eb709-6e2b-472c-a9de-0c0fa28f5851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c92e4d1-b9be-4c1c-ad57-1982591d745a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc2f606-2267-4c5e-a6e2-5f38daa9451b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f49874f-6259-4261-b442-e130328e4e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0481bfdd-aaa9-42f4-ab74-7a612dd55ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c6d926-03c6-4c03-b287-63b186b18fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4224d848-05ee-4294-a5c2-c5ab090d75b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7de646-1cc0-4185-b8ee-a8b25d6a8d85",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdd022b-e2ff-4368-8bf7-ce362c6fee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43cc1522-cdd6-40d7-8e2d-754f073ad1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b440807-7b76-46e4-a1b3-4b3d0b450ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf67dd4-f7a5-42ec-b36d-41f397231913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dd45a5-9c9a-4379-856a-441887d61dae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c08a86-8e37-477b-b538-00d4c31ffd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b819b126-704d-4849-99ce-98ee7b3d0cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da8cdc8-474e-4920-9640-d30e0b22336f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af2b0459-75d2-40e8-9951-f03afd368326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b3910f-5d49-42d1-b16e-cae504f4aaed",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fda4932-bd5b-41d9-9d78-45eb9a309c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9247f4f5-d7e1-4e6e-9c4d-a2f190c60f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfb70b1-dcad-4089-9c0e-8e1f1d06e27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4d164c-97db-4725-b7a4-d0f110879f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb91c613-1606-4de7-9eca-3335440d63db",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "137ab3fd-04dc-47a1-a33d-60b5b4181938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c25079a-2138-4de1-a0e5-1fad1a3059c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbda130e-dca8-4c02-9efc-3a4686709460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8701c85b-cf06-4301-b9c5-305bdbb668a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608f0f14-58ae-4880-bccf-d75eea95059a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d75cf5-6039-4bed-b72f-f5223baa1a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7af061-024f-43da-aa03-4314b61d0501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60edd98a-afe1-4b15-8653-93d3441c67de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2161b27e-fd4d-4079-8f69-57c2e4f8a44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d7e922-c33f-4bad-87f8-a79ca8cad4ca",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e4aeca-8fb6-4c82-be35-c56ef44055b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f020f60-d688-43d0-9101-35c0c4b8b701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48753555-0916-4d6a-baae-df5a50b31a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5103d684-e97a-4a9d-b48e-9a019da776a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0b2b25-ada0-4289-ba7d-214a09f97a36",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab423b2-9a8e-468b-8599-84aa2d913299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1585b8-b0c7-4e46-9854-25f2faeb3b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93df982d-a558-46f3-8e95-07f0fafd45b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38ebd905-18b7-47db-a86a-705b72aa25f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dae03c-ecf1-46a7-9de6-188cfe457be2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8ea87e-09e0-4b51-b525-2e912c9353df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8bff01-455e-4222-b275-eec26c2c7f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94637ae-eb47-49ff-a7d8-25a135f8a9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00e6b99f-94df-4fcc-80bd-fcc1044ac92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14562de4-8973-4ae7-bd9b-9ce535b505c9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6361e0f1-23cd-4bde-99be-f7a8ddd27fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5311f30f-3a15-403b-a5d1-55caac6e31a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3d4c3e-95da-4839-aeae-acaf77e97284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31e2ca10-73a2-413c-8176-43a9cf08a2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e92caf7-df9e-4f6f-b196-a770cbfba3ca",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e9cf6f-57fa-49ad-bc8b-d4cfff41da8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67d0e17-0199-4a83-bfda-4aad05dbac1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4332753-a826-4701-80c3-c92b062d6058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ae323b-140b-4903-9b8d-90b191fea0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3afed64-beb8-4932-a3ad-72ce92aea729",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba80f52d-b12b-4f1c-8e18-95133f8971ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57885b42-467e-43e0-a1b3-743d623d4f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c537fc-d168-4083-92bd-d9c5f9f45c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "036a724a-4a9a-4c68-8cd3-e7f1ae270cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a05b3a-dd5e-49f7-816c-326738c7d971",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315fcc32-725f-456f-84ae-9ebd03bce168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5bda47-3e2d-44b6-9180-af898c3fb35f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb3bd01-4053-4a6d-86d9-b643d53860eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "df97022a-4a42-4f51-a959-e005df1dc873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01db5e4-c6cf-478c-98ac-1b40203714ed",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de354520-3a8d-4977-a1d1-35ed9447bef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfd26c8-e0eb-4bb8-ba8c-04bbaa080a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd9e603-893e-4ec2-89cd-39883db3d078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aea34d2b-c59a-4842-a0b0-22d3c1283654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c04e92-a132-4df8-a010-e68141caf79a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892ff911-c62d-492a-a5cf-6dc47aebc900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fb032c-8bc3-4798-a755-ec3985a40e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d356a1-c7b4-47f9-b7f3-46969c7a4b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eda4e68-fde9-4279-9b29-bc1e913e956b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee952612-6d2b-4500-999c-ad508ade6d56",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd76825-c39a-4e9e-a836-f99be1a60735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "395bce3d-eb4e-4533-ac04-c85bdc69ccba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df293485-e802-4e00-8aa5-e7f10ba30a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3add97-fd3f-4ee8-8caa-bbc4eee287e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2f6cc20-bb83-4a6e-87e4-4e7b625faa7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c1256d4-ccfb-42bb-8e3b-27858f9f2102",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438441a9-e35f-4222-a418-415010c78323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31a45e72-8628-4110-84b0-c08c94069f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e441872-49a3-4511-b343-659894ddb7d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19098a6d-055a-486c-9131-71f304b478ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09513a8e-dc2d-4bf4-964d-3998e0ae17f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "708cf1bb-20c2-4a78-af9f-6bfc1016f471"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6bd5861-df82-40f9-b94c-ee295b7dfcf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2da1aa2-0892-4ec9-b590-2d9782f8d241"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95fdef16-f795-403b-8d32-7f5504221140",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52f8ef6d-1db0-41a4-af23-163533af1b2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "42f33de7-7cd9-48bb-a659-e0be4b86e574",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de324633-68a6-482d-a85e-c1b1e36eb7e5"
                }
              }
            ]
          },
          {
            "id": "045d6f52-895a-4b21-9b20-72d73adec883",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4bbe834a-415e-4fcd-afcd-07cd1104673a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2cd0cc1-0ad0-4e4b-89a3-a96313b0625f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e3e3e0d-a3a7-46bd-bc7a-5093deba25dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f32f5410-f77b-4cbf-be40-b7ebd1f13fb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b59c48b-5a41-4da0-b01a-85546d3972e6"
                    }
                  }
                ]
              },
              {
                "id": "3cabcc42-29ae-4693-97f2-b0917460627e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee3b641f-43ba-4460-b933-7428d8503f75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e19dc66c-0776-457c-b5d5-0aecdec17963"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb69a8b9-bbf2-4ab3-9232-b4932142b287",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8a724ab8-220c-4df7-b271-b362524232d7"
                    }
                  }
                ]
              },
              {
                "id": "61bb91c4-2df0-4385-be3a-eac2c193e913",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7c81403-013f-489a-9370-31db7ac97fb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "365277ba-7449-46d3-bbf1-2d215a4d18c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a093773-53ee-45b8-aa32-39d66d647c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57441344-60b5-461b-9255-245c1df8c0f3"
                    }
                  }
                ]
              },
              {
                "id": "cc2cdfed-3350-42b7-a2ee-2f4d47a49515",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c458a94-51e3-4fdf-855a-e42b5b81d93e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b372d592-be81-4f2e-8ca8-fdaf87574447"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "594d2639-9249-49e0-b54a-ce7d0d1f90dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "497856e0-ec59-4591-8bd3-ff53482b3f31"
                    }
                  }
                ]
              },
              {
                "id": "b3774e21-3e38-4ab6-be0d-4f7b83822a28",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "700f9275-f14f-4465-9f74-6f05a26c6a77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75a489b8-5e5e-4618-8f05-afb55987b9ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58854a6f-3013-487e-b271-47b4eeea3214",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f5072a32-e114-4d3f-8af0-98b02dda62ad"
                    }
                  }
                ]
              },
              {
                "id": "d8ab4ac7-2dda-43f5-86a2-9028ae79c418",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ad8cf41-3663-440a-bef9-87fe6d5d722a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92b21c3c-cb4f-43c3-86aa-47665226c12b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c4c4bdd-aceb-4c68-8f10-1c89d59d0e38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6e76766-0f35-4962-b8cf-e96902725f8a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de458a2a-221c-4648-9cc0-f64b9d48592f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56475a42-2786-4301-ba5e-37fd99a279b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d3ad1098-2272-4fb2-9019-5f4d898d1df8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "630ded14-1ed6-43e3-970a-b8e52c978072"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84b15f15-f7f3-4ec9-8e7b-d2703dc4153b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d4140ce3-a228-4d79-87eb-46c6a15933c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8017f2a3-8869-441f-981f-5626afe22e96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f3c5014-f104-47ff-86ff-71a5ea2c3e52"
            }
          }
        ]
      },
      {
        "id": "fe2da8ac-0278-4c63-83de-dd3f3e793eb3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cbe09125-d4bb-4f51-ba3b-153ee834c65b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6ef1e0e-1044-4423-8fe7-9d24db4cf301",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c91818e-41c3-420c-b5a0-1fa79c255636",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7578fcb4-6fd8-410f-890c-82d849840183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e237d46-902f-4751-94ad-f54e0039adb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543c6f85-6e23-4c70-ace5-3b2e3bc09c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "186dac43-7ed0-4977-93b0-11f1335e6692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07fa807-33dc-4fd0-9724-74ae3f700221",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9e4f58-bb29-4c28-8343-94f39108098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8761950-d8a9-4279-aaa1-d82b18c20a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9778b7-f76c-4259-a160-e120e631fce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e8337b-fb32-4c07-ab40-9e5d1d345096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4184eea8-c610-4d95-b001-eae947477300",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1212b014-4411-4c9e-9c55-a3e0d786035f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d80cfb-5f91-4bca-9bff-2698cd062279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e23f611-9add-476d-93b3-2d4ea63da336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b09ee976-eadb-4f88-95ee-46322ffdc9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2389a068-ec06-4c86-a19c-e2414ffb7c3a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94924de6-a19e-4158-a363-e6f7b6b2796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb71f8b-0131-436a-81f6-20990aaeb6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab0c811-1a2d-4b6b-aca6-7a1f0141048f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca8c1e4-f02d-41de-8ae8-acfa26defd5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15af2f5a-0f04-42b1-b783-9f0454a87819",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3dd2d6-8be2-4943-940f-b0e5e7631c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6637e449-f435-40d1-888b-6f617e011c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4feec29-8d6d-4e5b-b5d6-50984697fad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4853e924-4e25-45e3-a775-44ff325652e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c4a9fe-4281-4cc7-9fd2-b88c452bbbc6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93482cae-2605-45e7-a69d-97e72fdb4d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6058de47-d582-4b06-af69-6be268f4e860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3817bad9-5dc4-437d-80cb-ac12d6bc9f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5575e125-98c4-48b4-ae80-cf975431f990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9169ccc1-d764-4500-85aa-74930697e29b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2c71ca-ad8a-4a0f-842c-54e24cfc0d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffe412c-454c-48ac-a1ef-1318fb4cafea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cbdd6b-b7e3-465a-973e-aa7feb6d6113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce3243b-6344-4530-942e-43b8aacd30a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34c250c-2e75-42b0-bb55-68d6d256e295",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd08577b-ba86-4bf0-a935-2119c07ed332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1119a7ca-50a3-436d-9d63-4e2231a75c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3da2ab-48a0-4917-a909-730c2517c7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b5189b-fa45-4a60-8988-152c129fc842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d97d6-82e1-4ebe-ba19-ef390d7ea2ef",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2929bc-fab8-4c4e-b124-3cc8ff76f432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086ee7cc-f217-4c3b-8dbe-b629928eb4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d877c4cf-f6ca-4b7d-bab6-d9b873c57a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47b442f4-b0e7-49e9-aba1-2522b03535ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2147ea-e8f3-4a6f-9d7a-b6c42cafc0de",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b961c4-13e7-447e-ac66-587e92d1ccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf869b9-d0a5-46d7-8b57-9e515a213f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4176a3a8-daed-4d12-a0b4-bb76daf517ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "614d50e6-7775-47c2-ae53-250998136c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b205031-3a68-41a3-be9e-53f3cbff6282",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a66c00-dda0-41da-9f03-5b0770b70f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9507cfc-4e10-43d9-ad6d-93b952c025a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62ad6a4-e6e2-4abb-9d7e-5b821259c1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "671a453c-0889-4497-a557-2b059185c337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49d3d02-3978-483a-af29-4e163c2f4bc3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af13176-a4a5-4dfc-a1e5-d5d96ba49008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb617a40-cb1f-481d-a806-16981d271431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000597e2-107d-4898-b64b-98b9fae3dac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d98b8fbc-03f0-4e03-8430-87f96c072d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534d3334-9528-4284-8d08-e529c4327120",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49628189-4e6d-4ccb-9233-751e8cb65150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cda887e-5300-4617-a8b5-965fb34ca8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb705a75-16b9-499c-a739-b8a321f06576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d88c10-1402-459c-8b53-7964d05d9588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bc7c9e-b564-4a1c-a082-6732e4b0fa21",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737622fe-4b94-4598-8d7e-fd676523ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5baaf5fe-4ade-4264-a5a3-55e58681d0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ae580f-a671-40b2-ae1e-612e98a20da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7117af7-4f3a-4e22-8dc1-9f089f29448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f539557-2c89-4e51-847c-e019dc633397",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fb9c8c-0a1f-4c5b-92de-bbcdceeb28fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b72d8f7-070c-456a-896e-ad4ac0d1837c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de23b061-417f-4c28-9c5f-c5cb22db8860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86129de-b325-4954-860c-bc76653216b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088ec105-bd71-49e0-bc5e-8d6b7aa01531",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb415ba3-30c9-41bc-af81-438e998feeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c06b607-1e70-4712-b366-8fbc2c18e85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce83177-f1f2-4c0d-9c5b-307c038b874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "237a5c08-0239-4fc9-aaec-21990db04b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9bde8b-3619-465b-ae82-8b031a2faf05",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239e2e82-ba27-4e40-92a0-cbe964ff43f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5dca2d0-90ef-4eed-a2fc-520593a4967c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b511357d-4ee2-4b70-b63d-f53b44c5cd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54e2a7b-69a0-4256-a23b-9ba8502ef701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4969bb8f-c53c-454e-b771-c724382f25ab",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33591ca7-41f9-4453-a664-41e408daff26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a79514a-5ae0-4bf7-a188-4717a500774d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d38238-d8c9-4c6a-83c6-13f0e6ec25d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20aed7a-7ed0-4b92-8872-c3b9bca4cd35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a42d81a-c838-4d7f-ae61-489f4eae0fc3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51d863b-c654-43db-9f65-5d8814530df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253de301-acf9-4dd1-8a9b-8b98d1df7be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797d22ce-e82d-4b1f-a8b3-af5b0bac9475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1e8b45-9f50-4c67-96ba-8fa81d3fefad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebe3681-9b0b-4382-811a-b551e91b3e00",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911794af-1a42-4cb3-9915-568b9c9ab6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5008c0d8-89a3-44e8-905c-dc31757f3611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48abbf51-93af-42ae-8ff3-f365245205cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26efa952-46b4-4cec-ab44-4a6822bd853a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2246f74e-35e0-4cc5-95fd-6dc4a50e2820",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c7e99a-cb70-4163-880f-7ec1a0a68da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6af284-5cbe-437f-b09e-b47115ec9a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387b1ca-7633-4fb8-91e9-55a60c94d211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84a8da3b-3d58-424e-ae88-e52852cf672f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c042bb71-3050-47c0-af47-2a828f50e498",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae37a0e-3d39-47e4-8dfa-34a82cb7c66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11536a6-3186-4bf7-a252-06fde6ded375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd00fd4-097f-41e2-91cd-a9edec4460b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16e5eceb-4be1-46a3-82b9-96fd81edde36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e14ce3-9993-4bc3-8886-8cfe22e4b434",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afc10b0-dd21-4b4a-83d2-4a61d6e11a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854c3201-b616-4ba1-af35-14bf17139c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973cc994-50e9-41fa-9605-fecda7c9fa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40473ea8-9aa4-4801-9eee-3439cb60b302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b584234-88bd-4dda-a2d9-47cc3fa230ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc881434-bae7-4fd7-8c01-d08fa9e4bcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce2c915-7440-4754-a682-54663f2c584b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17bad06-b7f7-47cc-bf79-a0a12345c7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0757bbb2-e67a-4a79-8be9-dea456a96a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0b4e05-d58b-4426-aacb-b41766769e3b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69bd096-214d-485d-ad3f-d314588932ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7354fbc-e681-4603-bfee-9b5d77e30072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b93c5ca-2ef6-45a7-98d9-8e32f337fcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0740aba8-c5c9-40e3-b0c7-4d65b554491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6663a590-a790-4687-8d36-2311fbd82334",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ab4443-830d-45e7-abb1-8b68c8c24619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1160a92e-efc8-477c-8e89-693ff399b111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db023ca6-3807-4e8e-afae-85f3630613a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27e6cc08-1ea2-4030-a277-a7e4e22af0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8fcae5-3a01-4465-b057-a969c2717edc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd64e65-c8d7-4c58-8ee1-6c1e90c050cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336f50fc-570e-402b-9f35-69f262215a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faaa1bb2-c7d8-49be-b7ab-de2624000bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c5fca2-b76a-4a89-8cd3-181efea7f770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaec9a95-7c14-42d8-b479-fb71fcbd30aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a599cbb-ff4f-4ae5-9e78-99d257deaefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810a5b92-638b-4cfc-ab5c-dfbe948ebe88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6149a1a3-0790-42b5-a887-ed11e328a5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07b8897-e10a-44e8-bd9d-d02bc84e58f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f8b450-ea0d-4610-808d-79b481d28816",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe29182-4de6-4994-9ff3-12b7e8eff37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fd24f4-8637-49d7-a4ef-d6d0c93ba1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab335782-d607-41be-a50c-28f00e43a44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a14c9503-d133-4ab2-bf86-0f3d9889ce43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f652bd84-332b-48fb-ba3a-3dfe8f079efb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0449940-22f9-481d-920c-6e2b9e7d404f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69af288-c25c-4b48-9890-36a823be842f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e332e107-6e57-4ced-bee4-e3889fb3e4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d927d79-b33c-4fec-8d29-e98680a4dac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9e1023-e16a-4933-b484-26c06842da05",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb982b7e-e97f-482d-abf2-10e6cd049507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1c8607-904f-431a-862d-de9687d4cbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f00c70a-2182-4a16-b587-f473d77def8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c86747c-8890-49b6-a467-c749b98ceb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a217c2-fca8-410c-820a-e2b3f4de5bf3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdccf08-b9f3-4b39-ba1b-273c252ae9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a9cf14-73f2-406d-915d-6a50213f8d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cc8d8d-f24d-4950-b716-aed42c98b6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dec121b-2de4-4864-a56f-9738e036f8b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6baf5f7-5102-4a72-aa12-3b505c7a67a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2dd75cb-71af-429e-9813-cbae6558efa3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4567fd-7e47-45b9-984d-019c6e91eac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "45dda2a6-aeac-4f23-9185-6fe192d8c64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a20895-3131-4025-b061-658e2224fb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "410dec14-f21e-4dc5-8548-d1dd79bc514e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "679cd1a0-43ee-4d10-8a5e-8db7d8a7bf31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c318d39d-26f4-474a-8544-1feea4d5d660"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22e7fca4-909b-413d-8682-d940e5ee9010",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77400e99-3123-4a9c-8313-c4b3143a9345"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edfa82bf-71c9-4745-a068-f49cf94debdb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e05415d7-62f4-4da0-a8b8-7dc51cdbad97"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78ddc3e8-7666-41ba-ab5c-0f207827142c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2603e2d-bfcc-438b-ac96-9b9099303098"
            }
          }
        ]
      },
      {
        "id": "7c5c9815-89e2-4d20-874b-e267cc1dea0d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "00db2f0a-93a0-4ed0-a208-6e2dc85f2ffb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e5cb17d-5dce-487c-8546-050257282ed5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b07b5803-fd43-4175-b99c-cd914fdccd0d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45760eb7-4ebc-4be6-944a-f1cdf2bf97d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baea2ce1-42f5-4cde-bb37-56e663320eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ab73cd-fd24-47c8-83e8-78211d7be0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9391d8-65eb-44a3-998c-462487b1f832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa402552-dc9c-4967-af1e-52faf9896cf3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359e3b2d-e1ec-4b97-a761-136a737a7dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ebc143-7516-4b17-b3f2-02293c09b3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcdb359-4e15-401c-9c7b-b34a9d67ba9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41e898cc-9378-4636-b962-6c114e099d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c26ed9-e115-40cc-8bdb-a877cdc47cc2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d85457a-020d-4462-a09b-739dc595a9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c502088-86ab-47ca-86ad-c1e9b3d28cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c915b6-4eeb-485e-88cf-9c6151f67c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95b314c6-663b-4ff0-b341-3b2b21034094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0493f9-7efd-49f8-bb01-c8fbdfccabc4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675da381-cd41-4c1c-acd7-93a70f57bf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3878f3e6-ea81-465d-b2f6-81925f2bf133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d47ada-ec0c-4497-a503-8a4e137a2b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6202620-8e10-4676-8059-aa1d9457ca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541fe2a8-146c-404b-9f1e-377b70ad9aa7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d47cf9-f532-483a-ae44-046d4a08ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116d6a4a-0fb0-4da9-8708-2057b5ba7687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f7f4c4-316d-4d90-92ef-9ae7e0630dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0319a89c-dbec-4789-a8c8-7fa5fe6a2bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a9e6cb-6dbc-4122-851a-1de2530e952c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2330b0d1-84be-4712-9133-37486b767475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5558561-f4a9-4009-bd8c-aba45e114236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876f497c-2264-492a-8eb8-2dc1afa5feb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d08b95cf-b92f-4b3e-99fc-b9a37b975acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6543be9-2be0-4858-ab6e-5e576936da81",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fa8d01-2eb1-453e-a27c-0af7fcac06b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4434b90d-9ffc-4ec6-8db1-907ddc5e23ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078353c3-d88b-436d-956d-af20cc9f65b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb4a953-12da-4ba8-8f7f-9282241a21cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2fb798-4d24-4e63-90ed-db89da3a9c4e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22d360c-caf4-4a44-9b25-f36d75afd97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54c2d03-d8bd-4a91-a332-1dd3c28ca563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ff08f1-8d54-443f-83d0-c724fdfa1fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dabc3a2d-964e-40a9-aa6a-5099cce059b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e8aa61-d45a-4001-8127-de045560d710",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b2467e-b93f-4e93-8049-605327116b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799171d1-a91c-46c3-b877-5b1e89cdf412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099b58d8-ea5c-4e05-865b-4435cb2fe7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61efcd10-46f8-48d0-b7a8-f99fea6dd37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3276256d-ae0b-4e91-9fb8-7c03926899d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183f4d8c-3e9a-40a4-a925-41f3c84c8178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1ee244-d46f-4df0-b043-e18fdb46afc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0059abd7-7b13-44a3-80c0-2b86ff8d8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c27fbd75-e912-4a6e-8f63-103d9dccafd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d495770-3ba0-431a-8e00-883c64e20625",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c83d14-83f3-486c-97f0-50cdac596300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "123a3267-d4b6-4be2-888f-b48649f5e238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dd4269-0b05-4f0a-8716-d13c4e7a1955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb11344-bbc2-4b44-9eb3-362a83446556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cee776-8e38-4961-bfb2-395c709f6968",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fe5f33-1318-4f4c-8616-979a3bab9106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743671f3-ec31-45ba-8f0f-8c7464df446e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a84271-469b-4e8e-8de6-2d049e252030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0df12686-88fd-42c2-a8c6-484a21e9cd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309af1c0-9888-4a8c-9073-46e05c1e0342",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fab9641-8006-42a2-9818-fdfa05429721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ec28ae-5a27-4738-8e06-81da0713eb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edbc6eb-2b8f-4675-9b85-03ef21874744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69972e0a-245f-4a03-8f8c-54dd69dbc56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f4b140-4eaf-443e-8d4c-69ea0d3b21be",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a697d6ec-5385-43bb-864d-7f6ca2e738c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af0860a-04ee-496e-a1f9-943659a1ff19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fc7bab-9c06-4c4b-b5a7-1b4c70bb7b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d6eccf-b170-4f23-ab6a-44d21902cd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a785c7-c7a4-4fca-965d-15739f6e8935",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068b3033-c4e2-49b8-b059-2d8ec908c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51255695-eb3b-41a6-af44-5c78a1c16b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7719c649-acd3-4461-a48f-cfa8c962a943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95ea91a-01af-4407-be68-d2e5ba5bb54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e3460e-c3c1-404b-8859-43feb0e3623d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00928f79-86a0-4e64-8741-7211f1b8aca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8e2a5d1-6649-4839-90de-be1e93ed7f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11d401f-63fe-4904-ac44-4b28aff7f066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ab2c0b-4bdf-4076-a965-07d97301cb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05e8133-a625-47b5-8157-5086dccad601",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b802443-b87f-40ae-b8d3-ffeceec1fea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3965685d-505f-4815-aa50-5a18de12ed46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1628993-b2b0-4d65-9ef0-a9b525c6210b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4167fdd-b9a9-45c0-86f0-41ebe9d54a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fc4b7a-861a-4fe7-8da3-292e5d9246b4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021325d5-17f0-4bcd-90c5-d50f42196d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac495f0-1f00-4c0e-8112-36cd4ee33d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d128b1-8a92-49ec-9d6c-8341656e6383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60cdab4e-3860-4c6e-ae6b-bfadee1ff979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f583da-bf8f-476e-b2c0-5c3329e3e773",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c72914-de35-4548-ab7b-4151719f2726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4525b91-5248-4328-a4c4-f50679a411ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b09865-acdb-4244-8f15-7505d575b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9ca079-9e4a-471c-b03a-1b5d5f24da8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94e809f-a4ee-47fd-a894-c234ee2a8f8b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613dba2b-1b0c-4a05-bd15-aa3a1c4bf39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87647ab5-5a51-4ced-af1c-57935f841752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c155eeb-7b92-49bb-bae2-cf594bbdd58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d10ab0c6-41f9-4b6a-a45f-5e628336d370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38d8951-4d70-443c-bae5-b49fcbb6f19b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e5786a-ab4f-4b30-bc7b-777e12af7b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd3f559-6d0a-41a1-aeb2-0dd18ebf9789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c741374b-e812-4db0-b142-9818855bac3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1ce716-2e60-4e08-808d-d33fc41e46a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fbb13b-c50b-4432-868f-297076a42d7c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8221d2f-871e-456a-89fe-65fa03899b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9cc1747-bfec-45a8-b4bb-2a937a1218fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f1a37f-ce05-424d-a98f-f148465220c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bae3f36-c561-415c-ba1a-3465936f681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1633061b-b541-4662-92c8-1c3affd6f3b5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5dd3f1c-fe0d-4880-aa8d-a660f09c0213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f033509-ac10-4641-bb42-cb80d47d7bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d688a48-2b04-4bc1-841b-91470294f16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcdb95c0-e7d9-48f0-a421-68e3246eb5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbca4e4-60bf-4215-84e6-2534e1843941",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a8d13d-d264-47e2-9fcf-5158d67d23a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce2f600-43ea-42c0-ac00-595be5390a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b9d855-8993-4809-ad44-918112e02ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b98980a0-ff91-4c32-9553-80f41916cede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c5c944-c990-4eb6-a83f-940678b62ac2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31901f27-9100-45ec-97c4-ca52726fbc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d919045-8251-4efa-a0b5-9fbd073fdecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4a2681-3309-421c-86a0-42ab23bb6495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc36716-0dde-45ac-b77e-1d41903ec462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8179453-7f19-479d-bc36-cba29c11ea2f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bea76ea-c53b-4a90-97b4-8841405cdec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb1b2c5-12ca-4eaf-963c-3d9880a77e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa40421-5fba-4123-80e5-482b801b4d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "520c494b-eab3-497f-ac89-4da6cfaff3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950e02d1-3f14-4f7f-a0b2-59d2e59d8dc1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "281fef5e-5b00-479d-867e-228e2ccbd761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054354d7-b3b3-430a-92d2-7bfdc6c449f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d3417-779e-489c-aa78-8f79860c141b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d858d90-da37-4849-aeff-c99a71fd7e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46be7c53-dd02-4d89-a6bc-87781ead001b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25dd3c10-29b2-4101-ab4e-383761ba6256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8ce08c-f0bb-407c-8711-49e115900581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24b776b-323d-4cbb-b4ce-9d0b8ccbd475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8355d9bc-fea3-4b9f-9f37-074573edf7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423618dd-037a-4cfe-be9c-1e03237e6166",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe70d2c-bf52-411b-aa30-08714e72b698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d419f4d-2b3f-4070-8d1b-073c3e7af263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f7282e-f611-425a-820a-11db613db847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "658af3f6-323d-4bef-886b-b005782e986f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa37332-f201-420e-a3c6-72e4e09f03ec",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce43f513-d903-45af-8d6e-31e1044a1c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf3b960-caef-4fb7-8fe8-827e5b559d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460b5a91-8e81-4684-81c2-9747ead07aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4dbe65e-af35-4de4-a65b-63188784fb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999102e9-cc49-4f80-9fff-ac7a5da2e141",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bba6c43-e4a3-4aaf-8486-dbdf2d07a848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c0cd44-fcfe-4b8b-af7d-d962c2a7c8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91fa945-60d9-48e2-b8d8-fe72a7890049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a721683d-68cf-469b-90de-2d680d6d58d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dc6cd1-2406-4e20-b44e-78642697eb8d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77227d4e-8298-4bcc-b622-d3432ca724c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5967ba96-ae3a-4065-b2fb-2a1215eacd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade3f000-8b14-4e3e-b948-2611248c0b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35f2bed0-c772-4846-90b2-91116336d134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9c1fb1-348c-4000-b5fb-a582a358e060",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d72f271-eeae-4d78-9259-b53160e5c5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc77c21-ebe6-4199-87ab-e4863e00d809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed0b4a4-0b9f-4511-a01d-4bef4da3f87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2206ecc0-2cbc-4c93-b368-6c57f0d1a719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa3b45a-5082-4830-9fd4-92c752eb0d11",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a656d994-0593-4a08-b562-4b02236c603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9993cd98-63d0-4979-8142-26e860390f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1128a54d-3316-4102-9d51-ed21b504c871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef6bdc4-f2be-4c37-86f8-96cec8fedefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d799bd8-3086-4ff9-a5be-3f95e69a79e0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4bac8d-1815-4ff5-9372-054707ae7995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe0977d-e9da-4e02-9d98-88bb290c7f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6273de69-9d79-4a7b-9661-bf4d32c64037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2af557-6f05-4c4a-8da8-46bd79153433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aadfa6b-e040-4526-846c-ace5ee58b021",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e41c537-bf16-46e8-926e-501fc0064d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28dcc4c1-07aa-4b1b-9cf3-5007d0124dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a827a9b8-3015-4fbd-944d-cd29c8e0dfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a14a286-b069-44e1-a073-e2db982e1b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9dd615-d44a-4b30-93b7-c44842ece0be",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1188c9-6f32-4bd4-8af3-260ab7df327d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18998b24-a791-4613-a2b4-db8577d0d46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23152be-a8d0-4892-9e99-cfea1dc7a0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39e23ee-bc59-41ff-92c1-9bd9e4845ba3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8477fc3-3c96-478c-8537-d301e77be6ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "097ee0fd-76bd-49da-9b6a-7f5c1276318d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b272af9c-3aa1-4cc7-a95f-b26c074fe133",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "12902b05-8345-4269-904b-17bd6c67f3fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37cad98-3d60-4f0c-91e0-c038912596b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7784cfe-61ae-4539-a1fd-4eb786cd831d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb3a8c6e-08ce-4bb2-a8f4-dc3eb89b7dd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6468ef91-29f1-42ec-81d9-07a28ee3c0ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "756f6f97-cbbc-4e58-bf9a-6e1ec14038a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bdfe0ec-cdce-4fec-aea3-e08579692db6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba3d839e-f271-4ec9-9911-ca531b9a9d26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bdc4faf-9602-4ec5-86ee-734a835bdcc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c7b2988-8ea0-4beb-95fe-a9e229b3a630",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dae2686b-f048-4463-811b-67b6562833f2"
            }
          }
        ]
      },
      {
        "id": "e0caa284-1b9a-42f7-96a8-20dea6d11f12",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ed3b4fac-d071-4236-a536-dbac5530aa58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa68a7bb-0061-47ab-9603-f3629310cfc8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c673e7a4-f32b-4e25-bbdf-e4e46b61ee96",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7626328-de48-46fe-a17d-92756ce3bfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01078ff3-a4b9-40b0-ac39-256f67f997a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74086703-f5a8-45c8-a325-441ff17cc9df",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddcaefa-f094-47df-bbfc-b4b1eab31f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ab088a-1173-454f-bb78-f606fb544d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a08495-5b8d-40bb-a55b-2a20d5985b1e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9458a5d4-1f90-4ac8-b365-890e6741636e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcaee524-fd9d-4d78-91ff-bc116135f509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b01b529-bcc4-43c9-9ae7-d8a40bc7516f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcda104-6218-47cf-9c75-a7461b443f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4cb467f-bf90-4a8e-b468-e94811d320e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891bfffd-dd45-4572-b1f0-8902927e4b74",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7fba7d-687a-4e1b-a307-9c7bf91d2173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d8973c-6546-452f-bc8f-803dbb16bc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2875513f-c2f5-46d7-962f-764d5495842c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5286601c-a2ce-4400-9f82-238aa89e9fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6138a6-8f68-4902-88f4-a9b03585c23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a05889-9cad-427c-ae63-fdcc8b4e8636",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006cd644-9138-4c4b-a3d5-c097fcdff9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ec9689-395d-43e0-9269-d6ef3d21b853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9aacea-304f-4ab6-aafa-a4a3545fea77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58519e5-75fd-4c95-b0fd-1cf1bf5a68f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1933f9-c676-4d37-ab45-01f35c4279b4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb149ea9-2ff5-4d90-b9b8-829e2bc6600a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1c6223-52d0-4f8b-b659-91bb68bcddea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13d14a3-b185-4d33-a9bc-df4810027a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee1c70c-b0d0-44c5-81bf-3b7bfee7b018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d7b0d9-b21a-4c25-a037-4eb726539a47",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3380caca-65c9-4d66-aeb9-acb02fac9599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c13e3c-7b22-430f-96f5-6457ba1d694f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd04425-91c5-4d0b-8ca8-b47dffd00f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cc9139-b9f0-4842-a89d-e8f4b3422c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcc09fb-9014-479c-9a54-e3ab42d25866",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f04b60-bdd8-4cb7-bb00-a90805fa7463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7c17db-aeee-4c4d-80e1-2a2a0906c8f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9474e1-9874-4932-ac8d-e23eefec17f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c8a2c2-d9e6-4ce8-937d-72ce1fe7640c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80638590-68c3-4bc4-ae65-d8abdfedabc7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5be4586-7440-4764-8a08-1b6f9bb6f83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df41cc86-4886-49a1-9c15-70035e72ef2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf92d7d-9d4b-4390-8fdf-16714222f8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2201fe60-458d-4632-85b0-c672d283e906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398ff8c5-cb0f-4799-8ff9-c5e5de811bb2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd00b12-bef7-46e9-96c8-33c675e303b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9175f02-c9ae-4988-8a43-c0d26f992698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f32b67-225b-405a-8058-9b4042ea5faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b14503-0910-47b8-a3c4-10a9b9ef6286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d08c57b-6b48-4511-b988-336eb2122339",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b7377d-ea93-4127-9742-1e07624e215c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0479921-355d-49f6-86d1-6f3927d06392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a5bd34-963a-47e7-8227-07d24d406e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b997cf1e-737f-404f-a740-a8c0b1241812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2ada67-aeaf-4598-bf7d-de0586be652e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf960cf4-7a68-4a15-b9e7-ff1e27e204c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e90198-5dde-494e-baca-07a95892345e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8538f9d1-bdaa-4a3a-8368-b0d59452cdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e96a78-46ed-4904-80a5-be046205f428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa54718-13b0-4d04-a1ef-9213d253de4c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc5e36-c73e-4789-b28d-9291934528ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941a5184-1766-4a42-adff-bfe752cff276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3ea28b-ad34-4053-b35d-cf146ea63499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a294d1-a2fd-4c45-b780-cc3e73e3a4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69a57c9-798f-4b0d-ad06-0eca57681d68",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b839771d-d6a1-4ad7-bfcb-f7533111ce35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20cc97f7-b6b7-4876-ab93-e4d682d90030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c556ff16-e116-43f4-8544-cf239a9d5e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd67bc81-08d7-4600-a68e-f538d332d748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fcf3fd-ab41-4e78-9ddd-df506258ce05",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1154b4-1fe3-4be3-b433-239daef6bd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443b711a-46e0-463c-9a1d-b63e2f661662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c620c2-92c2-4edc-b778-53c31830fece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46919ff-45d1-4a4e-b272-0da3548ce877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a165b1a-6c8d-45ce-b99c-aa9bb0ab1522",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2d49c4-0fff-45bd-931b-fab97d70e534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b9bc67-5012-45db-a438-4e00768a1d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f3e1e2-7eca-4c6d-81e7-91a69be1452d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152d0604-d2b1-43a8-aa93-c93dae4d0e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f811dc-1296-4da9-8fe8-d7eb873c2af2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc505f82-970d-4a7e-bf16-770866a73474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfd53ff-8394-4654-88a9-b3292e78d261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf9b9fe-38b2-437b-b489-4f62a7ca8c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8511200c-1709-4356-9b66-d2edc30c00a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea698449-a8c0-42ac-8ba8-856ef5b05009",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7e6017-e1b5-48bc-a6d4-f4cc082f1a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7490f1-9fdc-4c4b-bb87-ece18e40c7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a93cdf6-388e-4455-9bc5-b2c7f8650752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b149730-98cd-4593-828a-e29ee57091b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afa822b-6549-4709-9ac2-6745bef2a188",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acce0084-175b-4cc5-91e4-ac106caa0474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b2b88f-6c7c-44fc-a9a8-689fc0dbf0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a92d3f-de5b-4c62-b650-348a502cab6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7c25476-e9b3-4b47-93e2-e08f794ebfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af5a5df-cd72-4635-a77e-f7471671aa66",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961ac0d0-9dea-4d8a-9a71-46c4cf3c3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865ad4a9-965d-4215-add8-b12bec6299d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda1ff89-ca65-4ea7-90a9-39291af470e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137bae33-dac3-4bcc-afea-88a683e25b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe05f6a-8aec-46c2-9eab-662c06c44a3c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6d2ccf-c363-4c0f-9aea-5d63837a6a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5637b4-0737-4ba9-ab50-f5c69ef6e9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231e35a6-92fd-4fe1-8f9b-a567f44cbc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfae465-2ac4-460c-8afe-7b6bba9e9513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbd883b-f21f-42e7-ad03-13b1b2d5bc45",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ece01dc-cc5b-42ac-b609-00d6bb13e5c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f1bae7-ea84-4824-b320-f657de5082e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b73602-c6ad-43c0-90c1-748891c0b321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7de658-a3b8-4fbe-b708-8a5f67c479c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe7ee57-22a9-431c-a3c2-aef361d80c65",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b4c7ea-eed8-468a-b44f-db7ac725ec0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23da17b5-3826-44c1-827e-72c2c8b86c90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f842cb4-270c-440c-9475-2ac73bcb308f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438708cc-03b9-4f5d-b22f-3ba27235e216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4652c42-54b7-45fa-bbc0-89d650354def",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168b1922-a9cb-4914-b543-e3afed1e20f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be0075c-0040-42bd-a1fc-3f743699c466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2251af94-a494-4626-a417-83de8c355cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433bdfbc-3609-468b-8054-8251fd11894e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b94725-33f8-4b00-901c-fd4999434da3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03d804b-0ded-451c-9074-99f57bf41d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16b220c6-22f6-4ce2-ad0b-75f30f114ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aadd7f0-214f-4cd0-a5b3-50fb569bd49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e8e446-8cf5-4464-8dce-86f5012b1ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926f7a73-912d-4412-be24-d71fda395379",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92fb944-abca-45a7-8848-800e8ce100b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175a281c-c2e3-4bcf-a80c-ae12c7ba2c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5e00a7-c399-4809-bfa5-f24160f7af34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8874e9-e5ee-4449-aaf9-465886b58b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d380d6-11e2-4438-9f62-3bad901ddf6f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e1982d-e404-4550-9e29-cacebcf73f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3447d14d-0f28-4e56-87b1-b99d4fcf05d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff87f24-6e80-48f7-a6fb-22a8038cc78b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4de920d4-0d68-4412-a2db-2efe2f58e308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5acb50-c288-4d67-92e1-cf1158c3feb9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f5ada9-2662-440e-bda7-975b8d184816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "655b5be4-4ffa-4fc3-8cea-b9242b207d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee54e69-1292-4a9f-89ce-43464dcaf69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed0c9af-8c06-4168-ae23-14e460906c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf3ec67-ee9f-4cba-b72a-6e812c439d26",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fba41d1-5727-43d6-925e-1d55c85b0454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59439429-9c84-4f0c-81d8-f076a73de573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5551b27f-1720-4596-840f-952f76cbc832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08ceb02-f501-4d49-9840-e0e0bf9bdc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2807010-e8e0-4202-a032-c4ee8969db9e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c85c8d-4c0e-4d5a-8c61-17e2084c4e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9a714d-3802-4678-98e2-ca452e87a635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff3dda8-9c11-4470-a536-0c01af350b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0508c68-fcf6-4d8b-ad2d-bafc3f7250b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80737918-8c13-473d-a8d8-ab705318cf3d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8caace-948c-4c78-8319-85336c7fc690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90128fe8-66ed-44fa-b31f-91846bb4bd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b11c61-e15e-43ae-a4d3-3cc598f9e3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83724764-1e8e-4f53-ab28-603d3554740f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e237d078-7cdb-4f6a-a084-e7eb5b7b81a5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298ec456-7d1f-451a-b6a1-591baf32ea91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525fb888-98a4-4d07-aada-e140dda70845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e20600-7eb9-417e-a0f0-7d330da9f0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc44353-3372-43b2-acaa-604c1151fd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b375762b-6b77-4f9a-8c6c-7a2ba7bcc78d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114a5e8c-6a20-48fd-9e23-0bc382bf04e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9ed256-5007-4105-88ba-9136894cec77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f512a1b-ccbd-43b9-90dd-acdc47ca185a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a122bb29-27a2-4014-bcbe-bb5bec445415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816654eb-47ff-40ce-a235-4b9de61bbd05",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3a2f45-a52c-4da7-8d13-4a4b628a41f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a7e4da-f199-4073-b68a-d7b7152a81e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d29cd9-29e1-4baa-9470-140e33d17c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca7861c-4a41-428a-86f0-7e391d7e995e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4224be-cfa9-40ec-99ef-defa7b5e91e4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c56218-cacb-4e61-af0a-976da47428f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35460ce0-aa7b-4af1-9da4-28e9a344a280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264bb8f0-0407-407a-a46f-0c3aaa1f9fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ba5b36-4bf0-4158-a6a3-70acf07803f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66488905-fdfd-4b3f-b4b1-4bf9c849c9ce",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc42a98a-8899-47a7-b6d1-66380ec4746e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5686f8-a271-4454-9f21-18355e9f2d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a190f5-9a31-40a4-a94d-d39dbaf25f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c52e0f0-3c82-4dbc-bb7e-0c8fa8992caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e89e36-c98b-4f8e-9801-26c6aeba0466",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a751a08f-8730-403e-a0e7-93b02f567af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597a8a4a-f57c-4cee-9cd1-57d16b1f38c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd2cd64-e5fe-4326-80c3-b6589f7dfa21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdcb9a4-b674-487f-af1c-111a1db6a936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7ec465-b7cc-4972-a646-11904960ef3a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9481dc-5bdf-47f4-9496-67fa511ce22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b2edf57-6549-44db-b4ab-7968fe8ab7ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a315ec7-4f8b-4394-bb63-66d070e8648e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6352a581-68ed-47b0-86eb-0f2507c1ba90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421cd181-7678-482a-8d10-c73a8136dcc5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab884205-4a36-449a-ae7b-9663ae50f914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04878242-5e39-4e36-8d7f-706d87756615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bb949e-5e30-4f84-b4f5-9fa63ed13738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2841fe85-d6ee-4067-8c0e-a49e41d35cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4fca36-8d7e-4bd2-8191-4601fc875202",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde12df2-8382-4508-895c-d961c8bf139d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b18aba-b544-4852-b55c-354f69ff9399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b965e665-eb8a-4cf7-b7d6-b1a5467efe4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af9cdc8-cd9f-4f5f-a8b2-32eab890a181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254e3755-900c-4d49-b82f-f26861320142",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922eae20-a89e-49fe-b7c5-2c4d3e69e2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb527ea-c71b-469a-b7b0-6df12bc5ef31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5c1e69-3bd9-4964-8330-3310c57138a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5e23c2-1427-4e06-91a3-1e33f08eadb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95af51ac-0c49-4716-b39b-1637504fc535",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818d08b6-c745-45a2-acc0-30635254ea6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5168fa-4914-46d6-ae2d-d8acad41003b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea6d5b1-382d-4971-99a4-881d9ec3aef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3acd103-3c19-4801-9304-f37bca057dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614d3f83-530f-4216-902b-e89a737751f1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb32b20a-2d4f-4ca9-8742-96458c651f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4ac0e7-bda5-45da-b0f6-08611d19b624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af545c20-e8e5-4025-8def-e65568f2f1ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339eb71e-5abd-4aa3-9b4b-af9612a8b781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42cd0dd-8e35-4bff-b536-1b5e94e987bc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937366cc-2f1d-4cec-9d69-7b9f77dada05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf495c6-6a5e-4232-94be-9fed032cc4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc426a2-3781-4422-b3ee-ea00880108f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40eb355b-4f37-4965-851f-7cb9d9aa7502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f415fd7-f2a8-4bde-bd3e-c04ce467c383",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9f2e1f-0ade-4480-b4f8-b324c156393d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc2bb69-1280-44ff-8a66-0e7dec9a3b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b5d20b-5b15-4e62-b966-1dd5ee6d9e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219c270b-291d-450b-887b-3547fddf51cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779baa67-e644-460f-9e02-d9d315dc5055",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad12a0b6-60c1-44bf-9949-436d3b009681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecdae7d0-3850-40ce-a570-9f9360c46675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1f377b-6128-422d-84a0-34d5ca86ee0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b4ddbf-8073-428f-814f-81e00ff6bc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8c7d27-fa9b-4815-acff-65c078c5c178",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819c25b9-a84e-424b-8736-df7e7278927e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f5170b-7d8c-4187-a261-5d938fff3b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6597648a-7b49-4588-b354-f23fe560a2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4543461a-c7e5-4439-b656-1ed624a67e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd72da4-1dbc-48a1-a176-29201e2d01e4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05020a1c-83a7-4333-83ef-192c0a60f416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5460c0fe-525b-44da-83de-c31e0afc2f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c345ac7-31e4-4967-b794-2703df4d2314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8622f0ab-9bfd-4b2c-b0a7-e5fc0d16a5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e836be9d-6f46-4f4e-b62c-ffa7edcad3eb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b13cf7c-f3c8-4720-b97e-16092211091c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db07f34d-63e2-4a8d-9588-c83452b6a394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "154c0b60-ddc6-4afa-995d-53580d3f10ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374cd0d0-8c79-4ea7-b027-266ef5bb09d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b17577-4335-4579-bb2a-c29b8a584ab7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0bdffd-08a5-487b-80f8-cd42d5b12848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1402ffd5-1ec0-4868-a2d1-cee73d436c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98632a77-0cfc-456d-823a-8604bb93d7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e60967-4ba7-48f4-aab5-f66ed57c3abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50bbff56-7fe5-4b85-8348-5000c29698c6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237379d2-32cf-4816-840b-e2f2cab2b725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b9b336-8edb-4111-9e2f-99e28255013a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bec1dc-3714-450d-be49-07beb723e4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cce768-9162-4a8f-a68d-ef3d030e4676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f383f894-c260-4ca0-bdde-e7e56924459c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0562edcc-9d15-4e37-aa29-b32b235c2db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50966d87-3ba4-48f5-a01b-a2521d7e6d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5374f9db-ce88-4d07-b219-94bb70eaaf78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6822ceec-1b5d-4715-9220-3cf7c029cbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467e15bd-06c6-4831-a8dd-fdf0c66e4adb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7c3336-b388-4290-a526-311a093a1458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd4483c-6a7f-4bdf-a452-72f7bd079fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4baa8bd9-6ba7-48d6-a26c-8f91a4f3d619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c2752a-6bd1-46d2-8557-88cae575630a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3280a3ad-421b-4f39-b2a4-aedcf15e56dc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcfda65-8612-44a9-9add-e0e22467cc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5514473-e18c-4186-9e72-84397052d464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58e062b-5d0e-4bd1-ae60-1019092c5dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db23f3d-f317-43fb-87ca-e75c423e278b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8008486-5bfc-4534-b23f-7b36850ada0c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a90a4d-9cdd-4334-84cd-a7d0fde1af0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a3f35c-c367-4dfe-bf67-d5c6f5cc15bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60ab269-0eef-4163-ae43-71f4eab51123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc74e609-3ef4-4452-b41d-42171a1fdf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e5fb38-46aa-4fe7-8108-dd87385d7cc3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd2ad63-392c-4da5-beee-94470b22dd7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3827cf4e-af3d-4641-bba8-a411754519e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aee3406-1932-4ee5-8458-9f622d3449fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615c9559-890d-4b42-a64e-eb4045a4c146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6847ac-b214-438f-be4e-7a843f9facd2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1040c4b-b69f-4308-bcab-2f0a0b93ef2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48581154-c925-4cdb-9cfe-97d6370a6cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efca7250-ae76-47cf-b48c-91e0bee4e62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2a9878-78aa-4e05-a177-e584c11fefef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4194b7ca-f9ab-4e07-86a5-775be8ec36ce",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e2355e-2fe4-457f-b4de-27a7ae0c11b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a122b1-adbd-4932-a563-aeb8aff88f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c804acd4-ab79-4133-a3d5-664c7651b846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55649ee2-df44-45ab-a8a3-eb9830fa6e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eb8d13-f99e-4859-92be-791213a93af7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ec2f13-0926-463b-9d62-d7c193dd8010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1def99b-7b34-4e55-84da-12e369815c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d19280e-94e7-4139-a0c2-ae9ef41afa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83b92c2-b997-4916-856c-70f991d3a7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d2d8cd-1066-4fe7-bc8c-88197b5deb46",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c39c3d7-32bb-4085-9bc5-d55457fd1756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd134830-412e-4b98-9584-f6dcf8421784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dce361a-ea75-41c0-9727-934e98416bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5875ad-dd4c-44a5-9cc2-d8e13d14a933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9c125d-d18c-4a89-8b4a-f467e0c35ca3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1423e932-65dd-4104-ad5c-f68279ac50c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d97346-60da-4a1f-8b8e-e1df2e847138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6589cd5a-a1e1-4583-b5bd-6bd877f0c39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bab1a0f-7405-4b9e-a24e-59977080ae0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a60dcd3-6ebb-4a0b-9032-c42723251d7b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6710fa9f-0207-4d8e-b867-6cab355aecda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3545e90a-11b5-4286-ace3-fa4fe634711b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63be2e6-d61b-4dab-b94a-b9d373ed7c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f544a7-2dc3-4d7f-be3d-52a259cd439f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f506603-8778-4a14-a1c6-08cddcdf49ca",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a43ce7-1865-452d-b95f-3f646e6dd7bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92df7a8-9ed4-416b-b304-40380eaca14c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd507f78-ceca-44df-b959-fbb0073d668b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca21de0-1470-4d59-85d6-14a97a6d1d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358aea53-22d9-4294-9b3b-0534772bb3c0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad02f12-c5d5-4c31-849f-ac950e42a3eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e20176e4-4cf5-401f-bc33-4cdca3e65133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f613e8-4eea-46a5-9b06-58d91c1b87d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c0d358-e9ae-4f4e-a7f3-307a0e85021e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97baa72e-267b-4511-9ba4-a3e2961a73f7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18284992-2736-4960-b3e3-b76aa3b8522f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef011245-2bbc-4795-a909-d1aefcbcd741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925a13b4-1bdf-4108-bcf0-12bbf3e28843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1369baa7-09e1-4b64-b3a3-c20d9ce59d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03b1d99-4b87-4f48-845c-3bc76cde3597",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc92d1c5-18e2-4c28-a0a9-478850c63453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fe831b-ba79-4dfc-a993-7678cbc91702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d656ed1-7fbf-418b-8584-94187e9d868c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e06ebbf-3fcf-41e7-8b6e-c76c1f131dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c507b0-6caa-4aff-94b2-40fee4e0ea62",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7afc77e-35d0-4a53-995b-a8a88de0ee3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0db49bcc-eb33-4e9d-ae39-1b97b2435609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f78e6fc-76ee-47b9-9e11-bae361619ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d44af0-eee4-4826-88ff-cb37f1e69461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcee1e8c-6eff-481d-859b-e2ed977cf2e0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d902f07-37c0-4019-b10b-1e90a462db4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d457edd-d099-4e09-94b9-32428c7c69f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327ef569-1160-4302-9b41-9a2f3f116ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b4ef77-c378-4535-9ced-fc3d006d9503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced2b10-fea2-4757-a5ca-6c94f1cda5b6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c19bf4-2229-47cd-b667-62a955fa422e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cf32ae-bcd4-41fb-81a0-55f0c000e3df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8227ecf4-7281-4993-ab62-02a916438373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa325b2-7499-4d44-a14a-2c272337218f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef82ea96-4833-44ce-923d-fed92517b8dd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88894fb3-798c-41be-bb1e-2b24fe77674e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e407e869-7700-48b5-af99-b9fe7806d86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0e132b-2771-44a6-a751-e1fe9fd5322c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b5b8a0-15ec-4211-b1cc-219be476b89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecf3a4d-3031-4d12-b5fe-4219395c8d4c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02256bb2-0047-461c-86ac-b9de5541a2cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8abd6607-6cc2-42a5-9c87-8cac76a5dc86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8970e03e-ea59-43e5-a711-134adc9c08f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63f9811-6371-48ff-a1a0-c4ef36fc3f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f81221d-04de-4e0c-b087-73acaa7ac8e6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bb0175-6252-4d1f-864e-4569305b6fb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2116a702-665f-4eed-ade5-0b3dead376d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7a295-12ed-461c-8041-e3c8a31b13e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd32037b-a80e-4566-a09e-653dd2003fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6bd4f4-8def-42fb-ad05-36dc53150437",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705b5e26-52bb-44e2-a7f2-205dc3f310bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0592ceba-341f-47d3-87cc-ec14469b4a5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af10d347-cfd1-47b5-a045-a4bb196e0518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ba6afe-2553-4ae3-9392-a974dc804703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8df68c-054f-4541-a607-ad992c23dc30",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80425a0c-2c73-40b1-903c-1d9c4635421b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53f8620-a137-4fb9-a8ca-676f6eeb9887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5074b810-d610-49c2-afb7-09a8b232a10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522210e3-93b3-4ffb-8662-8d1707c8b9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9959f8-7e38-44e6-84e4-fc6765680267",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321c515a-25d6-4f50-8e25-c0dff1babdfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acfede9-c6e8-4b70-8702-54e0f419a6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d785dc2-b30e-49a4-8bda-0b4f0530b2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e199384-6c1e-44d4-8fd2-6f6420695cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b251d73-e256-4f94-b2b5-7befc8926b77",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90efb16c-6326-441d-a6c6-e2b851cb7d0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc9b1ad9-05b7-4132-8da4-48acce62c667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6663db8e-96e0-4a73-b2bd-21555a8dbda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bb61a1-c10f-4540-ae69-f2d62ce5d410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c04791-8783-44da-aa58-18053b7e6abc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a93e36-3773-43ed-a37d-9c4efe2ae82f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42988c5-10f4-4eef-9314-bc1b8c36eeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09fab76-18e5-4523-b2ae-f12d9c79118e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7656838-bc0a-4f40-95be-e4e16d50b07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b035e9-4ab0-458b-b7a2-3b65f41f32f0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64a6858-357c-4901-b551-22d8a0523465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d00157f-533f-4e15-a5bb-67623c7cd5d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485bd96b-5dca-44b5-869b-5a6ebdeae95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73d5ad4-d5fc-44de-9225-affce8f22854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077244f3-e408-4d73-b515-401b7592f081",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c43afc-b814-47e3-87ae-58052cdfcf18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32041688-4d23-4a4e-ab8b-22d557e8a88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626b0ddd-69e0-4e0f-95d0-19f530360654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a53e2c8-0c9e-4d2d-92b5-2b72b809f055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0197bd59-2b8d-442b-b289-48529ae54fad",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d71a36-5850-4293-adfe-8333a5138d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "607255b8-5fd5-4ec5-905e-b4f124a75c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d1a464-5e76-4161-b9e6-d9475f006528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3104c43-d477-4ffb-a252-6d69f3b952ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843c1876-3d99-47e4-a420-8b5ff346320a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6965aaa6-57b3-4610-8620-d79e44354207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cdb0d38-9569-46cd-8603-92f67e4c7d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8565f912-eb07-41dc-a72f-2e93b1a2acbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c1d31d-6c8e-422e-a485-da87da5d3b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbf4a84-7be4-4ebf-8a23-4f579f7f985b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7506ec-ce7f-4ac3-af75-8a2881c05797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd2860a-6078-4052-a2c5-8f9b8ae9855f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2954266-ca15-4e0f-a28b-a87a0a7db880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d73647-c3d4-46a4-9576-bbfd8fa8e764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c4afb4-2618-4db3-b3bd-3fc701d8f51e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15768934-4e63-4fa9-87e5-715a6d30dde5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5cd29ea-3faf-4d9e-81b8-06d39cf5c5d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60e8ab4-166b-451d-aed7-078e313c3b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa79fd4d-2ec9-40ed-a950-21830ca57d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03473d0-efb7-4004-9988-69117c46ed4c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0617d89d-c8e6-4fae-b9a1-94bd51502d4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9caa9fd9-5cd4-48b6-8506-96919d7cfefe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e57cc99-8d52-46eb-ab2b-989f5404e222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932d6b18-4c23-4311-b1a5-d04ffb3e2a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003200ca-a9cf-44eb-808d-857cbe37638a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7525db03-25ed-4db9-ae27-f7f373d5d08d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6396f0c-d95c-4587-90d1-300907daaf18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b973a77-ccf2-47de-bd14-f9c5c949eb9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c9eff-f1b7-4a55-bf19-4d3117562c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d431fa34-16b6-40a6-85e4-847358104f0c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4bfa7d-f151-4396-91a8-914822679178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e96924-820a-44e6-92dc-4080da7d363d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f887b040-3354-4c4f-8e74-d79fc55bb7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b066288-fab8-4d02-a5f3-beba6263b406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52f3177-311f-424a-b1e0-d85a9bd6a661",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80abc6f9-cea1-41ab-aeaa-0880e5ccb96c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0955a2-48fa-4c3c-b35d-9f2721110619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a391f9-4c72-415e-b5d6-160c806811a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e66579-ad47-4bb3-b389-7d0a0be427f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858b7ee2-d3bd-40d1-86ed-0c7843f17c70",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681c9687-cb80-4737-95c0-8c19083532bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f36996-b58b-42c8-b703-1054e430fe1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3dd8d2-a1de-4b61-9167-b12b7fedfebc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebe4f7e-ff8b-4463-9769-e3dbfc9531b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e34194-b59f-4d4f-a553-cecf25b85a9e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1ce6bb-b387-4554-8672-1efe71af48f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c97e195-d9b4-460b-96b4-b4aa234255b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a3a949-f098-4e48-a620-2f9dec0db525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fba7b8-7df3-42f9-ab4c-7f2669f809e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5303d99-695b-4423-a5a0-3c41b93f7a82",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c1b51c-9771-4640-b604-b98d07f56e26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c933785d-52bc-432f-bae1-dd9ddae36de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56b877f-0bbd-4a42-b7b4-d00b5e3725f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5effde2b-f764-4420-be7d-be6fccdc6ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed199d64-8286-4ddb-beaf-e04eeafb4f08",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bef6b6-d487-4b7f-87a4-a92bd9de1750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bc1fa4-10c9-4d76-9558-9d0528e93d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06fa14f-d0b2-4d16-a4f4-a1f5e96171f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b701447-71ac-480e-b6ac-abe040220c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea42ab2d-ce56-48f7-9e6c-5ffbf9468284",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d058f7-de7d-4164-aa24-32d85b438042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46c0602-a23e-4d6a-abbe-30a2409d5d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cc8d4f-b7f5-4b53-b209-4d0be1b0b330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44d07bc-6bd8-452c-b4e6-ecf024fc7838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64353bc-7d2a-437e-bca0-ef708fbf20bd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e02f61-15fb-409d-9e6a-85925334e80b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da73add-ec8c-432a-9f2e-3075ad06fa11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073bbd77-f1e9-4c3f-97ef-4ea6eadfc4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b691f60e-0750-4f56-b669-93867a70a58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7117ee7-c9a7-48b0-b17c-f711781dcb49",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fed020-532d-40ed-8a94-5f9c982dde3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "639a016c-082a-4228-9e9a-5fe49a298919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32665b8c-df41-4594-ab47-9e077cd4f689",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c084874c-09b0-45fc-ae5c-6cc396a330c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9e5174-0d59-4720-8ae5-fad68bca5cfe",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698e31f5-8291-4a50-be9f-415173e3cfad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b5d24f-a8a8-4a94-867c-8bbd03c2faa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c8bfee-140a-41a0-a698-931ef23aa45f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5917d077-55f7-4ace-a7b3-a7e9238910e8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4da08ec9-0195-43f3-8b56-9b56c19d6b8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c770935f-e5c6-4463-a341-e87b4d66b52f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fc8e9e3-fe58-4400-ac05-5986829f8ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fcf4515-82b1-424b-98d6-284b8f5443ef"
                    }
                  }
                ]
              },
              {
                "id": "3aa2e9d0-379e-478e-b527-10dd7af75f6b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76eef50a-08df-43dc-acf4-bac1ec4ad23e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d422863e-8683-4aa5-b76a-c75b6e34935b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bb85b6b5-400f-4911-a6b7-f7bf317a9837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996ce835-b862-4a00-912b-d851df00ddb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b710bfd-9bd0-4294-bc04-86dbae094cfd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca084fe8-a80d-4c92-a139-9f597f194870",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "196cd9d7-20b2-4cdc-8fb9-f28f121b6ccb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba316fb4-b5d6-43f1-ae57-38723f96eedd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f878283-ef91-47cf-85f8-7d2812b8b8f6"
                    }
                  }
                ]
              },
              {
                "id": "2d65d8a6-9b7a-40fc-8080-ccbe65aa8966",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "667f12a8-71df-422e-8dc1-97c2dec5d879",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b564c16-4a75-4311-bcfe-e2eb3e892e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "de4550d3-6b76-4470-9733-53ef52d2a8d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e523a2-b294-4870-a1f0-2795e3379498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c033eac-2885-4c1e-848c-c37cc6795865"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d70bdb7a-dd19-4e2c-993e-1cabbfb535ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "068053c0-1ed0-4f21-b3cb-c23e96b98ea0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc5119f7-819f-46d4-87aa-ecc659659987",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ff20975b-96a1-428c-9428-2f3937df4961"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e91296d5-5443-4e96-81b4-187e2fb7113b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33c47d1f-736b-4684-8e75-b9f4210f905e"
                    }
                  }
                ]
              },
              {
                "id": "47582e8d-68e8-4995-9114-76fc8a11fc98",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dd12c98-b0d6-4638-b42e-84c7928b58d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d1ae7a1-472b-46c8-942c-0479623be5ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8be9bfd7-ec82-4897-9afc-848c0691fe23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d613da7e-ae44-47e4-ba6f-66fb01aa0b72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61de6a63-8c93-48dd-a997-f2acb024757a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2b6f292d-064c-4fab-9d46-ea4e7ccaaa43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d758c5c-3843-4f1a-b28a-22bc9012058e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9a38a4a-361c-4a37-93e5-f31fc0df7cda"
            }
          }
        ]
      },
      {
        "id": "57d58a42-46f5-4cc0-aa1a-d51f4aad8576",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0b2cf891-f125-4888-85d7-f7b6b49bd530",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd18baf4-4ff9-415e-8652-3156a7203f39",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30f93af6-c3f7-40f7-9d65-d8eb3ffcd63d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18846607-da01-460f-8ea5-b669b662b9e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d06cab08-8b17-4fc7-99c9-95978076999f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506023bc-1f8f-48fd-93ee-40ac10fd29c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44404f5e-c57a-4795-a84b-0a5df35fc0af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd60e886-f4f2-4ca6-88c3-835899f73f72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6ddee1a-716c-4f72-b6c2-35ce11fde633"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57178036-6772-4016-95b1-72010fef38b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b21e82e-b778-484f-98a0-0d7351b120db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f37cce9-c406-453b-8d54-987bb0de40e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "75370112-0856-4bfa-b706-aeaec4d14171"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41ba4158-f2d8-4e8e-8378-78d04946adcd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83a7d3f1-f38c-4c10-8963-ed57b578fec8"
            }
          }
        ]
      },
      {
        "id": "4d1e59e8-d741-4dca-87eb-ff45a4a7503a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "99ccd7ef-7e11-4be9-a786-4346d92a2524",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8426249f-52d4-4f54-ba08-69a51e0f1005",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96f45674-f5d6-4680-97ba-f4a3277fd715",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059c1390-11a2-47e7-b505-bf067ba7062d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "676ecf1f-7de6-4338-9fe3-8430c1e3eb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aafe1c0-99c5-406c-86e0-4636e52e0d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93f53334-eb81-427b-baa9-63b1872d39c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "214c9042-75f3-4b1a-a42e-47099f04c6f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9bbd2de-51e3-4b3f-9afb-bc6908d8766f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "424f5c7d-0017-4abd-a007-e3fc961f2f45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08e5befd-b075-441b-8204-ce7b02bf8001"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "355541a1-4ed2-4e7b-88b6-1e1f7b53c18d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95f0fcad-14b6-4ec8-ade0-7e7ba253deab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db11b095-3866-4577-9a5e-7793b48e9e87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f60bf33-25b2-40ae-aa87-a7f5d4ff04ca"
            }
          }
        ]
      },
      {
        "id": "db19f678-5509-400f-a764-f0cc9744db8a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9fcf3a04-468f-4f7e-96ea-7c7739c5b43e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0799cfe0-a9d9-447b-9a70-a828fd6f3ba0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c58d066-167d-45bb-8eec-1b6c19684991",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae3c985-3884-4071-8213-fec8132d5d5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "044cae26-5a51-4260-ae0d-14db07a73c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d63cf1-c258-4d0b-8e30-86a486dd1f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdc5a8ae-af42-4378-985b-9179958c6bc6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8231568-2279-46a4-b7d3-d64f18a21840",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69bd3900-15b5-4760-873f-bdf82e7a40dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4704473-8c4f-4c8d-9aee-a667eab4d9e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20648148-1e01-4692-9a0b-de63c8e3d5b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2958c647-4f38-43ce-ab94-89d8bafe714d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "820045ef-17ef-444c-a758-6adbc8a6109a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93177dae-c8cb-4516-a9eb-3a1d8f9a3d9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67e87047-2ba4-435b-8957-afcfb0ef6bb7"
            }
          }
        ]
      },
      {
        "id": "06a2da73-5ad0-4eed-a1f3-cb83abc9eb09",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24a45dc1-8fdf-4595-9e3c-d4fcf6e6e013",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d49163b-ba71-4ba4-ba39-77918ddcfa2f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bb9a53ad-a487-4439-b246-d55392c439d6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6adaebbb-32b4-4c22-a4f1-96a3077eaab5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "730452f8-3b88-4c7e-b0be-f0c023da7374",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 123.3556338028169,
      "responseMin": 9,
      "responseMax": 2057,
      "responseSd": 320.7502378391852,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694824309422,
      "completed": 1694824356270
    },
    "executions": [
      {
        "id": "2feda721-9e15-4b8c-a8b6-b14dbdb408f1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c820da1c-6006-4cd8-b065-b5f8cccff7ae",
          "httpRequestId": "1f7e2d29-97fd-4ee6-b0b4-00e4e3ec7846"
        },
        "item": {
          "id": "2feda721-9e15-4b8c-a8b6-b14dbdb408f1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d24ba0d5-12d1-41fd-be1d-8cc15fea3f4c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "eb5a35c6-d233-41cf-bc64-4234ac59cfe9",
        "cursor": {
          "ref": "aaf80f3b-a1d8-4300-bd55-edf22b2e3817",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ca750d44-17b0-4b7d-a1dd-3c4c26c640de"
        },
        "item": {
          "id": "eb5a35c6-d233-41cf-bc64-4234ac59cfe9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8d8310e0-3cc7-4dea-9a93-0ef251e52da5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "23a8b984-f998-4a33-b5b2-d3da3900b5a9",
        "cursor": {
          "ref": "1080cc5a-70ae-44ed-a857-095c0f7daea8",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f700542a-7e94-4163-b4bd-c0a7cf1e4c62"
        },
        "item": {
          "id": "23a8b984-f998-4a33-b5b2-d3da3900b5a9",
          "name": "did_json"
        },
        "response": {
          "id": "05e69805-3239-45e8-9c01-9497e58c7e2a",
          "status": "OK",
          "code": 200,
          "responseTime": 435,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357de21c-54a0-47bd-b976-a477b02a5beb",
        "cursor": {
          "ref": "9f557169-82e5-445d-bcbb-12d5c4e6f3f7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5724e94a-786e-465e-a8be-1d048bb8adac"
        },
        "item": {
          "id": "357de21c-54a0-47bd-b976-a477b02a5beb",
          "name": "did:invalid"
        },
        "response": {
          "id": "d66d7a1d-3e36-4823-b4a2-167ba96ae557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357de21c-54a0-47bd-b976-a477b02a5beb",
        "cursor": {
          "ref": "9f557169-82e5-445d-bcbb-12d5c4e6f3f7",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5724e94a-786e-465e-a8be-1d048bb8adac"
        },
        "item": {
          "id": "357de21c-54a0-47bd-b976-a477b02a5beb",
          "name": "did:invalid"
        },
        "response": {
          "id": "d66d7a1d-3e36-4823-b4a2-167ba96ae557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524c2c5b-b9a9-44be-8fa7-fab79a3bb133",
        "cursor": {
          "ref": "5bd94b34-a16f-450e-a28b-28f31a06d088",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ad3e2fd7-c7f4-41a5-b1c3-0bf55c611e34"
        },
        "item": {
          "id": "524c2c5b-b9a9-44be-8fa7-fab79a3bb133",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6112c763-1a0e-4327-9f13-2301c23ed273",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a704c7-fa7f-43d1-bbe8-762ed55f20bb",
        "cursor": {
          "ref": "4c0a98a6-d6da-4d4c-9260-0bbc22ed7798",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0404b1b5-7672-49d5-ac4f-d6bd351ab98a"
        },
        "item": {
          "id": "25a704c7-fa7f-43d1-bbe8-762ed55f20bb",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8685ed00-9fdb-48b2-85aa-210b3b0c3a9a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b34b8c8-cea9-4e2d-98f8-1ffa8b79e295",
        "cursor": {
          "ref": "93db83c1-2e86-4d77-9631-e2b40935a698",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28cf2606-5a63-4070-b64c-c0d101cd9a80"
        },
        "item": {
          "id": "1b34b8c8-cea9-4e2d-98f8-1ffa8b79e295",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ae2954f3-fd9f-4805-bbbb-ef32b44c6ff6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3f0d38-c1cb-42c5-acd2-46f729c23498",
        "cursor": {
          "ref": "0b22b9e0-2c1a-4325-ad1d-c364d7d1f1a8",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4a346008-f10e-40a8-a9cb-5c0655113f6b"
        },
        "item": {
          "id": "1f3f0d38-c1cb-42c5-acd2-46f729c23498",
          "name": "identifiers"
        },
        "response": {
          "id": "89bef262-7a83-4c50-a386-12f4c59dc397",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fb57c4-5ffd-4998-a2bb-413e387d4644",
        "cursor": {
          "ref": "3d14364d-7b76-41be-97c0-c039b1e426fe",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "371c633f-9b46-49c0-94f0-4a2e7dc265dd"
        },
        "item": {
          "id": "51fb57c4-5ffd-4998-a2bb-413e387d4644",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "335c43f3-6843-4968-8e61-c0e71dc52f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fed5cf-ce6c-4735-b2a3-1db6a939dc43",
        "cursor": {
          "ref": "043d9de3-3c5a-48e7-a65e-38136bf5c929",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b5f6c43c-7afd-4f23-ab1d-e5aa9b30b775"
        },
        "item": {
          "id": "e6fed5cf-ce6c-4735-b2a3-1db6a939dc43",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "01e3af54-8160-439b-962f-8acf00f99c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78ba13d-de67-4e0d-8143-f1326bf84bd3",
        "cursor": {
          "ref": "1ceb98fc-064f-4c86-972b-1f6c333e54fd",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bcfd1911-4b8d-4a8e-88e7-39a8e45b3e3d"
        },
        "item": {
          "id": "d78ba13d-de67-4e0d-8143-f1326bf84bd3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "746a9fe7-2c20-4dd4-a37b-30fe90ec9780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a325e9de-24a1-42e8-aff3-1286e633a655",
        "cursor": {
          "ref": "dd4e3820-d177-4217-a88f-d380a1939ad8",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "319a55e9-b190-407f-a2a1-f09260448ee8"
        },
        "item": {
          "id": "a325e9de-24a1-42e8-aff3-1286e633a655",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "36dec2d8-09f6-4079-a11f-d43780a7d91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec92310-4288-4d2f-bfe5-0ede7a016ec7",
        "cursor": {
          "ref": "8f85da6b-1f77-41fa-b438-0ae2d8d233e8",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3de5c120-f52c-45dc-88fa-8d1ffc1b76c2"
        },
        "item": {
          "id": "fec92310-4288-4d2f-bfe5-0ede7a016ec7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7fd6307b-8475-4a1e-ab41-95d61c811441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e21e0b4-d542-4b6b-9397-5835bb343936",
        "cursor": {
          "ref": "3f81aacb-dd51-4f93-968c-882c849a4779",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf1606a8-c5a1-4a6e-8d79-bf455a5e4db1"
        },
        "item": {
          "id": "8e21e0b4-d542-4b6b-9397-5835bb343936",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "22b23a37-e7fd-4379-8b23-faa92db04a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40a0efa-5e7e-4f18-87a7-53147b3a0585",
        "cursor": {
          "ref": "720ff415-0c00-4553-9580-047710352046",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8832bb08-5e4d-437b-a0d2-243470162b2d"
        },
        "item": {
          "id": "e40a0efa-5e7e-4f18-87a7-53147b3a0585",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "31c5e70f-8a49-4ee0-ad92-fd57ee7b3d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed64a0e-c67f-49f3-8dfe-5d8e50c8db7e",
        "cursor": {
          "ref": "2f8c6a9e-9e52-4065-9ec0-bb847063f64a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ba21f58-cca2-4f12-b8ae-cc45bbd9f595"
        },
        "item": {
          "id": "eed64a0e-c67f-49f3-8dfe-5d8e50c8db7e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6f012b9e-2ba0-446e-996d-305dcb4b531a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9731e728-b6d1-4fd4-bd6e-d36eee994466",
        "cursor": {
          "ref": "aeee9c9b-86e6-4032-9d08-1b062231575a",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "76a3034c-31a2-46bb-b074-c87a97b68854"
        },
        "item": {
          "id": "9731e728-b6d1-4fd4-bd6e-d36eee994466",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bdeb0356-7a37-422e-af44-c363fab30787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc9f5fa-5d1b-4dcb-a4c8-b27a9124060b",
        "cursor": {
          "ref": "1d3a2899-bbe3-4a02-b7ed-5d826e08d7f3",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "64177a6e-617b-45a8-bcb4-81be8d2e52c7"
        },
        "item": {
          "id": "9cc9f5fa-5d1b-4dcb-a4c8-b27a9124060b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "200fa1f6-9901-4e40-af68-01c423682ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358fc327-efe1-4c8b-bc93-3672231f5cea",
        "cursor": {
          "ref": "e4c23c97-9b98-4a21-9bf4-6c750b9aa710",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "daf7a252-0321-4341-b1d8-314750fbc5c0"
        },
        "item": {
          "id": "358fc327-efe1-4c8b-bc93-3672231f5cea",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "851ba123-b28a-4cc5-8ea1-88b98be62b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d41eda-355b-4b01-a822-eb7f7cd9a1b1",
        "cursor": {
          "ref": "9e707512-8d3a-409e-80bd-ebd172e74f63",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "23f93f89-05ca-4cb9-8165-161b2bb1848b"
        },
        "item": {
          "id": "67d41eda-355b-4b01-a822-eb7f7cd9a1b1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "60d14c1d-ca3c-41c3-b9b7-7c0da01f4ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddff527-ee46-4e0e-82f7-6bf14812f84c",
        "cursor": {
          "ref": "aee52301-078e-4618-b7ce-26c8833f72ee",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "694ae2a3-7032-4738-b979-d358d1561130"
        },
        "item": {
          "id": "9ddff527-ee46-4e0e-82f7-6bf14812f84c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5fdc75dd-58c7-4f4e-97c9-d8e0f0554469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2620e0-0323-4072-8b9f-48f4bcbb3c67",
        "cursor": {
          "ref": "ac938261-3ff6-4e7c-bf1c-7dabf70fd930",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "81feb723-608e-47fe-9206-5b7374a8b528"
        },
        "item": {
          "id": "ca2620e0-0323-4072-8b9f-48f4bcbb3c67",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "446d4fb2-e8bb-4e04-b6cf-f3da856bdc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2423b1f-a39e-41cf-a65a-1b2b9362abf9",
        "cursor": {
          "ref": "4c8bfaea-3947-4260-a5bb-61d0f910ea92",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7480e871-be53-4384-b12f-462497ff9624"
        },
        "item": {
          "id": "d2423b1f-a39e-41cf-a65a-1b2b9362abf9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0c7b93b5-2b6d-44e1-a7ba-498d331485b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63903f25-2f50-4edd-909b-b7211d2de238",
        "cursor": {
          "ref": "19f83503-1e12-4ed7-8458-82abfd7bb094",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c49a5c2a-a771-491a-8e63-fd0111f93a36"
        },
        "item": {
          "id": "63903f25-2f50-4edd-909b-b7211d2de238",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "138d8e62-7b46-489b-aa2b-ec1746c17318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb743adb-ca0e-4c1b-9379-d4fb9b18e629",
        "cursor": {
          "ref": "a4825c1b-6985-407e-85a4-f3703de3771d",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6cef594a-78df-42d9-97c7-78bc7a4c90d9"
        },
        "item": {
          "id": "cb743adb-ca0e-4c1b-9379-d4fb9b18e629",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f62b4fb7-1fdb-4582-be45-886295b25887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9817e1d4-0e77-40ce-a01e-650e5c29e503",
        "cursor": {
          "ref": "8cf32e6d-cbda-4b29-8476-1c43ee114ab9",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cc0d9621-c6b7-4423-be97-a70a825a8d0f"
        },
        "item": {
          "id": "9817e1d4-0e77-40ce-a01e-650e5c29e503",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d6fd2814-731f-4e88-acd5-28ed7b323000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dbf18e-c726-450d-b4b8-162f393a73a8",
        "cursor": {
          "ref": "c33aa478-d8d8-4f56-8bd8-8442956efa4d",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "71085920-78cc-4c5c-bdd2-2cc8e4a8c81d"
        },
        "item": {
          "id": "c6dbf18e-c726-450d-b4b8-162f393a73a8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "adc4e57b-7809-4d96-a216-5a47f0daa64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23ad12-99bd-411b-bd18-8ad6ac32d345",
        "cursor": {
          "ref": "b3700f6a-425e-416c-8e77-882e71d44957",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "bc2e19f0-0723-40b7-b319-cc2215ccf971"
        },
        "item": {
          "id": "5a23ad12-99bd-411b-bd18-8ad6ac32d345",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "92a9c7cb-10d3-4f4d-b3d9-17e2e407f416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d50edd-34b5-4806-ac0f-7da8a602422d",
        "cursor": {
          "ref": "2c7fac8c-8a62-4c85-8c66-a33736e4f97b",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cb60e38c-0043-4f16-94a4-f58170b23268"
        },
        "item": {
          "id": "99d50edd-34b5-4806-ac0f-7da8a602422d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "20d8c798-407c-496a-bd6f-8c472c7e47c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0001d0-8ead-4fd5-a93b-12ec9fdb911f",
        "cursor": {
          "ref": "b6a0273e-7d52-4241-81eb-8eec48830e1a",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dcff43b4-758b-4c5c-b5fc-edbabb0668a8"
        },
        "item": {
          "id": "9b0001d0-8ead-4fd5-a93b-12ec9fdb911f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6e15bac7-ffdc-4257-ace8-aef71ab3a08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372cd00d-8a58-4f45-8a28-abaf4da2af2d",
        "cursor": {
          "ref": "70b9e01f-70da-4ef6-aece-d83047e66b9d",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3f6c9214-62df-45b4-a1fc-8c09be298d3a"
        },
        "item": {
          "id": "372cd00d-8a58-4f45-8a28-abaf4da2af2d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "883f4c1a-5fd3-43f2-add7-6ad77be0270a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df588b3-bb41-48a5-bd81-289e47a9fff7",
        "cursor": {
          "ref": "b692c8f9-74c8-4836-baba-1c2aa994dcfd",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bd46c544-2c5c-4361-b6f7-c9ae040910a2"
        },
        "item": {
          "id": "1df588b3-bb41-48a5-bd81-289e47a9fff7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "180ea000-5771-4a4f-a593-503e60496359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ae0818-fcef-43cc-9af6-c169119bb7dc",
        "cursor": {
          "ref": "333166dc-2b9b-4c67-8038-0a84b3396bd8",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a7505128-2ed1-4a1a-bd1b-0fd1071a6cc9"
        },
        "item": {
          "id": "b6ae0818-fcef-43cc-9af6-c169119bb7dc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e65ccdd4-94c5-4aa2-8b18-2a181d1d54a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253fde5b-8246-4394-ac75-b45b4d03dc8e",
        "cursor": {
          "ref": "97b0ae05-d6b0-4b65-a857-8d2fc871d70a",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e85eed7c-28c0-4d21-aafb-2405b79dc207"
        },
        "item": {
          "id": "253fde5b-8246-4394-ac75-b45b4d03dc8e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f72841d9-5a75-4b2c-8c5d-a5f6fb771983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c73c96e-c555-431f-b4ea-ca72bfaecbcf",
        "cursor": {
          "ref": "37029337-2d1a-4df6-abeb-1dbafdd9fd84",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4c8aa595-0b68-4666-b5ce-825a2752e194"
        },
        "item": {
          "id": "3c73c96e-c555-431f-b4ea-ca72bfaecbcf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5de6aab0-dc2d-4eea-b0a3-50bd94c9a4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bee1b3c-5d38-4203-959d-b9070520b49d",
        "cursor": {
          "ref": "d786bc62-477f-477e-8f30-aa834a9baf81",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bec6a4e0-3b7f-48f1-8a89-f3ac89fee18e"
        },
        "item": {
          "id": "1bee1b3c-5d38-4203-959d-b9070520b49d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "266a154b-85bb-495a-aa50-6338338dff18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f09e706-9312-40b1-8db4-c5e0e707237d",
        "cursor": {
          "ref": "84e3d4c4-82e5-4181-8f3f-7af450154993",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b9d66ea6-4f19-44e6-b80e-110fbf150f96"
        },
        "item": {
          "id": "3f09e706-9312-40b1-8db4-c5e0e707237d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "670b216b-08da-4e3d-8c09-d74ba02e5c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3545c1aa-a3d0-48e2-b336-d2c2d67025f5",
        "cursor": {
          "ref": "5d1809cf-aad0-4f46-870f-a4f51ece5ee8",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c4aa426b-b90a-4572-81c2-63098e294b27"
        },
        "item": {
          "id": "3545c1aa-a3d0-48e2-b336-d2c2d67025f5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c58da026-692f-4e95-bcd9-bc754d047995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee773bd-0a96-4809-ab0f-fc850efa9965",
        "cursor": {
          "ref": "061a03f0-acc2-4b42-85dd-6c16e2a3ac72",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "168b0fce-22a6-4051-a295-e0317899bc00"
        },
        "item": {
          "id": "fee773bd-0a96-4809-ab0f-fc850efa9965",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9a1f9cf0-dc4e-4acf-87d0-f7f8d448dc5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "120cdeb4-9532-4238-864e-f91924a1c5b9",
        "cursor": {
          "ref": "77bd7927-8a1c-4671-8cf8-3e1b7970e8b9",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c9d92077-33ab-4457-961e-65563d802b74"
        },
        "item": {
          "id": "120cdeb4-9532-4238-864e-f91924a1c5b9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "897e66db-f2a6-48b6-935f-cc5420ab5db4",
          "status": "Created",
          "code": 201,
          "responseTime": 2057,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fd9c7130-0c9d-4e7e-a23e-40787b4b9840",
        "cursor": {
          "ref": "75871293-640b-4e17-9761-8a913c057304",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a25b5ce5-b41c-4855-b3f8-7a6fc1a286ba"
        },
        "item": {
          "id": "fd9c7130-0c9d-4e7e-a23e-40787b4b9840",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d2ed9ca-4670-490b-ba9e-74be5e417334",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a5fed20e-1e3a-435e-a07d-2f0e0a844047",
        "cursor": {
          "ref": "9785b005-dd43-4909-86d1-4795f0ea3239",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "40ec98b9-8fe1-4702-b6fc-9abb37a831a1"
        },
        "item": {
          "id": "a5fed20e-1e3a-435e-a07d-2f0e0a844047",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "307573f3-300a-4454-b83e-ea77cfcdff0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ad8de8-cff8-40e3-933c-382462b5826a",
        "cursor": {
          "ref": "9d60ec81-e218-44a1-9cce-6ba7b08ab28a",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a04ff880-4f83-4bf7-8fb9-0e29a2dbc144"
        },
        "item": {
          "id": "b2ad8de8-cff8-40e3-933c-382462b5826a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ccff5c92-30ab-4362-bfba-b7dac7d61acc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "99ba9101-ada9-4041-abac-89e7f20095b2",
        "cursor": {
          "ref": "f03c1d16-a27e-4b82-b6b8-4c1a9982c670",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0db71046-6dd1-462a-9e38-1896e2dfaf29"
        },
        "item": {
          "id": "99ba9101-ada9-4041-abac-89e7f20095b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2c917788-6ac1-45cb-a03e-0687c619effb",
          "status": "Created",
          "code": 201,
          "responseTime": 1562,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ca34cf92-a434-47d3-bb1a-a5b9fcce2992",
        "cursor": {
          "ref": "c3c6e4b1-973d-488c-b6ff-2a286e7d1381",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2a44823b-369f-434e-93ac-45914c8ca879"
        },
        "item": {
          "id": "ca34cf92-a434-47d3-bb1a-a5b9fcce2992",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b73cb297-7960-4d18-abc7-b8c3048e2f3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c6d0ae35-eb6d-4136-9edc-18646113afa1",
        "cursor": {
          "ref": "b4f5b424-96fe-45c5-bce4-7c0d97f5043e",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d869e78a-8d36-4c88-a23d-2317086cd88b"
        },
        "item": {
          "id": "c6d0ae35-eb6d-4136-9edc-18646113afa1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "562ce061-4fcd-43f5-88e9-5e76034cc873",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1228,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b4f98a67-8dbe-4ab7-8cf6-a64f3ea7e08f",
        "cursor": {
          "ref": "3c8273ec-e7df-4f7c-aaf9-50aac8cf1d95",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "427e6e8d-973e-4e78-853b-370b0588159e"
        },
        "item": {
          "id": "b4f98a67-8dbe-4ab7-8cf6-a64f3ea7e08f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "370b36a2-bbc9-4fbf-b21f-902ed129b96d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "396342e9-09f5-4fd6-98b2-8c994c3aa3ce",
        "cursor": {
          "ref": "ffdcd6b2-6dc0-4661-b773-09d01dd923f1",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0ed3b3c1-f69b-4e57-bab6-490f18bc9d6e"
        },
        "item": {
          "id": "396342e9-09f5-4fd6-98b2-8c994c3aa3ce",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4fe39228-fae5-446a-9efe-cfc3818ddea0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "75293449-e3c6-4dd7-999d-23ef4ee0f626",
        "cursor": {
          "ref": "b5b65017-3abd-414f-8e61-7ab7eff5938a",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d46dcf27-2e41-4870-98dd-a254aaaae2e7"
        },
        "item": {
          "id": "75293449-e3c6-4dd7-999d-23ef4ee0f626",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b3a2ef94-f55c-4d39-b295-d37066e4b40d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e5230593-9cf8-46fb-a06c-4767a5ab73d2",
        "cursor": {
          "ref": "dabfe7ab-f758-47d7-bc3a-dc4f25860ecd",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2e6c5d61-9025-41f8-a56a-3b37e43d0d32"
        },
        "item": {
          "id": "e5230593-9cf8-46fb-a06c-4767a5ab73d2",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "728d26a5-1475-4f6c-9d28-bb29e762c3b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "976b90f5-d8c5-4008-91ca-1b70d9121d64",
        "cursor": {
          "ref": "556aed6d-c35a-4707-9564-8393b4ed7888",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "28bab704-5eb6-41d3-a4b7-482c87916785"
        },
        "item": {
          "id": "976b90f5-d8c5-4008-91ca-1b70d9121d64",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "58b8f785-2d0a-4208-8cd1-a4bfb0297a6b",
          "status": "Created",
          "code": 201,
          "responseTime": 1411,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "632c000a-3e5d-44ec-a7da-d602fa31ef95",
        "cursor": {
          "ref": "e08b2f45-0571-4c71-9bef-35244a499ed2",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0ad0a458-4232-463c-9e59-0deac32d88bd"
        },
        "item": {
          "id": "632c000a-3e5d-44ec-a7da-d602fa31ef95",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bd2296a2-dfbf-45ab-85e6-0e477ca6f321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68eb76ac-0293-4180-b6af-a85567ab1944",
        "cursor": {
          "ref": "bc325774-abe7-4c0d-ae78-fe491a938bff",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "08b04f8c-7b79-4c43-95a4-57b7ca06cc02"
        },
        "item": {
          "id": "68eb76ac-0293-4180-b6af-a85567ab1944",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a39f3270-e55d-40a3-ac38-79dec405da34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751caefe-db51-475a-ba8c-d8fb1049f5d4",
        "cursor": {
          "ref": "8651e427-ada8-4f3a-a54e-70db484e1577",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "af5ddcdb-9625-4eac-9a04-a2ba3a760ff9"
        },
        "item": {
          "id": "751caefe-db51-475a-ba8c-d8fb1049f5d4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d320537a-91b7-4cc5-9b06-7f1cbb05af21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88f6e1d-fc00-4e2e-b272-c0bfdc4fe3c1",
        "cursor": {
          "ref": "8d565b3f-1ba5-4945-a239-f468a08e9f09",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b12aea5e-92c5-437a-9d16-606c3225eab9"
        },
        "item": {
          "id": "d88f6e1d-fc00-4e2e-b272-c0bfdc4fe3c1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eb3332f7-4be3-40be-9d5c-afa35b39a9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8d5d2f-aa35-476b-8d07-41decd33e8d9",
        "cursor": {
          "ref": "6ec01c34-0025-49a6-978b-255f00cf870c",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a846364a-7ba2-44bd-acd4-503bc5f50300"
        },
        "item": {
          "id": "4c8d5d2f-aa35-476b-8d07-41decd33e8d9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8864cc39-512d-45de-8698-75c8f5970d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81cfdbb-e704-462d-83ac-302e4e8c5359",
        "cursor": {
          "ref": "2634655e-2d59-4a8c-85e0-a5e719326a0a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a4452acf-5015-4191-97a4-ce1415822d07"
        },
        "item": {
          "id": "a81cfdbb-e704-462d-83ac-302e4e8c5359",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "69546ae1-cfe5-48be-b7f7-87bb3b40fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca6d625-548d-495e-aa76-a1c82b12a586",
        "cursor": {
          "ref": "879a064a-fcb7-47bd-bc35-2d15046cd780",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e4396afc-916c-442b-9e49-ea6975fd1c23"
        },
        "item": {
          "id": "6ca6d625-548d-495e-aa76-a1c82b12a586",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e9ca55b4-bda0-4e3e-ad64-eef955db12e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e940fb0-3d89-475f-b166-972462a829ae",
        "cursor": {
          "ref": "7eca6726-2bbc-4545-b53c-be298563ad9f",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ee656c82-3a5a-4256-b39b-5564a086ffbd"
        },
        "item": {
          "id": "6e940fb0-3d89-475f-b166-972462a829ae",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "894ea721-54e6-46af-87bc-628b73f3788d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a0dc69-1988-435b-b4b6-1b2b6e78078d",
        "cursor": {
          "ref": "660ef3b4-5796-4d13-8506-15a6738e5339",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b105f53f-84c9-4f27-b043-2acd50003ef1"
        },
        "item": {
          "id": "15a0dc69-1988-435b-b4b6-1b2b6e78078d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3f9cb715-ad22-41b5-95a1-eac230137255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94627d60-1af1-4d9f-8098-745aa8f2e15d",
        "cursor": {
          "ref": "149ee921-a13f-4642-8676-a0969a916bb7",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6b5cfc65-ab10-4311-8c55-dd75f2416e41"
        },
        "item": {
          "id": "94627d60-1af1-4d9f-8098-745aa8f2e15d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cc8bc6b5-d69f-43e8-a544-a3fd3d813672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e424867-3106-4965-919b-62173e6c62c5",
        "cursor": {
          "ref": "1dde5d2b-3314-43e2-9cc1-8c2a56eb408d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eba856bf-78f4-4018-9526-7bc57eec56e5"
        },
        "item": {
          "id": "5e424867-3106-4965-919b-62173e6c62c5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9d6c732d-9dd6-482c-af2e-e3c0b71b7964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d096d554-b0a0-489e-ac45-69947dfe1534",
        "cursor": {
          "ref": "9387959e-0223-4b9c-9504-43b0c1c38be3",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "72c67c8f-ca3b-4bcd-8ea5-ee3316c1452a"
        },
        "item": {
          "id": "d096d554-b0a0-489e-ac45-69947dfe1534",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ceb158b6-e81f-4a3a-b4fc-0873a3a8eaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39438865-67e6-4e8e-99a0-3b21c1ea07db",
        "cursor": {
          "ref": "cf8ce561-b99b-435e-915f-a8997601a49e",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ec837290-eb99-4128-a27e-0b690f014988"
        },
        "item": {
          "id": "39438865-67e6-4e8e-99a0-3b21c1ea07db",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "53f17497-f549-4731-89e5-e2cb22337e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d08519-666d-43b4-8bd0-3153e5a103d2",
        "cursor": {
          "ref": "c3596467-dfc4-4012-ab05-2ddaee7c9a61",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "682d6cf8-f909-490b-9cd6-d9144e895c5f"
        },
        "item": {
          "id": "17d08519-666d-43b4-8bd0-3153e5a103d2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "45fcdb8e-b69c-46c5-98f7-6619bca81a2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1134,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "257167ae-e2f1-4d66-9058-4b2121c59309",
        "cursor": {
          "ref": "31fb20c9-1f8f-4e4b-a90b-b90485ecaa7f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "08fb7f9f-0825-40aa-a331-a5b4bf4e1093"
        },
        "item": {
          "id": "257167ae-e2f1-4d66-9058-4b2121c59309",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fd64b100-4a99-42bf-8f75-8f7bbcde9b3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1250,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "38db6bd4-c5de-4089-8bfd-e51d756eb835",
        "cursor": {
          "ref": "fd3573b9-9287-4163-af71-8e8e84411c50",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bd13fedf-f583-4fb9-bd7f-58cea88c521f"
        },
        "item": {
          "id": "38db6bd4-c5de-4089-8bfd-e51d756eb835",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "407ecbd4-9406-4827-a59e-93c820dc1c3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "80d231f2-3d39-4b2d-9a81-130c78f6d362",
        "cursor": {
          "ref": "ce5f3e56-04f1-4727-a823-6414ac629b02",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "59238960-3e58-4b11-a909-00a6ca3f4b62"
        },
        "item": {
          "id": "80d231f2-3d39-4b2d-9a81-130c78f6d362",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "16acbbc8-3f5a-4547-b63b-734c0ed7f979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1169,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5d4eb1cd-6ddc-45f2-813b-431966fd68cc",
        "cursor": {
          "ref": "fd955c23-a7bc-491c-87f4-14fcbf684f9f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "302647f9-6942-4536-881b-be4f3ee2cfac"
        },
        "item": {
          "id": "5d4eb1cd-6ddc-45f2-813b-431966fd68cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "30f8bb48-2438-4d7f-9acf-6e443165e174",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1a7f2393-4a37-438e-bc21-bf15f53a4070",
        "cursor": {
          "ref": "e3982456-f3c0-483f-8a45-c399f8937aea",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "28ef8ed0-f50b-497a-92a8-17f7d6c52682"
        },
        "item": {
          "id": "1a7f2393-4a37-438e-bc21-bf15f53a4070",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e34a55e1-220d-4a04-8fa0-e08b3bd979d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85e9eb6-dad4-4a57-bda2-547b25f960b1",
        "cursor": {
          "ref": "d9c0205e-0dcb-444d-b76c-c8cb3adfe5f8",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2b9c6ed2-71b1-4ff7-bea3-571e97b1e0ce"
        },
        "item": {
          "id": "a85e9eb6-dad4-4a57-bda2-547b25f960b1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "95c113b2-1133-4e9d-b7b7-e9e405ffde00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392881f2-0df1-4c8c-a030-65d7bf8abd4b",
        "cursor": {
          "ref": "844678c8-93e6-4dbc-a98d-08f6c53d273e",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "da7e11a2-7c55-4c48-86b7-8353702f0c9f"
        },
        "item": {
          "id": "392881f2-0df1-4c8c-a030-65d7bf8abd4b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "43a1a694-744b-4ea8-8732-b9d6b8b32099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a9a860-ce8f-42f1-b940-ed7cbdd1cfd4",
        "cursor": {
          "ref": "ae3f3e0f-3efe-4a91-8427-1c8026b8d8b0",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "850f5bd1-375e-4e53-bb28-915fed2a7e00"
        },
        "item": {
          "id": "08a9a860-ce8f-42f1-b940-ed7cbdd1cfd4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "47d156b1-71d0-4b8e-bc90-ff18d8e7cbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b47159a-373a-4f76-be2d-41fc8ab8d889",
        "cursor": {
          "ref": "302a1140-31d9-40a6-b152-54192b166e6f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e6a34a85-0537-4ac5-bb62-f4d094942570"
        },
        "item": {
          "id": "6b47159a-373a-4f76-be2d-41fc8ab8d889",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8ae5ac59-a35b-4597-b3b1-55d22edb2f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a51971-632f-4de1-95f5-ddaf7abecfbe",
        "cursor": {
          "ref": "22911cee-9bbb-44c7-82d1-23f0695fb264",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0abf4e45-ab2a-43ee-a369-b77942c30bd5"
        },
        "item": {
          "id": "89a51971-632f-4de1-95f5-ddaf7abecfbe",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ba8aa559-d474-486c-a9d0-ddd4ecc55364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edca03a7-2c73-45b1-9bd7-bcf25ddb6c13",
        "cursor": {
          "ref": "4d212558-286e-45bb-a5ca-9df258c7a2ec",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a41d6b93-ff7c-49cd-bcdb-d4416a174bed"
        },
        "item": {
          "id": "edca03a7-2c73-45b1-9bd7-bcf25ddb6c13",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8b8cbdb8-6bab-468c-9d76-5cc621ff88fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6992ba-4682-41f1-b613-4b09179dea53",
        "cursor": {
          "ref": "1d7cb7b7-71a6-4683-8a9c-6b30c65d17b8",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "52001ada-e3ba-45a9-8068-250061f3d98b"
        },
        "item": {
          "id": "ad6992ba-4682-41f1-b613-4b09179dea53",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "445bb26b-2052-4141-b942-236dac5188eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9aa5e1-fec9-4b14-a9f1-926e0826afb3",
        "cursor": {
          "ref": "41bc4fd0-4a85-47ec-9d93-26e49ccad948",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2020e18d-6cfb-47f5-9d1f-cc3652697a1a"
        },
        "item": {
          "id": "bf9aa5e1-fec9-4b14-a9f1-926e0826afb3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b7ddc19a-75ca-4dd6-b45a-42da1fac51b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9ef3a-4d16-45a3-add5-a58ccf2f95bf",
        "cursor": {
          "ref": "0f53c1b8-06b7-4cba-a753-a3c2c02f4f53",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c343642e-4306-450d-be93-268dd8e25d35"
        },
        "item": {
          "id": "fed9ef3a-4d16-45a3-add5-a58ccf2f95bf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "79731674-38d0-4ce9-8f37-cee8b793a67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa02ec2-ca81-4264-87b2-412b144927b1",
        "cursor": {
          "ref": "539cc465-05a0-4d63-98b0-c19d2a155825",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "19180258-4339-49b2-8d17-022acd28edef"
        },
        "item": {
          "id": "7fa02ec2-ca81-4264-87b2-412b144927b1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f149222f-10d9-4fd7-850f-9c195bf284a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6be4ef1-3bd9-454d-b507-db3459ffe9f3",
        "cursor": {
          "ref": "0dfdc52d-f050-4013-903e-035d53174942",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "45f907b7-e4d7-4d48-b53d-3bd00ef54cc7"
        },
        "item": {
          "id": "e6be4ef1-3bd9-454d-b507-db3459ffe9f3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c6864788-ec7a-4471-9901-7c1ab31dd4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79651af1-ffc0-4c73-8096-fd7b38ee9365",
        "cursor": {
          "ref": "b04e95ce-8c68-4e2e-90c2-3cc60ca873d8",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1208b447-0b2a-49db-b7fb-d4df0276c21f"
        },
        "item": {
          "id": "79651af1-ffc0-4c73-8096-fd7b38ee9365",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "aff6bc9f-e2ff-4cf0-992d-cfcd0862b5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab58a9a-b7e9-44bd-b157-ff42627ca92a",
        "cursor": {
          "ref": "91c30c11-29df-447e-b154-82f531640803",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c4929a74-384c-4aa2-825f-c4a6ecda4d44"
        },
        "item": {
          "id": "0ab58a9a-b7e9-44bd-b157-ff42627ca92a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "42e2b56a-f905-4e2c-ae8a-d9b0414fb6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80946de-4be8-41c4-a24f-8d79969bb21e",
        "cursor": {
          "ref": "a36b6dd4-1050-4ea2-bb0b-db014a61b9a9",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b824f8c3-c995-49f2-9e7e-45b84095c35f"
        },
        "item": {
          "id": "b80946de-4be8-41c4-a24f-8d79969bb21e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ed641604-3860-4366-a522-2e42f03c5f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc2f606-2267-4c5e-a6e2-5f38daa9451b",
        "cursor": {
          "ref": "0e561117-90ef-41be-8810-0f7164797209",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d2065d9e-1908-4823-98a8-f8356ca5ec40"
        },
        "item": {
          "id": "8dc2f606-2267-4c5e-a6e2-5f38daa9451b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "95cea6ec-c8f6-48fe-a200-ae79e7268d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7de646-1cc0-4185-b8ee-a8b25d6a8d85",
        "cursor": {
          "ref": "3728a549-4994-422a-af59-bd8d77e39907",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2540ace8-2ecf-4450-b7dc-c6c79be55528"
        },
        "item": {
          "id": "3a7de646-1cc0-4185-b8ee-a8b25d6a8d85",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f3a10e56-860d-44c7-b474-60df7ca96b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dd45a5-9c9a-4379-856a-441887d61dae",
        "cursor": {
          "ref": "ab20bff9-fb87-4deb-a032-eeab1f070704",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "09b870f0-e18f-44f8-96c8-3beddb19dd38"
        },
        "item": {
          "id": "26dd45a5-9c9a-4379-856a-441887d61dae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16a02b0c-86d5-4761-8ed6-0a1a290af668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b3910f-5d49-42d1-b16e-cae504f4aaed",
        "cursor": {
          "ref": "6570eacc-6493-4e35-998c-12007e68fc75",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2a7816de-31c0-402a-9a16-8eb3cb82590c"
        },
        "item": {
          "id": "00b3910f-5d49-42d1-b16e-cae504f4aaed",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "47de7cf5-ccd9-4b74-b88d-cbab2deef16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb91c613-1606-4de7-9eca-3335440d63db",
        "cursor": {
          "ref": "df56e45d-7c36-4c50-9147-b92d8f081725",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8800e39b-2426-4873-9f41-dac8c105b72f"
        },
        "item": {
          "id": "bb91c613-1606-4de7-9eca-3335440d63db",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2e263c36-5138-4f45-b64c-fb8a7a210baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608f0f14-58ae-4880-bccf-d75eea95059a",
        "cursor": {
          "ref": "687a3a94-88ac-4438-937f-e28ef7f5aa1c",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1d18a820-0e68-478c-b5cb-07aad7025de9"
        },
        "item": {
          "id": "608f0f14-58ae-4880-bccf-d75eea95059a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f989c9c3-1056-47fb-a6dd-de1cc73808e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d7e922-c33f-4bad-87f8-a79ca8cad4ca",
        "cursor": {
          "ref": "2c733d21-9ba6-4335-bacb-50b573e3e4d2",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b6b14228-a873-420f-8094-ccd8f0159f39"
        },
        "item": {
          "id": "16d7e922-c33f-4bad-87f8-a79ca8cad4ca",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "939bd859-0f6b-434b-bdc4-f638293bb7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0b2b25-ada0-4289-ba7d-214a09f97a36",
        "cursor": {
          "ref": "99eac9b5-f13b-4f14-87ab-72ce7181e169",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6f2263f9-d369-4e25-92d4-f70aaa04ac0d"
        },
        "item": {
          "id": "7a0b2b25-ada0-4289-ba7d-214a09f97a36",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "53052969-648a-4662-86d8-b23a7c0ea9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dae03c-ecf1-46a7-9de6-188cfe457be2",
        "cursor": {
          "ref": "a5e60766-d490-4048-92a0-c0776cc9997a",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e1914e6f-5a90-4526-b756-0c146fc222c6"
        },
        "item": {
          "id": "50dae03c-ecf1-46a7-9de6-188cfe457be2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9dbc2f25-9fc0-4c57-a69a-2c7de74b17f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14562de4-8973-4ae7-bd9b-9ce535b505c9",
        "cursor": {
          "ref": "cfa13001-7631-45ef-9dfc-005778230399",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c5986ed5-0aad-4e89-b48a-806beacbe269"
        },
        "item": {
          "id": "14562de4-8973-4ae7-bd9b-9ce535b505c9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8ab75f8a-9ebd-4be1-9887-efbc303c8990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e92caf7-df9e-4f6f-b196-a770cbfba3ca",
        "cursor": {
          "ref": "fc56601a-907c-4989-b994-23a984d1786c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c5501dd1-829d-4b36-8dd2-f6f90cb0c50a"
        },
        "item": {
          "id": "3e92caf7-df9e-4f6f-b196-a770cbfba3ca",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7978c50e-9cff-4d2d-aa19-d232b0fa2807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3afed64-beb8-4932-a3ad-72ce92aea729",
        "cursor": {
          "ref": "efd7a17d-b0cb-4b3a-ba44-c6e30943dd3d",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "96167862-f12d-4581-bded-a1ae930fe476"
        },
        "item": {
          "id": "e3afed64-beb8-4932-a3ad-72ce92aea729",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a48f1a7b-81fa-45e5-b934-9b15c321245f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a05b3a-dd5e-49f7-816c-326738c7d971",
        "cursor": {
          "ref": "48712201-9721-4c31-9f1f-01a0c75337a9",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1a9448dc-0a01-4b2a-a6c7-f45e937fd59f"
        },
        "item": {
          "id": "f6a05b3a-dd5e-49f7-816c-326738c7d971",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5370421e-3508-491b-8bb8-ad52ce9d0241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01db5e4-c6cf-478c-98ac-1b40203714ed",
        "cursor": {
          "ref": "d31b5e11-b6d4-4aa7-a37e-37f0ddb23817",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0d76e50a-c7ec-4113-870b-9d252fc93518"
        },
        "item": {
          "id": "a01db5e4-c6cf-478c-98ac-1b40203714ed",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2283bcf0-d8be-4254-a180-5a2ae1e6c603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c04e92-a132-4df8-a010-e68141caf79a",
        "cursor": {
          "ref": "10297a72-f137-4db2-ae18-36d7bc2a1ebe",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5282a47b-42ff-4f07-847c-cf79367e2521"
        },
        "item": {
          "id": "69c04e92-a132-4df8-a010-e68141caf79a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "29c0e6f1-7cd3-4f38-80c3-850ea853073e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee952612-6d2b-4500-999c-ad508ade6d56",
        "cursor": {
          "ref": "f8886806-ceb3-42da-8beb-31875cc7650b",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8d245d5c-f46b-43fe-a902-f5fdb3d7a858"
        },
        "item": {
          "id": "ee952612-6d2b-4500-999c-ad508ade6d56",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7b32ecba-87f6-4f20-918b-927b5539f2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1256d4-ccfb-42bb-8e3b-27858f9f2102",
        "cursor": {
          "ref": "3fafad06-e11d-4aba-8492-bb56371a3dc3",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "825c3113-0e4d-451b-9d3a-ddd2244888d1"
        },
        "item": {
          "id": "9c1256d4-ccfb-42bb-8e3b-27858f9f2102",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "38a18241-6dff-4781-8ed9-ad1fed2aef38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbe834a-415e-4fcd-afcd-07cd1104673a",
        "cursor": {
          "ref": "d05898e1-90c6-4dfd-914f-558cf5b2666b",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c7fc2dc9-1da9-454e-bbad-a87777a29675"
        },
        "item": {
          "id": "4bbe834a-415e-4fcd-afcd-07cd1104673a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "058aa1cb-8bc7-49f7-895f-b0ddec0eb264",
          "status": "Created",
          "code": 201,
          "responseTime": 1475,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cabcc42-29ae-4693-97f2-b0917460627e",
        "cursor": {
          "ref": "03967b7e-eaa5-46ae-9214-5f70dced3d42",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7c90add1-1556-47a6-8166-7b922c36a443"
        },
        "item": {
          "id": "3cabcc42-29ae-4693-97f2-b0917460627e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "77ea436a-6a25-4cda-9a81-e6d786d68828",
          "status": "Created",
          "code": 201,
          "responseTime": 1395,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bb91c4-2df0-4385-be3a-eac2c193e913",
        "cursor": {
          "ref": "507d5475-06a8-41e8-b6e4-b7f15a9ab679",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "30950e4a-adc4-4830-855f-04de79e1c90a"
        },
        "item": {
          "id": "61bb91c4-2df0-4385-be3a-eac2c193e913",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "904e6e9c-2e50-4b79-943f-4c172ac1ebeb",
          "status": "Created",
          "code": 201,
          "responseTime": 1357,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2cdfed-3350-42b7-a2ee-2f4d47a49515",
        "cursor": {
          "ref": "6995f69c-0bfe-4a65-a684-a5edbc688d04",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2101cf7c-bd91-4d9e-b700-76959fa1ffaf"
        },
        "item": {
          "id": "cc2cdfed-3350-42b7-a2ee-2f4d47a49515",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d1bc6b1f-97ab-4f65-aba6-d153812aef2c",
          "status": "Created",
          "code": 201,
          "responseTime": 1287,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3774e21-3e38-4ab6-be0d-4f7b83822a28",
        "cursor": {
          "ref": "ec9d3f4f-16fb-421d-90e3-6725b4b82228",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "442a9a6b-101f-424a-b11b-5fd22f97660d"
        },
        "item": {
          "id": "b3774e21-3e38-4ab6-be0d-4f7b83822a28",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "47ec8ae9-fc8d-47f2-846c-105a7e7e348e",
          "status": "Created",
          "code": 201,
          "responseTime": 1360,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ab4ac7-2dda-43f5-86a2-9028ae79c418",
        "cursor": {
          "ref": "709b4437-8054-4a0e-973e-e2bf785855fb",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5537ea83-9c82-4e1d-8495-e32f9e28b563"
        },
        "item": {
          "id": "d8ab4ac7-2dda-43f5-86a2-9028ae79c418",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "73aab0e9-5930-46cb-b0a1-66dbdab2bd2b",
          "status": "Created",
          "code": 201,
          "responseTime": 1432,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c91818e-41c3-420c-b5a0-1fa79c255636",
        "cursor": {
          "ref": "ba3262fa-228b-4db6-b8a2-c20ab199f096",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dd8d5dfa-5f65-4fd0-a164-87925235ebe6"
        },
        "item": {
          "id": "1c91818e-41c3-420c-b5a0-1fa79c255636",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5c9fe876-eba3-4a8b-826f-81a4402d1dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07fa807-33dc-4fd0-9724-74ae3f700221",
        "cursor": {
          "ref": "281f05ff-2b57-40d5-bae3-637081306b93",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1e971465-8015-4a94-8fca-817ba427dac1"
        },
        "item": {
          "id": "b07fa807-33dc-4fd0-9724-74ae3f700221",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "043d7cc2-9340-4784-862a-cf29eb269300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4184eea8-c610-4d95-b001-eae947477300",
        "cursor": {
          "ref": "61128ad4-8f8c-490a-85e8-fdd3b6d08365",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6406c9f3-2e82-46f7-b9e5-4fd7e872efb1"
        },
        "item": {
          "id": "4184eea8-c610-4d95-b001-eae947477300",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fa1af6d0-81db-4f12-9cd1-6cc26778d4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2389a068-ec06-4c86-a19c-e2414ffb7c3a",
        "cursor": {
          "ref": "620b8a28-53e5-46e2-9b74-813386aa6fb0",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "52401731-7e14-4db7-b362-23b629130ffe"
        },
        "item": {
          "id": "2389a068-ec06-4c86-a19c-e2414ffb7c3a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cec466f6-78f1-40f4-9601-bb887616a4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15af2f5a-0f04-42b1-b783-9f0454a87819",
        "cursor": {
          "ref": "1fd79a9e-28bf-4105-9a9e-23f7d694eabb",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a33c1d2c-23ee-41f8-ac75-49aa9c21b57f"
        },
        "item": {
          "id": "15af2f5a-0f04-42b1-b783-9f0454a87819",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "19eccbbb-51a4-4b8b-b81f-b557ffee891a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c4a9fe-4281-4cc7-9fd2-b88c452bbbc6",
        "cursor": {
          "ref": "b0ab4954-0315-4684-82e9-b37cc2fe3cbb",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0ab9008b-7f72-4959-ab89-48e924afbb26"
        },
        "item": {
          "id": "89c4a9fe-4281-4cc7-9fd2-b88c452bbbc6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eaccc99e-101b-4dcf-b95c-c9c49605aa1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9169ccc1-d764-4500-85aa-74930697e29b",
        "cursor": {
          "ref": "2d9c1b7a-b2f4-40a5-99b5-bbcef77f7b90",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8c3588db-4973-422b-81c5-02ed3867ac77"
        },
        "item": {
          "id": "9169ccc1-d764-4500-85aa-74930697e29b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ec2ea914-6b33-458c-b647-500012b1df08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34c250c-2e75-42b0-bb55-68d6d256e295",
        "cursor": {
          "ref": "3b8c01a3-473b-403b-81fa-6ee06e776019",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "37c6cdef-d832-498b-98d3-c0ea8b31ee25"
        },
        "item": {
          "id": "e34c250c-2e75-42b0-bb55-68d6d256e295",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "68d94eb0-c274-4320-b5ba-af1144c1b62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7d97d6-82e1-4ebe-ba19-ef390d7ea2ef",
        "cursor": {
          "ref": "1ca3fc19-8e2a-4de0-b5f3-bf5294dee327",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "32553e67-def0-4f36-9dea-94dcc9fa5835"
        },
        "item": {
          "id": "5b7d97d6-82e1-4ebe-ba19-ef390d7ea2ef",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ecaadc60-b1b7-4cf3-b846-8b2dc016f12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2147ea-e8f3-4a6f-9d7a-b6c42cafc0de",
        "cursor": {
          "ref": "49641a5c-56a0-465d-99e7-dc27166260ab",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5eada27f-1b78-45f4-aa91-66f223ed9042"
        },
        "item": {
          "id": "8c2147ea-e8f3-4a6f-9d7a-b6c42cafc0de",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d8099060-79ab-44bd-906a-5d8b9455bf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b205031-3a68-41a3-be9e-53f3cbff6282",
        "cursor": {
          "ref": "5aeaaa37-8e7d-40c5-8e6e-101a5c534a84",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "645e5b4c-95ca-487b-a552-5ee46e4f1ca3"
        },
        "item": {
          "id": "8b205031-3a68-41a3-be9e-53f3cbff6282",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c2254b28-1c68-42e2-8622-582f42252133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49d3d02-3978-483a-af29-4e163c2f4bc3",
        "cursor": {
          "ref": "116ce81a-fb1a-4815-8a44-b258f4444d9d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc3f1714-35c3-4ff5-9279-dd73e6df91f9"
        },
        "item": {
          "id": "b49d3d02-3978-483a-af29-4e163c2f4bc3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d70e4b00-5a70-4e56-8b58-1c86d7ed51b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534d3334-9528-4284-8d08-e529c4327120",
        "cursor": {
          "ref": "21b7438c-495e-4706-8196-e4ca905ece6e",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6d2531d3-bd02-41c0-a686-0c6a375d015c"
        },
        "item": {
          "id": "534d3334-9528-4284-8d08-e529c4327120",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6600a65d-c7b9-413e-bb2b-c2270f6bf19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bc7c9e-b564-4a1c-a082-6732e4b0fa21",
        "cursor": {
          "ref": "ccaaafa8-f4dd-4a2f-bdcb-0a02aa6a878f",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b3b902de-6713-4f8d-b1ef-3206fd77b5de"
        },
        "item": {
          "id": "88bc7c9e-b564-4a1c-a082-6732e4b0fa21",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "47fee5bc-dc2c-41ad-8e14-9c6195e5e892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f539557-2c89-4e51-847c-e019dc633397",
        "cursor": {
          "ref": "20726196-7445-41ca-b039-ae87b7c70b5e",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "be380c7e-2d74-4dda-a1b5-f21cc017c6b8"
        },
        "item": {
          "id": "2f539557-2c89-4e51-847c-e019dc633397",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1be5b48-b9c3-4333-bec5-93686b6ee660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088ec105-bd71-49e0-bc5e-8d6b7aa01531",
        "cursor": {
          "ref": "a2271846-e061-4f31-952b-8d701058ca44",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8ac638ee-f805-4d5b-88ce-50964fa09305"
        },
        "item": {
          "id": "088ec105-bd71-49e0-bc5e-8d6b7aa01531",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fb68dc80-1f5d-441c-af16-656fdc1db7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9bde8b-3619-465b-ae82-8b031a2faf05",
        "cursor": {
          "ref": "8128849a-b2c5-4f62-9d9f-8c85307d262b",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "db5f8192-1d9e-43fa-80cb-efa0c5248eba"
        },
        "item": {
          "id": "2e9bde8b-3619-465b-ae82-8b031a2faf05",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b98c2081-20df-4249-8cfa-ca78b0cee0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4969bb8f-c53c-454e-b771-c724382f25ab",
        "cursor": {
          "ref": "0b9b51b3-49f8-47aa-83aa-7b77471a52e4",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "46dc7798-3a87-4590-87be-d8514d93e113"
        },
        "item": {
          "id": "4969bb8f-c53c-454e-b771-c724382f25ab",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "36c30642-bebb-4f60-9112-9082f1196709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a42d81a-c838-4d7f-ae61-489f4eae0fc3",
        "cursor": {
          "ref": "e81c4c5a-cae5-41e8-a0bf-34675d589cff",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d5627f0d-7251-44f2-a41f-1523b59e5d4a"
        },
        "item": {
          "id": "5a42d81a-c838-4d7f-ae61-489f4eae0fc3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b301aa58-ff91-45c5-8583-d56e325c30d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebe3681-9b0b-4382-811a-b551e91b3e00",
        "cursor": {
          "ref": "835f3b32-4b26-495a-9d16-b28370eda097",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e50c6103-b772-4db4-93c3-d8daf2b1db5d"
        },
        "item": {
          "id": "0ebe3681-9b0b-4382-811a-b551e91b3e00",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "209ce4b8-6ed3-40d3-a1c4-075ce6f1ff16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2246f74e-35e0-4cc5-95fd-6dc4a50e2820",
        "cursor": {
          "ref": "108c7a8d-c594-49a9-9961-6e33098cce47",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c0bbd925-839a-4709-8680-7c5853cb13fb"
        },
        "item": {
          "id": "2246f74e-35e0-4cc5-95fd-6dc4a50e2820",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "60c628a6-363d-46fa-9ede-c76e0a7e3857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c042bb71-3050-47c0-af47-2a828f50e498",
        "cursor": {
          "ref": "593f5ada-2678-41e6-8624-d55e4a71b1bb",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "385f0fe3-ac78-49dd-9cbf-4d0fa1021371"
        },
        "item": {
          "id": "c042bb71-3050-47c0-af47-2a828f50e498",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3e50d440-8edc-4739-ab1e-86aeaa74350e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e14ce3-9993-4bc3-8886-8cfe22e4b434",
        "cursor": {
          "ref": "a4188171-055a-492d-942a-0781492de07c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b32bbb6e-5ae4-425d-892c-8a349e851b5a"
        },
        "item": {
          "id": "c7e14ce3-9993-4bc3-8886-8cfe22e4b434",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cdd34177-eba7-4bf9-91ca-dc674a8c7cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b584234-88bd-4dda-a2d9-47cc3fa230ae",
        "cursor": {
          "ref": "e1a60187-4372-4232-956b-ba6289ec8ff5",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "28cbfc5b-f9af-4245-81dc-060b424424e8"
        },
        "item": {
          "id": "1b584234-88bd-4dda-a2d9-47cc3fa230ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f7085c2a-068b-45a5-90b6-714d2f175a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0b4e05-d58b-4426-aacb-b41766769e3b",
        "cursor": {
          "ref": "51e75d4c-92e4-42e5-8cd3-dfde2d92176e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "edb9b22f-91a9-4431-b88c-d47000043434"
        },
        "item": {
          "id": "0c0b4e05-d58b-4426-aacb-b41766769e3b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa25df1b-0ebc-4dac-ad71-a2b09a7e6cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6663a590-a790-4687-8d36-2311fbd82334",
        "cursor": {
          "ref": "211fc218-aba9-4098-af17-a6a20e3aca1f",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ff70c17c-b240-4306-8963-80f01a7ad856"
        },
        "item": {
          "id": "6663a590-a790-4687-8d36-2311fbd82334",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "77694e83-8212-467c-ad4a-dbf8155c04b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8fcae5-3a01-4465-b057-a969c2717edc",
        "cursor": {
          "ref": "1f502b3e-895b-4b64-b395-7b426dafc6a1",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "41e5374b-e4c4-43ed-a0aa-41c6e3b6a21d"
        },
        "item": {
          "id": "7c8fcae5-3a01-4465-b057-a969c2717edc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4cc556b4-164d-460b-af8c-e8ecd5e28cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaec9a95-7c14-42d8-b479-fb71fcbd30aa",
        "cursor": {
          "ref": "6658a8d9-f434-42f3-8adc-f461e92d7e0b",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7c8cd508-2489-43f9-97b0-2f00c0e48702"
        },
        "item": {
          "id": "aaec9a95-7c14-42d8-b479-fb71fcbd30aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ab82f531-8f06-4543-8c31-b43fc32a261a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f8b450-ea0d-4610-808d-79b481d28816",
        "cursor": {
          "ref": "9b5b0059-9789-4d91-ada2-ea375cc1ab86",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7ccdf635-0016-4823-b0f1-f114eb4b6581"
        },
        "item": {
          "id": "08f8b450-ea0d-4610-808d-79b481d28816",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8f29298c-b995-4661-83b8-e72ad9eff7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f652bd84-332b-48fb-ba3a-3dfe8f079efb",
        "cursor": {
          "ref": "b50fc369-e4a9-4aea-a995-17d66f74f5ee",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "62495335-f2a4-4b37-addd-2c953586a676"
        },
        "item": {
          "id": "f652bd84-332b-48fb-ba3a-3dfe8f079efb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c4ed8e74-9072-4bbf-b673-b8abbbe4617b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9e1023-e16a-4933-b484-26c06842da05",
        "cursor": {
          "ref": "132f68dd-4076-4f85-be04-8085d678966d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "410d79bd-6003-4d76-aef8-4892495ade0a"
        },
        "item": {
          "id": "4f9e1023-e16a-4933-b484-26c06842da05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ef113527-c67e-4128-a73e-e283d1b44cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a217c2-fca8-410c-820a-e2b3f4de5bf3",
        "cursor": {
          "ref": "7e1281d2-b510-4865-93dd-9e2813ef2552",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cb5732fa-379f-46b3-8541-ae93d334842b"
        },
        "item": {
          "id": "01a217c2-fca8-410c-820a-e2b3f4de5bf3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4423a539-a704-450d-97a2-9a0412f078f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dd75cb-71af-429e-9813-cbae6558efa3",
        "cursor": {
          "ref": "7cd9a994-cc72-4e7e-ae46-c0474c06ea7c",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "edd4c6c5-2287-453c-9c6b-df5caf97c573"
        },
        "item": {
          "id": "a2dd75cb-71af-429e-9813-cbae6558efa3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "29a0f80f-9233-48b7-92c7-65a3b9605339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07b5803-fd43-4175-b99c-cd914fdccd0d",
        "cursor": {
          "ref": "c6cf86d3-7c44-4474-a3ae-755cbd89fc19",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6356a029-89d2-48ff-b558-8ac4e0a19089"
        },
        "item": {
          "id": "b07b5803-fd43-4175-b99c-cd914fdccd0d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "140fca11-4a19-4b29-9dc0-520e20b348d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa402552-dc9c-4967-af1e-52faf9896cf3",
        "cursor": {
          "ref": "15742443-fe77-49a3-9c0d-873c508e19d7",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fb4305fc-8b56-4e05-a8f2-d61a0f20293c"
        },
        "item": {
          "id": "aa402552-dc9c-4967-af1e-52faf9896cf3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5d7c376-8e5d-45a8-8fb9-7528c07226ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c26ed9-e115-40cc-8bdb-a877cdc47cc2",
        "cursor": {
          "ref": "79044d8f-7530-46b2-91fa-a423b8ccf8bb",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b282192d-e248-4e86-a0af-6690b7a71b6c"
        },
        "item": {
          "id": "c0c26ed9-e115-40cc-8bdb-a877cdc47cc2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "154b8fb9-76c4-4a86-b048-478a2bed66af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0493f9-7efd-49f8-bb01-c8fbdfccabc4",
        "cursor": {
          "ref": "d9a49642-c653-4852-8ba2-1383f12d2b14",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3ce962a5-a10a-46a8-846b-4d635ece6202"
        },
        "item": {
          "id": "ea0493f9-7efd-49f8-bb01-c8fbdfccabc4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8e625a95-a403-4978-9f4f-9e046b511662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541fe2a8-146c-404b-9f1e-377b70ad9aa7",
        "cursor": {
          "ref": "5c87e230-3470-48b5-a0c2-33f026f0e3af",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0fb0337a-f3d0-4e07-bb39-711482406dfa"
        },
        "item": {
          "id": "541fe2a8-146c-404b-9f1e-377b70ad9aa7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "12a2fc81-2493-49e4-8e53-b8e2e5b7335a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a9e6cb-6dbc-4122-851a-1de2530e952c",
        "cursor": {
          "ref": "a767ebd7-21b4-475c-a7cd-01fcc8304468",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e44a3d8-dbb1-47d2-b518-ff6ab00b5050"
        },
        "item": {
          "id": "23a9e6cb-6dbc-4122-851a-1de2530e952c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3ad4c364-38e3-4fff-8d62-427de9ac565e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6543be9-2be0-4858-ab6e-5e576936da81",
        "cursor": {
          "ref": "9821ed77-0088-458c-8272-5246e5a55203",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9b3bfb75-d25b-4bda-993b-eb6fb03d90bf"
        },
        "item": {
          "id": "a6543be9-2be0-4858-ab6e-5e576936da81",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "df583957-3043-45c7-b4fe-b802da028698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2fb798-4d24-4e63-90ed-db89da3a9c4e",
        "cursor": {
          "ref": "7b6188b6-b847-4c61-bae6-5be4378c606a",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8c965235-25e8-45b3-9e0a-ed26e8837c47"
        },
        "item": {
          "id": "7f2fb798-4d24-4e63-90ed-db89da3a9c4e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2088256b-99f1-4aae-997f-832330c0d34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e8aa61-d45a-4001-8127-de045560d710",
        "cursor": {
          "ref": "13eeddab-80ce-4af6-8565-31b70dc2ddd4",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a6f76a0c-e960-4b59-ac92-d3f985bc3125"
        },
        "item": {
          "id": "04e8aa61-d45a-4001-8127-de045560d710",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30f5d2a5-e2cd-4304-9402-b7e9ccc12184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3276256d-ae0b-4e91-9fb8-7c03926899d8",
        "cursor": {
          "ref": "3353c9f0-3c37-48bc-bea7-3a51c053e9dd",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2187e4d2-fbd8-4bd7-ba58-203d8debeeed"
        },
        "item": {
          "id": "3276256d-ae0b-4e91-9fb8-7c03926899d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bc9e9410-a33b-4294-b239-64d34afdc3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d495770-3ba0-431a-8e00-883c64e20625",
        "cursor": {
          "ref": "e0da3a71-13b5-4f3d-bbc0-516e27f72291",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "738804b1-5c3f-4dad-b22c-735ad3a99dcb"
        },
        "item": {
          "id": "7d495770-3ba0-431a-8e00-883c64e20625",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "32bc3342-cf27-4857-9258-a90da865ec8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cee776-8e38-4961-bfb2-395c709f6968",
        "cursor": {
          "ref": "0874b508-5bfd-4c08-b4e3-d6888212e029",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "39a33de7-1e19-4bfb-8ef7-827a5912608e"
        },
        "item": {
          "id": "48cee776-8e38-4961-bfb2-395c709f6968",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c82c4384-ef01-4eeb-8cbb-62d37797cf7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309af1c0-9888-4a8c-9073-46e05c1e0342",
        "cursor": {
          "ref": "505bd607-f133-429f-ab0a-2ca2e066d3f6",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "623ff420-97f7-4e6c-b70b-22c9dc5d6a25"
        },
        "item": {
          "id": "309af1c0-9888-4a8c-9073-46e05c1e0342",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dc22bb1d-5a4e-4c26-b566-c1c3d125e242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f4b140-4eaf-443e-8d4c-69ea0d3b21be",
        "cursor": {
          "ref": "4da652ee-68f9-448a-8bf2-927379cb0bfc",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "980b7cea-bff5-48a1-b057-4941131b94b6"
        },
        "item": {
          "id": "f8f4b140-4eaf-443e-8d4c-69ea0d3b21be",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1bfad468-d2b6-44ef-8c56-637cb619aaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a785c7-c7a4-4fca-965d-15739f6e8935",
        "cursor": {
          "ref": "6c95d62a-ef11-407a-b771-b348af37d65a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "22f9b8fc-adf4-42c8-adb3-b85e83acf49d"
        },
        "item": {
          "id": "44a785c7-c7a4-4fca-965d-15739f6e8935",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "189e5f6d-b983-4ce0-97e8-2f84fa7f84e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e3460e-c3c1-404b-8859-43feb0e3623d",
        "cursor": {
          "ref": "de8ce1d1-3daa-47d7-82e2-dca0a50244fe",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "830af1a5-0097-4cfc-91d2-e4ed4a3a54b6"
        },
        "item": {
          "id": "c4e3460e-c3c1-404b-8859-43feb0e3623d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "57d60346-a1f7-488b-bdcd-f2ed4fdfaf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05e8133-a625-47b5-8157-5086dccad601",
        "cursor": {
          "ref": "f84bf26d-1afa-429a-90f0-99a6e047bbec",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5a2a9ce2-4cde-47fa-90cc-f82fc48b2fa1"
        },
        "item": {
          "id": "d05e8133-a625-47b5-8157-5086dccad601",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d37e11fe-506f-4198-b495-1e9965bcd0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fc4b7a-861a-4fe7-8da3-292e5d9246b4",
        "cursor": {
          "ref": "a119fb37-eed6-4afc-91b4-7e097bec383f",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "422a8760-d6d3-453b-83fc-660ef006146a"
        },
        "item": {
          "id": "16fc4b7a-861a-4fe7-8da3-292e5d9246b4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "27df353a-af27-4a71-920b-63699699992a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f583da-bf8f-476e-b2c0-5c3329e3e773",
        "cursor": {
          "ref": "18cdb824-c9f4-4e2a-b830-0ee031d6c056",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d992c958-25b3-435c-8294-89050ed6608a"
        },
        "item": {
          "id": "15f583da-bf8f-476e-b2c0-5c3329e3e773",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ed191ebe-7bc2-4c91-a375-d8edc18cb411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94e809f-a4ee-47fd-a894-c234ee2a8f8b",
        "cursor": {
          "ref": "fb06b867-1ff3-43fc-8229-dd907170c27f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "478fc3c4-eb5a-4b59-ab68-d9e2247e44a6"
        },
        "item": {
          "id": "f94e809f-a4ee-47fd-a894-c234ee2a8f8b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cc251427-3ed8-49cc-96b5-74b190c79932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38d8951-4d70-443c-bae5-b49fcbb6f19b",
        "cursor": {
          "ref": "6f1e706e-2b68-44bd-9fa2-b90da4de54a3",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1bd1a867-57f6-46e9-9e0c-eb00f2ad29f3"
        },
        "item": {
          "id": "a38d8951-4d70-443c-bae5-b49fcbb6f19b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "daeb42e5-50ff-4367-9cf8-76311e9bf352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fbb13b-c50b-4432-868f-297076a42d7c",
        "cursor": {
          "ref": "49d092fe-ccde-4f58-9cd7-4d80592185d2",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4af8a375-bd90-42c6-ab16-0470b720e059"
        },
        "item": {
          "id": "b4fbb13b-c50b-4432-868f-297076a42d7c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7fc5768b-b7ef-402e-a7c1-5318b76bc6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1633061b-b541-4662-92c8-1c3affd6f3b5",
        "cursor": {
          "ref": "4f333edf-d354-4f31-9330-4596e13645db",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "caa0e7a8-1335-4bed-abde-00750592c8bb"
        },
        "item": {
          "id": "1633061b-b541-4662-92c8-1c3affd6f3b5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8f4b8932-af42-4736-806e-267974ca9b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbca4e4-60bf-4215-84e6-2534e1843941",
        "cursor": {
          "ref": "69e1d3aa-89c2-4547-b7d4-62bc0620e3f6",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a9c833d4-eac1-4d23-ba97-c52cab43705c"
        },
        "item": {
          "id": "efbca4e4-60bf-4215-84e6-2534e1843941",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c345b215-9636-4674-ad43-87f1c29b10d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c5c944-c990-4eb6-a83f-940678b62ac2",
        "cursor": {
          "ref": "34b3d665-a372-42ee-b1f0-b4e8178ad7e9",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "183a31b6-1c27-4e7a-9a90-7ac791a5121e"
        },
        "item": {
          "id": "f4c5c944-c990-4eb6-a83f-940678b62ac2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d4f0ef1-4fa4-449e-b79b-9f83a4ce4a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8179453-7f19-479d-bc36-cba29c11ea2f",
        "cursor": {
          "ref": "c793553a-cb1f-42ec-8e2e-a5a64b13ba06",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d535ed19-c7cd-433b-8dd9-67ab181e00a1"
        },
        "item": {
          "id": "d8179453-7f19-479d-bc36-cba29c11ea2f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6edb54df-7c82-4072-b803-6b40829f73bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950e02d1-3f14-4f7f-a0b2-59d2e59d8dc1",
        "cursor": {
          "ref": "a4578203-be65-4d46-b8c7-2f1777c9ebb8",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7979f8ed-b7c0-4b5a-91fd-dd0768ad5a29"
        },
        "item": {
          "id": "950e02d1-3f14-4f7f-a0b2-59d2e59d8dc1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "77e0f298-f9ca-4a70-90da-9e1864a6ca3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46be7c53-dd02-4d89-a6bc-87781ead001b",
        "cursor": {
          "ref": "08d9a84a-bc26-4afa-9b00-45cf8b1cbded",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1ad565c7-8c3c-4673-a43f-d8bb1771de76"
        },
        "item": {
          "id": "46be7c53-dd02-4d89-a6bc-87781ead001b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31e83063-50ab-4ef5-9216-a619375ffa77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423618dd-037a-4cfe-be9c-1e03237e6166",
        "cursor": {
          "ref": "b50afa4a-4221-44d9-b4d7-208f97983328",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f957f786-72ad-4f32-89f2-808183fbacc7"
        },
        "item": {
          "id": "423618dd-037a-4cfe-be9c-1e03237e6166",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6f04b5a8-a7bb-4f32-90cc-c30993b6b338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa37332-f201-420e-a3c6-72e4e09f03ec",
        "cursor": {
          "ref": "0a198152-4c52-45db-bdd4-d820c8c78e68",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3954a62e-1748-4ce3-a75e-7090f6eb720f"
        },
        "item": {
          "id": "8fa37332-f201-420e-a3c6-72e4e09f03ec",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0c7b1e2a-11fd-42bb-b23f-d8fb782f8489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999102e9-cc49-4f80-9fff-ac7a5da2e141",
        "cursor": {
          "ref": "3d0ca717-3614-41cd-9e24-143c9cb608ed",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0486768f-5cea-4c06-a326-a39bd500930c"
        },
        "item": {
          "id": "999102e9-cc49-4f80-9fff-ac7a5da2e141",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c4ddefb-a987-41da-9237-ea78e9b46e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dc6cd1-2406-4e20-b44e-78642697eb8d",
        "cursor": {
          "ref": "7035a3cb-7a28-45da-91fa-8d3eba687ba7",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "260857e4-8e15-4020-b6c6-b169bcbb8572"
        },
        "item": {
          "id": "84dc6cd1-2406-4e20-b44e-78642697eb8d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e5cfddd5-308f-4bd6-8ea6-4a9615bae32a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9c1fb1-348c-4000-b5fb-a582a358e060",
        "cursor": {
          "ref": "0ac1f6d5-f98e-4624-8c73-91a13e0b107c",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f3eaf59a-a327-4137-8b3e-a48d229b49f9"
        },
        "item": {
          "id": "cd9c1fb1-348c-4000-b5fb-a582a358e060",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1f9c0811-6b00-468a-b067-6c6cb7b17341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa3b45a-5082-4830-9fd4-92c752eb0d11",
        "cursor": {
          "ref": "541a0055-79b5-4ce8-be92-8802ea6b7a61",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17332855-7f87-4012-8e8f-72dd1c29710b"
        },
        "item": {
          "id": "7aa3b45a-5082-4830-9fd4-92c752eb0d11",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4403f191-db87-4d59-9680-41ff2686cc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d799bd8-3086-4ff9-a5be-3f95e69a79e0",
        "cursor": {
          "ref": "fe81b9ea-ad25-4d9f-8fb5-67fd7833970f",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e52ba22a-391b-4b5f-990a-e1f6bafdca75"
        },
        "item": {
          "id": "9d799bd8-3086-4ff9-a5be-3f95e69a79e0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7dfbdffa-0818-488d-9480-9b4e9a959a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aadfa6b-e040-4526-846c-ace5ee58b021",
        "cursor": {
          "ref": "2299c46e-a73b-43e5-b831-49e3446a207c",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "057233ff-9176-4277-af1f-c9e29af72cec"
        },
        "item": {
          "id": "5aadfa6b-e040-4526-846c-ace5ee58b021",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "94a12490-5b39-4dd5-9256-1ef8ae30e961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9dd615-d44a-4b30-93b7-c44842ece0be",
        "cursor": {
          "ref": "ebd6b71b-3f55-4c83-9e25-71232f07f8d3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c347a09a-cf22-40b4-9211-63d25fffa184"
        },
        "item": {
          "id": "fc9dd615-d44a-4b30-93b7-c44842ece0be",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2ed6f135-0ae8-41f4-a7cc-8efd5a8c91de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097ee0fd-76bd-49da-9b6a-7f5c1276318d",
        "cursor": {
          "ref": "0a7be635-2e37-4e9d-b5ab-12fb8b36294e",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "015bd3ab-b4ab-49ca-99a6-b4518f5d6e76"
        },
        "item": {
          "id": "097ee0fd-76bd-49da-9b6a-7f5c1276318d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7e10c5a0-4dff-43db-8641-82aeb3878f59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c673e7a4-f32b-4e25-bbdf-e4e46b61ee96",
        "cursor": {
          "ref": "b53d157b-eccc-483f-ae96-a883054d747c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bbec5222-5e1d-4c00-83fa-e74347d4334d"
        },
        "item": {
          "id": "c673e7a4-f32b-4e25-bbdf-e4e46b61ee96",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "06834bcf-2316-40df-b16a-d9a6d5099290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74086703-f5a8-45c8-a325-441ff17cc9df",
        "cursor": {
          "ref": "89ce90dd-959a-47f1-becd-fd1ed7956eab",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c52f553b-1f3a-4e73-9923-7040fa7cc70e"
        },
        "item": {
          "id": "74086703-f5a8-45c8-a325-441ff17cc9df",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5529fe5b-3520-4699-a737-164547a45601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a08495-5b8d-40bb-a55b-2a20d5985b1e",
        "cursor": {
          "ref": "56560458-f494-4eb9-9c65-a0e89df11cfb",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "77fd5c7e-b78a-4801-866b-949c68c56ecd"
        },
        "item": {
          "id": "b3a08495-5b8d-40bb-a55b-2a20d5985b1e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a9e559b5-5caf-47dc-8a7a-325a1ac3cf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b01b529-bcc4-43c9-9ae7-d8a40bc7516f",
        "cursor": {
          "ref": "ca404c5e-62ae-4c6a-91a3-2b4ea48e7bad",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0632902f-45f7-487f-aad1-3ba821bbe652"
        },
        "item": {
          "id": "6b01b529-bcc4-43c9-9ae7-d8a40bc7516f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ac432d17-87c4-48d5-9bde-54a4679ce44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891bfffd-dd45-4572-b1f0-8902927e4b74",
        "cursor": {
          "ref": "17b8e770-9b27-46b1-9c34-b9c11ae54ac6",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8e82baf2-c949-4914-98dc-7b2e0c73903f"
        },
        "item": {
          "id": "891bfffd-dd45-4572-b1f0-8902927e4b74",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d777f202-cc37-4c45-87ca-732c1e31a234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2875513f-c2f5-46d7-962f-764d5495842c",
        "cursor": {
          "ref": "7168f9b5-61a0-4dfb-9e78-fe9497d6d2da",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c1087d38-3f57-4ae9-8380-90c6a1889b33"
        },
        "item": {
          "id": "2875513f-c2f5-46d7-962f-764d5495842c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8eab7942-e213-4f73-af02-d6c71dd0282b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "23a05889-9cad-427c-ae63-fdcc8b4e8636",
        "cursor": {
          "ref": "f7b8d837-cc6d-443b-b799-f032d0d3e7c4",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1237820c-ac56-4090-aee4-921efa8e7264"
        },
        "item": {
          "id": "23a05889-9cad-427c-ae63-fdcc8b4e8636",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dbd9c5e8-1833-4ace-9a33-267a1c326bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1933f9-c676-4d37-ab45-01f35c4279b4",
        "cursor": {
          "ref": "52bfe7f8-c4d6-44dd-8fa6-c25a8e52678c",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2004ce76-4656-405d-a090-2a6bc9b451aa"
        },
        "item": {
          "id": "6d1933f9-c676-4d37-ab45-01f35c4279b4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c3bdd866-da47-41f1-b10e-993542d5f429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d7b0d9-b21a-4c25-a037-4eb726539a47",
        "cursor": {
          "ref": "0bac0bc8-a3f8-4c62-83b8-01f9723807c9",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2810404a-a2cb-4f22-9e11-9ae7b688d320"
        },
        "item": {
          "id": "51d7b0d9-b21a-4c25-a037-4eb726539a47",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "59f32bd5-ccff-4167-82a0-584de498ccf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcc09fb-9014-479c-9a54-e3ab42d25866",
        "cursor": {
          "ref": "130886c4-d2a4-4eca-8a73-5b6ff61c9d1c",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "286eaeea-163a-4b48-ab5c-c85a4512f2d1"
        },
        "item": {
          "id": "3dcc09fb-9014-479c-9a54-e3ab42d25866",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ccb49f87-7d28-42f2-b657-063266f8ce3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80638590-68c3-4bc4-ae65-d8abdfedabc7",
        "cursor": {
          "ref": "d57c2dcc-dfed-42d0-984f-69ba0cd877b4",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1968e548-3ecf-4a10-aa85-e782d576202c"
        },
        "item": {
          "id": "80638590-68c3-4bc4-ae65-d8abdfedabc7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2f74b3c2-da10-456a-86aa-68165c2013f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398ff8c5-cb0f-4799-8ff9-c5e5de811bb2",
        "cursor": {
          "ref": "1bccb831-2fbe-4aab-bfc9-46f75a21167c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "645d2298-6b82-482f-b49b-6105a27e5a03"
        },
        "item": {
          "id": "398ff8c5-cb0f-4799-8ff9-c5e5de811bb2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c9649c9d-9f19-4e51-8db9-24ab1e21f6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d08c57b-6b48-4511-b988-336eb2122339",
        "cursor": {
          "ref": "67356b19-e08c-4ca6-8c81-963f9f86ae26",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "42c84e48-e142-4f9d-8edf-440aa7951e0b"
        },
        "item": {
          "id": "5d08c57b-6b48-4511-b988-336eb2122339",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7d3706bf-3c52-478c-a285-60948ff37993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2ada67-aeaf-4598-bf7d-de0586be652e",
        "cursor": {
          "ref": "cb3f378d-ebb4-4ff2-ac54-d4c7caf90770",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4d3db583-c68b-4ea1-ac87-2d2066360015"
        },
        "item": {
          "id": "bc2ada67-aeaf-4598-bf7d-de0586be652e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2e3f3a5a-4103-4b89-bf38-c1023a5267d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa54718-13b0-4d04-a1ef-9213d253de4c",
        "cursor": {
          "ref": "f66a2008-4715-4b09-8125-0f60cc9ad934",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7ad9ddce-cbac-41e0-8220-e3212781b1ed"
        },
        "item": {
          "id": "3fa54718-13b0-4d04-a1ef-9213d253de4c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "de0f8508-f1f6-4cfa-8a56-3d3c017201ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69a57c9-798f-4b0d-ad06-0eca57681d68",
        "cursor": {
          "ref": "96c0ec53-b7a0-4ef7-9847-3d5c6b45405c",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "156ffcb2-93ec-409d-a2a7-bfb930b79821"
        },
        "item": {
          "id": "b69a57c9-798f-4b0d-ad06-0eca57681d68",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "79100cad-c2f1-4385-8156-e633f4106547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fcf3fd-ab41-4e78-9ddd-df506258ce05",
        "cursor": {
          "ref": "4fd00947-e608-4325-8bbd-728a265a6816",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1524db7f-f815-42a8-bdf1-c30ab248a330"
        },
        "item": {
          "id": "24fcf3fd-ab41-4e78-9ddd-df506258ce05",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4315df1a-14b8-422b-b518-31973afc19e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a165b1a-6c8d-45ce-b99c-aa9bb0ab1522",
        "cursor": {
          "ref": "f884004b-b9ae-46d2-95fc-95264c5edb56",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7a05ace8-2eb3-4651-bb20-e2959fab3060"
        },
        "item": {
          "id": "8a165b1a-6c8d-45ce-b99c-aa9bb0ab1522",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c3f58087-4abe-4717-83cd-dac0fac37562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f811dc-1296-4da9-8fe8-d7eb873c2af2",
        "cursor": {
          "ref": "501767a8-f89d-495c-ad4c-f0b2ce058859",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "03d5faa6-f8a2-4973-ac83-1ebadd3a4d5f"
        },
        "item": {
          "id": "a4f811dc-1296-4da9-8fe8-d7eb873c2af2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "af7082f9-038f-44ce-8512-22b8311bc462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea698449-a8c0-42ac-8ba8-856ef5b05009",
        "cursor": {
          "ref": "89268052-8e5f-4154-8580-494a0140c669",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "99407bb6-1bc2-46cc-b473-028c81fa50d0"
        },
        "item": {
          "id": "ea698449-a8c0-42ac-8ba8-856ef5b05009",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ce248307-d864-436c-8e94-bb499a0674ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afa822b-6549-4709-9ac2-6745bef2a188",
        "cursor": {
          "ref": "f58b9ca2-38fc-42f1-9431-2a6894e55cf2",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "85bd6dbe-e659-4b58-ad62-b02592e3b91c"
        },
        "item": {
          "id": "1afa822b-6549-4709-9ac2-6745bef2a188",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "93076fe3-52ad-428b-a1b6-a678cb3262bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af5a5df-cd72-4635-a77e-f7471671aa66",
        "cursor": {
          "ref": "719d43b1-1244-4a41-9b08-46aaa6084a98",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f64c7cd1-5560-4450-a5b3-250f08c9cc19"
        },
        "item": {
          "id": "2af5a5df-cd72-4635-a77e-f7471671aa66",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a17e4ac2-6729-45f4-9bc6-fb4904cca86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe05f6a-8aec-46c2-9eab-662c06c44a3c",
        "cursor": {
          "ref": "edaf7db8-823d-4864-bc2e-b451db89a85b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e68d2688-fd25-45c8-9550-0551fc33551a"
        },
        "item": {
          "id": "cfe05f6a-8aec-46c2-9eab-662c06c44a3c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "deac89f7-02a0-4590-981f-dd1c6155ba2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbd883b-f21f-42e7-ad03-13b1b2d5bc45",
        "cursor": {
          "ref": "1791fb25-4068-4a89-97a9-b7abd3ca1757",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d2151b8b-6b87-4f2e-b97d-11d9702cd501"
        },
        "item": {
          "id": "ecbd883b-f21f-42e7-ad03-13b1b2d5bc45",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cd27af38-5ed5-463a-998c-ee7f8fc447a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe7ee57-22a9-431c-a3c2-aef361d80c65",
        "cursor": {
          "ref": "d8148287-ee16-4da7-9b98-9d677c908136",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "aa77acc3-15f8-427a-9f8e-f9c32e1e3f1d"
        },
        "item": {
          "id": "afe7ee57-22a9-431c-a3c2-aef361d80c65",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f4598c7e-fd2e-484e-9924-bc4d077e8339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4652c42-54b7-45fa-bbc0-89d650354def",
        "cursor": {
          "ref": "3f7e560c-f4ca-424d-9a73-c6dfc21035e1",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "68445484-b6db-4850-b838-1351a7a46e2d"
        },
        "item": {
          "id": "b4652c42-54b7-45fa-bbc0-89d650354def",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "457faee2-7b82-46e3-afe9-8314a11fc7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b94725-33f8-4b00-901c-fd4999434da3",
        "cursor": {
          "ref": "697b90aa-3e86-4f14-b920-8323ccc19bed",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "05410ad8-c8c0-49ce-a8e5-33913c0db93a"
        },
        "item": {
          "id": "c3b94725-33f8-4b00-901c-fd4999434da3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c1f537f8-c3cc-4bad-9988-dfef5a8a4acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926f7a73-912d-4412-be24-d71fda395379",
        "cursor": {
          "ref": "33bacd35-cd3b-4f72-b1e2-350051cd9bda",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ea0d44ab-e657-46cd-98f2-634ecfc2e838"
        },
        "item": {
          "id": "926f7a73-912d-4412-be24-d71fda395379",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9a36ced6-eb0b-49d8-8c38-27c6c8861b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d380d6-11e2-4438-9f62-3bad901ddf6f",
        "cursor": {
          "ref": "73e8383d-0ad5-48dd-9685-7a418c3fef78",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2c86314f-4c9c-42f2-a6ae-f036af963f7b"
        },
        "item": {
          "id": "98d380d6-11e2-4438-9f62-3bad901ddf6f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "91b726dd-fb57-44f0-abd8-d0a953a5c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5acb50-c288-4d67-92e1-cf1158c3feb9",
        "cursor": {
          "ref": "39d0a90b-010a-4a3b-9264-6c0d3c099b55",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "11e59964-11da-4fb5-99e6-9a1669f3b017"
        },
        "item": {
          "id": "8d5acb50-c288-4d67-92e1-cf1158c3feb9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "45b6d4b7-04f3-406c-b9d8-87d80fb2bd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf3ec67-ee9f-4cba-b72a-6e812c439d26",
        "cursor": {
          "ref": "6e70facc-dda9-4e3b-8296-7ec80edbb9b2",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "569541ba-4a46-4950-acb7-3e5fa4820381"
        },
        "item": {
          "id": "aaf3ec67-ee9f-4cba-b72a-6e812c439d26",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d13df67c-d086-421d-a74b-4cc9efa788ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2807010-e8e0-4202-a032-c4ee8969db9e",
        "cursor": {
          "ref": "85fdf891-8bae-41da-883e-e3f3d082f6f8",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9cfe7849-3515-4d71-be60-e0eda7ba2aba"
        },
        "item": {
          "id": "b2807010-e8e0-4202-a032-c4ee8969db9e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9375f880-45ec-4b41-8b3b-0e70a28a526c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80737918-8c13-473d-a8d8-ab705318cf3d",
        "cursor": {
          "ref": "5fc9cc60-ccd4-4c36-bafd-b9ea21a4cf7c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fa2e35ac-6bc8-432c-8d32-e7b4ba4a26ff"
        },
        "item": {
          "id": "80737918-8c13-473d-a8d8-ab705318cf3d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "53793097-c7af-43d4-8463-92a235246b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e237d078-7cdb-4f6a-a084-e7eb5b7b81a5",
        "cursor": {
          "ref": "6eaa2966-7d07-4c5d-b2b3-b43882bc0b4f",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4920c3ac-8743-4f52-870e-49999b015363"
        },
        "item": {
          "id": "e237d078-7cdb-4f6a-a084-e7eb5b7b81a5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fa617709-730f-4a89-b0d5-c5bbd20aee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b375762b-6b77-4f9a-8c6c-7a2ba7bcc78d",
        "cursor": {
          "ref": "b4bfb467-9027-43aa-9f4f-9e5f94da7ec9",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e6c81c66-da7c-41bc-b65e-5bee8c6e91af"
        },
        "item": {
          "id": "b375762b-6b77-4f9a-8c6c-7a2ba7bcc78d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44e6d34a-076c-47ff-934d-9843e5b4953d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816654eb-47ff-40ce-a235-4b9de61bbd05",
        "cursor": {
          "ref": "5efab09e-6d66-4836-93bb-4690c8881226",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "94c9d005-656b-404a-8e93-8441de3b8140"
        },
        "item": {
          "id": "816654eb-47ff-40ce-a235-4b9de61bbd05",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "28495445-27f0-4d15-a718-238d0a72a2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "cb4224be-cfa9-40ec-99ef-defa7b5e91e4",
        "cursor": {
          "ref": "a64f8ddb-095f-4876-9106-13b7a8f88382",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f6c1cd4d-b911-4f30-940c-af03ab382d84"
        },
        "item": {
          "id": "cb4224be-cfa9-40ec-99ef-defa7b5e91e4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9819e102-d245-4798-8c08-bcb903c492a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "66488905-fdfd-4b3f-b4b1-4bf9c849c9ce",
        "cursor": {
          "ref": "c23c643b-4ef9-49aa-b31e-6911525b6f8d",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e2657db2-d8d3-4f48-a815-379cde07cb21"
        },
        "item": {
          "id": "66488905-fdfd-4b3f-b4b1-4bf9c849c9ce",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8782ffb1-c8e2-4231-ba83-da278de8fb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b7e89e36-c98b-4f8e-9801-26c6aeba0466",
        "cursor": {
          "ref": "bfc4d483-3ce0-44df-955f-a23a66fa0cac",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "66e0ce5a-0d7d-4365-a7f5-e22d3d51da3e"
        },
        "item": {
          "id": "b7e89e36-c98b-4f8e-9801-26c6aeba0466",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eabc23ce-fd3f-43f1-9d25-f18aa7bca79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7ec465-b7cc-4972-a646-11904960ef3a",
        "cursor": {
          "ref": "ec54507b-1529-4314-899a-8611cc87337c",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ff2966bc-0acf-4cf5-8312-ab8e4c2a20a8"
        },
        "item": {
          "id": "de7ec465-b7cc-4972-a646-11904960ef3a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1ab6fa08-4914-4cce-b943-04c8b3dee846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "421cd181-7678-482a-8d10-c73a8136dcc5",
        "cursor": {
          "ref": "49401200-a107-4a40-b34d-52d4aa74c016",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d9a61772-f5f3-42f5-bb32-0a158cf66574"
        },
        "item": {
          "id": "421cd181-7678-482a-8d10-c73a8136dcc5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ae4080eb-63d7-434d-8142-2e4ddc9975e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1167,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2b4fca36-8d7e-4bd2-8191-4601fc875202",
        "cursor": {
          "ref": "f0e025d6-9595-4065-83f1-d6dff51d1645",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4fb556f3-6ce9-4f43-a7cf-4353c442d59d"
        },
        "item": {
          "id": "2b4fca36-8d7e-4bd2-8191-4601fc875202",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "62cfcd3f-d508-4b22-bc3d-7c7fd1ad0130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "254e3755-900c-4d49-b82f-f26861320142",
        "cursor": {
          "ref": "74734e4d-3b1c-483a-afa0-efd1a86be099",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c075dd63-b078-46b9-8dc4-93fa689de966"
        },
        "item": {
          "id": "254e3755-900c-4d49-b82f-f26861320142",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "24c43ea0-12d7-4d45-b981-90ce734328be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "95af51ac-0c49-4716-b39b-1637504fc535",
        "cursor": {
          "ref": "b21b43f0-acb8-4520-b3f8-71f06a738632",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "399ed753-3e4d-48d1-8d2c-02b495a5caa9"
        },
        "item": {
          "id": "95af51ac-0c49-4716-b39b-1637504fc535",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "08778a24-3389-4895-92c3-7a5ddf697017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "614d3f83-530f-4216-902b-e89a737751f1",
        "cursor": {
          "ref": "fd843adc-3ba2-4ee2-9b34-4507f1783e35",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a10edd17-3b5d-4a2d-9b4e-90f62c504f0a"
        },
        "item": {
          "id": "614d3f83-530f-4216-902b-e89a737751f1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b06d1672-ec07-46b5-a6ea-dc497df98619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b42cd0dd-8e35-4bff-b536-1b5e94e987bc",
        "cursor": {
          "ref": "de48a1cb-b251-4351-9e01-530e9d0659f8",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0a668d08-f08f-4853-bc31-8b28e6084195"
        },
        "item": {
          "id": "b42cd0dd-8e35-4bff-b536-1b5e94e987bc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "906fedfe-2324-4838-950c-9809c1fc69e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f415fd7-f2a8-4bde-bd3e-c04ce467c383",
        "cursor": {
          "ref": "af34c728-fd00-47e2-bd4c-3aad8e899c24",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "69cfd303-d80a-4e29-ac31-e38b234b4239"
        },
        "item": {
          "id": "6f415fd7-f2a8-4bde-bd3e-c04ce467c383",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "422ed2e2-aea7-4817-806b-21e4fb269d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779baa67-e644-460f-9e02-d9d315dc5055",
        "cursor": {
          "ref": "ab4b4f0d-bd37-41c7-99e6-52daebc81fd7",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "65c41ab7-b235-4994-842f-60491fa6bcb6"
        },
        "item": {
          "id": "779baa67-e644-460f-9e02-d9d315dc5055",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e47bd1ce-36ee-4e7e-8b9a-2b4496fab07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8c7d27-fa9b-4815-acff-65c078c5c178",
        "cursor": {
          "ref": "2c3d0153-6747-443f-b3d3-3ee5b83980ca",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5c8eb060-a071-4d23-bc51-ff95e7f897c1"
        },
        "item": {
          "id": "2d8c7d27-fa9b-4815-acff-65c078c5c178",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5d7a9f02-68b5-457d-9db4-17e00a4a634e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd72da4-1dbc-48a1-a176-29201e2d01e4",
        "cursor": {
          "ref": "f072c4b7-68f2-44f1-900e-498f19bc5948",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8b013d65-a5da-4925-a614-0458a6e67a69"
        },
        "item": {
          "id": "4bd72da4-1dbc-48a1-a176-29201e2d01e4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "36cb98be-21fd-4888-b517-cf27ed10c298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e836be9d-6f46-4f4e-b62c-ffa7edcad3eb",
        "cursor": {
          "ref": "e6107418-1b1b-4900-8ce1-b8f43cd174e0",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "106bb685-df14-42fd-a1ec-3845f51939a8"
        },
        "item": {
          "id": "e836be9d-6f46-4f4e-b62c-ffa7edcad3eb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1fda95c4-1dfa-48cb-91bd-88277152d6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b17577-4335-4579-bb2a-c29b8a584ab7",
        "cursor": {
          "ref": "6e3729d9-ed3e-436d-afa4-3408460c69ed",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1348f70a-19ea-47dd-9acd-fe7eead64182"
        },
        "item": {
          "id": "98b17577-4335-4579-bb2a-c29b8a584ab7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8a793eda-606b-4670-ab92-3eba392d1a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50bbff56-7fe5-4b85-8348-5000c29698c6",
        "cursor": {
          "ref": "3801404a-009a-4320-8dc5-b1c1a9b056ff",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eb640d2d-599f-43de-86c7-2904c5348d08"
        },
        "item": {
          "id": "50bbff56-7fe5-4b85-8348-5000c29698c6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb615912-74d3-4bea-a3ce-3d2bc500a55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f383f894-c260-4ca0-bdde-e7e56924459c",
        "cursor": {
          "ref": "f5dedbfa-aadd-4761-ac14-d1242ddcd0b4",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b5f780cb-2335-465f-afe5-a3e76a80acaf"
        },
        "item": {
          "id": "f383f894-c260-4ca0-bdde-e7e56924459c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cf09c774-db5e-423b-80ca-dabc50371af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467e15bd-06c6-4831-a8dd-fdf0c66e4adb",
        "cursor": {
          "ref": "77ded38b-1702-479f-b84d-e91f5cfc0777",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c3ecade9-36e4-449f-b9d5-ee86b501e596"
        },
        "item": {
          "id": "467e15bd-06c6-4831-a8dd-fdf0c66e4adb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f9bb943c-d5e8-4f32-9dd2-733962ce6f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3280a3ad-421b-4f39-b2a4-aedcf15e56dc",
        "cursor": {
          "ref": "8d869135-e09e-4961-a461-f0188d714847",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0a9748d2-c08f-4ac4-94e8-e791011e724e"
        },
        "item": {
          "id": "3280a3ad-421b-4f39-b2a4-aedcf15e56dc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "20384b9e-8641-48bd-89f1-ce4ae6bc95a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8008486-5bfc-4534-b23f-7b36850ada0c",
        "cursor": {
          "ref": "319143ce-bdaa-4ad3-8654-fe74b2ef331d",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0d013853-ef78-4e45-adac-6a767abf37b0"
        },
        "item": {
          "id": "b8008486-5bfc-4534-b23f-7b36850ada0c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "09f0927d-2093-4bf3-ad91-9fdabebf0977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e5fb38-46aa-4fe7-8108-dd87385d7cc3",
        "cursor": {
          "ref": "b5aaac6d-8908-4b4f-882c-19ed06225d4a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0cccf301-536d-4b77-8f7b-86fa5bb2bd67"
        },
        "item": {
          "id": "b6e5fb38-46aa-4fe7-8108-dd87385d7cc3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "91edd64f-d66a-4680-9995-e51293bf183e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6847ac-b214-438f-be4e-7a843f9facd2",
        "cursor": {
          "ref": "ef82547f-7906-44d5-adc4-9b764eff8c10",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "19969066-62bb-4ba5-acd8-4b98516806c4"
        },
        "item": {
          "id": "bd6847ac-b214-438f-be4e-7a843f9facd2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4dc03c5c-f8ed-4598-9b6c-ffb2f28bccbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1062,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4194b7ca-f9ab-4e07-86a5-775be8ec36ce",
        "cursor": {
          "ref": "83a7f548-ca28-445d-9414-18fb4a5ae482",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "05624222-6d17-4ed2-b6ff-3132ecc1b28b"
        },
        "item": {
          "id": "4194b7ca-f9ab-4e07-86a5-775be8ec36ce",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6cea0bd9-f932-41bb-8cd8-c00eaac480e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1081,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e4eb8d13-f99e-4859-92be-791213a93af7",
        "cursor": {
          "ref": "8e36c439-c9f7-40d8-8eb0-44badd7ac70e",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "28a2fac3-d70b-4eeb-942a-122b9864b72f"
        },
        "item": {
          "id": "e4eb8d13-f99e-4859-92be-791213a93af7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2b5535ee-eb2d-4763-a214-f4a435babe6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b7d2d8cd-1066-4fe7-bc8c-88197b5deb46",
        "cursor": {
          "ref": "f8df6d2b-161c-49ab-a090-5d0139948e50",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fdde6401-acf3-4664-b11b-e5158b762395"
        },
        "item": {
          "id": "b7d2d8cd-1066-4fe7-bc8c-88197b5deb46",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ccdc514d-872f-4d1e-89a8-0f74e44cbc03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1072,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "cc9c125d-d18c-4a89-8b4a-f467e0c35ca3",
        "cursor": {
          "ref": "fa8cafd1-081a-4e3e-a25e-1756e07fd13e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "62d89be0-d3dd-4b3e-94be-bdc4a4b1509f"
        },
        "item": {
          "id": "cc9c125d-d18c-4a89-8b4a-f467e0c35ca3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ffc0c7f7-b8d2-41fa-b6c4-a741476e760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6a60dcd3-6ebb-4a0b-9032-c42723251d7b",
        "cursor": {
          "ref": "e60cc8f3-4e67-4ecb-a77a-aa5ebe2c370c",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "895a5076-b10f-4f84-9c30-ce356fdc66cd"
        },
        "item": {
          "id": "6a60dcd3-6ebb-4a0b-9032-c42723251d7b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "05118a88-542d-4ef5-8390-8a35c709c414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f506603-8778-4a14-a1c6-08cddcdf49ca",
        "cursor": {
          "ref": "98ce7d9b-4227-4add-b16a-6803edb8949b",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eafb8e1e-4b00-4494-b097-6a379badd774"
        },
        "item": {
          "id": "6f506603-8778-4a14-a1c6-08cddcdf49ca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "96b245cd-37b3-45eb-bb25-7b0a43b829ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358aea53-22d9-4294-9b3b-0534772bb3c0",
        "cursor": {
          "ref": "5e2c7672-e4ad-440f-bfdd-98ab17afa2d4",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fc315833-0caf-466b-aa51-53e8c5670d76"
        },
        "item": {
          "id": "358aea53-22d9-4294-9b3b-0534772bb3c0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0c108cdc-cb4c-4cf0-90eb-3e109221c50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97baa72e-267b-4511-9ba4-a3e2961a73f7",
        "cursor": {
          "ref": "65bc27ae-467c-4ca4-b3f2-ab2784023e83",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "497ab0e6-12f1-48a4-9236-e1298ff4cbcb"
        },
        "item": {
          "id": "97baa72e-267b-4511-9ba4-a3e2961a73f7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3f425b47-f8dc-4189-960c-397aa43f5bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03b1d99-4b87-4f48-845c-3bc76cde3597",
        "cursor": {
          "ref": "2b6ab459-cad5-4aff-9366-24286eb25d0a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d007bc52-c2c1-40d0-bef7-fb85ff807840"
        },
        "item": {
          "id": "a03b1d99-4b87-4f48-845c-3bc76cde3597",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b50b8ac3-3f57-4d02-ad68-5c5d50d87c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c507b0-6caa-4aff-94b2-40fee4e0ea62",
        "cursor": {
          "ref": "d45ec022-6d1f-4a32-9971-44a0a23e5c3b",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "86b242bc-4e78-44b8-99b3-6309574c8e5b"
        },
        "item": {
          "id": "09c507b0-6caa-4aff-94b2-40fee4e0ea62",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d2c5abca-5b8b-4c62-8186-ddb67c147029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcee1e8c-6eff-481d-859b-e2ed977cf2e0",
        "cursor": {
          "ref": "8e8ff6d0-b437-493c-9575-95a05e2bcae5",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "677ed8ed-870e-4abb-9014-4714725b0a19"
        },
        "item": {
          "id": "fcee1e8c-6eff-481d-859b-e2ed977cf2e0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "66f439ed-950c-4263-ace1-7c90f214982d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced2b10-fea2-4757-a5ca-6c94f1cda5b6",
        "cursor": {
          "ref": "6527db1b-621c-46cc-9451-4fa00fbb08f8",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3c56a962-1a75-4cd2-a75e-7475f48fde13"
        },
        "item": {
          "id": "8ced2b10-fea2-4757-a5ca-6c94f1cda5b6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7fef59cf-fe6f-4ad4-a23b-496c2f12c56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef82ea96-4833-44ce-923d-fed92517b8dd",
        "cursor": {
          "ref": "c4cc2d6f-6e79-43cf-8d82-e0cdc18f4d43",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3f952702-875e-4978-a081-6a191fdcd717"
        },
        "item": {
          "id": "ef82ea96-4833-44ce-923d-fed92517b8dd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cab08ec3-e9ac-4715-b194-8458c9de16bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecf3a4d-3031-4d12-b5fe-4219395c8d4c",
        "cursor": {
          "ref": "600d4aca-bead-4adc-9980-6e6d0f822899",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9c31aba2-831c-4a98-94f5-a04964ec570b"
        },
        "item": {
          "id": "3ecf3a4d-3031-4d12-b5fe-4219395c8d4c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "26225663-9979-493b-ab30-f2ad82b899a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f81221d-04de-4e0c-b087-73acaa7ac8e6",
        "cursor": {
          "ref": "02572dc7-21e3-4588-9164-0232a8bec8e6",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a4197eae-a82d-4fa8-9ee5-e2b0111ccdcb"
        },
        "item": {
          "id": "2f81221d-04de-4e0c-b087-73acaa7ac8e6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7cc637ea-6925-4c70-a19f-c4a630dd90fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6bd4f4-8def-42fb-ad05-36dc53150437",
        "cursor": {
          "ref": "bf265d71-0239-4d69-a610-4c62a7f10a1e",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3d8c776c-26b0-4df1-b78d-9e934dcae674"
        },
        "item": {
          "id": "2e6bd4f4-8def-42fb-ad05-36dc53150437",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "83e3e329-2630-4c0c-aa93-0bc1ee58fc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8df68c-054f-4541-a607-ad992c23dc30",
        "cursor": {
          "ref": "408888da-aebe-474a-b72a-b6b6cc55cd82",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d3f8fb17-d0c5-4562-8e00-e44c59c4166d"
        },
        "item": {
          "id": "6c8df68c-054f-4541-a607-ad992c23dc30",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b7eea5f0-11e4-4b13-aecd-dc110827b56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9959f8-7e38-44e6-84e4-fc6765680267",
        "cursor": {
          "ref": "2199d02d-c778-4c49-8ecb-6bf873112c49",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "eea8cd64-a9e1-4924-b6df-bd74eac64639"
        },
        "item": {
          "id": "fb9959f8-7e38-44e6-84e4-fc6765680267",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a030ee1f-da41-4e80-9994-d91eaa52921e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b251d73-e256-4f94-b2b5-7befc8926b77",
        "cursor": {
          "ref": "43ec76ac-c020-460a-ad7b-ccb30e1e9496",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b2acd08b-77c5-4381-b023-58d013c09267"
        },
        "item": {
          "id": "2b251d73-e256-4f94-b2b5-7befc8926b77",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d47ef48d-cc6a-4c7c-a7ec-789aaaa98f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c04791-8783-44da-aa58-18053b7e6abc",
        "cursor": {
          "ref": "93841549-b31b-486c-aca2-af49742ee608",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "663771cc-477b-4b79-a19e-5eb685efb1a0"
        },
        "item": {
          "id": "53c04791-8783-44da-aa58-18053b7e6abc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e6160158-ff65-4fb7-b062-4e1284d12058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b035e9-4ab0-458b-b7a2-3b65f41f32f0",
        "cursor": {
          "ref": "dbb51261-fa28-4631-ad38-fc77f7db2688",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a80ef13a-fc64-4778-a0df-d3db988bd478"
        },
        "item": {
          "id": "95b035e9-4ab0-458b-b7a2-3b65f41f32f0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a405efb3-a178-4344-a82f-0675d253cc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077244f3-e408-4d73-b515-401b7592f081",
        "cursor": {
          "ref": "5a8c4bf5-b7b1-4b38-9977-06b789c18f77",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "24e82a75-e8be-455e-9f0a-7a3abbc3cb5b"
        },
        "item": {
          "id": "077244f3-e408-4d73-b515-401b7592f081",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14b48e3f-49f4-4ba5-9390-b9007c4e0cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0197bd59-2b8d-442b-b289-48529ae54fad",
        "cursor": {
          "ref": "3087ad4b-d8b6-482c-9486-5c7a321b8c22",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8487283c-57c8-4e63-adb9-c3b3bde22a6c"
        },
        "item": {
          "id": "0197bd59-2b8d-442b-b289-48529ae54fad",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "100b393b-2dfe-46d7-b2ac-6b91aedae5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843c1876-3d99-47e4-a420-8b5ff346320a",
        "cursor": {
          "ref": "21edcba9-3396-423a-9a69-2231fd63e62d",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "27fe1cc9-7796-49aa-8028-e95ea6a21aab"
        },
        "item": {
          "id": "843c1876-3d99-47e4-a420-8b5ff346320a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ac577ab8-1695-4f4a-9509-ce273815d7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbf4a84-7be4-4ebf-8a23-4f579f7f985b",
        "cursor": {
          "ref": "b80c2979-4779-4fd5-bd41-28332425f583",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "eba0302b-771c-4d01-bebf-653ca3436f5c"
        },
        "item": {
          "id": "dcbf4a84-7be4-4ebf-8a23-4f579f7f985b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cab4bdb1-175c-4259-b97c-6ed30be56a53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c4afb4-2618-4db3-b3bd-3fc701d8f51e",
        "cursor": {
          "ref": "5f593e6a-126b-43b2-9763-4138cf7d077c",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9b9e6e5a-1894-42b9-a440-a98520d4830d"
        },
        "item": {
          "id": "91c4afb4-2618-4db3-b3bd-3fc701d8f51e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "94f790fe-dae3-49fb-bc91-2cdbe311c8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03473d0-efb7-4004-9988-69117c46ed4c",
        "cursor": {
          "ref": "491301e6-411c-4ebf-ae00-78fede8d5108",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "44ed95c6-e455-4d05-8481-abbb7b8cf70b"
        },
        "item": {
          "id": "b03473d0-efb7-4004-9988-69117c46ed4c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a129167b-6281-446f-93a1-08c922161e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003200ca-a9cf-44eb-808d-857cbe37638a",
        "cursor": {
          "ref": "d8c64eae-cc29-46b7-be1e-22c3f10a1cef",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "598979ff-a366-47d5-bde1-2bc8594910f1"
        },
        "item": {
          "id": "003200ca-a9cf-44eb-808d-857cbe37638a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6a4c0103-e098-455f-b2c3-a816626306b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d431fa34-16b6-40a6-85e4-847358104f0c",
        "cursor": {
          "ref": "b6429862-a32b-407a-8867-8596e7998616",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "91782ae1-2771-4d4c-8d92-289444e91e87"
        },
        "item": {
          "id": "d431fa34-16b6-40a6-85e4-847358104f0c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6e5d53d1-4c5f-4b92-8e4a-6957c437e530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52f3177-311f-424a-b1e0-d85a9bd6a661",
        "cursor": {
          "ref": "15367306-dba5-4d76-94e0-18020307b830",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a64cddbb-1180-4a44-a67b-4ca5ff47783a"
        },
        "item": {
          "id": "a52f3177-311f-424a-b1e0-d85a9bd6a661",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5307f7f0-1e6a-42f2-8875-021d2bc08c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858b7ee2-d3bd-40d1-86ed-0c7843f17c70",
        "cursor": {
          "ref": "7e363eb8-086d-4e3e-bfc5-5c09784ccaf4",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "95b9f7bc-f24f-4062-b155-dd27fb2841f1"
        },
        "item": {
          "id": "858b7ee2-d3bd-40d1-86ed-0c7843f17c70",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "93f760a4-3e29-4118-bc50-c877ec109ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e34194-b59f-4d4f-a553-cecf25b85a9e",
        "cursor": {
          "ref": "abd3ae2d-27d2-4ce8-b7c1-e6cb8aabff9e",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "75a72bb3-781f-43c4-917c-ff97025de723"
        },
        "item": {
          "id": "87e34194-b59f-4d4f-a553-cecf25b85a9e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "23ea52c8-49f8-4c56-af19-ff2c0d6b8a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5303d99-695b-4423-a5a0-3c41b93f7a82",
        "cursor": {
          "ref": "95556e50-ac38-404b-870a-248b0289ffdc",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f86de66b-7f11-486e-9e28-713aa20426e9"
        },
        "item": {
          "id": "a5303d99-695b-4423-a5a0-3c41b93f7a82",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ad1a8eaa-da71-4e2a-a0f9-2023602f3067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed199d64-8286-4ddb-beaf-e04eeafb4f08",
        "cursor": {
          "ref": "dab98e7c-88e4-4c74-8e7a-7b2dcb9bf2fb",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "66ac0a36-8270-45d2-8c17-7d0af5dccad4"
        },
        "item": {
          "id": "ed199d64-8286-4ddb-beaf-e04eeafb4f08",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "333616ac-96f1-451a-8e92-69509dad023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea42ab2d-ce56-48f7-9e6c-5ffbf9468284",
        "cursor": {
          "ref": "9eefdeca-ad31-47ae-b4e7-273e85396092",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "afd39443-35aa-4bfe-8110-467cec926465"
        },
        "item": {
          "id": "ea42ab2d-ce56-48f7-9e6c-5ffbf9468284",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5c1236a7-20d6-4a33-ac0d-6f83ed20dba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64353bc-7d2a-437e-bca0-ef708fbf20bd",
        "cursor": {
          "ref": "3967e488-c6cf-46af-8a78-04597bec3d46",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "219d5c53-7cd0-492d-8363-707532aa6585"
        },
        "item": {
          "id": "f64353bc-7d2a-437e-bca0-ef708fbf20bd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "75f772c9-c312-42bc-9ba6-298f6c678c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7117ee7-c9a7-48b0-b17c-f711781dcb49",
        "cursor": {
          "ref": "3f53f02f-0a88-4dff-bfb0-b62a098062b4",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d755135c-486a-43ed-aa9b-3b2fec1583a5"
        },
        "item": {
          "id": "c7117ee7-c9a7-48b0-b17c-f711781dcb49",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c9c2c1c9-f057-4e9a-9440-2e29589eeb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9e5174-0d59-4720-8ae5-fad68bca5cfe",
        "cursor": {
          "ref": "91ca1b65-386c-4391-941a-e08ba4f72629",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b5f1c0f0-7d29-4f04-a994-da1d9c604e6e"
        },
        "item": {
          "id": "5e9e5174-0d59-4720-8ae5-fad68bca5cfe",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "209c07d7-3359-4aac-a966-1cbfa6434433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76eef50a-08df-43dc-acf4-bac1ec4ad23e",
        "cursor": {
          "ref": "08f23733-21b7-4673-93e1-ff91eafa6300",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7b5bc83c-aa19-49a7-907d-e58f8711dad5"
        },
        "item": {
          "id": "76eef50a-08df-43dc-acf4-bac1ec4ad23e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "59ef4ae7-b3c8-418e-b459-48008de3a2ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667f12a8-71df-422e-8dc1-97c2dec5d879",
        "cursor": {
          "ref": "230583ea-8a65-4391-be17-42abd2a318bc",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1ad444b1-f14e-4bf0-95bb-09b8cefcdd7d"
        },
        "item": {
          "id": "667f12a8-71df-422e-8dc1-97c2dec5d879",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b6d193a5-a622-43df-8c0b-ed9a1314bccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "068053c0-1ed0-4f21-b3cb-c23e96b98ea0",
        "cursor": {
          "ref": "774559cd-16bc-4f04-9b01-7ec838aca470",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c89a2765-ec63-4890-a005-052b9eb83a2f"
        },
        "item": {
          "id": "068053c0-1ed0-4f21-b3cb-c23e96b98ea0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ccbdd385-2941-4dcd-9176-96d236f7844c",
          "status": "OK",
          "code": 200,
          "responseTime": 1026,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "47582e8d-68e8-4995-9114-76fc8a11fc98",
        "cursor": {
          "ref": "915f0b6b-53bb-4550-a4e2-06ce842f10be",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a2c0eda7-4bf7-4cd3-8363-53d05a8a0d39"
        },
        "item": {
          "id": "47582e8d-68e8-4995-9114-76fc8a11fc98",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b6f25939-9ed7-4c98-82e8-3dd4152a20f4",
          "status": "OK",
          "code": 200,
          "responseTime": 1083,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f93af6-c3f7-40f7-9d65-d8eb3ffcd63d",
        "cursor": {
          "ref": "2e3bbf9a-37c1-43c9-adcd-e62e228a5f66",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c103e0f6-32a4-4483-8352-0a494a37cc31"
        },
        "item": {
          "id": "30f93af6-c3f7-40f7-9d65-d8eb3ffcd63d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "366f30fb-4aec-4ff6-8e11-77687479588a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f93af6-c3f7-40f7-9d65-d8eb3ffcd63d",
        "cursor": {
          "ref": "2e3bbf9a-37c1-43c9-adcd-e62e228a5f66",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c103e0f6-32a4-4483-8352-0a494a37cc31"
        },
        "item": {
          "id": "30f93af6-c3f7-40f7-9d65-d8eb3ffcd63d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "366f30fb-4aec-4ff6-8e11-77687479588a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f45674-f5d6-4680-97ba-f4a3277fd715",
        "cursor": {
          "ref": "701e15db-8503-4b5a-b15f-73affb7b864e",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "590fe6e2-e9b2-4451-8e13-327a15765226"
        },
        "item": {
          "id": "96f45674-f5d6-4680-97ba-f4a3277fd715",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d9f4c2a0-d4d6-4e2f-ad1f-dc30727f6d40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c58d066-167d-45bb-8eec-1b6c19684991",
        "cursor": {
          "ref": "7d33e4c2-e5e3-4bb7-a0e2-65e740a18f25",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "247908a1-82d7-4754-ba74-b321be619b69"
        },
        "item": {
          "id": "3c58d066-167d-45bb-8eec-1b6c19684991",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2e5539ad-ac2d-42d0-907a-74a30b97c3f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}