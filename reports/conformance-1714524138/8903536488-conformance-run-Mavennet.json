{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6408cb9d-30b9-4e82-ad2e-015b42bbaa12",
        "name": "Clear Cache",
        "item": [
          {
            "id": "510618bd-e1ab-4c85-b8ee-dbc2e490d002",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10b5c87b-eded-47bd-a6bc-3d44f1b0d99f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed0f495e-3d58-474f-913b-e9a4f171f189"
                }
              }
            ]
          },
          {
            "id": "807b6586-88ab-4365-bf66-3c0684b8b8f9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd258815-9c3e-4197-b08c-ce071ea3606d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f49664cc-da08-43be-8292-b95c6c608e90"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "48fc5062-f2ae-4b92-93eb-c06148ea1471",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6c586487-2be0-4e4f-9992-64740b293ef2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2196d7a-8004-4107-8231-49e2b05626bc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61cce2ab-b54f-4f81-902a-0c4ed504fe6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "63eb8e12-96d7-4e62-9902-a124a76fa18b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d962cf62-19e1-4ab6-89b0-911d205141a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8693f7f3-5854-48f2-8b2b-1c4cbb63a1ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4fdc343-fb8c-4336-be91-f75faaed7dc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2aeef752-53e5-420a-952a-0527b4bff424"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f22c355d-58cc-4e08-b8e0-2219992ceb30",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c9f76b42-f170-447d-a211-0e427ae2b710"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "243ed681-20c9-48fd-a2f1-a5e0cf496fec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe389c20-9105-4285-bd82-0ea95b4f1db1"
            }
          }
        ]
      },
      {
        "id": "5554630a-5637-4f01-a077-fd68791b9527",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d1009204-53cf-4427-95fd-99cd176673f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b830cc88-f73f-4a31-93a9-10a9756af56d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26e6e50a-f9f4-40f8-9b57-ac3c283099b2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec6dd4-d6dd-419d-a4fa-a5e3dd6dba71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8116ae6a-2ba4-4dba-a16d-9bddc29fb346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50519a58-ae60-4bfa-89b4-85e2e7add05f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0fd20d-6ccc-45b7-a2dc-b063ff16edef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d164cd6a-243e-46e9-8230-f28691e4a3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70fb02a-f7b4-46d4-ad57-0029ace808ba",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01c9b65-42c8-43dc-ae0c-5bdda37e2889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9d83ae8-72a3-454a-95a8-e162f5b574bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c653fd33-acfa-472b-baff-4b081ad52d19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77c4e93a-24c8-4fe3-9046-53971525085c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f1b67-af05-4187-a869-26245c75ce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54287a65-c9fe-400c-bfb2-0a8c159c9dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4736d550-9a29-4cc0-88a2-1bdee323fc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448b5f0b-b46a-442c-a449-e7b83e604bfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e3b2cbd8-8ee1-4f57-a0a1-d9048104b063",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8332c2b-21cd-49ea-b727-1b1b51a41e99",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "543cec4b-5009-42f1-bda0-7830575e1674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "14fee6d2-a2d4-4c5f-8c6f-bb379392b049"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fdad104d-22fd-4001-8b3e-de2bd433160a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "12f3c6b0-04ae-414e-8570-97a587584625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ae962ce-93b6-4dec-aa26-ff3d846c9263",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41084056-514d-461e-b016-470c86866bc9"
            }
          }
        ]
      },
      {
        "id": "5b902d3b-ea25-4bb8-bead-8a5bcb91746d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f2ec83e6-4bbf-45f9-a536-ba96e22b2636",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16f396a5-3d46-468b-8e0c-a711352821d8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0b5a5f16-9b11-4e4b-ad58-ad955d7505dd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b9e71f-1811-446a-9ed6-14881838d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a3fb12-1f96-4f50-905e-a072fe4dd2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4db4f38-8034-4582-9c30-a7aad156961d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a71709-3e3c-4f49-866a-e45bd41bdbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950d25e3-d731-4b67-8a92-74be2ec8a598",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae22570-7b29-4eae-b958-760695fd9f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3118f5d6-0390-4e14-8624-5d6b57c21528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bd5abc-4b41-44e1-91db-bc7358db241b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "588cfe2d-fcf1-4b6b-8be8-d73d3d686b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85e4f9f-1648-4366-a416-3ae7139d27c1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e330c726-2525-4aea-bf38-81ad8f8ed761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f177029-ffbd-4bf6-b1fd-8ec46b57a0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac06e10-ce74-4f56-aa3e-f851cad52bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dec62e0-e9fb-4036-b160-490eb23f3a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811693d5-9969-4000-805d-1e0eb1b417a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c35c7cf-01ae-4b12-80b4-6483ee0135cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e96d265-1ff4-4419-8433-fc636363b2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f11fce8-6c32-4b92-a851-4f7aeeff28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0e979e6-2b2e-4209-9e2e-f2f011139377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5634346a-9f57-432e-ab70-da6eb421cb08",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a750b0d0-37d2-4a68-845f-3d7d955128be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9793e8b3-6c63-4711-b86c-5af6cf82e821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9128a7-cd17-4ced-b787-f6b1d7296e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26863ebb-4522-4607-a4fd-32d15e181655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970289f6-a830-4d58-80db-2b9801512b4c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340d9a48-9f05-4a69-b9a2-75579e8185e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb7ddb5-fcfb-4eeb-8d70-23543f1cf2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296fd028-3868-4d98-8514-30ab9cd3d9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33ec548f-bd4d-419a-8b2a-5cbf50205f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eef8ad9-4a86-4e5e-bf7a-86ce9876c3ab",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ab3137-fbe0-4dd5-899b-d059be948013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f61bdec-b6e9-4e93-8fce-7e2cbe654d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fc6aaf-4c84-425c-9220-d55dddb80cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed5fdadf-e42b-4fa1-bc77-0dd141ea8f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0d9679-9980-48dd-93a0-e30730036aee",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dfca7c-6447-43ce-8464-4849dd1209a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af27d371-f978-4faf-8b39-04d8be8a61ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c46fd10-fa42-4d6d-af6c-eb8d557eea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0877d684-ddc7-4eb4-8be6-ee1121fb3d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9064c2e4-ba4d-47ae-8c3d-c0136435d2ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed684a7-e3d7-46ab-be60-15d21a25d56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045e0974-9fa2-46de-ad62-00135e0e5ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bafbad1-a440-4671-a966-641bdc0c32f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59dac0a0-76cc-404b-8646-37c7e20ca95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cc84c9-af30-49fd-ae94-1b955acc88d3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3be92e7-c63a-4775-ac78-2ae63d09e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f330318-3814-45cd-a11b-4693cdb62fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99640e8d-0833-4282-a868-6b0a2ff85a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a134514-0f1b-41aa-b0df-5c8f35f8968f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a09ce28-4341-4af0-abd7-cbde8ebfd3c2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd20dce8-b563-431a-bf10-5028f8bbd97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "183770fa-7531-4d34-8c16-2462a601ad33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12d2815-1ea0-4c99-817b-ce9458920c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c99b511c-63d4-44db-b0ed-daee02a9fa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcd53ad-da29-4193-8411-2bf6b0921fa2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a81bf0-25b2-46f7-a318-4b2b576b6c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21928bfa-e5ff-4ac7-9d30-f58d5ca401f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785aa373-d22a-4d15-aebf-6f3e334aaf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16d8c167-69d5-487e-829c-61b5cdcb57be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e830e2-4cce-43a0-9934-3eb11092f3b5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3507cf5c-2011-4022-a103-bea44a3813b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d98ab2-3d5c-4bf4-9682-4d15521a93d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9051c9f-79d0-4ce6-95c2-2dffd77594fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f5042d-a1f8-4a15-8144-57396d3f426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd945259-1480-4584-8bb8-bb64c36e46cf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ead636-48db-4a55-9048-00189df74fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc3c23b-6784-4a43-a365-e71ff367e7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89889bc3-aed4-4713-9691-147e59db17bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b839997-ad66-41ea-b1c4-e3710451c383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bf33d2-2543-46a8-9de9-49dc95db07fd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4858af2c-510e-4e60-a56a-68de6b4131d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2726f1f8-e1db-457e-965f-6c6d6d97de48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acc604-2027-4791-bc27-12b76bfc7b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4594386e-b87c-4349-8fe3-38b8bf4c04d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ebe1e3-469d-4e4e-8381-d7618058b399",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c13179-2b4f-4f05-8645-3c1ed935d618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4dd5b4-d6aa-41f2-9d31-3f0772a5cf58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2386e6d7-eab8-435e-942d-cbedde4226c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6544d4a-1322-4817-af5c-d56386fa0b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e048837b-f94d-4889-a2c9-1961e1bb0f72",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b52c03-a6e2-4f42-a468-c422f08090c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7956d1b-e7fa-423a-af55-c95ebf193c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37587c4-3047-4bc7-b0af-5dc66d6fe909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8a87460-da48-4699-86ca-38717c48ca60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e538e532-e570-465d-a870-f761b54c007c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0760e43b-e7d8-4a7a-82a2-4d941e62a20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf153579-f979-47d0-a926-cbe1e3922364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c5dbac-5ece-4f2b-a2e7-09d1225bce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbfc050-db6a-4e5a-902c-2afec81cb9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f4befd-bc1e-47ba-b7da-0b3fd634fc11",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ac1f50-b7e3-4e7a-9125-43b3ab489da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83630451-cacf-4c65-be1a-61c3b4e27caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5958c9-4c87-4ee0-9501-35b0fa57a035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07c49f03-955c-4b15-8267-6c343ee0f491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e62b5f8-23a1-4509-9e64-bd89a0bef958",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1491441d-a201-4e0c-93ad-11660f851eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e069b5b7-578a-440e-b394-99860d04c51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1892b4b1-90f8-49c8-9501-36b1d6d066e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3476a072-0159-4518-80d2-f5897f6137ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cfacbc-9888-4f7a-ba4a-90c097dd3702",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97001fe-60c2-40b9-8ca1-9597bc0e3dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0683323e-ec55-4892-b2ec-6ed4afa08ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f65a26-c7c3-454b-ad8a-325aefeb8959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f53b9505-ea66-406f-83ec-1fb596a321b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02cd436-8cbe-43bd-8903-b93fa609f1ae",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d3de03-701d-4ff2-be3b-07208e3b2db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7711a956-f844-44ff-a6e0-4f60bf1bc131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cbf511-149c-4d85-8e3b-cc4af0595818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1361e2be-c2a2-4197-aac1-9768c56b09ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb7cbc1-f43a-49e8-b2cc-d52a12f51c0b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a8eecc-5c36-4c83-bb8f-e3623bf77a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624488a5-3686-4108-98d6-588a88b20843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049f393b-a078-4623-99a9-c25736564866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93b0298a-75ea-4b69-9026-fb6fbdbc6398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afc7992-63d8-4111-8b41-b5a1fafb1f38",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a402b08f-7319-49ce-ab99-edbff09c8d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4b5c67-97ef-4710-85fe-f7bca8715355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba9eb8c-0139-4cf8-8901-9a61ee38d1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "98f72368-97d6-41f3-8398-ec829eb06c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdbe8e2-51f9-47bf-adf2-7e7e24c21306",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00cda3a4-0f55-4dd0-a1ba-ec85d04a02b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b3a717-8520-4f27-ac18-b66c5cad43d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f45c19-3ef0-49e1-9750-d107071a100d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b766ed46-de09-4a0a-ab91-33d568373aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f4b399-3668-4a9e-a77b-53bcc3640abe",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b682fcb-272f-4083-89db-abe2f2cb7fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550390f9-671e-40dc-abfa-8b247a788f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed4220f-f7ee-4f3f-b3bd-824c72949297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2912b26-d8e2-4f39-a11e-63c8fdf0a5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb650cd-0b5c-4f3f-8b54-739b98dc5b95",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c73aee-20ff-4332-8797-96c71e1aaba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5622a19a-de5e-48bb-92d8-19d32964859e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14600fb-fb7a-4ecd-b475-1d80e00f5af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9737554e-4a38-4001-8860-9c27e44f9b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bdab6c-fef1-4a77-92ff-3601d0156d56",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b57c41a-eaa4-4ef0-a5e1-4f67a6c73b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407fc9cd-537d-4357-b1b4-9956f81b9764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65f8194-8423-4b39-b011-44e74bfe2e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "541e3035-eee2-4300-ba2c-cd6801a09288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de01a7e4-e973-40e8-a0d9-b21206331324",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446a0092-6b4d-4d49-a466-2f1c18be171a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa7b166-2e54-48eb-a390-606d4e26904c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bae2a7-3f98-4036-b39f-d458461fc216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "252c4519-1888-4377-9142-7f9e6f239486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59f70b0-1d8f-4855-8b80-6b7a04ebe085",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e1e4a9-008a-47d9-8bc3-b562260bc581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12aac563-77e2-4eda-93b8-7e85e1d115cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e758dc0f-47ad-4497-b28e-e60be9c494b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "854b31af-d332-4771-9bbf-d1eddbd9a3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c8b0ad-538f-430b-b5cd-d5b45d3885a8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2058bd3e-6ed5-4350-a9c6-36b6c345f0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00995c97-51b9-4004-96fa-f77a66682abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626916b4-9e96-40e2-96fe-0d41bf9453bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "439c7f83-75fe-4f00-aef2-ea40bea9f0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1517eb14-fce7-463b-aaf3-eb80f43993cd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd66e9c1-194e-4fba-b600-630a9202684c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0863bd9d-b609-40fc-9aeb-cf78743d64b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b1f5cd-86a9-471a-89b6-61ef25040ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9c3879b-4636-4e73-889e-a39041897f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfb22f4-64b4-4f5f-ad47-27cd7379e556",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7c2348-45fa-4e6f-89c0-ca3bb93b9644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9ff0d5-956d-4e20-a843-b15675412831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ca555a-bd19-4931-b5aa-a8359923c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20150826-81f0-4dd2-98df-1bb6e84d68e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a91a802-b475-4340-bfbe-cb451a296706",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52528731-cf8c-462f-aadb-d393f6ebf6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b19c0b-046d-464f-9e00-8a3a87cc0918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382762c6-e473-4904-95f1-4587b8c0410c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e05624-98cf-4066-a479-af8eff4269c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e939ae59-7494-4392-8dc8-384ad7a24d2f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e7b2c5-77a1-400b-b198-0d4c11ead424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7022806f-94c4-48bc-b9ad-4fb92ecb73ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb978c1e-f2a6-47bf-b03a-669edfb97b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "91d62557-b57c-41a1-b40a-50faf7110dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2879c89e-2147-4ae4-98ee-97e9de6c4e4f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b3e27d-7622-4379-9605-e14d8cc4aa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "062a3f41-25e8-4218-a24d-e281cd5f0800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff742665-e2d6-4467-b8ca-795675d271d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d07d550-c5f9-43ba-a836-dd1d104cf39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f2e20e-0600-4e40-8197-c15cadef6496",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c318c4ad-88ad-45f2-a6de-7a39956041d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f596144f-6b36-48b8-977e-7959de8d4300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0f79e5-cce8-4be1-b6bb-ff72b384f8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdc8dd6-fd70-48ba-ae01-265f3a90960c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f637f00d-23c1-4a20-a70f-d73832159d6b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a4d251-fedc-443e-8765-ff4e0b114686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc91cd4-daa5-4939-a031-4239f5976c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2df8607-786e-4fdf-9c42-fed7a5854fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "556df50c-6a4f-4459-b821-51e95f448aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d680b52-c6ca-473d-920f-3f3ddc80c3a0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b02304-ecbd-4691-84cf-3212acccacb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d778a4c-748d-4e1d-9905-8d7f0eeea6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5163fc59-03de-4e6f-a998-2f1e4490ff78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43dc8ae8-1ba9-49f3-97b8-d37d2460d1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60c13ad-42e2-45d8-bb6a-9eaa387d4673",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad0c476-0ce7-4f34-a865-b89438808f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270decc1-ccb2-4a3c-8cac-1040a8740c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83408b51-b4d5-4bda-b80c-47b01e78f68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f97c313c-ea5f-4fad-8949-52b6e4fe8d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f4e56c-731b-4a44-bcca-49b2dd6eef26",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901c555f-ccc1-49be-9195-cc9fc30485a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398255a5-a43b-435d-9d8f-74c2e11d8772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cc0686-26f9-4256-bfd4-45faf5b9cc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "022d89d0-c385-4d17-8367-8da8c3332811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9eca7a-ea9f-4792-b779-8f142e79ee43",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83497d9a-cc9a-4997-829b-8823f031ef9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3802c1e-33d0-41e9-ab3a-18c9d59c712a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90f80ad-88ce-4bf6-bda1-435e5bab2f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "395fb7ad-074f-4d5b-8e6e-bbf9c4f51eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808c6526-c241-4d2b-ae00-707413fa77ad",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a1a2df-ee96-470e-a72e-c551b9ab3b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5bc0568-05da-4295-911d-c12d1a3eb2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b99be6f-d1fa-48d6-9851-1a860f0596b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "64c06e3e-bfab-45b5-acca-2c11c333c83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee41c26-08de-44de-9ea4-0ca9928e1796",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfa09a6-3a3a-42c4-8096-3eaba88a0b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081d4cda-353b-404f-923a-ef86ae926c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95acfc2e-7f87-46d2-8e14-eb7614c111a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f5b319-ba9f-4134-a1f4-5889b5a82842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecc3561-385c-4b92-9529-f4b49ef0d830",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325a9103-dab1-4568-ac3c-b6f390739a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6440493b-29ee-4998-9fd1-f02b41408db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d00c506-59fd-4f08-91e5-2bf6fdf1c151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "227aed35-4db1-497a-9504-6b47daac13ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243af27a-ecc9-4bdd-a1f1-5ea0df9b2abd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de056f9-aaed-490e-bd13-2bac587bd9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519886ca-26d9-4a50-91c1-a211bd945241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940131a9-d7b9-416b-bf7a-ef4ffb5f58d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac14ea92-8ac0-4b31-af5a-3a91a487314f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6e880c-597f-4be5-beff-c73e46ef095e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697e5543-85e5-408e-8b0b-42cdca79c94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f1baaa-f8a8-4386-863c-43da36fb5cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff4811e-4cb9-4085-80c5-f64d814a7aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "efc25d22-ecd3-4ee1-a030-300ed857f22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba73a57b-504b-4e0f-8efb-c9c9168548bd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd322f6-28a5-4386-adb9-1b7ce6e65903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a863a5a2-695e-467a-80e2-9a26ea727adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbe79c6-adbc-49ae-9817-5634bd31f150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fff464c6-ef25-4f2c-9e80-f2432360f091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31161523-2a66-4e68-be38-200c551f3f26",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba5f326-94ae-401a-80df-5a151b4c0488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282dd905-a9ef-4b7b-b7fc-e6e999ae1e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f755633-8afe-4b5f-b6e2-b97d55e56193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b573df9-cf36-4075-8747-ab67ca29c5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6683621-d3a5-44c6-b283-4531f283eb68",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92af26ab-0c4c-4a28-a1ab-e5b861f4dc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20d6028-dc22-4826-8cce-4f558b8412f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8779ae45-d950-4132-a5f3-6d1807c3e30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4018a671-85e8-4be4-94a0-9b04e52d3a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61af757f-42c7-456e-858c-81c2d9a76195",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a528e96d-11a4-4a86-83e3-eef2466b4437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67720e8e-b39a-49a0-89e8-769c4a91afd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6747d0a7-7201-49f1-940d-2f06e553e12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "575e323a-8d49-486d-9e40-f584685c4da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb593d5-6c4f-4f7b-8203-91d1699d4020",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665159d7-b1cb-48ac-b27b-9ca06be5c809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4cd19e-9f78-4918-a590-13503fe65465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bee52c7-eb42-4454-8b2f-0a379916c229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ea4e50-1be3-4142-acb8-3de7fac9eb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e08346-3cac-4f85-a724-88846af8651a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9eea77-81f8-4260-acc3-fe471eaaee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69084338-f8e7-4bf3-aeb3-9680d7e59d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26c0f1b-e800-4806-93f1-4ecfde66d935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "709896fc-9043-40ad-8358-e8c12298dc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb710941-3af3-4950-bf5b-5f9bd5e7a5bb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4b5d25-2ced-4c1c-9769-7821597a3adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b5f530-0168-468d-93c7-f03e999e89c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e4611a-799c-4257-8bf7-c641e90682c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea736ba-771c-4135-9b8a-be1f1d008573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad88bce7-0be9-4ad3-b9a7-3cf424cbff0b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa572f31-ab0f-4ea7-8dcc-80d210f80e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dadab88-09d1-4901-8072-f1bc69401dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b2422b-e05a-49f3-a676-c86e689da476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7616338-bb6c-4cd6-9f5d-1fa4b2fd8cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f907ce76-06df-484e-a393-284a91fc7662",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71eb0faf-c668-4bc6-b36d-660b8f8267ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d4c166c-8218-40da-814a-0cfb1256f44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf7cdda-8c51-4a8f-be46-bfce87b407c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "eac5fb04-84db-4d34-a3df-aba34dde83f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1db1d64-e1ff-4658-a90e-fbb9f5de9d57",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267b3c25-ca95-44c6-8658-64872568c2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b0f281-7110-48da-ba53-517625227524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e44db2-4660-4c33-9573-da92d2a9d582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "517afc43-c3a1-4721-b93e-84259bb5022f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5144ace6-c35a-4b1a-9853-adb40d5de4fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a74dbd-d3ce-432c-85c2-9baff4085d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71e5003-0400-4111-9cbc-5a5457f3466c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce276620-4432-490a-be76-eab80d29f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb91c50-20d6-4ebb-a4a7-bae40afbae5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7577ef36-4435-4697-9529-ba44f845b974",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d687c7bb-1cce-473e-9cf9-fd5aa0ed2b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969e8086-c764-4970-8b68-49bc5f0f67da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837835db-666d-4376-bcec-17d7a2e39e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ccc0dc-5006-47d9-8e79-200ba3def2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bf811e-3fee-4ea7-97f8-e08d75c8d4d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35fa5f-c6b3-4a8e-813b-d422d842aca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048a54e4-6c29-41c2-99e7-acb3b38e3b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7affc93-bfa1-4593-b142-bc6b51308479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc67068-a8fb-4261-bc6d-f69108b1e35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929c8b0c-1bab-48fb-9cc2-24cae3e24045",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dad485e-8107-4e06-9006-3f9b8e262363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0d3b90-3507-4e1d-8e06-d8edf6051be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6482266d-5314-4ae9-bccb-ab3a44245d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02f4a97c-7a27-4325-8a4d-2536b2d2e759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1d0543-d26a-4906-9abf-ae76c301eb31",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520d9440-25c6-446c-9e14-9d7e07106bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c609d353-44aa-4198-a22f-ad79b8b4362e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3386ac59-fdb0-405f-aa6b-d2a14714a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4a2859-2893-4c45-929a-e3fd16a9c193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b4898b-4fd8-421e-a78a-8da66b802992",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de2bd39-572c-42bd-a28f-c8c6fd75daa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20591f85-762d-4df7-8f5d-86c189a29752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda0a52c-979c-4449-8b5f-74937359aaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ba7e98-8df7-4413-8d62-fe9cfcca21a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66c1ccb-0712-4d71-a242-a7fa43832d5c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96ef642-6f25-409a-b6d1-00a4ddb34a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fb5085-b63f-46bb-beec-6ed083806c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9aa9751-8133-49c7-8e88-5303f80d1631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b77478b4-6f07-4f36-8549-bcb11ace4d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd3322c-788d-4216-97df-422a689b8a8f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da813f1-00c0-4f2a-a298-02843157c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd8ae85-ca24-46ed-9ef2-7eb006ba3f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71f68e2-8dc3-4e57-9fc0-20303bc25ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "475a0831-0711-490e-9047-25cf03e09285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada0b5ae-a112-4be1-a7e4-ebe4a75c2717",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dfd2ce-387d-4e3c-a110-8521e3854eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951dea73-707b-415e-8ce9-9d9e2420ed22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e69b4a-f363-44e7-adf6-5637e753ba76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2c49f3-447e-4da6-8e78-e7ec65141826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df847d27-acc6-482b-b490-6c438c28d483",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8997b1-2b03-4631-8a76-9a3831eb3f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aa2f28-5c17-4b68-ae6c-95675f5e3a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0f869c-4b14-4eb2-ad5f-30a52ffd63c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d33107-c6f6-49a9-944b-0dd6fc66be22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b54b1a-6fb1-4980-9dd2-e572dc3d9be5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc33a9f-1489-461a-8150-a5f402db5f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6028f79c-752d-4735-9552-ae6fa8ce3d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f415ef-f07c-4b89-b0d3-4f27d9a65e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e54d58e8-5e63-4b25-bed2-7fc282635d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7425af2a-27c0-4c3a-821a-4c9467371cea",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f44ae2b-ed42-458d-a465-01b41beee927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa867ed-a29a-40e1-810e-1627e9ed34b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6446348-6c8c-4780-8782-400c1ed473bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a824dae-7a9c-4f89-8094-862e59a239f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c98864-62b9-4261-b0b9-7b19b22d69df",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238de103-dd32-4c01-ac82-bedc70d55f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac20f7c-a0c9-4538-ab9b-60bf37202c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef07bb5-0073-4894-9a9d-dd417e94aaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bf5910-669f-4519-b721-60ea40f29947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0c751a-bf3a-4ebf-9b71-f028a9ef0085",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05775885-5a90-4ed5-a77b-ddd6adfc7cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdab46a1-dc1d-4fe6-91f0-64b95a63a523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fccf33e-b15b-4d2b-b248-f8a705f0c58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac1f3ce-fc93-43a1-acda-4a754b8f8def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b09a796-54fb-49bd-a802-922f3bdad1f7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fb21c0-dea3-4df2-bc4f-936f8cac70d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c88783-a2ad-4480-a0a4-2a46759d5e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28056bfa-cbe2-4e73-96c8-748cdacfbb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7766e377-b702-46c6-9ba9-0ef61626f7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1581ed-c8e7-42ab-864a-dd7187eec1fa",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355dd9c0-a0dc-4abf-abea-32f618cecfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292baba7-dce9-48cb-82ed-03125443fa65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5ce92c-31dd-415c-9184-aaa6862ccfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56acee4c-6bc8-48f2-a8cc-d98928659cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a41dd0-c760-4b19-b628-b9053c2b8083",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffb13c1-5255-463f-b930-c8685ec562ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8bc2f0-e118-4f88-a88b-a10db944a9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40692a9-7f44-4f75-8f8b-1a57e814e883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "354919c9-232e-40e5-b905-1f9751cf5ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee83c5d-64d1-4bcd-8d11-0933f5104d39",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6891db90-bed2-4373-b0e5-0674d3608ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7d5626-3122-434e-8931-9e5d2f2e9716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b7375d-b91a-4ff7-84ea-6c185160bdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb9445e-8d2a-4805-b017-ac23d3e6e85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f28e16-44c8-44da-b98f-1a1f4150f776",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1babbd12-309b-492f-a761-ca7b229820b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d653f345-7a30-46f0-8135-9aae7de799cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1237f07a-4948-4655-bcc2-080d04febbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1a0aef-1e5a-476f-b6ea-ab060e67dc14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac85aae7-939e-4051-97c8-c0acbb237175",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380d1d6-c149-4c36-9f0c-ca0097502526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41091647-9d4f-4eb0-a3e1-c26b8ff2942f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0797bc64-9fdc-4d8a-8d7b-a559763390e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31860516-5954-4fbd-b7b7-b7d879de4cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92115ae5-6c09-4f63-a74c-f5bf65d6ce57",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93da706f-7f6c-4aaa-a47a-deec80991ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b657de-98c6-41e3-a7fa-12c43a809cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8b407e-dc6a-494c-bbe6-328c129950ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26143a6c-e478-418a-86d9-2994ac025c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357a3f28-3d6a-47d0-995f-4ba705c57cda",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d1af5b-7ce7-43ae-9af9-c094884a81a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a5222b-dadf-4f90-9735-0467da0dd0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2c4921-ad16-4279-a5e2-6b942f6aa00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3806d933-2922-4658-9b45-347329886774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f799e7a-1e0b-4ede-8408-ef8007a4e6ef",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c00c8f-41d8-4ef9-bf1c-1195f1f137b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c83f4f7-1a30-4470-a58a-44833cec8cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a300327c-76ab-4bd4-97af-c6a5a96f3616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d73f9ba6-f473-4ccd-ac37-51e36ddf7d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8870446f-8a76-458e-a33b-21a5687bb17f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b83bc61-2364-4404-bdbd-0fea7596f918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0694186-ca14-4b58-92a2-e561f53b48de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2564b952-affc-4eea-b998-f336f59c945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "97e06477-9b8a-4421-8df3-214d9657adbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bf05ef-b4e9-4aed-a134-5ba19fbef269",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed450fb-3c9e-4047-a062-763a6a87b1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d36d37-a7b8-460a-84e0-d774a435e9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c4a1af-b715-426f-9ae7-ebdbe54eacb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee55b7d9-2983-486f-b57c-88a540422919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513cd027-0d6f-42ca-b858-231b7fdba353",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b555c28-646e-44ad-a216-92a2ae5b7699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8c3bb3-606f-473a-9cee-3925571a123e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0695bb-7099-4d1f-8541-527c30e064f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4a4359-9a21-4067-9549-e3afb8b8ff6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075a4e15-430b-4850-acdf-f8baa78659a5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bcbe53-42ea-41fa-b598-0f9e89846600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9412cfb6-4a07-4ffb-b77e-abc7e0123a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8cf5d9-8b85-469a-bb21-19334e178fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a77468a-101e-4b0b-bf7c-743bc990e153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec39cbd-a3ff-4c1b-aa3f-0e872f823712",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d04589c-bc1e-4afa-aa13-014e4c60a597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9888bb73-18ff-4e1b-a892-465c72cbab1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53972fa8-3b28-4861-96ad-f94ef2dc52ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4261d39-07e6-491f-9c33-a215f29f1297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0608262c-1782-4a8e-9797-9cb13180fc8d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831bee85-4c6e-4f27-8100-26d2a1efe649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bb689e-8eee-43b8-85d7-cf1341c67650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ef8a16-fc0f-4b3f-9e92-5d9f4862ec85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6fa90c-b1cc-442d-8cb2-d2c6193b00f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d951058-ad8e-4783-b665-403af2f7dd4b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335d4769-9bec-4351-b67e-462558dcea5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8fa35f-1e11-480b-bcf1-1abc534ec849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcfa285-1e88-457a-985b-ea5d1f018baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7a2552-8084-4a63-a11e-a375774eb4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f0f51d-c7a1-4ca1-a390-f683c8dd2a32",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af367d3f-7297-42f9-9ca1-9e10f689eab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fe21f9-e733-46b5-834c-0eab252bb755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc48ffac-f616-4823-9029-6a740225dbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ad446f-600c-4dd0-8923-13faa1cfe54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6699f200-44ea-41cf-8c13-c3d702f7b29f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd2ad5d-3487-4e63-8e84-a400b133b48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a67ca6-2f42-421a-810d-4ed6ab66df4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04e64fc-92c5-455c-8120-7eaf06c2866e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc4b086-a222-464d-941e-b616f36f2fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a22393-1bd9-4ea2-95d6-d9ead96147a3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6aa5f0-cca2-4fd7-b597-fa63ea47fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1841fff-5bc3-493a-97af-4e1c77c0feea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e272326-7454-45dd-9d57-0b8216aa65fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3d5704-f000-4c5c-847a-dd9b9eccc5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092ed03d-b473-480d-b932-ccb68374b60a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17976e3-dad6-4bf9-b91c-bb3142c9f588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1b5c5a-b10c-419b-aa26-0704d3ab175e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48023b18-3432-423d-9f24-3e6bf671f3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "36bbc396-2d3c-4e93-96a2-6ec48626d0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce9b56d-37a9-4447-a4d8-8a58d12ec1ef",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2587421f-f273-40a3-a1ff-dce98eed3bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fa32bdc1-1e96-4f80-93c0-c794dc7f5125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750735ef-566e-4624-8b11-75fe7f4a6861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e6238a-6ee9-4d42-8113-a8f1d3eeece8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "efcabd55-2551-4c8a-860a-2b73ba81a9f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6c74d8e-f82b-4fce-982a-6e05943ceabd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3e8fa5-a13f-4ea1-8cfc-e0f5722ceee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e637064-13b6-427d-868f-e4fa93fd732d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db976b1-f7c3-4809-baee-b47750107c06",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df451453-c950-483d-a4fa-bedc53d2864c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5beb4ebb-7e8a-4b66-82f6-41a7a3abc74f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00320269-4fec-4ed1-b9c5-b683a40458a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "135b4578-7147-447e-893d-98667bafcac9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5ba0628-d226-4e70-b452-b9c4671740c5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af33b8e7-8549-416c-b9ea-890d0b9149e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44e3623d-dfd1-48ee-812b-aacf54846f66"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cd39a046-e56b-48a4-abe4-f9531ab51731",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0309976a-77ee-4618-a3eb-57e97affd884"
                }
              }
            ]
          },
          {
            "id": "a2708724-6c13-49d8-a837-a60c0697809d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3c12522-985c-4abe-8cb5-3ed98e254fd9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b61cf9bc-44b9-43f4-8862-5e1dc7202a84",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc92922-b21a-498b-8398-eed27daecfed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0a3eb267-45b6-4a08-87ea-38eb03a2cd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a88fc8-b80d-4b34-896c-5d89f15fa46e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1847b90c-625f-47b4-8a4e-e8f434565fbf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6651312-ab2a-48c3-aa74-acdc6bb1c6f7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fda95da7-66b4-4c5d-8a73-697a7c5fc1ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7ec5cd3-07a7-4014-9655-58bb050294a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdaebb88-b210-4b95-bef7-49f4194092ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ee1c5729-ea26-4e8b-b4bd-07318a475a59"
                    }
                  }
                ]
              },
              {
                "id": "deb32ba7-a5f0-4b09-9bec-d08350842092",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0c51df0-569d-4593-89ac-b4b5872702b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7aac9091-8a08-4a5f-a571-ba424891f42b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f1a521d-2724-4d23-87be-cf5dfd43a3b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65c4d21d-192b-4993-b53a-700ad736ae56"
                    }
                  }
                ]
              },
              {
                "id": "b317cca3-6066-4ce2-bd15-2c678f81b942",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a32d2b18-c224-40a9-9da4-459a945be29f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1341b873-bf57-4422-ab60-f0f3bdb3e0c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "933fb0fb-5304-413b-8164-b053e76703c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "955187d4-2f31-48fd-8ec9-39a177767832"
                    }
                  }
                ]
              },
              {
                "id": "47dad883-1a54-4276-bc05-b486671b53b7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af8c9e51-48eb-43ba-b920-a5bc494e3519",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a16de407-5860-445a-a0d1-5440923f9c0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7fde875-bcc4-4f59-b244-cf041a405eef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "018002fd-abf6-4a4a-9115-38a36109ce64"
                    }
                  }
                ]
              },
              {
                "id": "cec34bef-023e-45ce-8646-1fddf0863b85",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b570f429-b5eb-4641-8052-4ad31035496c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b88d9e30-5650-4fad-a0bf-3105bc245092"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dde766c6-fa56-456f-a577-43cbf6283c0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c2f549fe-f768-4486-a760-aee7ba1dd040"
                    }
                  }
                ]
              },
              {
                "id": "6fbeeb40-dbeb-42ea-9667-f121c8378ab4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64495a6d-c570-4bda-829d-f4d2360ec947",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15a3ac37-da25-4ab8-bee7-ad905b5cd677"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b13891b5-a1a0-4c1e-a105-704ff45a8739",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29e6078a-9b11-460b-81fd-a5de85e1308b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1cc5ed0-c6a5-4737-bf23-86532c537d64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56d100ed-d75c-4b6f-9c81-e04135f45d42"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79e13c66-9b53-473b-a42a-c2ba283403cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57bace04-8d19-40a6-a9e1-5b02f824df2b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b817060d-5958-4c54-8de5-880924b8a0c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "caa6d629-85a0-4d3a-a7fa-1adff0d44524"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2555d8ec-bf5d-4788-a4e9-b29a532e15d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96363afe-285f-40a6-a36b-c23a0d347ae4"
            }
          }
        ]
      },
      {
        "id": "92639c02-8181-4aa1-893a-368350eb5fba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aed7baec-2c38-4b1b-8f99-e3f6a3ff6411",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55b432f2-eff9-4bc5-8771-bb5476202ce3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db12cd09-cf9b-4c85-8ab8-ac5b47408207",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d962d9dc-bcf4-4ddf-813d-1dbd48ea75e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d43de7-fac8-42e9-b626-87393bea3036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c20cbf-894c-427e-b764-924945a1ebfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bbdd6a-d827-4d8e-bc7c-a8a2340f4958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796418d8-837a-4f1e-a355-77f4fb47f15e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1728f58-5131-49a6-ba95-68b72e19b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafda9d2-8dac-4de5-a37b-58503b776be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3257b0-3f30-4f0c-abbc-6a78689fc589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aedf023f-209c-47ef-9248-7f8af16eaa35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a5f3c0-8417-4911-aedb-4f8867151d44",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52765f8-b688-4c76-998f-3f8448c48a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be4a997-15c2-4697-b99e-81e6d60588be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be72f408-fe5b-458a-8c81-d6a64cd65b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbea5743-170c-490a-a5a9-d1e3febbc9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a609081b-b788-4d55-8f5e-6cca81c394e6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc72ff7-742c-4f75-9e70-a50153875760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5add12e6-98d1-4d1f-87fa-979f6e793ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536572fc-5b72-40ea-9819-5ff5c9a6cf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c25ca2-4bbe-40e6-b4e4-8d60b7e4a859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed060a88-9350-4121-8280-a9efb2c47578",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2c09ae-d9a8-4a3e-b10e-77e3d384f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fa3b89-056d-4bbb-aad5-e2eb5d687a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bd622d-9d93-4855-864f-295d966e1ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0ce382-4808-4a15-b84d-8d188414438e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14765167-13e7-419e-8629-3d2be8f5e306",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4751a559-736a-46f9-a54b-30305540c8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cb3d47-0ac3-46ad-99bf-d88832f3de3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267de849-e2e3-4065-849a-40a6e08d11ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68e60daa-6cdd-4d52-97ce-ca14b8d4f15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89186070-f765-4392-806b-75c7edbe188e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad9ce4a-e1c2-4b59-ac0e-551f983efa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8203a0-6432-4c11-8cd6-922805d20221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0604bc26-61e4-4676-b580-89401999b8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "572877e2-6581-4ac8-b032-142038a938b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03280b6a-3949-49d2-b9e3-fb85c0c990b5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020e8991-61de-401d-b9cf-49c81694bea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7467712-4895-460d-81f7-a1599067f6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213aa733-02ef-4289-9969-52215bff68f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e61239c-964d-4569-bcd8-2ed6e9b63017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b730b791-6b47-45be-bf9d-e209cecc04a1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0d70ef-769d-4c17-9b24-428d07a01cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32848e4e-6945-4a30-abc3-7eb67c558ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99630ad-2b58-4428-b498-66d61a386625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b231492f-94c8-4ba8-8ffd-0a38c85ab7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f776990-a651-4f1b-a03d-5415ba660aaf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf29f10e-162e-42ec-a29c-46a2e4ca716e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2ba44d-9eea-45af-86b8-4d2d7dfc4f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a225cd-4fe3-4e97-b555-1eed8348a711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "956b63e1-b1c5-4256-b507-54b5f3d7b195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90427e6b-aa81-445c-9732-6e08ed17a430",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96951b70-baa5-4989-a31b-61d29cb1cb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fc4e2b-d730-4ee6-a21b-fe18eb2c66ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33783192-dc9c-4c02-9bc8-088c6f3b5e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8c85e037-18f9-4140-9121-09e48482db64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555d4049-4729-442e-bb47-fe1eb324d8d1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d1b143-1449-45b6-9ea9-4c1960aa8636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c545257b-0a76-4e17-9371-148021beb41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e80d43-a8d3-42eb-9e93-4cc2b38381f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "136626fa-3125-4d84-aad0-74e2a822c902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f780670d-751e-4339-bbe2-0fac322173a7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f39a10-e62a-4b6e-b027-56f74387255b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a94b380-a4f6-4ba2-abd0-a20054f176b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d7fd63-f7d4-4734-90bc-8e798940d649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d5486f-baee-4299-9d09-59ab7267a6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba6bc69-dc24-4334-a3c0-20f203a39336",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab50b188-7aec-4f81-9375-8a8679af481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5375b7-415f-4ee9-b1fb-8e767a8dfb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f430b394-62a5-41dd-a1c2-69c21eaabb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a747284-46da-4724-b4c6-aae3d7fc066b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849dc7af-4ba0-4b5e-8728-ddc58f70bdbf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fa89e0-a8e5-4ce1-b7a8-2e2dea7b33c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c75739-d9a9-4ac6-935e-cf1a1e70c0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f965f49d-fdf2-48f6-afb8-4663bda290d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "036b88d4-c122-4c93-86f4-dbda2ad37c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa348ca-2346-4700-9c23-32ade71cbc03",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b571329-b0f8-409b-8909-d0fe0ebf4c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80178b8c-50e0-4f1a-a37c-73f2efbf518d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9052c6b4-3da7-42d4-99ce-3c330744d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "05006bcb-6865-48dc-a1cb-660284e98a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde01426-fdb6-415d-ac0f-016bda38214a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507cdbba-452c-4171-a8eb-85642df770af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8516846e-8349-4d1f-9640-a4c2f76d9a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439d0e34-ea69-46e4-a190-85ba3f6e5701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "325de0e3-dce4-49fc-89f3-23578d092d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aee5c9d-eb51-4880-a3ef-bf8684756c0a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fe57f3-07ee-4445-831f-fa4c5dba2788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cdf3bb-c351-4e66-9bd5-dd3e9f87dcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebfa297-8a70-4981-ba3b-e30465b7a3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa6345c-920b-4190-bb7f-36216c1e9cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b7c7f5-311f-4320-9802-0e39769c5b25",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaf670d-b9e6-4c4f-9784-16f4db906c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f4e02f-74f6-4fe1-b0f3-58f2a05a7d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077c2474-6b73-48a2-ac0f-d2a203adbc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "939cf034-1954-4d53-8ef0-3d31e75845c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebe78f7-cb22-4d7a-9e70-57c154f2ff27",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2109f6-60c1-4eca-971c-078a0592beba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361e4260-0605-479e-8af7-ff5938da8dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31002539-bc42-4f23-8b91-6e10ae1b6560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "557307a3-7d3b-4fc9-81a7-3d3632138086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093cd1cd-fc74-4b59-81cf-ca14c018c4ab",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1d9646-a33a-4740-af77-edeeaa7f19a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cd3ebf-4d88-4562-b77a-fed9d74303d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87941b1f-412a-42d7-aeec-6a5d552a01f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7679c557-25d3-4d96-b18a-145fdd57b6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e41035-460c-4fa8-be23-e5e0aaeca152",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcdb471-23c7-4419-98c6-3547cbc428ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67537a4-f52c-4b35-afd8-63d89379b7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f9e61f-7418-4844-9c4b-f6a027785729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2a3357-1985-42b9-919b-0d88874c2f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec4cb9c-3b7b-4c7f-b76a-745c03c794d2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3667463c-9246-4d3f-9e5f-fdff03633c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a5ab01-d32a-40ca-9bd5-12c6b67c165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ff4a92-fb3c-49d3-8f20-6029f6d31569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a52b60-0774-41c4-a0d4-4b2c36706cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed4d46a-e06f-42a7-8510-43d3aa08e0dd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949fb631-aec0-4b2f-95b8-396407d9757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d48375-826c-4e1b-bad8-2974ff3cc75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98096248-46f7-47c4-9200-c4e6d973feae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45857cc4-12a0-4e6e-9ebf-c02731859a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6617fe6-494c-4d38-8a77-e8c9cd5d74f8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e827738-a04f-4c75-954d-cdbbfae5abc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5440aefc-4cf4-4d57-83dc-606af98560de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c552ee-49a8-413d-8e67-9f7b6fbd502b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7b5950-5973-41c8-b10c-a0b6f4dceff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f51cec-4e18-4328-9bf2-50369a151d9e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3beef63c-cc44-4cc2-89a5-9884137d1a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01ca5b2-b0f4-46f0-8aee-a3c5d3a9cbde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c930ff-4e8b-4d0d-87eb-b913075b0a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d28988-7038-4a97-9944-b04fa3dbcd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493d22c9-6935-4bc8-a2bb-78d5cd4acfd6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc04f9fa-9d67-4b3a-a911-ffa74f214228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829eea07-ad31-44f5-8c28-9c9e8c87bbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d76beb-13d5-4d87-b0ef-8a23302dd952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b768c5e-f881-473e-9f4a-18ab912ec4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e3b79a-cb23-443c-a345-2ce4021b6695",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce490cc8-915d-4adf-8a9c-65d14407efcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf6511c-35f3-40d5-9d03-2358bb60321f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efbee7e-8f50-48d6-a3a7-c2c08aee5346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2cbf03-91c0-449b-8ec5-e51940a22b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abec7a11-9e90-4962-863e-6b13b5a5f05e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bc7f9c-5936-4fc3-b8a7-df06a1020db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd559c6-f3ca-4fca-abfa-24024e3c9f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d199a0fd-1549-404d-ad20-401ad2c3ae3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3561132-4644-4f84-8b06-8f5017b175e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d65ab93-e923-4ba2-a56b-756aa3b4e41a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b761d7a-e374-4c92-852f-d3e3122491d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed6f44a-6bfb-415b-acdc-93a194e08bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1da8c1-9f68-424a-9c82-438bfc2f04e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "955b2f88-bcd1-43b1-9e4e-fe312102a1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e795ae-bb8d-4e91-97e8-db1cebf597db",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66c6657-ba39-4251-9543-49cffea3360c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c5a1ad-ed8f-499c-afef-f446d25e9f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e60080-f7c7-4ec5-8420-cf125ad802e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52926635-59db-452d-b5c7-587f2c938337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dab6e4-8f5f-44ff-abe2-4e64995de938",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3533f693-f212-4389-b16d-6860e6cb75d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf51f52-1f50-40cc-bcbf-52bc976f3ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e812e3a8-9dfd-4e96-988a-bf9b2802903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de15519f-36d9-4dd9-824d-2f15d5dc8560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b74cd6-4074-4e58-a070-147ca754f64a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aa77fc-b7aa-4f94-a7ba-bf3e29c38f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251b4fd7-d04a-4b6b-875f-5e175cff8ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b65bf9c-96fd-4c13-9597-ac3d06b3c243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc074b1-c570-4cdb-9af1-dd955dae626e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cb9327-6f85-4d57-802a-5956d8262a9d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae395a32-893c-42f3-818b-f686eb44f106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4530af-55a7-419c-b10a-3feb838c4ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab03711-da2e-48ed-874b-e8f4017121a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "400adef0-1bdb-47ca-a79a-304abd98dd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9499ac4c-b5a9-4b72-8273-296b208af1c4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48936a8d-ef4f-4858-9689-0f23b315cef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3853afad-4de2-40b4-880c-1bafca4f3158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950f239b-56d1-45a1-bfb9-06062db0afe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9d339c-6ac4-45d5-a79c-4d0e32a746e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe2d1f7-282e-47b8-9e03-1cb919fc59f5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e8cd3d-9aa4-4426-96c1-2f0ff4065d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4b9383-b7b2-4edd-8511-27651cf2bdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5212fa-1c87-4af7-8748-a3958cded11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebfcaabc-8e89-4841-9098-faacb96d5b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa304801-bc74-47d4-920e-901b6c65a3d8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64ef3b0-9af7-4db2-84c1-c67511125edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182a00b9-7201-4b0c-85e4-98be4eefb7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f976e80-50cf-4015-a8b0-2d70a2a6b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ebcb2ee-6708-4251-be1a-f1937822a529"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5fd52de-a6e7-4fb2-b803-eb5679cad28e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0004030d-2c09-4098-b039-3afe65ad262d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef03ecda-4a01-4620-aefd-b60837f3779f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e98bd773-2bd4-4fc2-880d-71959c7ffc08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570320c4-13bd-4894-ac3f-6a05ed95932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65a5032a-1fe6-4524-9b73-e48235dde31f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f4ba2da-a606-4d0b-a3c3-fb426139a26e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78599900-58f0-4eaf-a953-5692b90c65f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47d988a0-17c2-4800-8602-7fabc45c392e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e8c6785-1660-4541-8707-7624a4f0b77e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c575d12d-fa23-405e-bc54-f8bdc7daf208",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "09c8b557-9d49-4adf-9e49-c6618d6fb865"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79143882-528a-4300-bcaf-3d1d1c838ddc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a09e14df-d25f-4c14-8675-b3b5b35d510c"
            }
          }
        ]
      },
      {
        "id": "281e46cc-3f45-4fe2-8826-b6ad1214b7ad",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "68b3c1a5-91e5-43b9-a60e-4d7787c40d1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf1a8cd8-20e0-4a2e-8b24-f578313195b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b14262e4-d6e1-4cdd-83c4-dde2637fcee2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4bd52f-236e-4238-add9-16001c55ef1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4309380b-5f04-430f-814c-27d3ba7a3a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9e05c3-1d6c-46e7-8c33-e75f0cda8cfd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ef7b9e-35bd-4a3d-bd90-ce0a21869f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91154f70-193d-47b1-9a10-80dce3050f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36bd022-cb4f-43d7-b29e-d5fdada9ebcb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a12f00-aca6-4677-9a40-5a631346eab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16d9a7e-2f59-4312-9bc6-930a6fd0c3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb3c2ca-9839-49af-9f96-f7e8dc02b8a7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8164c0-5903-4cbd-a9f2-61756825d5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb2666c-498e-4906-90bf-2d3ca59cae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60633d5-a0d4-40b8-9470-432fec425e7b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35caface-ed50-42b5-bb05-1917a9f2486b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09ed7f8-2cdc-4686-8efb-220b50286464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac43063-070d-48d7-b5e1-a1711a31e247",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f85fcbc-b2fe-4fac-a931-96014ece67f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80b83b9-471e-4a54-8c49-d2d931e98da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1f7b1f-fee6-446a-ac94-c2f7ce6ff6e3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e661e15-a544-4fb8-bf26-a6ba978809fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1374f49-0849-4877-ae75-81bad49985c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ce42c6-b3a4-4190-9703-46c1f451fa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb502ba9-b7fb-467b-96d0-b487f06d7daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb6b121-e662-4c63-aa6a-ba356d67be9d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f298552-4d1c-43c5-b378-9c30bbc92eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b527620-9c3c-484e-bb92-edc42980164e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bdaa2c-a2b1-4f4f-b665-487ef2a05c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f5f7f5-da3a-442b-9bb6-f759bcf7e7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a534110-80da-45b8-a921-13d777fcea08",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c48193-c498-416e-aae1-0139d09c0e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37db1fbe-cb98-4645-a2bb-f6dc53a84b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10791ea6-d859-4360-9569-47fa312579db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b579dbc3-4ffc-453a-9f14-d5d9e8313927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720c8bcb-d300-4b36-8e2e-36a609b8774b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d279d7-bde3-4578-b7c2-4781122395f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48da3050-f04a-49b8-8294-1d4250302d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926eed45-3c7f-4b5c-a785-0aa26df9145c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2e86fa-41f6-4152-be2e-2bf3813b6efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a42c295-d43a-4449-9109-902ce06eca07",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a85e3f5-8c28-45d2-8c14-aa89fa0573ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9978137b-3abf-490e-b1b3-b71ddbfb7054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed0e614-2043-4965-ad7d-748ce5317474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b87f2605-dc0d-4b81-ad56-6ad94901379e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9932915-b657-4fe3-a7ab-8710400b98a8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef852a8-bb4e-46e3-8318-55b4bdfdca81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e8e716-29bc-42de-97d8-f2b7ee244a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74b0d41-c695-4418-b63b-90c671b961a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b248f4a-0f86-442a-8d99-29c47ff2699c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8709de-9596-420f-aabf-12a46e1c791b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afeadc5a-f8e8-4efd-97e5-df42d8ffd4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b76b9727-e647-451d-934a-90d0281f222c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b6fd8e-ba5f-4976-8776-f67c02b51e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6a0280-0e46-4479-a7f5-287524e4ec38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16b9972-2ba7-41e3-90a7-df2a732b3c10",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011df9df-b62c-4e84-bbc1-2e7f052d2bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20bfd807-cba5-42f2-9dd8-4cd017940d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589e68d2-5a1f-490d-a3bb-d894a7a74ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fda59c9-6515-49b3-b8c0-e309572b81df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a448e758-a4df-4842-b775-78dac0d2f889",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf69269e-b837-4031-970b-c63152eecf0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b5e4f2c-fa04-438d-ad51-9fab8869cda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9963276e-9862-4ff6-8de8-9f48fe4ae7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae004888-7fa6-4884-b1e9-e40bf8794791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8199b7b1-ed87-4353-9598-9415115680d8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4eeedf-7cfd-4087-a5f6-9c8c61e84398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b8b746-03d7-4895-9fee-7f11b7c4fcda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c029aa3-9030-4e26-a7d0-fe36c8b64f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6572f9-bf2d-46cf-af64-fb4641f640ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6b8053-937f-48a4-a311-b95ed696b67b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80128878-a339-47a2-82db-ea8161d69218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267a4217-d50b-4ea1-8624-470b3556fa70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cf3fad-02f6-4b20-8ccb-aa006153ffd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1500410e-b873-4d82-bb02-a5512931a82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9943a8dd-9623-4c52-a86b-9508997e7312",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26437dbb-9822-4119-9f95-481793b2e505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d97cb0-3c82-4c45-9c36-0b299fd09211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc67f726-eba9-44b8-b55a-00bace52913e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7440e461-8ef9-47ee-9dd9-77e78523e1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c765579b-ac81-4d3f-889e-2a7160b49b9a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb504312-debb-4a31-8093-762e0c9a32d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f510f95-66c7-4490-b2cb-6799c98af09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15b9325-c175-4b31-9670-27ac084ebbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a3a49a-0d33-4ba2-9ef7-adaf50c9f7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76246bd9-0247-4f31-950f-5d2443ab58f4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77645f4-0c84-4420-b022-e16176045d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb38acd-31c4-439d-9cff-5619ff696ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2f1c7b-bcb2-42dd-9224-56a784526019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758a6ac4-778a-497e-949b-a2e1cd17a82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce82d270-e742-4502-8e1e-2228fae62799",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509777fa-3394-451f-8fc8-c8eb3a31ee7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83767e7-8780-4a3c-857d-eb6354514868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708b70bc-c832-4eaf-8b5a-51456e268632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9dfa9d-cb68-44c3-9724-b56f725ae99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a36120-29d7-49fa-8a07-52593c86ebdb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75231d95-273d-4e34-860f-2025899e7986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dcee86-0d0d-4852-a0dd-b8ef7de36218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebccc06-6967-4586-948c-a6c4804f7d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "268fa578-6cce-4f51-89b4-01c2f73ba448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0613f58-871b-4e92-8ab1-3216bbf8d661",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63828748-d384-46fc-b669-01c67ac516f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ef98ed-0888-463d-8db8-7c7d37224ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8237cfe0-955d-497d-b4fc-a02d6a7bfe6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aed4b29-a74f-4ba2-a25a-bf075b236574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d0bb67-6570-4b6b-813b-669c75c52f8b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf4e794-36c4-457f-a17e-1cf3f5f1956e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57eaa592-89c1-41d6-96b9-ec35adfd6bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "902029c5-af2a-48d4-852a-62e6b86e3bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6abeca2-cc16-498b-a171-825b4191c02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e505fa7-6152-4581-b0e1-9d80fa57c548",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2469efd9-35d8-4704-a3ef-97dca2e95240",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccf57dbd-eeaf-4958-a51a-1997c23776ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7638d3e-d021-4547-9c23-41850cb7b3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0837fdf4-fe4f-4f04-b6c1-5d848dc2e643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a912a830-6e91-4533-ac4a-d2558bf80bbf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769e4207-7511-4183-b401-8772a5bbb3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a0eac41-a715-4457-8e87-30906fc0375a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39338ebb-9c50-4cd1-a37b-67c174b8acb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2660de21-2ca7-4dc0-8f96-05ed9fafe101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df669e55-a8f5-47b6-a0a3-191e3daead01",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d95c85d-5da3-42bd-b66c-5a0b94ad156c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65045c1c-6a6c-4573-a327-402422cba94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cfd378-a47e-4b63-94c7-1de1bc87ac17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbda6589-7dd1-4bcb-b355-623ae8479448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec2720a-e650-4bac-8e9f-e0e6cd7626c4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9864a0d7-5770-47aa-b61b-cbed165ae69a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0b4e8e-3a61-40f6-965f-57958dcd3c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18e22e9-f06e-4820-b854-4370d2f7ee93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8774f1-0cce-47d3-91bf-930ff5cb9af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d9924a-6ed8-479d-893c-1aa1b0e90dc6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95a8fbc-cac8-4565-b1ec-849c3507e726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ccd21fa-49a3-4a43-8b39-08a3a04695a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec78197-7f7e-484f-825b-5de4bfe3f2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5a398c-5f43-46b9-8f8e-50bdb2c8b863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e94b76-1c01-4690-bf1c-a1672bc35f67",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a6461e-c2e6-49b9-ade2-08f46d4573e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bca2dd3-1c57-4239-b01a-d203d26410c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c203db51-0085-40c4-8132-9f2045f1e0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b8ab0a-2b85-4c9a-987a-08c18761efbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e642a8a-b05b-41d8-8f15-c4bf80c3e522",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90c94b2-2a9c-4695-b464-64ee81d01d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed0010c-9b68-4f65-93c1-4c739e357168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "161d444d-1d5b-4631-be5c-45ad433809f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775724b8-eb20-41ab-ba9f-74a03f1ffa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa11ddfb-8420-4daf-8a87-d97ccf6b518b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b75efc-82c4-43bc-922a-94c38d3b3dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beda0a42-0daa-48ae-8055-454ab228b754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa21d3f3-dd02-4a0c-919a-1e2a4c8f15eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614bafa5-a9ad-4f4c-9fb4-89e150220369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf4b1eb-538f-4104-be7f-9bf6b4524e45",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65639238-c31b-4175-bb50-1c87f04e896d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7c748f9-2bd0-483b-af0e-798115f3da41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c16d96b-8761-4308-a125-6087f4d49336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728f613e-615a-48bf-9248-a057b4ec2af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96470dc-bd4e-4aec-b3e9-f7100224dfe9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e8f647-3ab3-46d6-8e17-c4a54d19c8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53e61fa-8ecb-44d2-8232-493a8aaf77c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0386b57-d55e-43c2-93a3-3f5772f2d6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87653e42-73f3-4c3e-8920-ae4983444fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82fcec0-522e-4c82-a421-77c2518887f5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df930e-3649-415e-a69f-77fcc22024c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf0e2a2-dc52-4dbe-84e8-60281868caff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5cf2ee-1df2-42d9-8b2f-fc4cfba4ef08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d00be04-ae9a-4c64-9186-15cfd895fd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0609fb9-c499-4d97-ab07-ebaa06c81b1b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba26cc51-0d27-4401-be67-5cffc1efcd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6ec0ad-aac6-4e23-abd8-694082abf8f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103545fc-f5a5-4c88-925b-93230d8a0137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548fa41d-f324-4695-bfad-3a46399670a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b000b3c-84aa-4328-a63d-35c798d55544",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca2e346-acbd-4563-b2f4-948f3627b4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17895c70-9e0e-4702-82f6-3b0b563eb75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1a01ff-06a4-4f0a-9685-08f4364cdc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cac34a4-147e-4598-8c25-333d155938bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b048796-db50-4718-8006-9f490b990e79",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa34a8f6-a949-4b03-b185-cbee63df47b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd11a921-38e6-4f6a-b083-5330b1d5f78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a446b4-6ee6-4b9f-975c-a5f82d7c9cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee46cd40-0883-4e84-913d-99e0e237481c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42c168a-64e9-419d-8dd3-1c12351f5c23",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a082fc6-45ca-447f-b4db-1dc90b35a0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0898c6-6235-4d24-a376-8b4bdb9fc612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd572dc-9a8b-4933-a0f6-27c003be5017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1ca6fb-8e1f-4005-80f9-358ce27f2cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3d7ce2-a54d-4fe6-8b2b-13f9fac50f52",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412839d5-2700-4154-b351-fa54189c8aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a1d597-df7a-441c-9034-ff374a44fff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4ac54c-2b13-48f6-aac2-6294d791fcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5511ef-08bf-4416-b2be-bd8d7d07d59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38a5876-8b25-4086-87cf-9384737ac63b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d50045-6ca3-488c-9751-a8db96e412e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ea18cf-85e0-4533-865a-9ae3f2df9bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47372f3e-d9d6-4ba8-ade7-a519d97a1974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a09ea03-1860-474e-b006-405f9f7d6a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7256aa-6f1c-4ea3-a32e-f22f54c5f7cc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb638b7-f11f-4255-8fd5-bfcce2a58a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49c1b64-1f2a-41e0-b8a3-2e856b02a47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf97747-ea05-4039-94a8-c63f82ad371f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca54a9f7-8836-4c07-a7bc-b3842213175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073a1212-5921-42b1-a345-f1974e4414e3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c3a35d-2e08-4109-bde7-544c08da9ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3bc1f9-5d11-44d7-88bb-e683c36bac67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f3ee5f-fae9-4cd0-9e05-5c344ffd2528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615d8d20-6183-4151-a7c7-eaa110d6f36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056091b0-6a5b-415c-91d2-eb33c785de1f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebde9f68-8a00-4142-b665-a37e22f249a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2da81e5-4788-4950-a355-a9cb093915f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6992e0dd-1aba-4414-9cb8-59c3de023c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46958bb3-7d90-4da5-9c6b-4480170d9629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93504b3-9333-46df-8796-8bb47b38a99f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877d8caa-7375-4115-bbbe-14d96913baee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e87cae9-ecf1-46b2-83e2-7c6915c1ffe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba09dfa-f9e8-4b3b-a5a2-a8398519d79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306519e0-e4ba-4131-9492-94dd66168378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f601c8b6-1bda-45b1-9818-ac19eabfbf49",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a613e6-7d83-44d5-a48a-55852fe1fe9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62a3c21-a452-4d7d-bfa0-0dc86ea56902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cf248b-a464-4390-b62f-f96712d925fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140deea0-b2d7-4826-a710-810434969ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28914086-cdd0-492c-9adb-76ab5c6e66c1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a8a306-8d2c-491d-bfa2-20a76f836b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75426e40-6b59-430f-843c-09047735d0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d10f10-1209-4441-80c7-81d23d4a7b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3560fa1-27c5-4f0e-8143-489aadf33dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bfd3b7-d8a3-4b7e-9460-eff9d495ea7a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b235acf0-4b06-4a4a-858f-bb5908fbded3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142786f7-0958-40f5-a5d8-7ab7b73b9692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c73ffbd-0c40-4dc7-a5b8-20e7dadedf17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f980a719-958a-41d0-a756-9ab6584e09ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c667b178-1e09-4bd5-88f3-1d00d39a94f7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb51e08-0ab2-4af8-9f46-c58d311d456e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0c9053-2737-454f-98cf-6b511a17378b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778b34b7-9fe3-480d-ba93-d326eafc57f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4afdd1e-45f3-42eb-bedc-9202016f2e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4c8c1e-01cb-487e-b616-61f6fd75f412",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7655d057-deb3-416a-a514-b41b0edc9b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b88853-62c6-4438-905a-d7207d6f5ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934e4c1e-f07d-4e16-90a2-525515fa245e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12715e15-460e-4794-8bb8-2ff9e31b7fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0011f175-a619-4caa-b31d-199e903ef297",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93bd4df-1890-4ec8-8360-46a659ff1aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a729fd6e-fd96-4e64-abcd-1dda07a06775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42cce55-a914-4268-b911-d1fc838a84cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f33ad78-3001-47ee-a2aa-d545724e3ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3180a4e2-82a0-43c8-887b-eeef560470e6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba5f6b0-9f08-4b3a-b30f-5b503f26e89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e449e0b4-35a8-4cdb-8af7-083db7dc5b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d4c8de-d689-46a2-af1f-22ea58c1fd8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e5d24d-3e24-44da-a4d2-a3dfaedc71d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bcfe13-cf3a-4d92-a1fb-0135fac1742a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5378cb58-160e-4521-b5ab-70b1ee93be69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5fa6b64-fc18-4900-b497-efe1f2a15415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71162e0-0fd6-43c1-899d-4398d3d8374d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10b1616-ccc2-4c7e-b0f3-bb2352a67ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9883a2-99b0-46b9-941b-62cc5ef1333b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe17380c-6314-4fb7-baec-18ee5e5022ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1fc21f-d264-41a0-98be-269b69185017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ac7ee2-caa9-4f34-a4aa-922d7cfa96c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0202dbec-4360-44a3-ae6f-eb1b108336b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bce081-b421-4697-afa6-1fedb0425ced",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1a8309-0dfc-4e3a-8e24-eb7f1ba465dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7164a102-2331-4a73-9bc0-e71d102a6e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dce222-9a65-4085-b8ee-39d601c00cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849d98cb-1525-4548-bb73-70ffcaa8a8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd237b7e-d5d4-483d-8eb7-ea39efcc75ef",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d7c491-eadb-467d-92e2-0ad7e5d1a373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8219cd7-a50f-43e3-843a-395dde3385ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66780f9c-d5c5-4f0b-b627-14c30ebe2a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb71d5c1-0faf-4607-bb94-85175b0e837c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed004a-b95b-42e4-a24e-4789d3f8792b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301e8d0f-5472-47ec-bf3d-85469faaa543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5075b34-fde7-4c4b-8527-dea43cffeeec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d666262a-c6d4-43bd-b17f-2b4e2f8dc796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d7139b-f101-47dd-8ed7-f1b0a809ac0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b505cd3b-83eb-4076-aaf6-9699409d9c66",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac5e1dc-b2eb-43d9-ab68-d6f00ac3799a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98c4820-bb72-4577-b4fe-8ddd9a0113de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9aa409-a71e-4287-9785-4ae9bbffc9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa80095-4a33-4a1f-90b0-d94aa65a71ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494a441f-ec35-4d2a-8ae4-dd23118298ce",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167fb86e-2f1f-47e1-bc0f-0beeeb68b94d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed0537f-0038-4a09-ab12-87d597105e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41c360e-1d6f-4a2a-9002-fc546f5b851f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf0df32-442c-4f88-8686-6b56c494c007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d207cc67-ace0-4c13-8677-b1ba920efab6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cd7ec8-0c02-4854-8aae-5b13592028a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cf5ca9-ef8b-4f50-b32c-2726e63e3360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396593fb-465d-4e99-8150-8028033dac17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a5529e-7852-4cd2-8638-c251c3c05145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4a3330-f06d-46e6-9eb6-fe7edfc47979",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810bb2dc-80ad-48b5-a537-6ae475e082ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3737c2-3d06-4057-ae1f-f583bff5b8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2213e17-51f4-46f9-854c-e2491f755da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f24f8d9-fb37-4888-9a97-6e714035913b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539f59df-98f6-46c1-a7bf-5a21138e4b1e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569d8c34-4264-4899-a0c0-1fd6c4fa38d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54874e3-4d5f-4dbd-9212-5a1a57e69969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2126938-aea0-4ccf-8d85-bfdbdcff2d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae02713e-e6b2-49fa-b875-6e2fc34c7f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3399b4-a7c1-41c7-90b0-9a00b734cb18",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e2dc87-1e2e-4d9f-8517-d9bce92f195a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7971e9a4-149c-4bb0-9b8e-2fcf7abeb32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3553f95-e1e9-432b-99e2-609c46cf4d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25876015-9a7f-4c68-8e4e-a65c974b4a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66316759-c4d8-4929-9e3f-3e99aca67ec0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89d5a69-4f60-48b2-87f4-90deb5ea26e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac1a5a5-f491-446f-8b3d-1b1bb6c8d58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c8a3ce-736e-4288-9484-fcdb252898d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42acd562-7f8f-4cc5-bd56-4b58b01170fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4693f086-463e-4706-975d-d0da2d514993",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bb2229-9599-4398-a2cd-7f42b3fe376e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd05317f-66b7-48e7-8ae2-83360aea028b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c295bfe4-db9f-4aac-a07d-b711fad79d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4632c8b-e5e9-4917-a333-4d870f0060f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6abf06-b9ab-46c1-a64a-ff2a77f69cf6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b0a3bc-fb71-466d-a7d5-e7f9d81cad4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a099381-24b4-4c40-93a0-4b5c90a62711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618f2525-2ebe-4654-b4fe-d4e19d20150d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff37fc9-a5e0-41df-b52c-002c51c83947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc5a9bb-d87e-45b4-8155-b2bd9d91a1bf",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78d5ac1-36cf-4a9c-a2e6-4d8d9f5871d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857373b0-77b9-456a-a818-00743bf4bd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e759da-9d06-447e-9ce5-bdf50b7012df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e474ed8c-455b-43da-95bd-becdef50a217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cba970-3ce8-41ba-a1c9-bffa501d424b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484b0913-13e3-4220-a046-061247f67e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e79b51-645c-4585-aafd-a3680dc76b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bb3eb7-5e97-4e14-b735-116c7ed35d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602fc5bb-f541-44bb-afe9-81d9f649836a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aea9d00-59ad-4118-84ca-5d59a126157d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c90766e-7a92-4cd7-a48a-e1c35d6c6fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f4c04e8-1de5-4f45-a086-93dc6ec2d136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7128eebb-a973-48d0-8913-aa965c05e9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c32a88b-9755-4655-a195-cd43bb33fd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed9e1c5-a781-4fe2-91cb-6104aecc1883",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6bc418-be3b-47da-87fd-19b559e98ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b583c6bc-cdf2-4599-bf84-8a6e436dd369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2b468c-dc04-4cbf-b04c-48d85940b6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4f594b-ffb9-4ce4-8d9c-37e9d6e6bc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97db552-6ee7-484a-bd3b-71e77ab044cb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd29761-c847-4f5d-b818-f6166f4f50a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07436a9e-313f-4fd6-bb72-376bb56591e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a20f54f-4ad4-4341-8719-80dd978d035a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3adf1141-0738-4d85-998e-8aa2192bb0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e1b373-c2a1-461c-b78a-3728fc7b20fc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c546d6d8-366c-4f0f-9a74-fb30a65cb6d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f173c140-b676-423f-a67d-92efe6d33e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3c3d83-f746-4495-9623-54b779144f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c041de-84c6-44de-bcbe-94c266909ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0a26b8-f72e-4580-b7bb-bc2a8735eb10",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95324100-247f-4d3a-a72f-e23151401711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a66fdf66-3cd4-4a67-b446-32e75e6994d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a094d2d3-d391-4155-aa05-6939b8dbb866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd04dc4-3914-47f5-b448-af7295911013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ded943-9a96-4067-beaf-ecb83ce8e059",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69035e04-6376-4dbf-83ba-61595ceae609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc74082d-d4c4-4d8e-8af8-c2228ecc808b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e067e1e-b4d5-4991-84f6-bc04d4edb69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec6875c-f0a4-4b74-bf53-a6278b973a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548a2358-d512-4d5e-8021-07c9fd1ef0e3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b749a760-9345-47d1-9b44-5168ed220d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "032283eb-51f3-4bda-b231-9b8347cfe84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac743953-3203-4e05-8b4d-49fc2c2e28d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e328d70-e31b-41f1-8de5-caa4ccf3f82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3a042e-7a86-4ea0-858c-06c4de302535",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7047f0-9cf6-406e-a56f-e541fe612012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538bbf7d-17e5-4525-90c9-06e8e7a9a6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae95662-9b06-454b-b48c-bd7f316b85ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365a01b1-4a89-4b71-9f3e-d240dbdcdeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74006431-2217-44fd-bffd-f0821c4fc0b1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16beb64-8741-41a8-846b-790467c50fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9a3894-179d-4bf6-bff8-126d36e14a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8da479a-8d24-48aa-8f2b-3bf2c1c4a3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42d862c-aa62-4a9d-837f-6a57196c1d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9c8a4b-9a4e-4cac-85f2-2c4844c50c65",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85975253-9084-4653-be47-54ec0523af7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344c3e75-bf77-4582-8203-545d06ec5d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f87b53e-ceac-47d7-b562-21a79fefd253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fbf970-57d1-4883-9962-4c10601bfbba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05a0c73-ff1c-4f01-ab82-26487aa5f84e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb768f4-191b-49d8-95e5-c33224c66efc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d571cdfd-9797-469b-9a7b-6fafba0e2716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d320d8-dded-4d6a-96e8-c3c27bb5919c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f33ecb-049d-4e53-80ae-e805cbeafbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbf3995-593c-49fa-87ae-5894cceab99d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ef3b9f-4244-4248-bd73-3ddb3ef2ca6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18e0b1c2-110a-4612-bb5c-e718080af0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a50fcf-4c23-450e-9e61-88b68e3eb84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7e0bff-380c-4655-ba99-3b1e1b494410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6b0205-af55-4536-9176-8063b1abcd5e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f18e725-50e2-4d2f-9be1-33a517ea45d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2a828df-7602-4069-9cd7-85e75a482c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c3c6bd-fe6d-4174-94d5-3ace8aaa3909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ccc1a0-4b94-43ac-9a13-8a6dd76681ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba22ba3-f43b-4e18-9321-9957fed8241e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2cfcd9-860f-46dd-95b0-6c5e0c80d82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e52ba653-15e2-4a28-b18e-82d2d53a7873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a353e487-e754-4e6f-b897-2ace28c0656c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8534a1e-e0ca-4381-8e09-ebdcee2390b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57f8faa-4912-4e14-aeaa-19a0d68b282b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56c4caa-731c-4d56-9bc7-07da491b827c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749ccd40-8e72-4594-beec-114743899721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1679dbcd-a0dd-4fe4-abdf-0d2c5e70b86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf3ea37e-9a0b-4b27-9513-fb46a3a9088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab97f82-7767-466c-adb2-0d333d3f807c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5666b7f-8f31-484a-b0cc-dde392778f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36eddd0-09ef-4bd0-8bc3-e4f766e86d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e32f8db-0e4e-46f6-9980-445be84c6f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2916ea-7f86-49f4-8461-f47b71aaf1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf27640-ef23-4737-b57f-88322a7e75a9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5838d857-56ff-4d62-9ef9-96ad0247559a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0972b09-ed22-4b64-a5ef-d316fb22c068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28c787a-4ffe-4d12-ac37-f12fdb1c24d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca4c4f2-a7fe-4dea-a4b4-9b3ee98afc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3b78c1-5bb9-48fc-b982-17b320a9a742",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1265236e-e899-4f98-9699-eea215d605fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad6b856d-54ec-4df7-9881-d0055812b9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10acd7c1-d27c-477f-80c1-8bd46ed7200b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42db888-27fc-450a-8918-76e1b6fa0f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c013e23-f744-4310-9e83-751d3e5a3262",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdaa514-0dc6-4f65-9dc0-41db1f091e7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e7fa7e-e6d3-494a-9e6c-ba5fa6f6b9af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065839bb-cbee-43db-bd31-3dd0adeb04cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664c1cd2-41f3-4d5e-bf38-b9b6d5dd2a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6958c3-046c-4411-9ffb-026bcf814174",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3ab485-1b52-41fc-9d9c-0cdaf72c056d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7acb16c6-c676-4e2c-a5dc-43c22fcf9d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5c3ef3-4984-45af-903b-1783b2390475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12721076-5db0-4be8-9cc0-957a3c5511bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc39c7e-efb3-4b2d-a511-a176be68be88",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f9a0d9-57c0-494a-bfb3-9ce228802c45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c7a05b2-1b6e-4743-8f15-c477190199f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae9ae40-8207-431e-b1ae-67753da2dcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d887da98-65dc-4bd0-b36b-36cf015669eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d6bf7d-1012-4c82-af84-800770112f18",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d257aca-fdb2-4f22-a8b0-ab809fa73d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d86b38-9bbb-4788-94c2-e797700896b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc710f3f-8915-4d89-970d-17585697967a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5614133d-7b97-4c57-a1a0-a83f2913a4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ecb4d3-ebb7-42b7-859b-02428cde8e82",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636792eb-1de5-426c-9b57-48646d9d422c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9388cedb-8afe-4a4e-999c-819b86e3af29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f7726d-b1f4-4690-b987-a3491ba63987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9fe4e3-895a-42df-8539-a9a9e2b500f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d4b035-4b95-4513-90ed-abf9f1321d9f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de15fa9-7cd4-45f0-951a-4cce0b1ca309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a8e8fe-e3bb-4ccb-9134-2e7505e8c653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0579fa01-ce4a-4499-bf43-d317fd140dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba8cfc9-9fd1-43e7-a345-7d4d0fce33f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5716fd43-2ed3-4049-ba8a-527848a3b178",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88758a0-33c7-44f7-af3d-4cfeb6581f62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941ebd74-cda9-41cf-9b19-7a33be8a933f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecab2fae-f6a9-4cc6-9ba1-ce9e71fe0332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9968977-91cd-468d-82f5-633c24690730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92250ac-88c2-40bf-bad0-cc5f31dda794",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197460d0-c7a6-4462-b5d4-c83b49ad5124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bec873c-7195-4c33-a9a9-9825d938581c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5c67bd-910c-4f91-9dff-134d827cfdcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7455b187-0f1d-4918-a579-bcb3f95aedd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231a55ad-754e-4d2b-b30f-0eea68692ab6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d93ac4-2678-4400-91d1-cb4a32623731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af0127c0-a344-4320-95dd-37b1b773a011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68df419a-8b51-4f88-a2b9-3fd0f4106844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e0d210-b3e8-48de-8304-ae7df60d03e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b797a9f8-4968-4162-b4f7-4b61fd74790d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bed40e-e9fd-43fe-a8b8-fafabd31b74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7be72d-c775-4a21-ac50-976f4e9d90a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6decbb3-07a3-41b9-8708-88d4fe8f2076",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5b633b-77c9-436f-a708-3af3b8a1bb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b45403a-246b-4ad1-93fb-1365efcf3ad6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5eff961-ec73-45d2-a926-f38188543e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4445dcf-522d-4382-8915-611269086abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ffa208-4762-4ab3-a10a-08a51f54e66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b43c98-f85e-45ab-a8bb-ad18f72ef964"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "688eadcc-3681-463c-b43c-a1ecd2ffcf3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1e4653b-7849-4808-9c46-5ded86884e08"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7be695a8-60e0-422f-a60a-ccdf83909f3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e73d52f-e6fe-4d03-88ed-d102783434de"
                    }
                  }
                ]
              },
              {
                "id": "2a24a87c-8fc9-4c3c-a924-3a693b5b908a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e0a3e43-0dac-4160-aedf-2af45bcd09f3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478f08df-c573-4bfc-9518-6cc2eff1e09e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d0f2fd32-b230-48ca-bba9-e0da00144f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f64dda-090c-4e45-b10e-9582e0ea4811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2e6b1f6-eda9-44bb-8588-37ada92ce25d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "079f6b48-ca68-4869-a8c8-1952ac0bb355",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4b8807e-91bc-4219-9dc1-4423f7b76c6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4423ef8d-9432-43be-afd4-f5f4f58e4ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12c45ba2-428b-4896-982c-938181a887fb"
                    }
                  }
                ]
              },
              {
                "id": "796495c0-75c1-4e9c-a4ed-1b15a97bef2e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3958da06-15af-4374-96e5-51251aff972a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab495eb-bfd8-4cb2-83a5-f4dfe366ed62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9adef4ea-abc0-41f7-8bc2-311be8099a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f53d234-8e16-47da-923a-6ea078357926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb17952f-8ac4-4e48-9df2-748e2f361081"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50b9f750-45e2-409b-963e-9099c0f7ee71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aba3a4de-04a9-4b2c-8b62-1a6594c9a3fe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b81baae4-30aa-4aa2-b7b5-406c574c3bab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "03a1f012-732f-4bd7-bb0a-279f474b1192"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf8f39df-a47a-471e-bf44-66a8321ee32b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "545bee3b-fcc3-4700-9866-7312aeacdb6b"
                    }
                  }
                ]
              },
              {
                "id": "6b6b5b84-eba1-4b27-9080-39f535b446b1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36637ef-e7bf-4333-a6b7-19728f46da1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "831c1ef4-5a27-4511-8558-c41656bf27e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c71ca539-ab03-403a-a25b-1b297146bff5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c7cf68d-3fdc-46cc-8296-ad98a297c87b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6766424b-761a-46fa-b608-7240fd3b2594",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e5daa555-d41a-4072-8364-767eea608948"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f6de997-c882-4c05-beaa-a68a0a4aec5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2b02a93-db0a-46f9-b486-9c2b8f805a1f"
            }
          }
        ]
      },
      {
        "id": "170d7e20-7144-4c81-a3e1-7951491e52cb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "48b8a4b9-cc2b-474b-b3ed-5051f03dfc91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e3494da-c03a-43cf-8156-cf475e550475",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4993400-da77-40cb-92a3-69e7044bfc9a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2e21b6-903f-4f73-9121-318c7853d263",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9c5b36fb-a5f3-4016-8d2a-c72af5640d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d1337c-cd25-4314-95eb-b2f65d6ddb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cbc1bfe-4daf-44ab-888b-b7db1cf82401"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a5289de-2297-43c5-9127-4b134aabc659",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c0f7bf6-9d25-4f71-b90b-fd411391409b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "db0b805e-f81b-4d6e-92a5-c52730e2d690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7eef574-b2a7-413b-afed-c36f67edddd7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d8c8a61-c104-4623-9ac2-6dd86c4771eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8bd2ac48-600e-4563-a627-0a295afad5ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77332265-278a-44d1-8cb6-9c0fc5fa2462",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a67f1505-4faa-4055-a923-e78feff98e96"
            }
          }
        ]
      },
      {
        "id": "bdcf3bf8-50e7-4413-bb4c-b10007ba1843",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e0e98f01-f2ae-414f-be14-650aeefd8108",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e56221f2-6518-4aba-92ca-8b0450df327a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f69c4ce6-6696-4f47-a0f3-d4f9dc1d36c9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc011fa-0d7e-4a49-9e85-e6d1425572f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1f8298f-0332-47f1-8ca5-b9dd1fa4fd6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e014e2-9bb4-49f3-9448-c1e0df52dc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "425123f2-33f2-4ec0-8239-22621792011b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "690a4db8-4184-4198-bad6-28014cf0b446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed944a12-1b17-4ef5-a02c-80a9f71015e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e83e3890-045b-4875-b2f5-f43ed3d35adf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1b55510-4c7d-44a3-999d-653546447702"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dae785d-033d-4e10-920e-3d6a75d6a518",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bc9a96b3-aba2-4227-83ba-265189e3d5a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b788fa0-7e49-4faf-a289-36b7ee30e815",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87b1c236-f325-4939-a3f7-f0d1a1b95939"
            }
          }
        ]
      },
      {
        "id": "a92f88d2-9675-4edd-81f7-affcf335297f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1208b3a5-d1ac-4522-b690-a552f5a520ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1f89d3f-ead0-4252-9a34-d8db114bc70f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6202b7de-b632-444c-9efe-22e2d2457323",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d78069-844f-4e28-bcf1-34d7eeeea0ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8283bbf7-ad9f-406c-8f97-9ff349a5bd97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29013af2-9485-4789-888a-34d3398c4ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f8c6eb-de0b-4eee-88be-711c481aa594"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbeeb82b-e48e-4ceb-bd4c-c10477131039",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa58816c-b583-48da-82fa-cad7be21cb1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fc01ee4-2504-4f68-ab91-0e9a439c91f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "100343cc-2d1c-4965-9672-7c8b19585d3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48ccc5ac-a684-4aa9-894b-acea5c45bfd4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dac99c3a-eefe-4d9b-92af-81c4ea2cf6b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "928a6d0c-a382-453d-ba70-4d05f8b31152",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8abf0a5-bd02-4c1d-b5ff-6c1c68676578"
            }
          }
        ]
      },
      {
        "id": "dabe4fa9-5d04-41e5-b129-dfc07c95b468",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d54e194-f034-476e-973b-ececede114d1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f69060be-9f2e-4ec8-a5b5-7b608e9bfb04",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ffb3711e-8c57-441c-add0-970f856387f6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebc2f0b9-cf90-4497-9be9-6f34b083ae54",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ffdf75a-fca8-44e4-821f-312b8b49185e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.40079365079363,
      "responseMin": 6,
      "responseMax": 647,
      "responseSd": 78.23906485389108,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714523916750,
      "completed": 1714523953626
    },
    "executions": [
      {
        "id": "510618bd-e1ab-4c85-b8ee-dbc2e490d002",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e0e41eb-6783-4133-b03e-d64dba9a7fb3",
          "httpRequestId": "f91fd3f4-067e-4b01-b944-278431d02a50"
        },
        "item": {
          "id": "510618bd-e1ab-4c85-b8ee-dbc2e490d002",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "308b0f00-5b6d-4ab9-9141-449dc893bb37",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 0
        }
      },
      {
        "id": "807b6586-88ab-4365-bf66-3c0684b8b8f9",
        "cursor": {
          "ref": "7a0c3eaa-66ec-4bc8-a6cf-b983ed086c4f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ea1c6dc0-09e3-4c00-98ce-274336015945"
        },
        "item": {
          "id": "807b6586-88ab-4365-bf66-3c0684b8b8f9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e6df600e-4525-4f96-a35b-098b1a489ccb",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "d2196d7a-8004-4107-8231-49e2b05626bc",
        "cursor": {
          "ref": "a4001eaa-7997-432a-9096-b2256acf22a8",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "827e8525-51db-49b2-b487-5568be90515f"
        },
        "item": {
          "id": "d2196d7a-8004-4107-8231-49e2b05626bc",
          "name": "did_json"
        },
        "response": {
          "id": "7c80a1bf-1f34-4dbd-aed3-4f9878c1cd4a",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e6e50a-f9f4-40f8-9b57-ac3c283099b2",
        "cursor": {
          "ref": "d0ab8384-07ed-4da4-929f-99c48a8f05d2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50f0d0c0-c406-4555-be6c-4c5266056b82"
        },
        "item": {
          "id": "26e6e50a-f9f4-40f8-9b57-ac3c283099b2",
          "name": "did:invalid"
        },
        "response": {
          "id": "426c7840-a568-4ea6-88f4-1321c3d9f217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e6e50a-f9f4-40f8-9b57-ac3c283099b2",
        "cursor": {
          "ref": "d0ab8384-07ed-4da4-929f-99c48a8f05d2",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "50f0d0c0-c406-4555-be6c-4c5266056b82"
        },
        "item": {
          "id": "26e6e50a-f9f4-40f8-9b57-ac3c283099b2",
          "name": "did:invalid"
        },
        "response": {
          "id": "426c7840-a568-4ea6-88f4-1321c3d9f217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50519a58-ae60-4bfa-89b4-85e2e7add05f",
        "cursor": {
          "ref": "6fda2dc2-5b7e-4e35-a592-ee37868ebbea",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50f90df3-df86-4ac0-a7fb-17ebaee1e98a"
        },
        "item": {
          "id": "50519a58-ae60-4bfa-89b4-85e2e7add05f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3c8763d-efdb-495b-9179-c4dedf026b70",
          "status": "Not Found",
          "code": 404,
          "responseTime": 177,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70fb02a-f7b4-46d4-ad57-0029ace808ba",
        "cursor": {
          "ref": "623036ed-b268-4c65-9f79-f35dbd43b29a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b5c87fb4-0b9d-4f89-90ff-9476c44b43a2"
        },
        "item": {
          "id": "b70fb02a-f7b4-46d4-ad57-0029ace808ba",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "06758e21-caf0-4751-b7f5-a70f2739afdf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c4e93a-24c8-4fe3-9046-53971525085c",
        "cursor": {
          "ref": "a39125f4-006f-4955-9f61-56131838dcbe",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4f024f8d-d89f-42cd-bd2f-856a3e5688ce"
        },
        "item": {
          "id": "77c4e93a-24c8-4fe3-9046-53971525085c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6bc85804-508a-4b63-bbfb-0d790ed9f56e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8332c2b-21cd-49ea-b727-1b1b51a41e99",
        "cursor": {
          "ref": "3c6b8a78-4fca-4d36-b813-199af7bf8d7c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "928448d4-0fd7-4c7b-9e90-1ffe60c3d064"
        },
        "item": {
          "id": "c8332c2b-21cd-49ea-b727-1b1b51a41e99",
          "name": "identifiers"
        },
        "response": {
          "id": "aa99cf91-110a-4d2b-9465-ab5c5ad11b30",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5a5f16-9b11-4e4b-ad58-ad955d7505dd",
        "cursor": {
          "ref": "2db7a2b8-022d-4d24-8df3-314fe7db87f3",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "21c2653f-4b6b-4cb8-aca9-9e568d74f366"
        },
        "item": {
          "id": "0b5a5f16-9b11-4e4b-ad58-ad955d7505dd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d2078c5a-92c7-404f-aaec-754e1d1e7ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950d25e3-d731-4b67-8a92-74be2ec8a598",
        "cursor": {
          "ref": "2ed69c57-14c0-45a8-b8ee-ec28aa7428eb",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d39e1f0a-8967-4741-93ad-9b6f6099084e"
        },
        "item": {
          "id": "950d25e3-d731-4b67-8a92-74be2ec8a598",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "64f91550-c9ab-4550-864b-e8adee811022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85e4f9f-1648-4366-a416-3ae7139d27c1",
        "cursor": {
          "ref": "4371882f-17c6-41f5-9227-59572748e8cf",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cadc28f2-7c7d-4717-9a4f-87e02383da13"
        },
        "item": {
          "id": "f85e4f9f-1648-4366-a416-3ae7139d27c1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "42e70139-59be-4eb4-aaf6-00fd1440c86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811693d5-9969-4000-805d-1e0eb1b417a5",
        "cursor": {
          "ref": "9d5f77de-7000-456d-a974-2c45e6eb0c3c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "acc0ab5d-9e46-4a28-a408-08a719e10a1e"
        },
        "item": {
          "id": "811693d5-9969-4000-805d-1e0eb1b417a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "36531231-2e17-4e61-83c4-9bfc45aad40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5634346a-9f57-432e-ab70-da6eb421cb08",
        "cursor": {
          "ref": "19d3d0af-c4c4-4c40-82c5-e733443e5cca",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f0ac6b5c-31aa-45a1-aace-3f1c1c75371f"
        },
        "item": {
          "id": "5634346a-9f57-432e-ab70-da6eb421cb08",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2c547005-5498-42bf-af61-8de05936f584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970289f6-a830-4d58-80db-2b9801512b4c",
        "cursor": {
          "ref": "96423c09-29ec-423a-8871-c14527043288",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "92980cd2-2a45-4bf5-a722-cd54884c4ba0"
        },
        "item": {
          "id": "970289f6-a830-4d58-80db-2b9801512b4c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "548e17a2-ec91-4771-8b8c-7b666f76c002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eef8ad9-4a86-4e5e-bf7a-86ce9876c3ab",
        "cursor": {
          "ref": "ab88dff9-c34f-4b92-9381-4db3eccdab3a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "34c437c8-9d9a-4502-ae00-e2841aa4c6a7"
        },
        "item": {
          "id": "7eef8ad9-4a86-4e5e-bf7a-86ce9876c3ab",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "639cdd13-a455-4bdb-8d64-c443b4fe9a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0d9679-9980-48dd-93a0-e30730036aee",
        "cursor": {
          "ref": "d54d23a8-1014-484e-a9d0-76b067f190ae",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b94e1a96-1074-4e8b-ad6b-8574e85e5288"
        },
        "item": {
          "id": "fc0d9679-9980-48dd-93a0-e30730036aee",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "edc1aef2-1365-4272-9b1f-a570e84fc61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9064c2e4-ba4d-47ae-8c3d-c0136435d2ed",
        "cursor": {
          "ref": "a009a4e8-b262-42fa-b699-192cb0001aac",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "75812709-94ab-42ed-87b2-88dbe85b0f7d"
        },
        "item": {
          "id": "9064c2e4-ba4d-47ae-8c3d-c0136435d2ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1ead83ff-178c-45b7-9470-ab3b64ce3fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cc84c9-af30-49fd-ae94-1b955acc88d3",
        "cursor": {
          "ref": "6b52cf38-c7da-415b-adee-6cf4be427c4c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fbbc9e4f-f87e-4dc8-81d2-bbbf8947d70c"
        },
        "item": {
          "id": "e2cc84c9-af30-49fd-ae94-1b955acc88d3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2864a438-885e-4061-847b-f33624864a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a09ce28-4341-4af0-abd7-cbde8ebfd3c2",
        "cursor": {
          "ref": "09649e1a-e4d4-46a4-a09c-36108a605d79",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0ba98d01-27be-4cb7-a84c-ae1478215190"
        },
        "item": {
          "id": "3a09ce28-4341-4af0-abd7-cbde8ebfd3c2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b9897920-df89-4893-bb91-19b8cd565c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcd53ad-da29-4193-8411-2bf6b0921fa2",
        "cursor": {
          "ref": "60dc84d8-3554-462d-a75c-9561f70a4e30",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "98f97cec-9ced-4025-881a-15935130b7ba"
        },
        "item": {
          "id": "ffcd53ad-da29-4193-8411-2bf6b0921fa2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4fe40965-b7b9-49db-88bc-a114eed9ad37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e830e2-4cce-43a0-9934-3eb11092f3b5",
        "cursor": {
          "ref": "9810cb90-c6d3-4a9a-b0e1-03c57b02017b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "44ef323a-5913-4446-a121-eb08ff396cd0"
        },
        "item": {
          "id": "d8e830e2-4cce-43a0-9934-3eb11092f3b5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "82db3e9b-e1d2-4172-9284-c9f853a52e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd945259-1480-4584-8bb8-bb64c36e46cf",
        "cursor": {
          "ref": "69533580-9b9d-4b82-b7dd-01d8774036fe",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6ae03541-ba6a-4038-87f8-3cc876bddfd1"
        },
        "item": {
          "id": "dd945259-1480-4584-8bb8-bb64c36e46cf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ce68ece5-bcb4-431f-9f31-c9acdc9b2903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bf33d2-2543-46a8-9de9-49dc95db07fd",
        "cursor": {
          "ref": "405dceb3-08b4-47d9-af77-ff851ea7d307",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "60bc06b8-565d-42e6-93ab-cbce52ba7f67"
        },
        "item": {
          "id": "a5bf33d2-2543-46a8-9de9-49dc95db07fd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "719a0609-8f7a-41a8-8a22-b381973efe62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ebe1e3-469d-4e4e-8381-d7618058b399",
        "cursor": {
          "ref": "6efd0691-5089-427b-8879-526044305632",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "131ce4ef-a1c9-4a38-8dac-eccb9e357e69"
        },
        "item": {
          "id": "88ebe1e3-469d-4e4e-8381-d7618058b399",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2acae553-5b2c-47b5-ac96-1586833f5aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e048837b-f94d-4889-a2c9-1961e1bb0f72",
        "cursor": {
          "ref": "bbee7a51-baae-4d7a-a705-952674882a12",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9f587c49-7dfd-4ad9-affe-dd71f6de430b"
        },
        "item": {
          "id": "e048837b-f94d-4889-a2c9-1961e1bb0f72",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1811dcfb-4d3f-4f3b-bed3-7ceea91ef844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e538e532-e570-465d-a870-f761b54c007c",
        "cursor": {
          "ref": "03db4976-4f51-4200-88a9-922a7ba57275",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bd421ecd-5042-4a1f-be71-fa811cd3238f"
        },
        "item": {
          "id": "e538e532-e570-465d-a870-f761b54c007c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9767f9dd-7490-4fb1-842d-22f1001e59d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f4befd-bc1e-47ba-b7da-0b3fd634fc11",
        "cursor": {
          "ref": "c5a8af85-0acd-4766-9dc4-2da147c75dfd",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "033a19be-3cae-4017-9f68-0f51a15d83dc"
        },
        "item": {
          "id": "b4f4befd-bc1e-47ba-b7da-0b3fd634fc11",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9955bed4-a738-4ab2-bd0a-c31bfc61c00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e62b5f8-23a1-4509-9e64-bd89a0bef958",
        "cursor": {
          "ref": "059e7d6d-1425-4ece-883d-be9db9e81457",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6aa8c003-07cd-4c2a-a8f2-85e2a034f3b1"
        },
        "item": {
          "id": "3e62b5f8-23a1-4509-9e64-bd89a0bef958",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3618466c-4fba-4d9c-8b35-24c4a8ca6631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cfacbc-9888-4f7a-ba4a-90c097dd3702",
        "cursor": {
          "ref": "61a649ae-6e60-42cc-a1fe-9ea7188e0da9",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "de9f0056-9783-4582-998e-b24b96dacdab"
        },
        "item": {
          "id": "89cfacbc-9888-4f7a-ba4a-90c097dd3702",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5efa4cce-e960-4a60-bdd9-8521731d7f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02cd436-8cbe-43bd-8903-b93fa609f1ae",
        "cursor": {
          "ref": "a6dfbd23-f9d0-42c2-9102-904db96deadc",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e114ecd9-3792-440d-8608-3b959c6c634d"
        },
        "item": {
          "id": "b02cd436-8cbe-43bd-8903-b93fa609f1ae",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b2a6778d-3b68-44d2-8cb2-96e6ccdb1b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb7cbc1-f43a-49e8-b2cc-d52a12f51c0b",
        "cursor": {
          "ref": "3623ad19-b00c-445e-a4f0-f9430f50da91",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "65b25355-dafd-4f06-8b97-bcb735cc1f87"
        },
        "item": {
          "id": "fcb7cbc1-f43a-49e8-b2cc-d52a12f51c0b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "490fe930-0168-4317-85d2-b03a7130f81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afc7992-63d8-4111-8b41-b5a1fafb1f38",
        "cursor": {
          "ref": "ac08895b-02d9-40aa-aac3-d2e9900ebf41",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ebcfa735-ba85-48c7-896e-7904982d8751"
        },
        "item": {
          "id": "6afc7992-63d8-4111-8b41-b5a1fafb1f38",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "460c3c2c-7dd6-422e-b394-d0317b39a8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdbe8e2-51f9-47bf-adf2-7e7e24c21306",
        "cursor": {
          "ref": "a04a4b7e-2e2f-47b4-92b5-e359650e1a43",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d30d6d96-f5b4-40cf-952b-ecea1cb2433c"
        },
        "item": {
          "id": "acdbe8e2-51f9-47bf-adf2-7e7e24c21306",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3011537d-f60d-4867-9114-bdab0fa14ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f4b399-3668-4a9e-a77b-53bcc3640abe",
        "cursor": {
          "ref": "6979be84-4aca-42fe-8454-b287e1a122e4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5feb7639-00a6-49cd-b7ff-e6594b51f8ec"
        },
        "item": {
          "id": "d8f4b399-3668-4a9e-a77b-53bcc3640abe",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4306129f-9b4b-4875-9543-8198934ed7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb650cd-0b5c-4f3f-8b54-739b98dc5b95",
        "cursor": {
          "ref": "fbfa3e0d-085b-4b39-885a-b5edeb93b5a0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1789b19e-7a51-4d38-869d-859b29b99ef3"
        },
        "item": {
          "id": "fdb650cd-0b5c-4f3f-8b54-739b98dc5b95",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d347c81b-f060-4070-a8d1-f90e1e6fb953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bdab6c-fef1-4a77-92ff-3601d0156d56",
        "cursor": {
          "ref": "f27a25e8-a1ca-49b3-b6f7-41395e71d443",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fb545d02-1e43-420c-a9db-d97575c54bc7"
        },
        "item": {
          "id": "88bdab6c-fef1-4a77-92ff-3601d0156d56",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "18763526-2a5a-4b96-bbc0-8db061d7f376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de01a7e4-e973-40e8-a0d9-b21206331324",
        "cursor": {
          "ref": "b8c05953-30f1-4f27-9335-9524beba75f9",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ef9da736-cdee-450f-a884-2d2f003cabc6"
        },
        "item": {
          "id": "de01a7e4-e973-40e8-a0d9-b21206331324",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e59813f6-443a-41e0-b503-44e556963664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59f70b0-1d8f-4855-8b80-6b7a04ebe085",
        "cursor": {
          "ref": "333d6a11-ae03-4ca4-be2e-86fe8994662b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d81635e0-0de2-4acf-94fc-ed9eaa9cc20b"
        },
        "item": {
          "id": "e59f70b0-1d8f-4855-8b80-6b7a04ebe085",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3a816201-5503-4933-8017-dc28fef47449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c8b0ad-538f-430b-b5cd-d5b45d3885a8",
        "cursor": {
          "ref": "e2ee0c44-12bd-4220-bf73-4632d0ea353b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "57315457-d680-4f44-ab01-8554b0ea35d8"
        },
        "item": {
          "id": "31c8b0ad-538f-430b-b5cd-d5b45d3885a8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ecfa7fdc-5ddc-499b-9de7-7b7526af8ed5",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1517eb14-fce7-463b-aaf3-eb80f43993cd",
        "cursor": {
          "ref": "e4498eab-0d9c-4f5b-be2f-dfaac8e28fa3",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6f85e613-b80f-45cf-9906-62512ef4a75d"
        },
        "item": {
          "id": "1517eb14-fce7-463b-aaf3-eb80f43993cd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0fbdadbf-c3be-46d0-a5df-621bb30524df",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5dfb22f4-64b4-4f5f-ad47-27cd7379e556",
        "cursor": {
          "ref": "a32451ec-8325-4650-8683-486da78c5dbb",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "24f3e59d-c156-4305-b273-ef1c2b4fb1ff"
        },
        "item": {
          "id": "5dfb22f4-64b4-4f5f-ad47-27cd7379e556",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "33742365-f9d8-40a3-9b84-25271441adcd",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2a91a802-b475-4340-bfbe-cb451a296706",
        "cursor": {
          "ref": "31bb450a-4644-4a53-bf18-7bc0f73a143c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2ac124e9-bbbd-4c51-a026-ae1fa8899d2a"
        },
        "item": {
          "id": "2a91a802-b475-4340-bfbe-cb451a296706",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "99c91c60-e1ec-48c3-8d3b-9d95e7f46d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e939ae59-7494-4392-8dc8-384ad7a24d2f",
        "cursor": {
          "ref": "9a7ce408-33ac-4c22-9bca-0c9fdc9f490d",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f41113e9-c6d0-439a-a86b-eff618f7af5a"
        },
        "item": {
          "id": "e939ae59-7494-4392-8dc8-384ad7a24d2f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e25f2cf8-af45-4480-8974-c57b8d631436",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2879c89e-2147-4ae4-98ee-97e9de6c4e4f",
        "cursor": {
          "ref": "724cb81b-3537-4aca-be5e-cceb60e6903f",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1d9efb62-f2e9-41be-9735-8b279a6e2d75"
        },
        "item": {
          "id": "2879c89e-2147-4ae4-98ee-97e9de6c4e4f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7f95a296-d875-4a8e-aee8-848bd2c12045",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c0f2e20e-0600-4e40-8197-c15cadef6496",
        "cursor": {
          "ref": "5936dff1-e83c-43bd-bee8-aa8ce269136f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "30dae28c-19dd-4429-9173-0e60f3395f89"
        },
        "item": {
          "id": "c0f2e20e-0600-4e40-8197-c15cadef6496",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49bf99da-6c25-4538-99c3-e44317b92ccd",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f637f00d-23c1-4a20-a70f-d73832159d6b",
        "cursor": {
          "ref": "40a3acd1-55e5-406f-8f5a-7134fbf22b77",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "25ac7bea-1d45-428a-bcd4-d6570f796240"
        },
        "item": {
          "id": "f637f00d-23c1-4a20-a70f-d73832159d6b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a6fb4a03-f556-4146-ad9e-f77f98500786",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1d680b52-c6ca-473d-920f-3f3ddc80c3a0",
        "cursor": {
          "ref": "79b629b7-7fae-4cbf-87f2-001edeec710c",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be0a5641-6da7-4e5e-8f35-47d714ba9198"
        },
        "item": {
          "id": "1d680b52-c6ca-473d-920f-3f3ddc80c3a0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bbb20258-2865-4129-8f44-081a26cf1769",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a60c13ad-42e2-45d8-bb6a-9eaa387d4673",
        "cursor": {
          "ref": "66dd5163-205a-4a21-8c35-1ea6065106d9",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "82d3f31d-4d65-4424-859d-4cbe6d00fdb0"
        },
        "item": {
          "id": "a60c13ad-42e2-45d8-bb6a-9eaa387d4673",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3f82ead4-092e-43da-94cd-6c9ddff08958",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "45f4e56c-731b-4a44-bcca-49b2dd6eef26",
        "cursor": {
          "ref": "93d64876-0dda-44a7-aede-a2af6f174905",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a7dc1ccb-45f8-4b71-8487-0f24a52e0fc2"
        },
        "item": {
          "id": "45f4e56c-731b-4a44-bcca-49b2dd6eef26",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "92c8b1de-fed0-4c92-b6a7-757aaa7d5b60",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9b9eca7a-ea9f-4792-b779-8f142e79ee43",
        "cursor": {
          "ref": "7a9bb47d-cd2d-4a32-ba84-9f4457ea7262",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "aa825975-2ab7-478f-b573-2e7f9f9bc51c"
        },
        "item": {
          "id": "9b9eca7a-ea9f-4792-b779-8f142e79ee43",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "74349c6f-553d-405a-9573-c8b2ce65e10d",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "808c6526-c241-4d2b-ae00-707413fa77ad",
        "cursor": {
          "ref": "c80ae6f3-9dae-4a57-ba85-d30fb83ca8ce",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4198188d-8fcc-4b99-8a2e-ae24a7dd7387"
        },
        "item": {
          "id": "808c6526-c241-4d2b-ae00-707413fa77ad",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b05070b9-7c4a-4586-8943-19d80b239158",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6ee41c26-08de-44de-9ea4-0ca9928e1796",
        "cursor": {
          "ref": "4fbff0ef-0e5b-4983-8cd0-9241c4f02d3a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b2ef9955-ed69-4a27-b392-930486f28ccc"
        },
        "item": {
          "id": "6ee41c26-08de-44de-9ea4-0ca9928e1796",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "389889d4-ef2c-48e1-a73a-c641dd95c433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecc3561-385c-4b92-9529-f4b49ef0d830",
        "cursor": {
          "ref": "c9491e9e-64c7-4043-a06b-42bed09c8daf",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8ee631b6-b6c1-4410-814d-34d601010f2d"
        },
        "item": {
          "id": "9ecc3561-385c-4b92-9529-f4b49ef0d830",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0981ca50-67df-4080-a18d-9c08dea216f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243af27a-ecc9-4bdd-a1f1-5ea0df9b2abd",
        "cursor": {
          "ref": "dff061a8-8ff5-4bd0-95a5-f642c0ef646c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5464ee63-d8ec-4893-9531-a52b26134e40"
        },
        "item": {
          "id": "243af27a-ecc9-4bdd-a1f1-5ea0df9b2abd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dd83260e-5a25-49b3-929c-8b334ba220ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6e880c-597f-4be5-beff-c73e46ef095e",
        "cursor": {
          "ref": "9ffe8b49-2624-4620-8cac-cc781855b742",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4a96ea82-3b87-44a9-89c9-c2c7e8ba8aff"
        },
        "item": {
          "id": "7c6e880c-597f-4be5-beff-c73e46ef095e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fe65d19b-6939-48ad-8cef-1455c4c0094a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba73a57b-504b-4e0f-8efb-c9c9168548bd",
        "cursor": {
          "ref": "06c70e1e-ced1-40f5-8959-e6aba5e2d79b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6564a49f-15d0-490e-8705-c6e14bb9f468"
        },
        "item": {
          "id": "ba73a57b-504b-4e0f-8efb-c9c9168548bd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8c7c3589-2915-4e15-a53c-196da8494709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31161523-2a66-4e68-be38-200c551f3f26",
        "cursor": {
          "ref": "4cc59349-bbe5-4f49-886e-6fae449c5953",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1481730a-1a00-48fc-8072-84a5c9d00dec"
        },
        "item": {
          "id": "31161523-2a66-4e68-be38-200c551f3f26",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "39fce585-b2cf-4821-8d53-09da799ea383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6683621-d3a5-44c6-b283-4531f283eb68",
        "cursor": {
          "ref": "928f2504-0408-43cc-8c15-ca94f3e4f374",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1a93b8ec-5fdd-48e4-9229-aedc9c8bd1ab"
        },
        "item": {
          "id": "a6683621-d3a5-44c6-b283-4531f283eb68",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "24cd09d4-d0d7-4e4c-be8e-313df712d74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61af757f-42c7-456e-858c-81c2d9a76195",
        "cursor": {
          "ref": "d4587602-1508-454b-9e97-7a8042c57bd5",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a297ce03-8b8c-4867-9917-def20a28c84d"
        },
        "item": {
          "id": "61af757f-42c7-456e-858c-81c2d9a76195",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0c667094-7a0b-4207-8d34-233d2fe870f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb593d5-6c4f-4f7b-8203-91d1699d4020",
        "cursor": {
          "ref": "29d3bd78-8bb1-4aac-8fe8-f9d72857c4bb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4d8e2769-c65a-4f56-94f6-6c5358390fb6"
        },
        "item": {
          "id": "8fb593d5-6c4f-4f7b-8203-91d1699d4020",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1789b705-ff76-465c-bb03-765631fb371a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e08346-3cac-4f85-a724-88846af8651a",
        "cursor": {
          "ref": "7de868cb-ed8c-49b7-97cd-4a02b921dc02",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "03c682b1-26a6-41bf-ac50-f3455920d3cc"
        },
        "item": {
          "id": "a1e08346-3cac-4f85-a724-88846af8651a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "25c69847-ae21-4a69-8f0b-822f7be80623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb710941-3af3-4950-bf5b-5f9bd5e7a5bb",
        "cursor": {
          "ref": "d3d4ec70-5900-4a53-b46a-80a5aad424d6",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3f60cff1-fcc4-4c34-bd91-c2b1049a8e76"
        },
        "item": {
          "id": "cb710941-3af3-4950-bf5b-5f9bd5e7a5bb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "825f57e0-05dc-4292-8f2b-3dbc44e25cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad88bce7-0be9-4ad3-b9a7-3cf424cbff0b",
        "cursor": {
          "ref": "69d761ff-4598-4d47-89bb-f923f6e02010",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c389a4f9-59db-4aee-8afe-76186d91f100"
        },
        "item": {
          "id": "ad88bce7-0be9-4ad3-b9a7-3cf424cbff0b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ca62974-3fd2-4891-80c0-514829c4643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f907ce76-06df-484e-a393-284a91fc7662",
        "cursor": {
          "ref": "dddf01e9-777e-4e00-a7ed-564de3a9562d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c16cc7a1-654d-45f6-a9cf-f3e7bf57a645"
        },
        "item": {
          "id": "f907ce76-06df-484e-a393-284a91fc7662",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "534eba44-c982-4c65-b091-0dd364ac6961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1db1d64-e1ff-4658-a90e-fbb9f5de9d57",
        "cursor": {
          "ref": "bf9f8f5e-b63c-4e73-a01c-51e53a720615",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "60d83b16-9702-41f2-8acf-5637e275f830"
        },
        "item": {
          "id": "c1db1d64-e1ff-4658-a90e-fbb9f5de9d57",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a23175d5-ec11-43a6-96c5-f3ca09e1376b",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5144ace6-c35a-4b1a-9853-adb40d5de4fd",
        "cursor": {
          "ref": "276f750a-827b-4fc5-b493-3801219a07f0",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "15716212-6b07-4dc1-8bca-71dd3bfda056"
        },
        "item": {
          "id": "5144ace6-c35a-4b1a-9853-adb40d5de4fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dd7ce2a8-d685-46f5-9706-501a101f80cb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7577ef36-4435-4697-9529-ba44f845b974",
        "cursor": {
          "ref": "43c5b487-ae25-49f2-90d7-2f16ffe91e18",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8b53c6c8-19d1-46bd-9e4f-e4ade027bb19"
        },
        "item": {
          "id": "7577ef36-4435-4697-9529-ba44f845b974",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c389c76e-905f-4081-8d89-8757c6a5dd63",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d6bf811e-3fee-4ea7-97f8-e08d75c8d4d1",
        "cursor": {
          "ref": "2b39300d-cd3c-404b-9f5e-8d362262554d",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1118a77b-3bb6-45f7-83ca-101281a59633"
        },
        "item": {
          "id": "d6bf811e-3fee-4ea7-97f8-e08d75c8d4d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2235ec40-36e7-4732-bab9-fcabaa46d3b1",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "929c8b0c-1bab-48fb-9cc2-24cae3e24045",
        "cursor": {
          "ref": "1a45e200-7548-4a3a-b5c1-e9eab30965db",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b5c74aca-f2de-4bcc-8750-89c158affb5b"
        },
        "item": {
          "id": "929c8b0c-1bab-48fb-9cc2-24cae3e24045",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7f3ba36b-d7fd-4f52-b9a4-ef0ed1a8ba43",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ba1d0543-d26a-4906-9abf-ae76c301eb31",
        "cursor": {
          "ref": "c66eaca2-ff12-4ef9-ace3-a46a8ff75590",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4789db1f-b70e-4c92-8207-1ba5cad6c807"
        },
        "item": {
          "id": "ba1d0543-d26a-4906-9abf-ae76c301eb31",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1861edf7-2668-467d-90bd-a9721e3059ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b4898b-4fd8-421e-a78a-8da66b802992",
        "cursor": {
          "ref": "e15c6675-d6c4-4998-aa2b-00621c1f7fcd",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "62eb3ab6-a262-4c80-9f70-21700570416d"
        },
        "item": {
          "id": "55b4898b-4fd8-421e-a78a-8da66b802992",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "da9310db-ce72-4575-8777-1de0615ffcb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66c1ccb-0712-4d71-a242-a7fa43832d5c",
        "cursor": {
          "ref": "18e638e7-9649-4fd8-8786-70801a6b0f49",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b6646957-494b-4eb6-93e1-dd06ec6b0e6d"
        },
        "item": {
          "id": "e66c1ccb-0712-4d71-a242-a7fa43832d5c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7d847075-e1f6-4435-914b-807fb02007df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd3322c-788d-4216-97df-422a689b8a8f",
        "cursor": {
          "ref": "2daab243-7290-4693-826d-69fc52fe14ae",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a4888abf-3c2a-4bc4-9f05-9b07ec83e9ce"
        },
        "item": {
          "id": "2cd3322c-788d-4216-97df-422a689b8a8f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dacaa7dc-9030-4757-9725-ad1c3bed7ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada0b5ae-a112-4be1-a7e4-ebe4a75c2717",
        "cursor": {
          "ref": "4d18f9ee-3dc0-423d-8551-89bfec8cf162",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "050789e7-665c-4965-9e14-266e9eb3b3f2"
        },
        "item": {
          "id": "ada0b5ae-a112-4be1-a7e4-ebe4a75c2717",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c6ab306d-84d7-402d-a482-d827421abbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df847d27-acc6-482b-b490-6c438c28d483",
        "cursor": {
          "ref": "006e406c-100f-4a5a-8f7e-b9c122fa35cb",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b979e144-31cd-41fe-b7dd-7fea1be64065"
        },
        "item": {
          "id": "df847d27-acc6-482b-b490-6c438c28d483",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eb459b3a-30e2-4592-b43c-c77d2aae6019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b54b1a-6fb1-4980-9dd2-e572dc3d9be5",
        "cursor": {
          "ref": "082c84a8-9cad-40ed-aded-5dbac3ee6f81",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "57b07a7d-8265-4ea2-84fe-bdce973288a4"
        },
        "item": {
          "id": "f9b54b1a-6fb1-4980-9dd2-e572dc3d9be5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "698b00ba-28b0-4ef6-8bb1-eaff494dd384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7425af2a-27c0-4c3a-821a-4c9467371cea",
        "cursor": {
          "ref": "681d117a-3af0-4edf-8c96-68560e1482e3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3b057de9-4e04-410d-abaf-3e5b894df768"
        },
        "item": {
          "id": "7425af2a-27c0-4c3a-821a-4c9467371cea",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5e036348-7fd4-43d6-8692-7efac2102a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c98864-62b9-4261-b0b9-7b19b22d69df",
        "cursor": {
          "ref": "138bf778-42f4-466b-9565-8bd499246da6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8e9822f1-488c-41d9-84c2-fabc6176faa3"
        },
        "item": {
          "id": "10c98864-62b9-4261-b0b9-7b19b22d69df",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3a24df35-c506-465e-a0fe-d15477c47c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0c751a-bf3a-4ebf-9b71-f028a9ef0085",
        "cursor": {
          "ref": "4401d375-c69c-4657-94eb-035828055542",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "96bebd6f-e442-4473-b3fb-7f7e61db0941"
        },
        "item": {
          "id": "0c0c751a-bf3a-4ebf-9b71-f028a9ef0085",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad2c8c77-dbf3-4b65-b10b-8c8300164cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b09a796-54fb-49bd-a802-922f3bdad1f7",
        "cursor": {
          "ref": "65ffc329-cea6-483f-a580-343677f799d0",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e063117d-7a76-4807-8813-a88ab6a25f94"
        },
        "item": {
          "id": "7b09a796-54fb-49bd-a802-922f3bdad1f7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0d893b41-e33a-4082-b413-7104623f6421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1581ed-c8e7-42ab-864a-dd7187eec1fa",
        "cursor": {
          "ref": "ea4ece4d-dbe5-43a5-b205-e14cc1eb3f56",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4d284b54-57cb-481e-812b-aa78a7b89893"
        },
        "item": {
          "id": "ae1581ed-c8e7-42ab-864a-dd7187eec1fa",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a669a7dd-8a9c-46c7-bcd2-0c7f70974281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a41dd0-c760-4b19-b628-b9053c2b8083",
        "cursor": {
          "ref": "32c90afd-e7b4-4374-9148-2d8094f0a7e3",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "02da05b4-7a6f-47db-9377-d9fd62054f67"
        },
        "item": {
          "id": "41a41dd0-c760-4b19-b628-b9053c2b8083",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cf638359-4764-4d57-b4f8-4344fdba50f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee83c5d-64d1-4bcd-8d11-0933f5104d39",
        "cursor": {
          "ref": "0480843e-985b-48d3-9a89-618a2bb06ee3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "78fa59c3-9c50-40cf-b36d-7a76935e5642"
        },
        "item": {
          "id": "cee83c5d-64d1-4bcd-8d11-0933f5104d39",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "79f5182b-764f-4bbf-b6d3-59e553e11da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f28e16-44c8-44da-b98f-1a1f4150f776",
        "cursor": {
          "ref": "98433c46-a19b-4923-9eb5-305275815ac9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bee0e7c1-f901-4010-ac64-03218746a1fb"
        },
        "item": {
          "id": "c3f28e16-44c8-44da-b98f-1a1f4150f776",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2ada215f-6de8-4ccb-a138-58730f63f078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac85aae7-939e-4051-97c8-c0acbb237175",
        "cursor": {
          "ref": "4fe23a37-18a2-43b1-8bd0-85d0a9f43443",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "622ea946-9bf0-4b90-b094-466b72f8ece4"
        },
        "item": {
          "id": "ac85aae7-939e-4051-97c8-c0acbb237175",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d490715d-3802-4097-a302-1dbd742bbeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92115ae5-6c09-4f63-a74c-f5bf65d6ce57",
        "cursor": {
          "ref": "ccb1351b-f65c-4cf2-86ab-df668d8d315b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0c8bdbf2-4cfe-444d-b38d-37acce909dcf"
        },
        "item": {
          "id": "92115ae5-6c09-4f63-a74c-f5bf65d6ce57",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "acdc5a3f-f6f2-4734-95ce-da0a037eb982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357a3f28-3d6a-47d0-995f-4ba705c57cda",
        "cursor": {
          "ref": "c2dcd3a0-1f13-4045-ab99-7f175d371244",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "417c0942-9105-4096-8b0f-47355b4f7e85"
        },
        "item": {
          "id": "357a3f28-3d6a-47d0-995f-4ba705c57cda",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fcc32903-2d9d-400f-b72d-0f97c795c261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f799e7a-1e0b-4ede-8408-ef8007a4e6ef",
        "cursor": {
          "ref": "ff3d085b-4498-4323-af8b-ad9322fbf82a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b1f54ac7-89cf-47df-9d57-49e1b056aa09"
        },
        "item": {
          "id": "8f799e7a-1e0b-4ede-8408-ef8007a4e6ef",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "3b4e4b6a-e3aa-4913-9357-70f0880e0154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8870446f-8a76-458e-a33b-21a5687bb17f",
        "cursor": {
          "ref": "286d5f75-8fe7-46ec-975a-86e258544df6",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e21701b4-2cf6-4ff3-8e1c-f2b7d83a40b9"
        },
        "item": {
          "id": "8870446f-8a76-458e-a33b-21a5687bb17f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "385b12ce-6e62-4a1a-a3fd-e19758001cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bf05ef-b4e9-4aed-a134-5ba19fbef269",
        "cursor": {
          "ref": "d18409f6-da70-4e63-a563-24f46053f34b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a0a007cc-309d-4e74-a46e-d6267af9b7af"
        },
        "item": {
          "id": "b5bf05ef-b4e9-4aed-a134-5ba19fbef269",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d0b53cc7-81f0-436f-bd56-0219263d9474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513cd027-0d6f-42ca-b858-231b7fdba353",
        "cursor": {
          "ref": "8e0c3e17-b22b-4841-b4cc-20106c8a291f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9007666e-4f84-4cac-a561-c4a3723ea00e"
        },
        "item": {
          "id": "513cd027-0d6f-42ca-b858-231b7fdba353",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eaa853ce-a7b6-4e32-9e48-8a2b8e6537a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075a4e15-430b-4850-acdf-f8baa78659a5",
        "cursor": {
          "ref": "a1d5b9cc-d895-4c8c-839d-ec87796c49ae",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e3bd07cf-a9c2-45d7-ad7a-fd16cc02c30a"
        },
        "item": {
          "id": "075a4e15-430b-4850-acdf-f8baa78659a5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d52793f8-6780-4cec-8fcd-f72a26a77da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec39cbd-a3ff-4c1b-aa3f-0e872f823712",
        "cursor": {
          "ref": "6be8238f-c8e0-4156-828e-f81b3e068d95",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f89fd26b-d6c2-4f9d-8ee6-9d1cfbbd84af"
        },
        "item": {
          "id": "9ec39cbd-a3ff-4c1b-aa3f-0e872f823712",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8cf54c8c-7a11-4977-bd79-e2254377123d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0608262c-1782-4a8e-9797-9cb13180fc8d",
        "cursor": {
          "ref": "1d2b2204-500a-464e-b3dd-5fb03a8bba05",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8186429e-cc1b-42b1-8728-b4532ec21fb9"
        },
        "item": {
          "id": "0608262c-1782-4a8e-9797-9cb13180fc8d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9a26f385-77a3-47a8-84c7-e9394f242c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d951058-ad8e-4783-b665-403af2f7dd4b",
        "cursor": {
          "ref": "8f9a33eb-a4a7-48ed-80f7-4ced81573d20",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aff13965-a784-49e3-9691-581a677c0173"
        },
        "item": {
          "id": "8d951058-ad8e-4783-b665-403af2f7dd4b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "afb3cad0-35b7-4798-b47f-53d30f3159da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f0f51d-c7a1-4ca1-a390-f683c8dd2a32",
        "cursor": {
          "ref": "3a084776-ac9f-4764-abbe-ae1f2d33a0c7",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7faa27dc-55b0-4bbc-946c-1af4b50c66f1"
        },
        "item": {
          "id": "a5f0f51d-c7a1-4ca1-a390-f683c8dd2a32",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5bbe6fa4-9b8a-4b67-87d4-af7fbab5e49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6699f200-44ea-41cf-8c13-c3d702f7b29f",
        "cursor": {
          "ref": "114a07a0-efa7-425d-8631-f2cdf3ef9d91",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4fdaf273-668a-42db-9453-eaf54b05ed24"
        },
        "item": {
          "id": "6699f200-44ea-41cf-8c13-c3d702f7b29f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0adf586c-3733-4cf1-a573-c2a83d763fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a22393-1bd9-4ea2-95d6-d9ead96147a3",
        "cursor": {
          "ref": "91e95ee8-a513-4998-a1c7-10a32ad0541e",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "920a0394-aa3b-4d45-ae29-5ea3233faeba"
        },
        "item": {
          "id": "25a22393-1bd9-4ea2-95d6-d9ead96147a3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "59d80b27-7bbd-4bd5-a08a-1c9bde27061a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092ed03d-b473-480d-b932-ccb68374b60a",
        "cursor": {
          "ref": "56a11e96-ae5c-46a7-926b-20e6a9c79cd0",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "93cb9cfc-423b-4482-8e29-40636ac60dae"
        },
        "item": {
          "id": "092ed03d-b473-480d-b932-ccb68374b60a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cf7ba6d6-050c-4d2a-b25e-1ab010900d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce9b56d-37a9-4447-a4d8-8a58d12ec1ef",
        "cursor": {
          "ref": "4beb8d13-a0ff-451a-a266-7d89980bf6ee",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "be56715b-4d6e-4a3a-b3c8-280956c23e62"
        },
        "item": {
          "id": "3ce9b56d-37a9-4447-a4d8-8a58d12ec1ef",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c477204a-4fa7-4d98-aefb-e69c5123ab95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c74d8e-f82b-4fce-982a-6e05943ceabd",
        "cursor": {
          "ref": "6f9ae51d-c458-491d-96d3-e8f60cb7fbe3",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0c55a97a-967e-467b-b090-32b7cffd23d5"
        },
        "item": {
          "id": "a6c74d8e-f82b-4fce-982a-6e05943ceabd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fef688a0-7630-41e9-8788-d1d16ae8c50b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61cf9bc-44b9-43f4-8862-5e1dc7202a84",
        "cursor": {
          "ref": "0bb7546f-0e08-499c-bdb9-ae245df231a8",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b73a11a9-62d6-4ffe-9710-26ed292cc088"
        },
        "item": {
          "id": "b61cf9bc-44b9-43f4-8862-5e1dc7202a84",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "eaa40791-869a-4e32-b79f-ff3e40691bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d6651312-ab2a-48c3-aa74-acdc6bb1c6f7",
        "cursor": {
          "ref": "3ca5c029-77b8-4fed-b18b-ed4f2b669725",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b2494cba-ed42-47f0-b2b7-ba5568e10206"
        },
        "item": {
          "id": "d6651312-ab2a-48c3-aa74-acdc6bb1c6f7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "32971960-3dc7-44e2-a392-c0118cb2316c",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb32ba7-a5f0-4b09-9bec-d08350842092",
        "cursor": {
          "ref": "bcb6940a-7c0b-415f-a6e0-bfd3c8bca30d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "95314f6c-5389-49aa-bb8a-8361c1275d9b"
        },
        "item": {
          "id": "deb32ba7-a5f0-4b09-9bec-d08350842092",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ffcbf830-f4a1-4777-9344-360d7c4cf9be",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b317cca3-6066-4ce2-bd15-2c678f81b942",
        "cursor": {
          "ref": "95c74424-f1ce-4ab2-b4e2-d61b03771340",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "389816a4-1ab4-46a3-acac-3e08dee929fc"
        },
        "item": {
          "id": "b317cca3-6066-4ce2-bd15-2c678f81b942",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d13edec9-93a8-4e0b-a398-e4f9c8523255",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47dad883-1a54-4276-bc05-b486671b53b7",
        "cursor": {
          "ref": "d9fcb132-36e2-4c05-ace1-55139a53bdd2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2df1f16d-a45c-486b-922a-fbefb0e68212"
        },
        "item": {
          "id": "47dad883-1a54-4276-bc05-b486671b53b7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "12f37b7e-a59f-4dd5-b462-8f58b52ed7b9",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec34bef-023e-45ce-8646-1fddf0863b85",
        "cursor": {
          "ref": "da8f3b7f-d639-4ac2-979e-7eec6d160df0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2576907e-7857-46b8-9bf1-8ca645d81799"
        },
        "item": {
          "id": "cec34bef-023e-45ce-8646-1fddf0863b85",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3a49bc0-097d-4257-ba94-d1260d59adb5",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-01T00:38:55.535Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-01T00:38:55.535Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6fbeeb40-dbeb-42ea-9667-f121c8378ab4",
        "cursor": {
          "ref": "f49c38fe-cece-4f97-8e6d-17484459658e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "da96dca1-152d-47c9-9425-a5215fc12894"
        },
        "item": {
          "id": "6fbeeb40-dbeb-42ea-9667-f121c8378ab4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "206c6e9c-dbb1-4c08-abc4-5b701d10fd4b",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db12cd09-cf9b-4c85-8ab8-ac5b47408207",
        "cursor": {
          "ref": "cfcbb4cc-61e3-4a8d-b24e-890484d5aeb7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cae29e1e-b777-4d47-9e02-25364f2073ae"
        },
        "item": {
          "id": "db12cd09-cf9b-4c85-8ab8-ac5b47408207",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "287ad108-ed41-4d80-9174-3c0b6ce27b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796418d8-837a-4f1e-a355-77f4fb47f15e",
        "cursor": {
          "ref": "68a0446a-5bec-4cb7-bb42-933c9344ff2d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c7d8647d-535f-40af-941f-47a0a7a4d01d"
        },
        "item": {
          "id": "796418d8-837a-4f1e-a355-77f4fb47f15e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b602a06b-a154-43ff-9cca-720201db7968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a5f3c0-8417-4911-aedb-4f8867151d44",
        "cursor": {
          "ref": "bb8a4d76-b617-4306-a7b4-9242955278ee",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7c2af2d1-daad-4eb9-9a8f-d418356f6617"
        },
        "item": {
          "id": "44a5f3c0-8417-4911-aedb-4f8867151d44",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "80dcb56a-34c8-4e08-9a15-42e84006ea41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a609081b-b788-4d55-8f5e-6cca81c394e6",
        "cursor": {
          "ref": "0d245c73-e5d6-441f-99d1-0c52e16eb03a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2d1212b7-e557-441c-8172-73b734bc2bb6"
        },
        "item": {
          "id": "a609081b-b788-4d55-8f5e-6cca81c394e6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8f9f9dd5-5801-4262-8b5a-95876102e589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed060a88-9350-4121-8280-a9efb2c47578",
        "cursor": {
          "ref": "ef676739-8893-4e7d-8418-d8e34aba9f88",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8a125b52-77d8-44e0-bff8-1b9857749559"
        },
        "item": {
          "id": "ed060a88-9350-4121-8280-a9efb2c47578",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "05638974-33da-4eaf-8a83-b3fe832f28fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14765167-13e7-419e-8629-3d2be8f5e306",
        "cursor": {
          "ref": "9284be37-2b3c-49a6-ad2f-f8e673b30f1a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b57ba481-a1f7-49fe-a510-cf00f46931cd"
        },
        "item": {
          "id": "14765167-13e7-419e-8629-3d2be8f5e306",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7f8036fb-08df-4f45-a836-c17e04a1637a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89186070-f765-4392-806b-75c7edbe188e",
        "cursor": {
          "ref": "f7135ec8-a4c1-4afa-96ef-73ce2be03762",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6883771d-f3d2-4efb-ba95-7524a6674eae"
        },
        "item": {
          "id": "89186070-f765-4392-806b-75c7edbe188e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4967e2b0-d6f6-4f8e-a54d-bf7d248a3d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03280b6a-3949-49d2-b9e3-fb85c0c990b5",
        "cursor": {
          "ref": "ce17208b-4fd3-44e3-861b-e5c91a288b8e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6a832cb2-b84a-43f2-b302-215f9eeb294d"
        },
        "item": {
          "id": "03280b6a-3949-49d2-b9e3-fb85c0c990b5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a42c1ac8-ba9a-4a24-8c3d-5e7f2448da03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b730b791-6b47-45be-bf9d-e209cecc04a1",
        "cursor": {
          "ref": "5a4776af-a3cf-4f87-bae2-bd31f0fcc91a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3f8b1a71-6adc-435d-8295-ea9d5c9f35d1"
        },
        "item": {
          "id": "b730b791-6b47-45be-bf9d-e209cecc04a1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "22d053f4-cfe9-4ba9-b00a-8c6c5213171e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f776990-a651-4f1b-a03d-5415ba660aaf",
        "cursor": {
          "ref": "facdc465-275e-4d98-bbc1-5a5e1dd19692",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8d09c9e8-0697-45d5-85f7-da4d9c7e98d8"
        },
        "item": {
          "id": "9f776990-a651-4f1b-a03d-5415ba660aaf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "38ec718d-e943-427b-b8be-5900e953f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90427e6b-aa81-445c-9732-6e08ed17a430",
        "cursor": {
          "ref": "2b5bb147-a57d-4df4-b20c-239c13e9a3fa",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "11531ead-4ea5-4a7e-941b-8feb557999b7"
        },
        "item": {
          "id": "90427e6b-aa81-445c-9732-6e08ed17a430",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bbc4723d-0b1a-49a1-a7c4-bff1b42e5275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555d4049-4729-442e-bb47-fe1eb324d8d1",
        "cursor": {
          "ref": "e7f6564e-6bd3-4a8c-98a4-3450103d1813",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "16d24d9e-a894-40d8-aa82-b183bb958696"
        },
        "item": {
          "id": "555d4049-4729-442e-bb47-fe1eb324d8d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fb661482-53de-4096-90ce-8b634e24af18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f780670d-751e-4339-bbe2-0fac322173a7",
        "cursor": {
          "ref": "3f0f129e-a588-490b-bf24-c44e2602072a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4ceb9d44-dff3-45e2-9404-cfeb7bb4168b"
        },
        "item": {
          "id": "f780670d-751e-4339-bbe2-0fac322173a7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b09cd685-6bec-482d-a66f-2867fd6a8b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba6bc69-dc24-4334-a3c0-20f203a39336",
        "cursor": {
          "ref": "af3844f2-9e93-47e9-afe3-709121739370",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0965a040-8362-4e67-b657-ad01dd15fce2"
        },
        "item": {
          "id": "bba6bc69-dc24-4334-a3c0-20f203a39336",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "969ba70d-78bf-4fa1-ad84-9610397dda7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "849dc7af-4ba0-4b5e-8728-ddc58f70bdbf",
        "cursor": {
          "ref": "e1720968-f554-4dc5-9de7-f9822525ad21",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "870f7ecd-0f8f-476c-afee-a9682a9d83a3"
        },
        "item": {
          "id": "849dc7af-4ba0-4b5e-8728-ddc58f70bdbf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "eb445884-0f87-4217-8e39-74d2fe184d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa348ca-2346-4700-9c23-32ade71cbc03",
        "cursor": {
          "ref": "242e6659-87c7-4fd3-852c-d16758fbc99c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "74186e17-d73d-48ba-b5d1-047156aaaa69"
        },
        "item": {
          "id": "faa348ca-2346-4700-9c23-32ade71cbc03",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "34e8516c-a5f1-43a8-8198-62ad40667205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde01426-fdb6-415d-ac0f-016bda38214a",
        "cursor": {
          "ref": "e29bd1b4-b3a5-415d-a54f-662eca3c8187",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a2088c75-22a3-4637-9f1a-411dbb091476"
        },
        "item": {
          "id": "cde01426-fdb6-415d-ac0f-016bda38214a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3746825-6757-4dbf-9046-0323ca8ceab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aee5c9d-eb51-4880-a3ef-bf8684756c0a",
        "cursor": {
          "ref": "cc9dc979-9453-4737-8481-47f3c95f95c9",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "63332bba-57ed-4c32-9984-d39927e299d2"
        },
        "item": {
          "id": "8aee5c9d-eb51-4880-a3ef-bf8684756c0a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2f515753-7d5c-4d20-bb73-3700addf5061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b7c7f5-311f-4320-9802-0e39769c5b25",
        "cursor": {
          "ref": "feddfd3f-6081-4bf2-9e02-ea7757c5a27c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d42a11d3-43a9-4017-90f0-fcf40faa3d5c"
        },
        "item": {
          "id": "55b7c7f5-311f-4320-9802-0e39769c5b25",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a4f97839-d80f-47df-b8dd-7f3166d80924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebe78f7-cb22-4d7a-9e70-57c154f2ff27",
        "cursor": {
          "ref": "7c0b2703-b4b5-4059-bb5a-aa6537d51584",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "85d62ef3-d135-41b6-8679-e38e25d17fca"
        },
        "item": {
          "id": "8ebe78f7-cb22-4d7a-9e70-57c154f2ff27",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b860cb2b-f469-480a-bf1d-5096249b0566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093cd1cd-fc74-4b59-81cf-ca14c018c4ab",
        "cursor": {
          "ref": "b62162c8-7e2e-4222-a407-712d7c80e02d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a1a2914b-ac46-4cf9-b68b-c07259af8978"
        },
        "item": {
          "id": "093cd1cd-fc74-4b59-81cf-ca14c018c4ab",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6415663e-f16b-489d-a44e-4984d0e4f627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e41035-460c-4fa8-be23-e5e0aaeca152",
        "cursor": {
          "ref": "156c7bcd-e54b-4210-bf3d-6f72f5e5be04",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "902e9121-4064-4ab8-917f-ac229c84a81d"
        },
        "item": {
          "id": "74e41035-460c-4fa8-be23-e5e0aaeca152",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c96e75fe-6957-4bfe-a269-2c523e02abaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec4cb9c-3b7b-4c7f-b76a-745c03c794d2",
        "cursor": {
          "ref": "c6f89942-16f0-4bce-94d6-3d2a6123739c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5e030fc5-ac6c-41a7-853a-b6406c1ed037"
        },
        "item": {
          "id": "eec4cb9c-3b7b-4c7f-b76a-745c03c794d2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b2b44855-71d6-4dff-b2c4-d9c093614bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed4d46a-e06f-42a7-8510-43d3aa08e0dd",
        "cursor": {
          "ref": "73edeb25-319d-4fe8-8b37-09d4b8ff45ff",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "12c3acbd-2c46-4202-bf63-da9784460515"
        },
        "item": {
          "id": "bed4d46a-e06f-42a7-8510-43d3aa08e0dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aa53e4c4-bf82-4c77-8195-298b20223a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6617fe6-494c-4d38-8a77-e8c9cd5d74f8",
        "cursor": {
          "ref": "f43b4e66-49ad-44a9-8d52-23bbd4afd485",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1af8be28-edd6-4be3-b672-9c7b746beb98"
        },
        "item": {
          "id": "c6617fe6-494c-4d38-8a77-e8c9cd5d74f8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f923b180-0b9c-4948-a849-166523c902cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f51cec-4e18-4328-9bf2-50369a151d9e",
        "cursor": {
          "ref": "936b33f1-c66a-4617-9309-27aed6618c8c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f96d25b2-13ba-4755-9ab0-229fc0269a7f"
        },
        "item": {
          "id": "04f51cec-4e18-4328-9bf2-50369a151d9e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "68853bf7-47bb-4e52-b97a-d01e74b7f4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493d22c9-6935-4bc8-a2bb-78d5cd4acfd6",
        "cursor": {
          "ref": "716709f9-21c4-4bb8-94e1-eac7f3494195",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "18fcc899-30fe-4d61-bb29-c5ad18af997d"
        },
        "item": {
          "id": "493d22c9-6935-4bc8-a2bb-78d5cd4acfd6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "532b1a82-c664-4893-b6c9-0d4ec928ebf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e3b79a-cb23-443c-a345-2ce4021b6695",
        "cursor": {
          "ref": "372e9904-1abb-49b3-853e-e1e5ee0678c0",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e679ae93-39b1-447c-a6a8-8633bcd43b7f"
        },
        "item": {
          "id": "c5e3b79a-cb23-443c-a345-2ce4021b6695",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c19b77f7-cf77-4297-87ec-37517c70fb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abec7a11-9e90-4962-863e-6b13b5a5f05e",
        "cursor": {
          "ref": "609fd01c-39ed-4734-83c2-bb86a55ee6d8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0bcc42c8-307f-4da6-8e30-840a260bd273"
        },
        "item": {
          "id": "abec7a11-9e90-4962-863e-6b13b5a5f05e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7f945a85-1e91-49df-b649-cc331b91c76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d65ab93-e923-4ba2-a56b-756aa3b4e41a",
        "cursor": {
          "ref": "3868c810-ac67-4fea-990d-4ecb5fdf8686",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4576c405-a37d-4ebd-9ac8-48a5573e9013"
        },
        "item": {
          "id": "7d65ab93-e923-4ba2-a56b-756aa3b4e41a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "95a3b75a-4936-4533-8e02-6951d15e70a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e795ae-bb8d-4e91-97e8-db1cebf597db",
        "cursor": {
          "ref": "cc14ef4b-2e76-464d-9018-e41f93feb58a",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8ec16fa9-8eb8-4bdd-86c3-e123de8e9369"
        },
        "item": {
          "id": "08e795ae-bb8d-4e91-97e8-db1cebf597db",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b31fedf0-4907-46c3-aab9-9bb73bf2351f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35dab6e4-8f5f-44ff-abe2-4e64995de938",
        "cursor": {
          "ref": "48722bf1-aeb0-4b2e-abcf-47ac173f3f3c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "70a69bab-e6d4-4d71-a9fd-f754c56f3fbc"
        },
        "item": {
          "id": "35dab6e4-8f5f-44ff-abe2-4e64995de938",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a02a1937-3c5d-42c3-8578-02116695fe18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b74cd6-4074-4e58-a070-147ca754f64a",
        "cursor": {
          "ref": "ca03633a-1e3c-482c-8c00-927e9d44f731",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bf5b0e20-5df6-4e4b-ba5e-34c75eedb1b4"
        },
        "item": {
          "id": "07b74cd6-4074-4e58-a070-147ca754f64a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6d590fdb-dddc-436f-bc29-3462c1ce0013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cb9327-6f85-4d57-802a-5956d8262a9d",
        "cursor": {
          "ref": "89b96de1-3908-4c1c-a489-6ff7bc46b081",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "69b8b98d-9e87-46e6-8aa3-8767cd5ce721"
        },
        "item": {
          "id": "36cb9327-6f85-4d57-802a-5956d8262a9d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "491139a7-7d26-4612-a144-6f5d97a00b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9499ac4c-b5a9-4b72-8273-296b208af1c4",
        "cursor": {
          "ref": "4218e9b6-a857-4b09-9795-3c6808480830",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8f5f8a1a-aff7-4b55-901b-49bf4756c3d4"
        },
        "item": {
          "id": "9499ac4c-b5a9-4b72-8273-296b208af1c4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "830c1249-0727-4c9b-b89c-15140ed6dfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe2d1f7-282e-47b8-9e03-1cb919fc59f5",
        "cursor": {
          "ref": "8731f08f-fda5-40c2-9f15-c2d9034e6f1b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "50cb6f69-640b-47d5-8dac-6aeee57921fd"
        },
        "item": {
          "id": "3fe2d1f7-282e-47b8-9e03-1cb919fc59f5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "39b3c44f-74c9-4393-8e6b-4abc37ae9ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa304801-bc74-47d4-920e-901b6c65a3d8",
        "cursor": {
          "ref": "a1f561f0-1c5a-48b1-a117-2d4b723a93fd",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5d4d6b64-0a39-443e-a33a-2bae93c558be"
        },
        "item": {
          "id": "fa304801-bc74-47d4-920e-901b6c65a3d8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "318a91ce-4031-483a-ae91-aa57d0df0a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0004030d-2c09-4098-b039-3afe65ad262d",
        "cursor": {
          "ref": "42a4d491-6306-44b0-9d65-b9bd3ec5d19f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6ad56b2b-c85e-411e-a60d-25b497104d43"
        },
        "item": {
          "id": "0004030d-2c09-4098-b039-3afe65ad262d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "837c0bf9-186c-400e-99ea-2a74ff621df2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14262e4-d6e1-4cdd-83c4-dde2637fcee2",
        "cursor": {
          "ref": "2c324758-8c0c-4c6f-bb40-52144a09658f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4293f355-70aa-4a27-9b50-646bc8102bf1"
        },
        "item": {
          "id": "b14262e4-d6e1-4cdd-83c4-dde2637fcee2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "53b09acc-9306-48dc-975f-89d8cb207859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9e05c3-1d6c-46e7-8c33-e75f0cda8cfd",
        "cursor": {
          "ref": "bcd3d250-8c6d-40e2-80f0-6caa37df94c0",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "818398e2-057c-4b7e-8cf3-404efc24f8a9"
        },
        "item": {
          "id": "dd9e05c3-1d6c-46e7-8c33-e75f0cda8cfd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d5ab77b2-cd6e-44ef-b5f9-0361f0c72484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36bd022-cb4f-43d7-b29e-d5fdada9ebcb",
        "cursor": {
          "ref": "87a9b526-9e8a-4db3-b2fc-afbf3408d289",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9a17821a-9408-4145-bbc0-9174e11b48d3"
        },
        "item": {
          "id": "a36bd022-cb4f-43d7-b29e-d5fdada9ebcb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fd7a43be-396a-4cc0-b5f8-944e55594c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb3c2ca-9839-49af-9f96-f7e8dc02b8a7",
        "cursor": {
          "ref": "2a60f73a-4270-456c-98c4-0dd9383f22ae",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b14b2dff-252e-43fa-a138-5d428f44af60"
        },
        "item": {
          "id": "2bb3c2ca-9839-49af-9f96-f7e8dc02b8a7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5128f991-22b8-43ba-bb72-e617073ba82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60633d5-a0d4-40b8-9470-432fec425e7b",
        "cursor": {
          "ref": "40dc16b4-e8e5-4e00-9c9c-69bda9a8e303",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5577705e-03db-4ec8-8222-e14a0cb6f656"
        },
        "item": {
          "id": "a60633d5-a0d4-40b8-9470-432fec425e7b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3c7889b9-b9c5-473b-b338-12706d80c4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac43063-070d-48d7-b5e1-a1711a31e247",
        "cursor": {
          "ref": "55b0217e-1bf0-4370-a033-3f58f12c1a31",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a0b7e597-0a83-421a-a963-1174d0a1a2f4"
        },
        "item": {
          "id": "7ac43063-070d-48d7-b5e1-a1711a31e247",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "063d4d21-f53d-4468-a559-b5816232f05d",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ee1f7b1f-fee6-446a-ac94-c2f7ce6ff6e3",
        "cursor": {
          "ref": "48fcf192-7b0f-46c1-a780-612f3b7c8d2e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "52b34c8b-18bd-44d4-911e-04862ba89692"
        },
        "item": {
          "id": "ee1f7b1f-fee6-446a-ac94-c2f7ce6ff6e3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "290e4bfd-d92d-492e-b172-7ff4e97242e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb6b121-e662-4c63-aa6a-ba356d67be9d",
        "cursor": {
          "ref": "808e22ae-cdd6-48e9-bb3d-7f4c2f63414d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "da8f88f1-9d97-435a-bb6d-562da5c4312a"
        },
        "item": {
          "id": "eeb6b121-e662-4c63-aa6a-ba356d67be9d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "08c416c2-cdd2-4dd6-8e17-6f7d57952d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a534110-80da-45b8-a921-13d777fcea08",
        "cursor": {
          "ref": "2698f8f0-5f17-4bbd-b982-eaa8090743fd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "48513999-600b-4f71-90d8-463e466ab3c8"
        },
        "item": {
          "id": "9a534110-80da-45b8-a921-13d777fcea08",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7da306c3-adfc-491b-93ee-9346d72e350f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c8bcb-d300-4b36-8e2e-36a609b8774b",
        "cursor": {
          "ref": "a7bc64ab-740b-4a45-908c-4baf9ef508aa",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82bae9d8-c652-4de0-84c6-dec78600e753"
        },
        "item": {
          "id": "720c8bcb-d300-4b36-8e2e-36a609b8774b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "645bba86-7ac1-4e00-bd5d-00e79efd0c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a42c295-d43a-4449-9109-902ce06eca07",
        "cursor": {
          "ref": "8c7dad38-d9e4-4ea6-9d5e-abc33b8cb1c5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d4a24f83-44f2-4110-ac9f-7d261ca5ec64"
        },
        "item": {
          "id": "8a42c295-d43a-4449-9109-902ce06eca07",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c4bc0625-fff9-4dcc-84a3-433a35cef5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9932915-b657-4fe3-a7ab-8710400b98a8",
        "cursor": {
          "ref": "c3c1841a-42fd-4261-baa0-a8c0cbcf5998",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4f10f0a3-0932-4506-b7dc-b89b04fb4bf4"
        },
        "item": {
          "id": "b9932915-b657-4fe3-a7ab-8710400b98a8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "56aa0762-b930-446e-84e3-3387badcaa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8709de-9596-420f-aabf-12a46e1c791b",
        "cursor": {
          "ref": "98136429-22a5-4480-8046-506d3900e029",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "368efe15-fbad-40b6-b7ac-a9b8352619ad"
        },
        "item": {
          "id": "be8709de-9596-420f-aabf-12a46e1c791b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13f97e4c-2ea6-47c8-8bb5-47df23af06c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16b9972-2ba7-41e3-90a7-df2a732b3c10",
        "cursor": {
          "ref": "2b091a40-7693-4fb2-89ce-0be07e856e9d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "567c912e-3256-4817-95e1-97fb51a1cff3"
        },
        "item": {
          "id": "f16b9972-2ba7-41e3-90a7-df2a732b3c10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f55c1cb9-1054-4be3-9aa8-444c7ebc3667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a448e758-a4df-4842-b775-78dac0d2f889",
        "cursor": {
          "ref": "5e893083-0f0a-4275-8501-51848bb2cb88",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "384acf99-dbec-459b-b27f-2ad987d686e6"
        },
        "item": {
          "id": "a448e758-a4df-4842-b775-78dac0d2f889",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "55e3e18f-b7ba-4cbb-a3f3-ad83b4d79fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8199b7b1-ed87-4353-9598-9415115680d8",
        "cursor": {
          "ref": "c84778be-f7b2-4903-bf65-f900ebe8b15b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "25444215-7796-47ae-ada2-69a80f3837e2"
        },
        "item": {
          "id": "8199b7b1-ed87-4353-9598-9415115680d8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "12f27f9c-ade7-4b85-b489-2a965bf4d94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6b8053-937f-48a4-a311-b95ed696b67b",
        "cursor": {
          "ref": "a535c65e-ad31-45f7-bcf4-8c591c3a2556",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e0ab94b7-2f6c-4812-b9fa-fb30f98e2079"
        },
        "item": {
          "id": "cf6b8053-937f-48a4-a311-b95ed696b67b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "678d3d70-3e73-4229-97ab-3a019e8bf27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9943a8dd-9623-4c52-a86b-9508997e7312",
        "cursor": {
          "ref": "34fae553-7707-482a-9cd1-aae1e6478600",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "08f05a66-1476-4efd-889d-6f9dc6d28389"
        },
        "item": {
          "id": "9943a8dd-9623-4c52-a86b-9508997e7312",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "45950dd1-c358-453f-b1ed-e3ddfcd77bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c765579b-ac81-4d3f-889e-2a7160b49b9a",
        "cursor": {
          "ref": "1b56b5b3-cf59-409a-9852-eba5477c0673",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d31fde1b-23f2-4582-b0d4-02180d029d8f"
        },
        "item": {
          "id": "c765579b-ac81-4d3f-889e-2a7160b49b9a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "da21ee7a-b821-4305-a888-f24884d02eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76246bd9-0247-4f31-950f-5d2443ab58f4",
        "cursor": {
          "ref": "2ceb5074-1f1c-4c4e-abdc-2cc50633c5f7",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8a6375eb-0530-4aaa-85a4-f49c31f155d1"
        },
        "item": {
          "id": "76246bd9-0247-4f31-950f-5d2443ab58f4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fa37e71b-18bb-4d14-8911-86264ae03496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce82d270-e742-4502-8e1e-2228fae62799",
        "cursor": {
          "ref": "ec0fedaa-61ac-4d0f-bd0d-bb1da1e14d77",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "69406cce-eb95-4040-893f-894bc491f635"
        },
        "item": {
          "id": "ce82d270-e742-4502-8e1e-2228fae62799",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a90ded30-2089-4095-9b9f-b3246ee66310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a36120-29d7-49fa-8a07-52593c86ebdb",
        "cursor": {
          "ref": "f45c7448-d257-49a0-8127-e9b690b1e6c9",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e62c0363-7192-484a-9721-9a4d32b5e384"
        },
        "item": {
          "id": "92a36120-29d7-49fa-8a07-52593c86ebdb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "736f2927-d64d-450f-b312-98eb94038afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0613f58-871b-4e92-8ab1-3216bbf8d661",
        "cursor": {
          "ref": "de3144af-64ab-47f6-93be-7561209e87f9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7e6d69ee-7d7c-4ce8-8e14-2365a076e272"
        },
        "item": {
          "id": "b0613f58-871b-4e92-8ab1-3216bbf8d661",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "685234c4-c046-4ce7-8a60-07e6d5dda397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d0bb67-6570-4b6b-813b-669c75c52f8b",
        "cursor": {
          "ref": "74345b3e-9c7d-45be-b962-47d982661376",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d2fb94a2-6b6e-4cce-825d-957c8d980047"
        },
        "item": {
          "id": "49d0bb67-6570-4b6b-813b-669c75c52f8b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8549f9e0-97b6-461d-a532-36c646d52271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e505fa7-6152-4581-b0e1-9d80fa57c548",
        "cursor": {
          "ref": "b39e3c60-81a6-4129-b115-e3a4c4f6b1d1",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "67fc443e-5f70-4e20-8bee-1c06e26fef2e"
        },
        "item": {
          "id": "1e505fa7-6152-4581-b0e1-9d80fa57c548",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f244bc48-64f2-4db0-b0e5-184bd980f4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a912a830-6e91-4533-ac4a-d2558bf80bbf",
        "cursor": {
          "ref": "4c0364b7-5907-4b33-a9ca-737475938d28",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2bd4564d-09a8-4806-82d8-095e3c1cbc61"
        },
        "item": {
          "id": "a912a830-6e91-4533-ac4a-d2558bf80bbf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b3c87895-3953-4f0d-b161-e01f1e1315da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df669e55-a8f5-47b6-a0a3-191e3daead01",
        "cursor": {
          "ref": "268c23ee-86f8-4c34-b080-6b12d110cf84",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c3fae5a9-4843-45e2-8366-23e9e05d5c2b"
        },
        "item": {
          "id": "df669e55-a8f5-47b6-a0a3-191e3daead01",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6e2baf4c-9b79-41fa-9118-ea4e44036547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec2720a-e650-4bac-8e9f-e0e6cd7626c4",
        "cursor": {
          "ref": "99156d63-c09a-409a-8e8f-a5c3783a9f0b",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "623db7c1-298e-419c-9cd5-8761e33ea222"
        },
        "item": {
          "id": "2ec2720a-e650-4bac-8e9f-e0e6cd7626c4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "92ecfe05-dbb5-437a-8e18-3030310446fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d9924a-6ed8-479d-893c-1aa1b0e90dc6",
        "cursor": {
          "ref": "e594c0bb-85b2-46f7-93b4-b263ffe66179",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7e735f2b-fe2f-419c-9474-1e8a09a3fd26"
        },
        "item": {
          "id": "17d9924a-6ed8-479d-893c-1aa1b0e90dc6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "52e32c82-3a69-4861-9ad5-c7e89bcbd213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e94b76-1c01-4690-bf1c-a1672bc35f67",
        "cursor": {
          "ref": "326606c3-aa32-421b-a749-f3e0f7ce9aae",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "138932c3-b4ad-42ac-b6bb-468d2c69ded7"
        },
        "item": {
          "id": "56e94b76-1c01-4690-bf1c-a1672bc35f67",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ef2bedfb-8910-4748-be6c-35f2a0b3bc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e642a8a-b05b-41d8-8f15-c4bf80c3e522",
        "cursor": {
          "ref": "8b113f51-9b2c-40f0-9787-d8daca94dc21",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "99981703-9b64-4c73-b15e-3713ead6efaf"
        },
        "item": {
          "id": "3e642a8a-b05b-41d8-8f15-c4bf80c3e522",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fecf4898-cf26-4035-8d90-9ea4a7cee96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa11ddfb-8420-4daf-8a87-d97ccf6b518b",
        "cursor": {
          "ref": "1bf7db55-0b23-45e1-8382-240f3338ce1b",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "06a843c5-614e-4d8b-9ea3-d1e7ea84239b"
        },
        "item": {
          "id": "fa11ddfb-8420-4daf-8a87-d97ccf6b518b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d4b8f5a8-9049-4a54-84ef-95c8abc09a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf4b1eb-538f-4104-be7f-9bf6b4524e45",
        "cursor": {
          "ref": "1e10337c-c92a-4823-8b6c-e2768e99a5df",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "14adecaf-630e-4b0f-a8db-a1aea55ff5a8"
        },
        "item": {
          "id": "6bf4b1eb-538f-4104-be7f-9bf6b4524e45",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d96fc180-abc6-45bf-bb6f-8c42cbba7f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96470dc-bd4e-4aec-b3e9-f7100224dfe9",
        "cursor": {
          "ref": "34039026-9f9a-4726-9a90-ec34a89bfe17",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "08da93e5-9b5c-4491-85b3-f1febbdead68"
        },
        "item": {
          "id": "c96470dc-bd4e-4aec-b3e9-f7100224dfe9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9fcbeeaf-ba8a-475c-b9a3-dd24971f348f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82fcec0-522e-4c82-a421-77c2518887f5",
        "cursor": {
          "ref": "a0b14c65-1abf-4f70-8311-d7e4e67aa59a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8747db19-2745-4e04-b572-5163a8d30636"
        },
        "item": {
          "id": "c82fcec0-522e-4c82-a421-77c2518887f5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7859d6c9-369f-4ae1-908f-6b6e1339ec4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0609fb9-c499-4d97-ab07-ebaa06c81b1b",
        "cursor": {
          "ref": "979e5b62-6ccf-4ba7-84c6-dd867a5242e3",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "30c22735-3fc2-44a9-8b85-02ecc6bfa1b6"
        },
        "item": {
          "id": "c0609fb9-c499-4d97-ab07-ebaa06c81b1b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "951cb4ce-f001-4af4-8a5a-9f69052183ee",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "3b000b3c-84aa-4328-a63d-35c798d55544",
        "cursor": {
          "ref": "60ea7d83-7a18-4add-9074-01debc253c63",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eac89ced-c024-4119-92f5-ff0d7fddad10"
        },
        "item": {
          "id": "3b000b3c-84aa-4328-a63d-35c798d55544",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "94f36567-e870-40f6-8596-7d826076c5ef",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1b048796-db50-4718-8006-9f490b990e79",
        "cursor": {
          "ref": "a4e711a3-2916-4649-9962-251a39e490e4",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f6ffbaf8-d03e-4d59-a5c1-0ae4f2694d8c"
        },
        "item": {
          "id": "1b048796-db50-4718-8006-9f490b990e79",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5fbe590e-9420-4193-9b98-58e62a78d3c9",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e42c168a-64e9-419d-8dd3-1c12351f5c23",
        "cursor": {
          "ref": "067501c5-8da1-4983-ac4c-62aae0b2efd5",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e902bf6d-e799-4838-987f-962e3e736ba1"
        },
        "item": {
          "id": "e42c168a-64e9-419d-8dd3-1c12351f5c23",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f10edddc-0e8a-4057-ab2d-0fd9df49f16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3d7ce2-a54d-4fe6-8b2b-13f9fac50f52",
        "cursor": {
          "ref": "9af9e865-0b00-444d-be3b-1b45ddb6751e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "38a6354c-7465-4776-990b-cf064d1b1e95"
        },
        "item": {
          "id": "9b3d7ce2-a54d-4fe6-8b2b-13f9fac50f52",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8f255796-15ea-4b4d-921b-3f3bf418ec02",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e38a5876-8b25-4086-87cf-9384737ac63b",
        "cursor": {
          "ref": "2f04901e-87a6-4673-8743-449b765ca8a6",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4c12d567-581d-459c-9d1c-b8d85b3439ed"
        },
        "item": {
          "id": "e38a5876-8b25-4086-87cf-9384737ac63b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c97bdb61-39ca-4747-b53c-c8771513b901",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bb7256aa-6f1c-4ea3-a32e-f22f54c5f7cc",
        "cursor": {
          "ref": "4296c9d3-2aa9-46a6-95b0-a4ace3dd5076",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b1129f95-b654-4457-8044-675e86592d86"
        },
        "item": {
          "id": "bb7256aa-6f1c-4ea3-a32e-f22f54c5f7cc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "246ad21f-3ad6-4824-9b2d-b31129eb2b1c",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "073a1212-5921-42b1-a345-f1974e4414e3",
        "cursor": {
          "ref": "c5f25e54-3beb-4a96-b3fd-0e04d2a07c75",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e4e99ac9-0ba1-488f-9b4a-3657e4bcb58a"
        },
        "item": {
          "id": "073a1212-5921-42b1-a345-f1974e4414e3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "47d4b2a3-c017-4b94-9efd-fc9c49a44b6e",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "056091b0-6a5b-415c-91d2-eb33c785de1f",
        "cursor": {
          "ref": "ee4dca75-56dd-4386-b3d1-258a26d4207f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2673da59-673f-47da-a65d-46d742856e4c"
        },
        "item": {
          "id": "056091b0-6a5b-415c-91d2-eb33c785de1f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a1622ea4-58df-431e-b5f1-681b8e0dbbc7",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c93504b3-9333-46df-8796-8bb47b38a99f",
        "cursor": {
          "ref": "7c6031d9-63bb-407a-8b99-6a13e17c3f67",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8f3bbbd4-cbe7-420e-89d2-ddebbe0fa4d7"
        },
        "item": {
          "id": "c93504b3-9333-46df-8796-8bb47b38a99f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ffd9457a-cd64-4886-8a13-4a2e9990783b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f601c8b6-1bda-45b1-9818-ac19eabfbf49",
        "cursor": {
          "ref": "6fc74062-de06-4707-adca-ee54b9ee862a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "396f1d8e-9b38-4653-a32f-3b63f4f231dc"
        },
        "item": {
          "id": "f601c8b6-1bda-45b1-9818-ac19eabfbf49",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3d3accfc-1f4a-4311-8623-90bad3b91228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28914086-cdd0-492c-9adb-76ab5c6e66c1",
        "cursor": {
          "ref": "a98fce0f-6f7b-4c2c-a348-d67a82d26f8e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c0b17807-800e-40db-b8de-a5b38099a726"
        },
        "item": {
          "id": "28914086-cdd0-492c-9adb-76ab5c6e66c1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8106b4db-0f3b-44ff-bb07-7553bf41bab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bfd3b7-d8a3-4b7e-9460-eff9d495ea7a",
        "cursor": {
          "ref": "d8f601a4-3c0c-479f-a0f6-4a851f718a6d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a8b9e2e0-be92-4fbc-bc63-4f21e5f3f288"
        },
        "item": {
          "id": "22bfd3b7-d8a3-4b7e-9460-eff9d495ea7a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "63423207-592b-40f8-9edf-b80740942006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c667b178-1e09-4bd5-88f3-1d00d39a94f7",
        "cursor": {
          "ref": "45430ae4-ade9-4d78-b188-034441bbc165",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d53fab9e-4d8f-41a4-89a3-726e04b9dbc0"
        },
        "item": {
          "id": "c667b178-1e09-4bd5-88f3-1d00d39a94f7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f7b915bf-15b9-41be-8856-42332217573b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4c8c1e-01cb-487e-b616-61f6fd75f412",
        "cursor": {
          "ref": "4ec5dccb-830f-4df3-877a-28c1514f5f15",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "eec437b0-2410-4edf-8642-b92e0d530c5e"
        },
        "item": {
          "id": "fa4c8c1e-01cb-487e-b616-61f6fd75f412",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d251add4-0d62-4505-aa53-60ee9ef3fb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0011f175-a619-4caa-b31d-199e903ef297",
        "cursor": {
          "ref": "8806a786-4e1c-48b3-9df6-59c0f20c67a6",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5fd0ad8b-c9c0-4d84-81de-2fb90de8ac1c"
        },
        "item": {
          "id": "0011f175-a619-4caa-b31d-199e903ef297",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b4b9a3e4-45fe-4555-a87f-99acb86f5550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3180a4e2-82a0-43c8-887b-eeef560470e6",
        "cursor": {
          "ref": "b5efe865-6f7a-464f-9129-2fe3cf5ebe0c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3f537b5e-0a0c-41d4-8f21-75193e0a7945"
        },
        "item": {
          "id": "3180a4e2-82a0-43c8-887b-eeef560470e6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7ac8929d-572e-4900-ba20-e4681b1a7fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bcfe13-cf3a-4d92-a1fb-0135fac1742a",
        "cursor": {
          "ref": "7cd9db1b-c8e7-478e-835e-56b39898a216",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "263def10-7ff7-46be-b047-2c702b1a8908"
        },
        "item": {
          "id": "87bcfe13-cf3a-4d92-a1fb-0135fac1742a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2f2925f4-5502-44a6-a89d-a5be8dd38fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9883a2-99b0-46b9-941b-62cc5ef1333b",
        "cursor": {
          "ref": "2491442e-37b1-47bd-b5f0-4c9cdfae025e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "96de33f5-7506-43d0-9e48-0800b0eafe35"
        },
        "item": {
          "id": "9a9883a2-99b0-46b9-941b-62cc5ef1333b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "906595f3-dff9-4233-8b11-a7a33206c2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bce081-b421-4697-afa6-1fedb0425ced",
        "cursor": {
          "ref": "b9bc4b0f-0a21-465e-84b7-cb7fc89eb7c4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "878809a2-d619-43f3-8d84-f98134d95699"
        },
        "item": {
          "id": "b0bce081-b421-4697-afa6-1fedb0425ced",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "51126766-0251-4808-a0a1-50ec75e3dc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd237b7e-d5d4-483d-8eb7-ea39efcc75ef",
        "cursor": {
          "ref": "62f99402-4b97-43a3-9528-7d99848a87ef",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5e414aca-49d5-44e9-95a1-1d4448731bd1"
        },
        "item": {
          "id": "fd237b7e-d5d4-483d-8eb7-ea39efcc75ef",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a14aed41-abe5-4aa3-9878-957299b96ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ed004a-b95b-42e4-a24e-4789d3f8792b",
        "cursor": {
          "ref": "f034756f-9900-4a6d-80e1-f4378b65c44e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e8a7aabd-932c-4715-b2a1-64651944712d"
        },
        "item": {
          "id": "18ed004a-b95b-42e4-a24e-4789d3f8792b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e671d00f-ec16-4fd2-bf57-591885b22086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b505cd3b-83eb-4076-aaf6-9699409d9c66",
        "cursor": {
          "ref": "b2ca53ac-7b7b-424c-977c-19c5ab2b5d10",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bb8700a7-30d3-49f5-abc5-0e38e4903cdc"
        },
        "item": {
          "id": "b505cd3b-83eb-4076-aaf6-9699409d9c66",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c23f92b2-4b1a-4819-88f7-6707af31e9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494a441f-ec35-4d2a-8ae4-dd23118298ce",
        "cursor": {
          "ref": "3257dcd1-1589-44d9-be43-3f5461117448",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d7fa3f07-55a8-4d5d-93da-8c273c934b7c"
        },
        "item": {
          "id": "494a441f-ec35-4d2a-8ae4-dd23118298ce",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4b85dfb4-89f9-4637-ba4e-c8e4d71410d3",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d207cc67-ace0-4c13-8677-b1ba920efab6",
        "cursor": {
          "ref": "18941723-73a4-49c4-8b27-6248337875c7",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c46953ef-cb92-495c-89dc-3ff3b5d6defd"
        },
        "item": {
          "id": "d207cc67-ace0-4c13-8677-b1ba920efab6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a967dc61-ee73-455b-bf6a-af568b8eb553",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0c4a3330-f06d-46e6-9eb6-fe7edfc47979",
        "cursor": {
          "ref": "9e573e5b-9b8f-409b-8f39-f3579053215f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "637c9f87-dcdc-4dec-bcf1-43d5e26f23be"
        },
        "item": {
          "id": "0c4a3330-f06d-46e6-9eb6-fe7edfc47979",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c22e1bbc-de94-413c-a7a3-e1ae20621c76",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "539f59df-98f6-46c1-a7bf-5a21138e4b1e",
        "cursor": {
          "ref": "dbb3d1a7-a563-4f16-987e-b9e9873828cb",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "05fcf8bd-94ce-4f4b-bd44-3a36c3a4b42c"
        },
        "item": {
          "id": "539f59df-98f6-46c1-a7bf-5a21138e4b1e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ef95abe1-bec7-4180-b44c-21eee270989a",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fd3399b4-a7c1-41c7-90b0-9a00b734cb18",
        "cursor": {
          "ref": "9d83df0a-f14e-4727-8c34-4d21002f09c6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "74a52725-7cc0-422a-974b-0788edc9f695"
        },
        "item": {
          "id": "fd3399b4-a7c1-41c7-90b0-9a00b734cb18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3b15ee84-d6d0-4ea0-948b-81927ff176f8",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "66316759-c4d8-4929-9e3f-3e99aca67ec0",
        "cursor": {
          "ref": "74097530-a588-40e3-8e35-5b29632b8cc6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "20682c7c-49b4-4153-89bb-a847068ebfda"
        },
        "item": {
          "id": "66316759-c4d8-4929-9e3f-3e99aca67ec0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "56da45d5-4e2e-4079-971d-d9f9fa21dfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4693f086-463e-4706-975d-d0da2d514993",
        "cursor": {
          "ref": "f70483d9-e864-4b7c-b26e-b748a42aaff9",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b7879b4c-6f72-490a-a852-0e7baa47ba8c"
        },
        "item": {
          "id": "4693f086-463e-4706-975d-d0da2d514993",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e136db34-6bba-405f-a77f-8c91537b42e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6abf06-b9ab-46c1-a64a-ff2a77f69cf6",
        "cursor": {
          "ref": "564048a2-de6a-425a-95f5-7ca4e0ae0c27",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8d5fd732-5183-4f75-9aaf-e7f8d4c2a6a7"
        },
        "item": {
          "id": "ba6abf06-b9ab-46c1-a64a-ff2a77f69cf6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "080d59c0-b550-4705-a518-3673ce0508a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc5a9bb-d87e-45b4-8155-b2bd9d91a1bf",
        "cursor": {
          "ref": "0f15114b-9ef5-45c7-9dc4-76e33e9c01b8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "acc07f30-ed09-4d0d-b385-07f0d5f4d4ba"
        },
        "item": {
          "id": "6cc5a9bb-d87e-45b4-8155-b2bd9d91a1bf",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6d729cda-3b8d-49d1-9c56-1caeba1c822f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cba970-3ce8-41ba-a1c9-bffa501d424b",
        "cursor": {
          "ref": "00311d3a-eb88-447b-aafa-0bce01b4f1f4",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2facaa5a-aea4-4a9b-a81d-8a5c659cb69a"
        },
        "item": {
          "id": "45cba970-3ce8-41ba-a1c9-bffa501d424b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ec620cea-0770-4cbe-88bf-c5b37b8d077e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aea9d00-59ad-4118-84ca-5d59a126157d",
        "cursor": {
          "ref": "431124ba-1d68-43cc-a9a8-0d65bcb9160e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a68766e8-dd63-4324-943e-33146910bd30"
        },
        "item": {
          "id": "5aea9d00-59ad-4118-84ca-5d59a126157d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5890da6a-563a-4993-8d8e-c19028988df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed9e1c5-a781-4fe2-91cb-6104aecc1883",
        "cursor": {
          "ref": "e95c1661-44ec-4eab-b6d7-1c623c377e11",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5438946a-7121-493c-af5c-680eb7b6f881"
        },
        "item": {
          "id": "9ed9e1c5-a781-4fe2-91cb-6104aecc1883",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "319913f9-548f-4033-89d5-d1679b21079e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97db552-6ee7-484a-bd3b-71e77ab044cb",
        "cursor": {
          "ref": "1b0aa9c6-233e-437d-bcc9-21d54e41c846",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "33062a45-6deb-4bcc-9e9c-710ec5b92784"
        },
        "item": {
          "id": "a97db552-6ee7-484a-bd3b-71e77ab044cb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "57a4f383-2394-44bd-b60e-b1d8440ac946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e1b373-c2a1-461c-b78a-3728fc7b20fc",
        "cursor": {
          "ref": "fe3b291a-3c53-48cd-9acd-f83b3b2cef34",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3cd515c1-996a-4117-a059-63983b7feb31"
        },
        "item": {
          "id": "69e1b373-c2a1-461c-b78a-3728fc7b20fc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f6d6dafc-e744-43e2-b743-11b32b734348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0a26b8-f72e-4580-b7bb-bc2a8735eb10",
        "cursor": {
          "ref": "c22c12fb-4d2f-41b0-84e3-3ecb8f287e79",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9f30c9fa-533c-4e0c-848c-767f351eb759"
        },
        "item": {
          "id": "ca0a26b8-f72e-4580-b7bb-bc2a8735eb10",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4443b661-d17a-40ea-8234-b56978bef32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ded943-9a96-4067-beaf-ecb83ce8e059",
        "cursor": {
          "ref": "ba7fc1a1-16fd-4081-8ed8-d51f7a9060d3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fbf9d753-b53b-4eca-bddb-15a8b14b661e"
        },
        "item": {
          "id": "c3ded943-9a96-4067-beaf-ecb83ce8e059",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6c4f6f53-2164-40d7-b578-9d30189263b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548a2358-d512-4d5e-8021-07c9fd1ef0e3",
        "cursor": {
          "ref": "945d12f5-60e1-40e0-9666-40adbfafc340",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "767b22a6-b5ef-49cd-93b8-0d2e04ce2655"
        },
        "item": {
          "id": "548a2358-d512-4d5e-8021-07c9fd1ef0e3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ac966380-2e26-4f24-8e50-887376511ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3a042e-7a86-4ea0-858c-06c4de302535",
        "cursor": {
          "ref": "fcf81beb-b077-433b-8a10-7630dff96bb2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2f0658af-e90b-46aa-b8d8-a9322d569d45"
        },
        "item": {
          "id": "fe3a042e-7a86-4ea0-858c-06c4de302535",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8a1649d4-b09f-4c7c-9d64-04edcf271044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74006431-2217-44fd-bffd-f0821c4fc0b1",
        "cursor": {
          "ref": "a995fd1f-e0f3-43d2-b4d9-c0ad57da2060",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9eb01c46-c9a4-4c71-b8b9-585f0c6c601b"
        },
        "item": {
          "id": "74006431-2217-44fd-bffd-f0821c4fc0b1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f08ba80c-c46d-431f-9d7b-252d416581eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9c8a4b-9a4e-4cac-85f2-2c4844c50c65",
        "cursor": {
          "ref": "e586290e-32b8-4f76-89a5-be227e68c935",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2471451d-f244-45f5-b7cb-f9b3d44372f5"
        },
        "item": {
          "id": "ce9c8a4b-9a4e-4cac-85f2-2c4844c50c65",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e6687e53-9a32-40bd-a245-e34a831d32f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05a0c73-ff1c-4f01-ab82-26487aa5f84e",
        "cursor": {
          "ref": "294f1dd7-cacc-406e-a9c3-179f7a7bccc1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7d457433-d5b0-495a-b28d-7a1d8c467595"
        },
        "item": {
          "id": "a05a0c73-ff1c-4f01-ab82-26487aa5f84e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1ad2e5bb-c5af-459e-b7b8-2eff66410ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbf3995-593c-49fa-87ae-5894cceab99d",
        "cursor": {
          "ref": "8e6af4d2-4275-44c5-a58c-5f40b73c3604",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d885a466-b47b-4f31-a855-e2cda23bcbbb"
        },
        "item": {
          "id": "6fbf3995-593c-49fa-87ae-5894cceab99d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd7941c5-0118-442e-ad60-da78cfc596da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6b0205-af55-4536-9176-8063b1abcd5e",
        "cursor": {
          "ref": "062c9477-f41b-4e30-8317-666659e6a1bc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a073d3ea-1bda-40cb-bf14-844eca2452fe"
        },
        "item": {
          "id": "aa6b0205-af55-4536-9176-8063b1abcd5e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fba1500a-fa04-4bb7-be31-3fcb7183ff2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba22ba3-f43b-4e18-9321-9957fed8241e",
        "cursor": {
          "ref": "12f3008f-4efe-43b2-9b37-56c75596af46",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f7429411-2a77-45dc-a80c-f990d7cccdf2"
        },
        "item": {
          "id": "3ba22ba3-f43b-4e18-9321-9957fed8241e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c1ae9a94-84f1-44b8-ac70-fd2149d4a3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57f8faa-4912-4e14-aeaa-19a0d68b282b",
        "cursor": {
          "ref": "0b2c06eb-d692-4f58-984a-baedb882d7b9",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "72d93df4-15a8-43ce-94b0-a14d087f511e"
        },
        "item": {
          "id": "d57f8faa-4912-4e14-aeaa-19a0d68b282b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e24b8d06-4b54-4ed3-9977-6c08e7319124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab97f82-7767-466c-adb2-0d333d3f807c",
        "cursor": {
          "ref": "c821de26-7a91-4287-a6fe-89e14e7214dd",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7d4ee8fb-7e88-4bda-af8a-6d70365d18b1"
        },
        "item": {
          "id": "eab97f82-7767-466c-adb2-0d333d3f807c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "36d27ec0-3c4a-408b-8f1f-476f0a62ce13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf27640-ef23-4737-b57f-88322a7e75a9",
        "cursor": {
          "ref": "9b72bb24-02c7-458d-a70a-537f743c1653",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a3afee0e-ef35-4d17-9f7f-900622e86945"
        },
        "item": {
          "id": "5cf27640-ef23-4737-b57f-88322a7e75a9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c9ae4eca-8501-4e5c-bbfa-f57f22a9196c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3b78c1-5bb9-48fc-b982-17b320a9a742",
        "cursor": {
          "ref": "43c454d3-832b-49fc-9d72-1e463c24e320",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bf5d6254-6fc2-4d03-a744-078f8fd1ab83"
        },
        "item": {
          "id": "5e3b78c1-5bb9-48fc-b982-17b320a9a742",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d93555e4-d9d8-4eb9-9cbc-7cf5532b093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c013e23-f744-4310-9e83-751d3e5a3262",
        "cursor": {
          "ref": "cfb45675-6a5a-414f-9ed1-e6fd10fad3bc",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cf53538b-db4d-43ca-ac1f-d7b116e52406"
        },
        "item": {
          "id": "5c013e23-f744-4310-9e83-751d3e5a3262",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1c94a6eb-85da-4878-ad2b-cdd4bc291959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6958c3-046c-4411-9ffb-026bcf814174",
        "cursor": {
          "ref": "c7eec84d-8120-4b4d-a793-29f5fed7718a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "126fdbd2-fdb6-4bff-8faf-b9c467554baa"
        },
        "item": {
          "id": "8e6958c3-046c-4411-9ffb-026bcf814174",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d4dfcbc4-37d8-401b-ae8c-2a7d41458121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc39c7e-efb3-4b2d-a511-a176be68be88",
        "cursor": {
          "ref": "159feb46-6fef-4346-a976-0e66d03d45eb",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e909df14-4896-4d32-a6f7-0e718591d808"
        },
        "item": {
          "id": "1bc39c7e-efb3-4b2d-a511-a176be68be88",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "234fba2b-6456-46a8-98ae-1ff1e0e3a498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d6bf7d-1012-4c82-af84-800770112f18",
        "cursor": {
          "ref": "a96b594d-f37d-41f6-a5cf-42899149839a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "83a488f9-96d0-433b-ab38-12755e267fb5"
        },
        "item": {
          "id": "a9d6bf7d-1012-4c82-af84-800770112f18",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e14a538c-6fc7-439d-bcb0-79216c716bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ecb4d3-ebb7-42b7-859b-02428cde8e82",
        "cursor": {
          "ref": "15a0088c-0878-405b-a55b-3b2d2bdf5deb",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "076433dc-a951-470b-9ced-e6e1622d378b"
        },
        "item": {
          "id": "89ecb4d3-ebb7-42b7-859b-02428cde8e82",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1423c32c-c5f5-4697-8251-44b607eae79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d4b035-4b95-4513-90ed-abf9f1321d9f",
        "cursor": {
          "ref": "c3c57350-80eb-4a40-96d0-6fdc401ab022",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "13b279ea-a8d7-415a-a54f-2068a6484769"
        },
        "item": {
          "id": "c5d4b035-4b95-4513-90ed-abf9f1321d9f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "30792237-103e-41a2-9b39-ae241667cc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5716fd43-2ed3-4049-ba8a-527848a3b178",
        "cursor": {
          "ref": "c6a01536-7229-4956-b898-845fb9a87ac7",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "13e2934e-1851-40a0-bc70-76074f354394"
        },
        "item": {
          "id": "5716fd43-2ed3-4049-ba8a-527848a3b178",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "11944320-9e68-4363-a936-634d27c9145d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92250ac-88c2-40bf-bad0-cc5f31dda794",
        "cursor": {
          "ref": "6d8f00f7-c580-440a-adc7-ba86f694054c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2e5b5d31-320b-430a-aa94-810ff388b530"
        },
        "item": {
          "id": "d92250ac-88c2-40bf-bad0-cc5f31dda794",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6e6189c5-deaa-4e6b-bdbe-0809c67b9e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231a55ad-754e-4d2b-b30f-0eea68692ab6",
        "cursor": {
          "ref": "c694b890-5838-4ea4-bd40-18f69a2ac7db",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "04293b3a-4535-41a6-bf27-6bc159da5243"
        },
        "item": {
          "id": "231a55ad-754e-4d2b-b30f-0eea68692ab6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cef7e89e-4862-45e6-b43a-d81b54e7a80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b797a9f8-4968-4162-b4f7-4b61fd74790d",
        "cursor": {
          "ref": "9eb71a8d-594f-4bc0-9a39-38fefb9e329f",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "32864d08-829c-4db8-bc8d-b4d068e745ce"
        },
        "item": {
          "id": "b797a9f8-4968-4162-b4f7-4b61fd74790d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bc11854c-599b-4f74-b001-af42065b2274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b45403a-246b-4ad1-93fb-1365efcf3ad6",
        "cursor": {
          "ref": "d38028b5-01f6-438a-ab59-fdcddf508451",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bc479d73-6ba2-4bc6-a7ef-062dc78cadbe"
        },
        "item": {
          "id": "3b45403a-246b-4ad1-93fb-1365efcf3ad6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e9de03ce-ada5-4dbd-a377-ad08c0ad33a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0a3e43-0dac-4160-aedf-2af45bcd09f3",
        "cursor": {
          "ref": "bab43c09-9f70-4fd9-83e1-52f951a60543",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "041e6bec-a241-43e8-aab5-7142f78afc92"
        },
        "item": {
          "id": "6e0a3e43-0dac-4160-aedf-2af45bcd09f3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "06886408-d434-4a31-8788-3054084b325f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3958da06-15af-4374-96e5-51251aff972a",
        "cursor": {
          "ref": "fcabe968-0d66-486b-bb15-130d3d9b90ac",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ae210661-222d-4b30-bc52-32e80ee6ff8d"
        },
        "item": {
          "id": "3958da06-15af-4374-96e5-51251aff972a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "246f7178-e00b-46c0-942c-8615232be052",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "aba3a4de-04a9-4b2c-8b62-1a6594c9a3fe",
        "cursor": {
          "ref": "72ad68ce-7f23-4e1f-af8b-0639acb24fbe",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2880ce2e-39c0-4b64-93fa-98799e790134"
        },
        "item": {
          "id": "aba3a4de-04a9-4b2c-8b62-1a6594c9a3fe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d9151968-5183-4bb0-ba80-cbb2294ef61f",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6b5b84-eba1-4b27-9080-39f535b446b1",
        "cursor": {
          "ref": "d2d66b23-fbca-4602-bfe1-70f1c3e13180",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e2f56499-6075-4449-95bd-2cad282f4621"
        },
        "item": {
          "id": "6b6b5b84-eba1-4b27-9080-39f535b446b1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3da8b07c-686f-449c-965b-ae266e290762",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4993400-da77-40cb-92a3-69e7044bfc9a",
        "cursor": {
          "ref": "d042525d-8406-4c1a-84a1-4e81bda4f470",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dc7e3269-3541-49cb-8f82-1f83c7e9b5cd"
        },
        "item": {
          "id": "e4993400-da77-40cb-92a3-69e7044bfc9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a0030fa-e76d-412a-b377-44e49dada940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4993400-da77-40cb-92a3-69e7044bfc9a",
        "cursor": {
          "ref": "d042525d-8406-4c1a-84a1-4e81bda4f470",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dc7e3269-3541-49cb-8f82-1f83c7e9b5cd"
        },
        "item": {
          "id": "e4993400-da77-40cb-92a3-69e7044bfc9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a0030fa-e76d-412a-b377-44e49dada940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69c4ce6-6696-4f47-a0f3-d4f9dc1d36c9",
        "cursor": {
          "ref": "312a9af3-5673-4d45-9fa4-db3074804d92",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "312de0f1-28c9-4505-8b6c-1cff21485bfc"
        },
        "item": {
          "id": "f69c4ce6-6696-4f47-a0f3-d4f9dc1d36c9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "494abc6c-5ef7-45c8-89ab-6e115d4a807f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6202b7de-b632-444c-9efe-22e2d2457323",
        "cursor": {
          "ref": "85105041-f338-4537-93c8-27f395c90b2d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1f4dd1c1-e510-4a97-9a7b-e81f5d2c38cb"
        },
        "item": {
          "id": "6202b7de-b632-444c-9efe-22e2d2457323",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8d885f9a-7dda-47fc-84c6-667db797e1a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}