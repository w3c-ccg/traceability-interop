{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "af08558b-a264-410d-b41d-1dda1988b170",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8c5271a4-1d99-4061-a199-c82bcc5c5ed1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08df9719-b3b9-4db9-8ae5-b07c877cef83",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00d45398-4d37-4a69-82ab-194844672699"
                }
              }
            ]
          },
          {
            "id": "a4185c63-62d6-4d89-8c08-2cc2a297bf00",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6bd276c-1063-44ae-8a86-62a03b3e6eb7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ea5f8b20-1267-47b7-96ec-1a42360be153"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "55e85222-00c7-4bf5-9cfa-02d070d737bc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "522be501-2b8b-4261-beaf-81c6b4510d5b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5495b36d-243a-4861-92d6-2e916f32e6c6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12d264b4-1d17-49c9-bb01-abdc640b3468",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cedb11d0-1821-4e39-a5ca-55613876a429"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81c7482a-408c-4a6b-9543-fdd5de54cd24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33ad0373-a4d3-42c1-90a6-54f415119198"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "45643382-72d8-47f0-ad8b-0ea2b7b0c1e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83833366-2e68-4c1b-81c9-86b589a96e94"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c63b6278-3114-4a9f-9458-8d944e8e020d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8cecc315-ce6d-4116-9cb6-fda22717963a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1615df05-d504-445d-9e22-9634b31801ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91b69339-f44f-4750-b93b-6ae59a51b2ab"
            }
          }
        ]
      },
      {
        "id": "2463ecc8-5daa-4aae-8dc2-d6e09fd4a4e3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "117bada4-1738-42a6-8d94-9c5e1a3dc351",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4694441c-149e-4be6-bb7c-35a402b0a692",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "da69d8e1-33a6-4764-a708-bfa86f19ffc8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424e1cd5-9a60-4f98-98fb-993e0857a1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67a31153-0e0f-4dfd-82c5-7f1b2da02cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b43f0b-c70f-47d8-8b60-0a4c2f71b7f6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7203cac5-d5a4-42c0-be47-9c5436b76f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40d50ce4-585a-4fa5-883f-233eb4ee8d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c30f909-d8ef-4da5-a472-93c076f32390",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb2b650-8e15-4bbe-9063-6d5443717177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c515972-7e80-4ff0-8a9f-a09c0ef3a9e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d35cc72b-af39-4e19-8aa0-516c7896d14c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2492e9b5-df12-46ee-a841-28fd9f567077",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc349b9a-59d5-4197-bd66-bd2c0b7ff94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5b1c7ce-9332-45c3-9b36-e414aadd4eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8aebe2-9302-4626-a4b6-e7962e7af36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2626c6de-42b9-410c-809e-4c0be63b43a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "462664e5-bc3a-4812-8909-b6ffd3af6318",
            "name": "Positive Testing",
            "item": [
              {
                "id": "405c7dec-eb83-4814-83f1-0ba15848f21d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa5fa28-8571-46d7-911b-9dc8b5d20c29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4c5df56c-bac2-4422-b9b6-da40f9ef6f10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "caf319d7-3984-4cb9-8879-61e948c030fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "79f8f714-a83e-4736-a345-36fd732e12a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53f341cd-cf66-4fd1-ad0a-ee67275a6e8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a4f2561-5a6f-4ec8-8666-c5d3c92509ee"
            }
          }
        ]
      },
      {
        "id": "e36f8673-3070-488c-a4ff-1f54db01fbb8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d2f246d6-70c8-4fb0-a47b-fa017ddabe0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b449f3a2-e896-4275-b50b-6fba8db3cdd5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "50d98476-be58-411a-83a4-b2ca32f1cc67",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec1b313-a745-4b7b-b810-2a01b2c88522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7945e18a-9f0c-4f0b-9f9e-cfaa0978642e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df67459-687f-4290-b12d-e4c03e462cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcabb116-58cf-429d-affd-ad55dd769cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39683f51-cbdb-4f33-8091-b996bde201ef",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38230023-d036-4047-b95e-8ebda1605a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af0b722-5f7e-4898-a032-9d75c6f2c6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3268501-6c85-4ab0-97eb-ec02281bf0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "880d4e68-0da4-42cd-9e08-34e094c6f38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56534b1c-072f-4ed8-a287-88f05c2a180e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2724be00-0b05-4f96-9f01-61c3ba8fa03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535c9b33-0543-46b2-96c5-d35da3366d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee017eb-29c0-4524-a091-b9683019e392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa53600f-a578-4bc6-8801-5ce4086da526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c51052-a503-4b55-b890-88e833a22aac",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02b96a4-cdee-42cd-97ac-fb16f818a61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9e325e-beed-4db9-bcf9-cd68de5dfd3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c18f4d-cfd0-46de-ae6e-e0b67253ec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1970cf87-dd15-48a6-9ec5-c1a9bb51d483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfbe601-6f32-4da3-845c-d40e2afc8850",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f11fbe-ae9d-4e7b-a8bc-d2c7b16456ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5b1fe2-94a0-479d-852f-2f983be098b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66d3a99-b3cd-4bfd-80cb-377065a40b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7166fd67-228c-4212-ad8f-c92dd6e06c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45683c07-d452-4f48-a2cd-507c1b239db6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc77f63-4ae6-4f95-92ec-b1f45fac0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cbfa22-46b5-49cd-8b9c-71063542062c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34556b39-f9dd-4128-97d0-93886d99b46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5deab53-1a11-4ab1-8cc6-a12d728312ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc9895d-cffb-40ae-b459-e8f83d74568d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2d38e2-da57-4077-9c04-84b45d33719b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfbe02a-cc8e-4a48-9f0d-84129e81b534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0276c6-dcb7-40e0-b246-e7c832b5e073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cee2521-9a58-4f53-a5fc-f6cb90b0e163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62806fdf-13d7-4edf-83ef-ddaf53fa8980",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fa6ab3-5118-4245-8475-bcab52285c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c234bc-904b-4b80-800a-412f3b1ce43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0c0a4e-2b12-4825-aff7-f24fdded10cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76d5e051-ab33-48b8-93fe-11e39d219d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f3663e-6fc2-4aee-bda1-f9d2e6644a0d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071aee0f-5840-4aa1-a703-051351fa0817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c653ddfd-7ec8-46a9-a310-3512b3b4d6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e022cdbd-1e8c-4648-b611-75a82e6f9e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecbc8736-3b48-4e61-a016-b3e40b960ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626af425-90e4-4a38-9db8-37f8788ab33f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb89c11-b33b-44da-bc0e-0e5160c208c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5757b90b-d527-4ea2-98a4-66207a8e7ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bb7723-599c-4ea6-a1c3-9c8d0191b03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "950f6f5d-ee93-4677-abab-9e8f865b050b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29cbc40-e641-4b45-b66e-3353b2a214a1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a89be6-c938-4063-888c-6a3b65035fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d92abf-0b6f-493d-bc9b-3d9ced084253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b808da4-5492-4daa-99cb-ac6d4e36642f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca34c4da-8745-4b84-80fe-e68fc641d80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcb6e9d-df0e-4822-b081-ebaea53fd3b0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55e76e2-2adb-484c-b133-30d7f35e1c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7166c3b-93bd-4d6f-bcc1-4c75517b18c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403d2057-0531-4150-9d86-6d6141d2640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4ad1e9a-0901-4dee-8145-c4ccfde06469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb82fb5-fdea-49be-af5b-f8505cae3e17",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0bd3d7-ab96-4d06-9f31-f63024bef0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a143da4-abea-447a-9d79-28d1d9a4f693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d93d0b-523d-4bdc-b7ba-9ca03d1bb30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59a76d70-033a-4521-8f16-30b4d08ee851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5ac02d-9523-4a78-8113-008d7788aa61",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fbdb8a-6c6d-4fd8-ae7a-e6558b76ae2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6581f4e-f95a-4696-8deb-aebd75c82b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aff981-3a43-4468-9f34-90a5b77b993c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03d8b999-2601-4638-b01a-72fde6dd233f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87847cb3-c5d8-446a-95df-3fd04e65da95",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d8687d-a2e4-467f-bef1-6ad59a0d953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10a41d9-8577-4696-9923-ae82589ef22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c04b559-c717-4e8a-ab3e-87483179d3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94d07a03-d1fa-427a-be8b-4ce95782b76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d77552-1c1f-4192-9951-d278a47deb61",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5776633-9483-4d5f-82d7-670d320aa858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6586e6-2f56-4239-880a-cc028c09b603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afcf5b3-19cc-40bf-ae2e-33dc75f0e181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a31ae98-2535-4784-adfb-472691cd5116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6edccf-b007-4c74-8536-a212db2351b5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d982560-86b3-44b9-8c98-1d70a7ed38d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8487be32-0cb2-4ca9-bcd9-f7ab735e1fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8b9d3b-f697-4d6b-a6f8-21e3ceaeb138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59088eeb-6665-4282-8198-53a8906487ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2903132-9c60-41f1-8ba2-7ad8f7057d3b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9106edc1-86ef-43c0-aa88-08cc805219ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae87eae-daa0-4f84-bec4-17103071a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da63fa2-8e9b-47a8-9bc2-55e299fe7292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04dfadb-847d-468f-be06-ee7ac4759b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7bbc43-282a-49ab-aaab-7a92d2e4d3a6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff821a47-80b4-473c-950d-34e2492e72f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729ba75c-6e3f-43fa-b92d-4d0313c512c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483a7c61-58c2-49a4-bcbd-1b85353efa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be58e174-8cf1-4d9d-ad37-dd79207452a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f40d10-9f90-4c26-b2d4-d533e6cff532",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c5ad85-a9b0-424d-9aca-95972a63e8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535aed34-55da-4868-afda-7bfed26318a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5b44e3-cd2e-4021-8ce7-e08e22a1c413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb3cc29-4c3f-4f16-8b9c-cb3023d043b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84801a42-e24b-46a3-b4f4-eac2c2fccd20",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6cbad2-9e6f-4061-98b9-f54b33b5bc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f111eb3-ca2a-4876-8c54-68bf497a1694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed389d24-77d6-46b3-b6ef-660c64913c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa11ac51-fbf1-4225-9784-1d3b16fa147b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6168500c-2ca1-4629-b7ed-63d7e25d46e2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d0a44d-f9b2-4601-98ae-d7ee812586df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d016195f-3ca3-4c10-b5c8-cd0d6594b209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c9f803-485d-4c3c-867b-0103208b6233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b0b538-ae5c-41a7-9645-ed21e12c9409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f8fca0-2172-4cdd-b9f6-dd2542f80163",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171c0bdc-6b63-4ccf-8305-b4db74cb03d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2353900b-fbf4-4331-9438-1454c01ef747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0653e6e-a94f-4ba6-a29f-004d9d157372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18205e87-cb47-402d-bff9-0675045a5951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293b6b52-8bf4-4e07-a96f-d242d83bb689",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d75342-c0f6-4ddc-bbb5-70aa12032844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6394ec-9d68-4d83-908a-239ee4027498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45494875-7045-48e4-8d24-53c8f3499108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eec4ef4-13b7-4914-905e-c90a40a7ef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bf4b4a-bd81-4228-8c70-11f9af680c60",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94a728a-adf8-4842-99ab-c4bc272ac54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49592be4-aec3-470a-830f-f63868774e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3e40da-407a-4a61-a88a-c5c54f7ad6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27615cf-b9dd-44e6-b10e-3359fa98d41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d848fb06-b535-400a-974e-00e89db7e728",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea484c0-8a39-4113-acc4-2bd653a89cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fc3a5f-fce4-4744-98dc-52aca029d75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41da2fc-e0bc-4240-ae9b-e57f991b1f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e3c156-9e64-4929-adfe-298b25fe766b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7581734b-b10a-4ebc-931a-cf6e19d351bf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e243b1ac-496e-4e19-b1d9-ce5cd9fc86a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d1d853-de1b-42b6-b789-419a933a4b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef39261-73b1-4d1f-b445-86d1b8949766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "47bebf9e-d480-4de7-9004-2ddf00aa6d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3b0a50-aaad-403d-8a97-42644bde5c4e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a6320d-c6fb-401d-9680-390ba461eea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256952b0-fa6c-45e1-aaf4-d074eca8459f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea00d30-287c-47d5-97f7-6e35c970b319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28252163-2f85-4653-ad04-70f077c47f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059ef9a1-f720-4907-a6a3-30b371d0586a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3369e3-bfa3-4481-8b77-f06874631ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f9cb46-633b-49bd-8ab2-4ebb65398855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d060979-bef8-4a83-89cb-42ad0ddccc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc15037-e00c-4c7d-8d3a-36215403b431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c929497-2a60-4284-8875-b56515b20543",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd4c7d5-bb42-4d95-9fe5-9560eb09e4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03c8d19-2b58-4a5c-84e1-ea516a1de7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596c77ab-7abb-4027-bb22-58e713d52b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e964459-46a5-44b7-9f71-dc22092ed4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7080a8-7750-4ce1-a9ff-9e331c74c10f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a33011-c6c4-4410-8df8-af1a70741684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f05d2a-acc2-4241-a8e9-91affa05b95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a6ce1b-81af-4889-b6f4-3ae779fb8abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a5a026-de52-4599-8a71-97914c5298c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0f0bb6-0b6c-4b90-9524-109abf9cc291",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394bd3cd-c413-48f8-a42e-6a8bac30726f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c2be27-b8c5-43a3-93a4-1aed0e49340e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1efca9-38d8-4d9d-9863-4b5f5aa8357e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ba059f-a761-4c69-9b85-cc88bba0c440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8b4441-24a3-46d7-9abe-654aef2706e5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12929890-d3c6-400d-a7b7-515dd5d14219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317db045-1a99-4728-bfa9-b23666578549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c333cc97-327b-4b81-9e98-9f2fa025dc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0d89f0-a854-479d-a1d0-249c6b95e446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61eb9ba-9d22-4ee3-a73e-485d21b5ba43",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326ef4b8-665f-4f4d-aa33-0525eecb0828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2cfab1-7923-4021-a76d-0c524a5cf6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ae738d-50ee-4b53-a1a1-1775b3a2d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a81841-ab45-424a-9e55-3f7b091800af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040985d7-d73f-4fd7-bac8-a09e95f04449",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15e945a-4fb3-4455-a40e-d70519ed341f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c1145bc-1c30-4ef3-884c-de9e0438543e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22285f84-8869-4ec9-bc4b-400c13fb151f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "68ec62df-dd02-4e31-b930-35d2f6b7705c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5d3c1e-c1ed-4cbc-8fc8-9b8164845075",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad6a23a-4912-494b-9c1e-bcba6826d9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebc7c8e9-2f0c-4ce0-9773-a78e605cd08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521a8b76-4513-43a9-ac34-8809429f6f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "998b7c3c-09f9-4e59-8a08-930717607f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b267a2-8340-4428-810a-acb5d3f34bc8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05599de-18f9-4f04-addd-a8c97efd7db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a345dc3-78c0-45ce-9a5c-5bf4f1bcc3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60ac5a7-0b51-4e98-b167-50f8b4de705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda2f5f4-6873-46cf-b37b-32d9014c1766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb25f254-da21-4488-8c47-8f61bfc2bfe0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5642bd7-1e1d-4baf-8831-6d115cad0022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18707217-36ee-4951-a457-a6b64cf980a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d20937-581b-4ff6-be60-eee9dcaab3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba1d043-dbd7-47b6-aa00-6ca8a5c07ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a23fd0-d732-4387-b9f8-8f6d1d3e9286",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af63f19-9431-4786-8abe-38fc4fd16660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba07f1db-069f-4909-aca2-f9e86c74c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eff5bc5-e0ea-400b-a404-25e50b6b7c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b80bd7ea-045e-42cf-97a3-0053e4170b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d3e969-7a86-4768-a629-9759f874f982",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e3f4f0-fda1-4b76-9a2a-d8a28eabbc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583c0d76-b58d-4596-9d72-bc544f68d6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881f05af-07ae-4c5b-8081-7e639e633211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8257eef-6cf6-4b7b-8bdf-fac6f485ea46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cacdff-0adc-4b22-9cab-9a4c8b913598",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ecbfdd-9120-46fc-acf1-6878a7e35035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5716309-e7b1-4a44-b280-035ccc03d955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9dc71b2-3f42-418e-8e2b-3a21035ceae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d1dc63-0d8a-4129-af19-28b19d80d129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebea7ed-9696-4ffa-baff-8163d00ec58d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b657d0a6-8c96-47f1-9ee9-e3e79d8b2901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5042126b-6c4a-4dd6-aabd-cb834e2d7e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73e25d0-1ca0-43d2-80ef-53ca346b17eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee1052c-02fc-4e07-8e91-d665c99f2715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29a52da-a264-4b00-8ba5-3f89133dfc29",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb96bdb-2266-45b6-aab1-8ba79be0cc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7001334e-57d2-4916-a238-024e943a9b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0815dd-b0c8-4046-aef0-c99337b59c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b7ea58-cc1c-488f-af7c-f8fa50235b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e363438-df27-4961-aefd-1daf8a4becd4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1259044-9619-40d9-852a-1f852a7b26a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde270f3-2f3e-4a79-8518-33cd0d053760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5e36f7-2816-41b6-8961-c1d39388a573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad51afb7-7503-4b60-ab89-9d264b7e7939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952d3e30-0e72-4b0c-ace0-e632dc8c1b2d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef41516-3055-46a4-a3ce-e1219e0ddf94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9ef91a-c483-49e6-b54a-64d1bd88217f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f07d5b1-50e2-40f3-a128-ef666272300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "119c742b-fe64-463d-8cd0-aa5aae8c245b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d30e52-d151-4b3b-bab3-0f8e50bf8d55",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c24250b-48ad-488f-99d4-8c41be3b4758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3553c9-f719-42a7-90db-02c431eebc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52df58f9-15fa-4b8e-b713-8ee1bf3745fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ef3e20-f8eb-4f6b-9cd2-5c46af7d4cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51151c9c-e042-470a-9edb-9436a587099a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5f0f7b-3be8-4af5-9f7d-edecd4199de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74aea6a-b8f5-4467-886f-995d043f4782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d8d642-7312-4c0e-b7ef-367c13c7ebaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aac28e7-5e56-403f-b635-2043da87e742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131125fd-2df7-4671-a783-a3a6ea90c09c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e87416-35b0-4fd7-8451-7120241d8df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba7f50a-24bb-4027-a69f-e18e57591064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e6efb4-6b67-4b44-8550-917afb3e90bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bcb2f03-0d28-43c1-b9b4-050c3ef62a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8cabb8-78bc-4d9c-830a-1057ed50d4a2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a19964c-7524-4a2a-a6bb-8c278bca7bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169fe03a-abb5-4d9c-b969-67b9ecd318ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caf11d5-b8dc-4585-a614-90c40b135d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a835aee-69ce-421f-88ee-d611346ab044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d4a52b-58e5-4690-95cc-c9d7637e4b28",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bfad14-468f-4a64-8d32-e6e901140276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab9e334-8dae-4d87-9aa8-7386968232ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a38134-caee-4abe-ae57-defa4022f221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c472584c-b5c2-4aec-aa9d-caa055beda92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07a52a2-7610-45e2-b614-a3d7aa0d9fb5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7ffab2-63ca-4008-a35a-52f7a38d6a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a3984c-4b10-432b-a257-80bf45c9664d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5343b27-cc39-457d-9d1c-61d4063070a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8d3bc5-527b-4071-b468-367d03002c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dfcdd4-ca23-495d-8cd5-13e14864d68a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a35febf-72ea-4617-b262-1c492dd65283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5d7a858-0d0e-4df5-a1d0-ec36d26b1093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2676a77-e755-4927-8f4c-6ac5050825c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf20a73-cb45-4a76-8ab5-c2f480e46cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6410b7e2-db78-4dee-a81c-81b9eb8cd14b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ac66d-b6a4-400f-85b5-5ff84950f777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efeb01fc-1b2b-431a-9624-bbc44846c2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3ae7b8-4525-4cd6-95bd-976864acf57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc0a5d5-fd21-499e-a60e-869eaf3bdec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42de34f-45ad-4844-a0c3-f1e98e2c4e11",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c984959-c91b-4c2f-a225-69d1387391f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc313137-647e-4d50-b0e3-339d733e6f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac5d3c9-d101-4208-bd27-327d60a7b41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04dbe3d4-d30b-4d24-8dd3-1a170c751067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd43eeee-d178-4167-af6c-44d6c4d9d4fb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0cb301-2992-40e7-9d23-2c6928ab00e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a1aafb-bce8-4f04-a40b-4a951ba886d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03e77ce-6ea8-41b4-abd2-c10b42872242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43fbb74c-c6d9-4794-bf05-923de6af0ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f230692-5837-4f36-96a4-afe0dd3ff819",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a9f83a-9582-422b-afaa-e7a85d953a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b13e9cf-d4d9-4879-a39f-a045df9f4357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93d09b4-ebf3-480f-b77b-6d5fd68bb713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c71d75-8b6b-4988-8b51-ea7e0f845459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd563a5b-fb35-4105-9ca0-1d357abcbc15",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab782a3d-a6ca-40ed-9529-47067704e979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d5e329-d2c9-49b3-aa52-d88f38a2f132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf02c217-bb6d-4a84-b62b-da424fe4eba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee6ad627-faec-4377-aef7-0fd78b6e6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66724a7c-0c33-44fd-a558-3dd05c351eaf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d46566-3179-444a-8465-a71d6081532d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa61eb4-aa09-42ae-82a0-1d83a1b80b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eb3d62-30f3-4b7b-ad48-acdf77ad5b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9216707d-cd65-4f15-bdc3-6da36feb2a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45a150d-bcb9-44fa-a699-7b7d64e9e349",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00ae3ba-a62b-4dcf-853c-8eaaf59ea5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05780ea-df19-4a8a-8ed8-c5a7d4806192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c157667-d7ab-449c-8aff-4c358045d6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49dbed2f-0268-4a68-b6b5-a5e638dc88b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22864836-93f1-4fd7-a1ea-a08e64e1ce80",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b863ceb4-e56d-45e6-a750-af166a9ae1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57165d8c-7a98-4fda-95b4-8f9f0b245ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d9aaf1-4725-4d28-a0ee-9df137918447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "101b61db-4a50-4ba8-96b7-5b11ca421c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6553c4fe-5ced-46d8-8741-509159a2ef2b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dd49c8-f1f1-47ed-ad73-8b12b47ddc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea67313-46f6-4814-aa20-d51e7e20ffe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46b1f7a-40b0-4233-9629-6cb06ff25bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6406e4cc-256b-4246-bd4b-8158f80a4ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4134bea2-b524-486c-a029-76076429fccc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f2d32f-5194-4800-a051-b0d4ed92344b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf59ac2-389c-4444-887d-cc7be4cb492b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbb6596-31cb-42fe-a38e-6f467a9e4e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "902ef8c3-112f-4ef6-87c2-925790897bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f14d9c-54dd-4c34-b37b-23d075a40dc0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64997f4c-806a-4307-976e-5e1e045dff78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f766a3c-f869-4ceb-8ced-d678747203ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc05db3-ce33-475e-b9aa-0e69b59a7edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "af0cfba1-40bb-41c2-b0a3-c444876bea37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ffd227-d84c-4768-8e13-62b587e44c07",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32a06b-040a-4d76-a7b0-6a8e9a4aedda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251a077d-dbbe-4811-b24b-9d5ceb951b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ee966c-6185-4cfb-bb56-7c49a30f45f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca01cdb-914b-456c-866a-74562160f47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d051780c-186f-4755-afea-1bc86813e796",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8491c36d-6ea1-4ce1-8bc9-867f989a2a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deab9a23-3d14-458c-b4b4-39e6d3567eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4922c886-4af9-48ba-80c2-e8babcd5d75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4164f87f-c897-4561-8ada-fcbb411f194f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7aae966-68e5-48ef-ace8-620c654f747c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196cedf4-183c-43ed-a256-bbcb401f19cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c784aef-2905-4645-b58e-9ceea582ff35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4e5a3a-0c2a-40df-a7c8-d457f10709b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c380af52-a100-4671-b4a9-c749d9a412b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f846bf30-0a7c-4f52-9a78-a9c0a2d6602f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857814ae-acba-4569-8646-b64ffc179daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90eb03a-c85e-4604-a602-3cb81aded173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcb7fc5-aed2-4e32-9940-1bb0d119f200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67b94b95-ac08-4aab-80d0-0b1c2565356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83583ae2-7767-4e6e-8283-1b1c8259e406",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f8b760-6fcb-4f1d-a3d9-1f5131c0df2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c57ecd-ad8b-484c-97c4-b544ee18c97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d698e93-594a-40b4-95f6-031f2edae251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a40192-3ba3-48ea-84fc-bf190414a038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166afe33-f881-45e9-855c-8387701623cd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9dc3c2-8288-4141-9cf9-6a4ff53136fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a3db91-af0f-4fb4-a108-b4e1ef999341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4603b0-f399-4111-b3d3-e50da6e96129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7201ebf8-1e06-491e-851d-b8e7e27e79dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddc3e26-3ed1-4c2c-83ad-ef32235183a8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdd372e-1f0a-4f3f-a5a4-b3d5a1cafafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a575a04a-d4d5-4abf-a2ae-56be17b7ab67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eefcb3-8862-4a57-9083-cd8cf7e4d088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ced9fe9-d3d3-4602-a374-2ac297ab3754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbb34c7-6ace-4f3f-b671-e6adc9b4846f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f4a55d-de13-4c4e-8a2d-285eb4614683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d15cad-d9b0-484c-81c4-5964c0a77cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4219b2c-de2e-43a4-943c-f1a0d93fa0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ee601e-3d80-442c-9837-9cf6181f5f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3843c561-287f-4c0f-8191-e0e65b7a88b6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d671a81-e2d8-4de4-a520-20168ae054d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7f4501-f8a0-4836-b868-985d367a2430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3d4d2a-4504-44f8-a136-d0a08df65c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "502600d2-1615-4519-a70a-4b3363258491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752debe8-f35f-4ce4-9e44-aaff495b790a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433e5053-08cc-4510-96b4-79b79d0a00e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "662cc90d-8551-412c-82e7-3d447b427090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed208c3c-6210-4ac2-a81b-9fe354e7ee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64b4e670-8e29-4868-9006-fcb055515e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01383066-130f-413c-83bc-80fd6de5853e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ed76e0-6c06-4d3e-b06d-4f316506e5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc060723-1f1c-4fa8-83eb-0c1225b965bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f465c8c-04a6-4b45-a07c-58941177e4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "081fa2ba-b783-477c-adfb-ba408dccb3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a00176-23f6-4301-a486-25e1c9af8efd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb78d61-c4d2-49a0-9fff-dad95bd37274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305d4c88-bed4-4203-b44b-0ee8f2c28e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44769f20-3f10-49cd-85a5-1f9011bb764a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e385dec-c859-4e80-bd9a-d1a8ad07475f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4044c400-a376-43d0-b978-084376b9d3ec",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e4f96d-3454-4db4-ae17-9838a203f54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72609bad-96c0-4058-96e2-dcda5479a475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e02ddc1-527a-411f-8afd-3760cd5c7272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aae2a3a-774a-424d-ab7b-e29d5eb086a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf510cfe-1b1e-4939-b34a-6fb35e7de06a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18899f87-83c9-4034-b105-4cdea795e34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46a1223-371e-4f99-9c2d-178f09cd1cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbde482-a740-4ff0-9d64-986fe39641d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be83a72b-753c-473d-b2ba-a1173d759031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c4f4d1-2f1a-4412-b303-e4815c3a8c11",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888d3fff-ad1c-40b0-86d6-56e3e07c7328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65209cd9-1842-48a4-9a03-aa5bae9ad995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07f7326-979c-4882-ada6-b6595b7a0617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a090d32f-eeab-4545-884e-1fe770f0099a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7638d344-677d-4ac1-b690-1d4a94525cc5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545df9aa-9d97-4ea4-903e-dd476612a8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02868ecf-6dfb-4f2b-9604-575384a8dc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17406da4-b8d6-4a44-92c4-1584ed459e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23a8fbca-97bb-42db-890b-cd4fdd5a21d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228ce2f0-65a8-48f2-a8ba-96a0f86afe65",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ef6986-e7da-4963-8146-188c3bc12d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "194354fd-afe6-47c7-bab4-73a8e1a7971c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d0c4f-79f6-424c-a7d2-ca1d4ab41e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63523f79-023c-4807-b662-aadb848715ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3c247c-fe55-47dd-8ebe-58de5034b45a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4416a1a1-137e-43d1-ac8b-bd53b427e0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ad6aad-0b49-4a81-a051-eb29f13813e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b52915b-0a1d-4069-b269-d88ea40c1c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f9dc025-b9b0-4eaa-93cc-bf0528a08d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ded94c-af23-44c4-9047-351162517fcf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f10bfb-329f-4533-8dba-1cb61b3f9b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe918980-8af2-4eca-af52-9944eb4300ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9f18ac-776a-4b09-9dd7-60ed806ceac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3c22a8-3e37-4862-ac9b-074101db1124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee58d8b-7869-43de-adc8-95d891368f08",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2800a978-ff0e-460d-a0ef-f569956de5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8447026-0cb1-40ab-9608-026ce7f05ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bb51f0-213e-4342-9f9c-f40c7a416292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bc3ea0-d4d6-41a5-a874-e0b723ad531d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6873e8b-1642-4153-a467-071e6c9afb8f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7ed6a8-4a97-4857-a2fa-61195ffa3f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5815398-c800-484e-b5a6-fa8d07e3a1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15534238-d643-453d-8551-33900947f31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fff2fd0-6fb3-44ce-bcf9-7b76227cbf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacba6e7-943d-461f-8810-e69c61541d76",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf99741-e7c3-433e-9a2d-3ab191ac4d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305a67fe-c529-4ee9-bb19-8228d9ae83c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f441ea-daaa-4048-98d1-8498e36837d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6935b898-d641-4ee4-a230-8a887e78d091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac09622-6b47-4239-892b-e7f47a7e13c8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cfeb35-2ba3-47ad-9a83-4f56be972f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce56bda-788f-44bd-96d5-bcd3d235c517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf588b-7132-4fff-bb28-2de84667e5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2623a37-ed04-489e-b886-c1d55da6891e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3987c3-41e2-4a31-be0b-043dbf71f365",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb4f88b-a16b-47fe-9fe5-932318b27813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6132f19-8d0e-4777-a93c-d43e3283792b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c063e42-aaa1-4e1a-b806-66cdede039b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8514f7a-3ad5-468a-a58b-a2c8304ffb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13778703-890f-4a04-bdd4-77c50ceab4ed",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927fc114-2bce-43f5-b5fa-a78de4ce6e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7335825-12e4-4457-8873-c8f4562068bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21ac2f9-b66a-4530-8214-30353d01dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3a4d97-a13a-4a3a-a75c-08036a37a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725ef2e4-bad6-48f6-a34a-9705a91e3b29",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3130fdb-98ef-4a1a-9a0d-b50422d50f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd90207b-1dfc-4732-8836-4a7eb8eaa3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df14265-ab72-4943-b4fb-365dab6ba1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00be2a75-b128-42c2-ae8e-bfcbfcd3b67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024bc95c-e2ad-47b7-9e37-a275530d6292",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d046f4d-8cb7-4012-8362-73773ee04232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c15df7-d36c-4f99-8b57-44bf569294ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1150caed-84ff-4aa7-855d-b44da8694279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "53ace5f6-8930-45ef-b680-827c3be2b7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2ee7d6-41cd-46ca-bd5d-e7d51d83cc11",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1cc844-daee-4d36-908b-54d0760defb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8233529-811d-496a-a811-19c9bbedd7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815efc73-158f-40cc-902b-b88fa4555445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6382ef4-65a7-4060-9174-4f439e5aaa29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b31d096-4edc-4d61-b454-ff8f79d27f6f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127d5251-fa20-4588-b2eb-b25a1bdd0a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6165a7b4-c93a-4c21-8659-b3e9691170d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40befb2-196a-4258-8508-9ec6aaf5fc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4db2abbb-63ad-4811-86da-9936788ae536"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ce73e98-1d62-4a39-9b8a-ff165b646328",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3714ce23-03da-49b4-b70f-30e4f1134cfe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605fb067-402b-4c77-a095-5449390247fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37f06e63-12b8-4f22-b787-834be935bb6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f89e153-8cfe-4acf-8064-9d05036d5fbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14a16a28-b9c5-4106-b5a4-e9688d2375ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22d05d50-c3a8-4eb6-b900-f63e3a5e2c47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8c8836c-b99d-439d-909f-ea9f4891e5c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0555e0c0-9069-4bb3-ab2f-bb40fb15afb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b977832-029b-4c33-a7bf-69dbbaf5ad28"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eae45db1-5dcf-42b8-b23e-0a1afe0992bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06505212-5a75-4bc9-b07a-ea2cf422c743"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e4ee09d-ed2c-4375-b5ec-28480a32bc8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4265c329-d4aa-48a8-9fe4-c7cc66d04ca3"
                }
              }
            ]
          },
          {
            "id": "a3b3a074-fb67-4fa6-9045-1623bcdda42b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f17c2fca-7b65-4768-ae37-4b3fa31e686f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fa9a11f3-8923-4128-a0d6-a99b11b6cd76",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a440fbf-7fa7-4d37-a87b-529385ec23b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "75fe6cd5-2040-487d-9b0d-6977b301b5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba7ef30-8362-44aa-bf72-b05b2ac1448f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a3530f-3c2e-4dcd-9507-b96fc969808d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb280991-7dd8-4810-94b1-a19576b49c4d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffa2e9cf-fff5-4f14-b635-9a53e5894ce7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8430a5a5-f90e-47eb-b6f9-f798f5ea0a3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1432036a-8f33-4fae-8357-d6c7547a02c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9224b45f-8e59-4898-ba76-d767e06c4ec8"
                    }
                  }
                ]
              },
              {
                "id": "7f08b01b-5a61-49ce-b076-84d7c3467d06",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edd01a5c-ca6f-4ae3-8b9c-feb1f89f6063",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15782e30-6573-44dd-83e4-a7cd11bcc03c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffb07038-6c7e-46a1-8f54-9e0d1a2d1413",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5293dcae-7da1-4dad-8493-8c661fd25a9b"
                    }
                  }
                ]
              },
              {
                "id": "13e8c5ed-4f8c-44de-a9f2-fc3580a82f1c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f8748dc-23c0-4e13-8b48-30407e1a297d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94db4a54-2864-41a1-a559-ecf7b71e81eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae72d690-2082-485c-844e-3a344a5eb744",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6fc34189-e467-49f6-9bfa-e7919b196109"
                    }
                  }
                ]
              },
              {
                "id": "af39ecbf-dd19-4efe-9a0b-53af52ae059f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "492732e3-a7ee-4d47-88fb-b7fbd28b4d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de1a2d98-89cc-4638-851d-fab6ad0b3e2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7ac810f-1db8-4386-a00d-501b24e70ffb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "142dcbec-1fc5-4566-8e11-5ef8e5edba92"
                    }
                  }
                ]
              },
              {
                "id": "1727ea59-2262-4549-b689-c53d229e9089",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76c94bdf-9794-4951-a8d4-5d916fa2f3e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c5732d5-d787-4903-ad5a-c108b5272c2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2aa04f25-c74d-41a0-b227-0be4d4b54a3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5bac5d57-e63e-4aca-bfae-087aeb9f7961"
                    }
                  }
                ]
              },
              {
                "id": "f9059698-df87-437c-846a-737d9ebbbf62",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e6ad572-59fd-4a7c-82c1-8d3da6d2ed44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cd05322-3e05-4677-b2c1-88794ccbc541"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f18edba-bd11-46ed-9856-2e14d45a7bf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e27ad223-ad8b-4d54-a920-76330c9a4f12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f371d2f-7f1b-43e4-8583-10c5942d0862",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "418e6d26-447c-4ec6-b3ae-19b032f763f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e970c9da-772c-4f29-baae-8b8f588956a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea7fe38a-60a5-46c1-b215-bef79e3d5ca0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b602865e-29d1-4ee9-bd7e-26c711782973",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "91508319-9ba5-47f7-af4a-3fd1979f1180"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55d145ab-c770-48cd-9ee5-93cdd3b4031c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bbec0ee3-eb19-44a3-92e5-65dca18be8d9"
            }
          }
        ]
      },
      {
        "id": "a8a259ee-1a9d-4147-b0fe-9463eaf66656",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7fdf214a-a6d1-4594-b86e-ec2c60f33302",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dee313f6-600c-466c-9ca0-59c5535bf45b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "18fe08b0-20f4-4fb4-97f1-e54f8c2c6780",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3714fbee-63bf-42e1-b856-1dfd1a4851db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e21db0-1faf-48d2-8edd-351edd9405f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23f4d17-3a2b-4497-95ca-b526bd7442da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "88112e98-affe-4591-8f2b-bdd306aad9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b5ce36-5f44-4cf1-b0ce-858428c00486",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba8498e-61e6-4598-9175-846643eb9f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24588e3-edb6-4df7-8769-d2bb39915200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c06d4d-d3b8-4db5-9738-e83adc9d7b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35474d4f-54ff-4baa-8e06-d5171392728e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea5e185-44f5-430a-b560-896a98c86212",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b447b36a-4172-4225-ab30-533efb4f09be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42f28c3-d856-4e39-bfcb-63a87b22e4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87af63bb-afd2-44fa-b6b2-51e9e0bf7a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "193ebd74-bf53-4f56-b185-fe34ae678bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a201186-701b-413d-b343-f1977341e4b3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce9aec4-e4e4-4ae8-bb33-d7c063f2fa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39178779-ddb1-4a81-b6e9-3324d4cdf127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6731f9b6-eff6-49c1-af0f-37e60cf84412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f151495-4b65-45a7-a87c-9f3ae2ce9935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45060789-3107-4782-a766-0ca05b228e31",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8950429f-5b87-4940-af2d-3da634702bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f902028-f8d6-4a5b-8ffc-d9f15f857b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a56fc25-59ff-42fd-b870-39f916145f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "846fd6bf-4c46-41ab-9ba6-74f1a80f01d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c27f86-add2-49ff-8ceb-ee42f91ab44d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc72773-34a5-424c-9b0e-743ae251e222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24c0354-a11a-49cb-858a-a62d473e3c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf86d0f2-61e9-4174-ab33-3b634640be8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "853ad3a6-abc7-47df-8831-f6acc49e5ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063d3ef0-61fb-438f-b2a3-88f8058664ba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0844070-bd34-411b-a29c-42040a496a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397a702c-0c1b-4d00-8f5b-5efb72d23da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ae51f1-22bc-4b6c-891a-02ffe2f1d385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "816e0b0a-db6c-4ba5-94e4-6446674c440e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161f78e6-d634-4eea-8c0b-bd2b0597e9f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e79ac9-773b-4567-975f-ebb1a9c151d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae42ffdb-296c-4703-9d3c-f049236d4a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5286d4be-bf54-4da6-ad61-0b021d23e3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a98167-0c09-48ac-a9c4-de61b97fc7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689879fc-72a1-436e-8977-7d12b79c4c13",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed4a18b-9916-4878-8040-ac59bff5bfc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed14739b-78c2-4437-b9f4-c37c2ea190d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46e7771-61cd-496f-ad8d-c1e822d28e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c25f003-9f80-47e7-bf26-81ac1d464e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2b224d-6a05-4214-a21d-ab339c708f15",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ca9c02-be2f-4bcd-9272-0d9ef82b96b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8bb091-0d0e-4edd-891f-fedf5c2c60a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04cde03-94ba-4d7a-bd04-4e30a925a7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f02737f-4186-4b89-82db-8d7c48e86cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204a5eea-fd22-46c8-8de1-61bb4506a9be",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d2aa43-fcf9-465b-a065-b95064d0afbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9b3b32-367e-4cb3-a413-a8be491c99d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef495ec-7f06-4532-ae53-5eec73579951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "747b1a6e-4ef3-4c26-a6b3-fd42223071d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d66c6ce-2d77-430f-861b-28125305bc41",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa433572-03e3-42d2-99a6-33bd48a3a139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a7aafd0-9602-4105-aaec-9cea4efea563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd8711-a2c9-416c-bc0d-cbae35edbfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc66403f-4e7d-4b70-9048-8c8564c11b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7054d8-74f3-4690-a313-8caca6e4fc0d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6759a4a4-95d8-4d38-8b65-75b67ec596e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21481a91-1f48-4ae9-8532-6f4f484ad2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d1905e-98da-406a-8c4b-d855067a7fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f20f6ce-16eb-4341-9463-7fd23905f678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c07cf3-0dfb-483c-9e9d-fbf09604a00c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e9a280-fc68-40e2-b7d6-550ced6d11db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1c6579-06e0-4724-867a-5331225a4d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e6396b-aa4c-45b8-b012-34a3025d4405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f19e049e-b096-4951-8719-a0a77b5bee64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8246742e-16cd-4514-bbd5-4cb7570081b9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947905a2-f5e0-4051-96f8-3c6e6031dd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b70eae-6d33-4353-871c-66b5c98c980e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffeb581-6b2e-494d-ad06-649754b1e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "092cec0e-ac2c-4e70-a313-77c95dc7f951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a119039-a9a2-47da-a239-d3b6ba009d15",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbdb4b0-ea59-44ba-b69f-23804ac36bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbd27c2-9cba-4dd4-8918-74efb7348d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b175aae-3c94-4a32-8e79-eea388935bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5673a458-1528-42f6-8b7f-689da3fa3112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60983882-6cdb-47d2-9446-1aaa12b66d0e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415f05c6-30c1-4784-9941-c500ca9fc457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137291ba-f529-4efe-867b-89481191b44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c40b0e-4eb5-4fa6-9e90-6352061c9256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eecd0cc-5bcd-480f-814d-bcd7a64c13b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db519df0-d1b8-4386-9a15-bd403cd95474",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b288c04-8806-45f6-82b8-05a4fd01ec9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465fc16b-30ea-4c66-a5f3-ea2b326cf109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af71c96a-7bf3-4b2c-9d69-ab17a125e7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3501d4fb-7f40-4438-883e-00368ecfd953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67e9454-fe4d-420a-986f-f292131ef05f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9cd3f2-cacb-4a5c-9ee3-5e162916e9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032d9431-714d-4aa0-9326-7686174c26a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85631f70-3821-477c-be48-5cbf8fd27dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0372318-2331-4866-8b68-f81d24d0cfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576f4c28-451f-47af-8dd8-8ff11e99653f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2818fc6-e9e3-4900-a6ea-7cf2ddce60da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96debf90-923a-4eaf-88ad-1bdc9065b516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295d49c0-e962-433b-b311-d63c7e2e7c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f752608-8a00-4afb-8c3d-4b8d8b425a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7f0a51-c5d0-4f7f-9328-751692a40ec3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d70c9d-d6f1-451c-91d7-34488a51b70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455f04d2-ff16-41ca-8070-07a7e9fc4ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecf5d59-5911-4a81-b7a1-cdcb60ea25ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8be97dc-f1ae-4cfa-a4f2-6eb2f85193cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfae6e21-6494-4875-88dd-56e8778712aa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96df09c8-7494-4afe-9f83-03f2225915b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c754021-912c-46d3-b584-37773f03f1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39012922-a20a-4038-83f2-5f636d33fbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f734aeb5-c470-49ec-a7a6-5148ddbf7dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19fbbf2-fa65-4769-9835-913afb4c4153",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa1b102-eaf4-4121-9707-8f043b0f3551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880c2122-d360-49ec-9fd1-83a9ed89656b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d306679-1191-4727-84b2-4dd2b7dc10a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c2a62b-bd21-4cb4-b91b-c04e773c088e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d428a8cf-01a9-4771-a47c-62feef406957",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616b0472-8efe-4d2e-a37b-dc0bb10ac5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9c0898-f8d7-473f-9828-f8f56f258475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0855ff-c8dd-436f-a640-239d29cd63a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef165c27-6440-4ddf-816b-49c797735477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5748d33-3349-4956-8b61-13368c34d388",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba2b654-be2e-40fa-9875-be0f439e61f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3907c8f7-4106-41bd-86e8-ae3c7dffe901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b32434-b3c8-4268-8678-8851f812213e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b72a8dd-de03-4910-8082-fdec066435ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4019cb-344d-438f-b73a-d758302b9e3c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e231ec7-bb15-42ae-8261-51da74ebefde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd31b4a-0fa0-4379-87f0-559c84b1a8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8422eb-0e48-4475-8118-3dd45982c970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f5802b-a88e-423e-8b9e-c17dd40e89fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0333ecd4-7dd1-49d2-8c21-44562f0d954d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa5c23d-1ddf-4f6f-a8b0-2924aa06af6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "872fa55b-714f-4af1-b875-5e8c86f6e441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde191de-bfd5-4c1b-94c2-6ee4f39e6bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8caed753-449d-40cb-b127-989e23e99b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10703f48-9e91-46be-9bad-1338c8f3fd39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29d9aeb-201b-4bdc-a3d3-7070027c2c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbe01e4-e79e-4127-a5df-fa1e77131a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073173f5-802f-4f87-a416-5c1b0dcaeda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d294230c-d589-4c17-b3d9-79172d7e880f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e61851-9391-4245-b279-8d0d5858f0ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3b5e63-9c8c-45a6-9276-8da92c7e0389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5382756-1dc6-4aa2-986e-1fba12acfc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6776f1-7a65-40d5-a9ef-2f6b2ff636e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b02bfbb9-1952-4294-a498-153721aef731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64b6908-db4e-4e8f-9db9-b796ecc51561",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e8a910-bf57-46d5-b442-791e5990190a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35475248-9452-4bcf-b945-c23d9027c3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc15e04-6e92-434b-852d-6b7ee6b7b2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42f64cab-8a02-4e0f-8285-8d069d3a849f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36d714b-84dd-48fc-a9fb-3e55269feb0d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0dbda09-3202-42db-a6b1-f8b16883c908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96eb745-4f90-465b-95f9-ee6576c0ea34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed7868c-6691-4e0f-927b-6057f286b396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a43385-6bf3-4e28-a8c0-6804a337f251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0d42d5-d374-4dc0-9aa8-dd09f2b60512",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5741a50e-f4aa-494d-9bf0-d70363550998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3292d46-c84e-469c-9c28-5e7770a4400c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e097a6d2-3835-4998-9f8c-bf9de15fd7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "580a25e7-592f-48fd-a2ab-1be1aa6abebb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "698480a8-97f4-47f4-a892-93ae8ab83a41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a32a6c98-7411-4153-b4b1-265500406946",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa472d3-003b-44e3-b48d-a56920d51295",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "56e0b735-a2b3-4e8b-be8d-cfa74fb66823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710c25fb-f3f8-4df5-ad59-349e6059014c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c95503d4-e48e-4208-a1aa-b294fc500ccb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5864556-ce06-4867-981a-a46757f0d53a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7f9e811-9ddb-4fb4-b3b9-393d71b90114"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96d607c2-2a62-4b15-bd6c-1ab65f17d1ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9a1cbc2-964c-4525-8daa-7a8bca83fdc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fef388e-b6c0-4a71-be35-a4a2167c4e5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d2242f70-7a45-4587-9332-935a24493d8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3331a8c2-b074-4d3f-8073-6ddccba759e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7e28fc7-42f4-4b3f-8c05-5ef2fb19d3f5"
            }
          }
        ]
      },
      {
        "id": "7753c9fe-d6a4-4f56-b26c-772a70f0f44b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d7667c39-7d04-4853-89ae-1abc2d3920d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7bbd233-21f2-499e-b345-1da8db976dca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d3c72ea1-a0a7-4d14-bcc0-0893d34e92f5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6922d39-9bae-4799-b6de-5f4f6d92201d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1696cf-587b-46ef-bfc8-2be0504a6834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376844aa-507a-4280-9044-f6107aed6fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8adca2a-2d88-43c2-bc5c-a010fe1e667c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf76872-eba9-4c29-8109-6f6e3da491f5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91d657b-6d4e-4356-badf-eeb5a0f9b29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b10d14c-17db-4aba-b3ec-cd3240342f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941e2b6d-218b-4afc-9dc8-e15bfcc1ea96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d36feafd-f93a-42fd-b2ac-fcfd3e2501e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1af740b-cc33-45af-b266-bb81c3954d94",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a3ce8a9-8d81-4279-b6cc-1e2667c0548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05581d33-4aae-4586-b4f0-4d6b74f49a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09823107-65f4-4222-92bc-a41f923fd548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f272e2-d87f-44ea-b1a0-9412df477b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb665ced-b0de-4d29-9387-05d5c9c88db7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd08cded-5a5e-441d-a46f-130b14624d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7bd9db-da6c-4bc9-8c38-38667019b7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be2318d-da1f-43f2-aeb2-f3bf096b0d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "947064f9-483a-45a6-b14a-b4d12ed7e2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2b92cb-276f-4d2b-8c6c-943d9efa37c3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd744cf-cca1-4bbc-b77d-24dbcde067fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e881e4a-4932-47d9-b632-6629251504a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca53d6b-5d10-41de-99b6-88ffc2095c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7cf511-8d63-4ef1-b18e-7efe927b7812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc7cccb-f814-4035-a028-d0f142c681cb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24e7ca9-133f-4728-88c6-b18064c0fc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0d3c44-615e-4557-8f8c-7ecdfa4a4b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1167a51b-088b-4136-b58d-5c701e5ba877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c844867b-5f05-4931-ad51-72429589d635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2907f514-1a53-4c64-8030-7eef9f5efc38",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171e30db-9af9-4e52-803b-c70a60adfb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5abbfa4b-34c8-496d-9b82-350d8520d7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3abe18-c6e2-41df-93f0-5a9e2735ca96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "642305cc-44c6-4163-9972-a6cf371b98b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad327ae-b80d-45fa-ad16-267a4e9f3f09",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16694b05-f632-4853-aad0-6ccda9f85cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6c1590-75a3-4c7a-85cc-fefa954c7dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee16664-b6c2-4f88-ace7-f84a63c772b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a1eaaf-9cb1-4da2-8dfa-b7e2ac49c9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173e880b-d977-44fb-b2db-a339792061e4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3922099-0d21-4ba8-8fd1-48aa791cc69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f24800-d985-4324-9195-4f22cb2d4dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b892e82c-5cc2-4a79-9606-6632f531aaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90232562-e474-4fe1-b692-30022a627b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01746035-460e-4ef8-89fa-4b61194597dc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92e546f-3021-4a6a-94fa-e0e07edb900f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84fd2e11-55f5-4bc6-ab14-f5b4d0369483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda62b10-36bf-485b-b571-0c772cd395f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb227fe-38be-4f58-b772-63bf92f5e63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7387e4-4e3e-4ac1-ad92-4cf52ebbf81e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3fb4cb-9ae8-4168-a8de-6bfd39eb66d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a9e5c2-6e42-4f98-8df4-386772773ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a32d02-c6ce-4d56-a6d8-8b1ac9679d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8d313ba8-6fa0-4f5d-96a4-d1fcca2ce4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1078fb9-f441-4a63-a98c-222ed229f671",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7807424-15f8-47ec-8b9b-44eec65bacbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b93643-edf8-4df2-9a88-105143da9f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8ddce1-cab8-47ea-8f2e-6b37a7b9b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cff7b8-c4e4-41f4-ad3a-a2161b7e66cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfaada2b-1f6a-411c-88a7-b7da6e3d9860",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b20ec0d-1cc8-4290-81e4-8f2febfdb8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cf8c7c-4b8d-4fa3-9f4c-78f2c82f0134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ee754f-b5e6-429e-80ff-5e5d7e77456e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d8c985-d736-4cdf-8786-1119da9b158d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f8fe01-fa23-46c1-8de0-f44642e95cd7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd7fbbc-629b-486c-a7a5-3d001f7d7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944dd32d-c4d3-4473-a0df-aa69b3e243fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2e2032-4506-432d-9749-83fccc6db26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "604991b9-6ed8-4e43-a986-ef3669f1057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab20cdc4-c9cd-4de0-a0ba-1220edb6ba9e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87128cd7-3daa-4c52-a7bf-1582146e76b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a825adf9-bb23-48df-808b-7983c0bb17af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c31b88c-f2a6-4f45-94a1-8449462d165b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e5d5e2-8c1e-4b4f-9ea8-9e45e94927b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd63967b-4858-4b6b-acea-2bf73269f6a5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f21e588-cffe-411e-9f67-d7f1c649085c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1054633a-115f-4584-8dbf-583684b663af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d65fd6-1e3d-4b2f-a3f5-0cb5f8102170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc223ec7-6e83-41b4-97c1-0e751410d5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2722c0dd-9aef-4459-9404-5872b4f1af4e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fa6840-f50c-4906-8569-dabd7462e7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0de8fcd-6170-470f-81b5-7aa383271e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a757155d-8421-4e12-8962-58fac3e165b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "49060eb9-47b8-453b-8dd2-59d9048bf4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c263b58c-4244-466d-8265-0325fad890f9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19df7a67-5829-43c7-acb0-263a37d185da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54ac109-f21e-4ff8-bf8d-b60530c3855d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f03db5-44df-43cb-886a-0201b8284f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e54a11c0-4057-48f7-b2f0-13f489a39a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89947a65-0010-49c0-a34c-99ba8ef7a831",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efcc46e-e7ce-4f86-a6c9-c6c99427b2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8186ead1-93b0-43fb-bd0d-8700cf2c91e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592f1736-daaf-415c-94f2-167f4c9ab4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f5e166-dbf0-4d08-96b8-75f504a4a1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf53d75-a678-4273-b42a-987dd7a21a0f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6009f2-fd1d-4bdc-93c1-eef3328434e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046e38d2-24f9-4152-9e9d-6f7ecdbb1075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f472058a-eb56-4a9c-b877-09d349c978e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c420162-87fc-4b6f-b5e3-b40bde6134f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149b1344-47a8-4fd4-8e2d-0b486eb862af",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4400f8eb-f1e4-48cc-9095-5c152ab4a31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5d900e-6bd2-4fbd-9015-6abc91202469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5637f0b6-cb82-46da-93ee-8b58385f8c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8922a7d-d8ea-46b6-8a5d-0986b200ba9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44ee765-08e4-4deb-b617-a1cbdff91b90",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b5782a-1271-4c8a-9cb8-a929cfe81f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2886b64-3d82-4510-a323-236f637173e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16e9739-565b-4e8b-9934-470a6240cd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1291cf-61b2-4a83-981a-37c39b18785b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4e2b05-98a1-4a73-8523-aaeb0bb00663",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d75730-40d0-4ebd-8c80-2fc2a46e915d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20fdccb8-3da9-4f08-94e6-224f1c46619d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f650dbf2-856f-46f6-88f0-846532fd7387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37327b9a-8f42-4918-bc63-203de50eaf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d48a76-51d1-4aa5-a135-6ed78eee29e2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84b6ed4-c780-4688-88e8-43a37ab004c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706c7266-3cbb-4a0f-b999-baa956658552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa65b202-5fa4-41a7-9379-b382ca86bd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1aa78d-ff13-4c93-993b-608fbf51ce15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29a7739-069b-48ab-bd11-c4a773849eb4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603ca9bd-0227-4b11-99a2-4a69182850d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a091321-5620-4200-af6d-890963126130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662eaf44-a08b-48f3-afe9-b7589cbb9ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e199025-6aec-428a-9565-c17fd2d96169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45d5bd-3fd2-4954-8919-15c77c9b88ea",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba4711b-8ae4-474d-b50e-57d9fd1be164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ed1070-25f6-41bf-b644-05d54fbca245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed41af8b-c1cd-44dd-b610-31b47e412c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "487592a6-d9f1-4d79-949c-eb32f0306cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaabb9e-1066-4dec-952a-937c0e5d9456",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45433b71-2c34-4009-aacb-274e85ff9b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20cc78a-87dd-4b44-869a-5bc17821542f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca8efd5-760c-4697-bfb3-451d79d0f869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c908e00-fd39-44ea-aa7c-ee41c55074f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc4fc5a-d106-4b50-a697-d1aa36ffb917",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb4ef07-e016-4ccf-90b1-9e7c374c6370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b42bec-eb38-4763-aebd-1c6aeaffddcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f790a0f-5143-4029-b6c2-597789e60295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7657e2f0-cb77-48dd-9b03-d30b2e774c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2e2bc3-f960-4d43-9558-7fb5e681d4df",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3525f3d1-42be-451d-8820-b78d1fa42212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdda7494-306b-44a5-b0f0-ebc000eb294f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad9524d-ed4f-4111-80f5-30e2833eb9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1238684a-7f75-4722-ab81-dbb29efa9253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c401bd-08a3-4043-a579-9bc31a3258b2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2e5422-996b-40ae-ba36-93d19bfa4da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b61c9c-c330-4a18-acff-a9bc08d22cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3232950e-4117-48e3-a33e-9a4445de164f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48efeedd-e2d7-4d51-95e5-a38e82314f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49f508-828b-4eb0-92df-876dbcabe644",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a55f7f5-b68c-4f89-8b07-0c059ec38500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bea28fa-c8d5-488e-b0dc-83e1eeb14785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0700b9f5-5cd2-4aba-8366-f989808a7f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7391ba-293b-4465-a649-827e1feeccc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229ff5a7-640c-4516-8932-982bb12d7804",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f6b855-f1af-48c9-bb0b-8f9a67ce6d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c320e4-332b-4494-85c8-5b54a6a91632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41f19d8-f724-49c6-a83c-d3876e684a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50945a20-0934-48aa-8a32-ddbb98ef1d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3575aba-3c3e-4147-93f4-35ba5010b03d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e455fd-006b-4036-87d7-95796343fd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e181544-a5ac-4dab-be0f-c22b6e38fdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d8373c-1a74-4158-ba8f-19805908070d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1545f5-2bb3-4d36-83c2-eb4b5188baaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bf6621-75d6-41ad-8ed3-84026e53f47c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bc58d7-e130-49eb-8e58-cd31f2e57b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e1f9a4-09a1-47fc-b841-66709db820a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593183fa-414f-41fe-8580-d45e635b90e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7e2321-a579-497c-922c-cdfbaafb6401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5499524-e6d0-485a-95c1-6b7fca56533d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bd784c-5885-4a4c-9f93-d525cc5c4508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df440d68-8e6e-4f19-940e-2c319e46baf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efb7529-8c08-4cc7-83da-4c95a3c52c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "197abfbe-448d-40e6-a40e-fe36523f3529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4967cd44-85fd-48ec-b728-1b4c28594511",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6c08c9-b72a-4b0b-9197-44f664a898e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff41005c-179b-4885-a754-d6c105778a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a710093d-0020-460e-beaa-90163c3ee466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93ccd3e-507f-4e0f-b19f-378324101dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1bc58c-1d51-474d-b17d-f7a48ce85d47",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cee8fd1-907d-4b10-8f19-0bdc4fe5b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3b8e3c-ab66-447b-80b2-4e66fc71d66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4324bbc-5482-4b31-9334-d81ca4d99896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c56d3f-b458-4c14-9037-e57ba29472a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b573eae-d4bb-4c31-aa6e-51e31799b9cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f994d4c8-f1e9-472b-8d54-2c7528134f94",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef4e46a-0b7e-4c43-91f6-2185e7a8a11c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "68445a4a-292c-40d5-83e3-04952a405e17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ab7e70-8906-4954-a4e8-d97fdcf42cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d88fa4c6-8649-4a4b-a9d2-21ec99721f86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51eda402-27fa-4bf2-af47-e8a8b0d2d671",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2799b30-2be4-497d-a7e3-eaf26d9e0f84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6febe91-c2d1-4015-bca2-c9ec89b03219",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a441edb-3b96-43d1-b041-f8728db672a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b62f350a-4a72-40c7-ae27-079d358519fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30890325-d2f9-4050-bb58-7e1171a57655"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39696d1d-0bc0-4b22-8a99-4fbc63dada5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8d3d4c5-8574-4490-9598-798ceb70eb3d"
            }
          }
        ]
      },
      {
        "id": "a9872d5e-4610-49d4-a68b-665227f22e1a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a1fe3655-771a-4593-ba9b-83ef1ce7b228",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5002490d-45c3-4bf0-b543-577e49536724",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "115d437d-43a7-4f7b-afcb-273c037f7006",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf90dc2-0a95-41be-afeb-bd556ca4c0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4fe827-20d9-4e5e-978e-6427ad9279a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e7a505-4407-44e3-8f6a-9f31fdb2fa28",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db9c512-00e7-4d5c-983d-c4330e7c2ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b95d9c-c96f-4209-a8e9-4e2c910dc50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4a2321-155a-4377-85f0-31d079612fee",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1abedc-e868-4a53-990d-0e9a5530f789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c789cf21-596f-49f9-b584-02a95f2a5d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b7934f-dcac-45be-acc9-d3648399b1a3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f968ba-2235-4391-8fb9-f5c670bd5240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcb4662-2786-4ee1-8dd8-781561b42735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ae824-5c21-45ef-9ce2-0e69841b4fa6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74e946b-1f51-4895-9d71-3e85020ed294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df8477c-efd1-48b2-bb75-6e2e5a697f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1a9827-b421-46c4-ac59-b38147ba0238",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65cd75c-e82c-402f-8487-1a25713adcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d7dd11-0dbb-4c7a-820d-f01596a7838e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cf0c16-47e6-4c0f-afae-f997e5474cd6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08912f0-c09a-4961-9238-3adaea7d3520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739965ac-b73a-41e3-89e0-dbb678e3f7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72827fba-0f4c-4639-8d11-74c3d3965bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f74052-b0c5-4deb-a0d4-b168bd68a4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c42b13-3229-4d21-93a2-6de0bd671844",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1bf72f-62c1-4acf-92ea-92a902b816f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff12da4f-4d95-40a1-bd43-f022301577ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0149d022-c42f-4ce1-a6fc-76add162247a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b445fb13-6b07-40a3-8214-9f52fa15bdd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ec8b8f-7698-44fe-be66-c8ee6589129e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a18ac3b-074e-41b4-a3b8-e95680d798f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b8ef0fc-cb70-4dbc-8bea-f15428574940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b01abe0-eab7-49c5-9675-72cd3bbef965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459f3b68-cee9-4d54-83c5-4e594a8f6e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f061e16c-4906-464d-ba3e-a9cf00d01d19",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c540c59-c3a4-4d62-a200-b8fc66209397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b5cb13b-e9cc-478d-97bd-b8913caec7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba05629-7da9-44f9-a67c-28971f8ad220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95a6ddc-3149-4a5c-8b19-161d4c5f15b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421d96e7-7a72-484b-98e1-ff497e83d7c9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57df755-4ac6-42b3-bd20-0d37616ee7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c41488c-68cb-48a0-b2ce-900f8888b9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73e2ca2-ef2a-4914-a971-b444fdf2f4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16827c5e-39cb-4c0d-bb4b-bbc3dd59240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906edcde-749b-4641-b779-08eed6c1a17c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7647a14b-06a0-4201-b023-4a82ae89cb29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bee870e-e657-4578-9bf1-4f80bbdc5f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c49d7c8-a0f6-4b42-b785-d6f2da55e506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffda769-d42d-4236-b3ad-02ceacabe921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b9f666-e5b3-46a4-abff-f363729f9f2b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293b92d1-228d-4a12-b965-58b924352d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f43af1-3eec-4f38-9b58-e320582e1bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a9a515-e8d8-4a28-ac46-7b693a27ebfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb12233a-6022-4f4d-88b2-4bf50d1bbe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d90590-f997-45f3-8e0b-f594a7c95801",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc042c6-f1e5-406e-875f-0fd44e2ae55b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae2a09d-2a31-4d15-bc86-721d7e97feba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acef7483-f89f-4889-894d-8505652425cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d094d3a-bfc2-4f3b-8ee3-507850bf4f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2856c66-7005-4512-aeeb-db11b13d5e59",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c91f178-aff6-422f-8a92-765774612742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96be23f-dd4e-4074-9780-0df40f630d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29db3ebb-b7b7-405b-a8e5-ab82c9a74223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d873451-cb08-44e8-b411-cd5088a34cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd2502e-1c34-4ef1-8fc1-cdf6a9a475f6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c03ba94-2b3d-43f3-a29c-386464b2279c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed307c6-9a8f-4b32-a9c6-4e96e545a451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863ec572-855d-4cbe-82ea-8ebd51deca64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d49e2be-b6f7-4a08-8f48-ddfb52a9f7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e44e02-9257-4c67-9d4f-6294bf0d3c54",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a42d11-4c18-4c15-a267-0ee88b44d698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f71b1b-d59a-44f7-a549-8e50f67e4d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce062a6-2cb4-489e-afa8-bb11d8634218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56850f0d-bd6c-47fe-b68c-f2993123bbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47714a7f-7c8d-4d2f-9e18-c71b87ad5d17",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42db3cf-877c-46e7-93c7-88e61e2f9385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de264fb-00b9-483a-b990-8a2d41d85084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c5ded0-00ee-455e-9d46-68ff0771f5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d065415-c44c-446c-a227-d4105868a429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218635af-5f4e-46df-9deb-f70d63c6b0e8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0f8013-797f-4475-b265-32802f3dd2a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1311901c-fa55-4c40-b14f-79d86a4e9973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7320e299-cb99-47f4-a71b-df7ab2b703a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b51dfb-c5b8-4669-963f-efd326b226a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714fad49-2d9a-48cf-b1fa-caa49d1cda59",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71dabe27-796c-4bce-bcf4-b089ba264d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075b2616-0536-43d7-a697-e6c37d19302d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146317ca-ff10-4c08-ac33-a050849591ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fdfa1b-f9c7-417f-abc5-d86f502e11c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce7aac9-bc4b-403e-bf9e-754663c0d999",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e340da9b-174b-42c7-96da-c460bedd8f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2eae5d4-174e-4c88-8072-2d7f4157a86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559e8963-9c40-4761-a486-c57c2cd984d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e21dd4-8c12-4f2e-b9d9-6b3853fc8326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7cf14e-225e-44fb-82ad-f7303675104d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91586cf5-c1e7-4bbd-a574-02e5d0aa4a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4308d4ce-f1a9-4f73-bebf-a814876d8b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b520e91-711c-44f4-910d-35713536ab61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0030a19-5834-4ff5-96aa-571d8b0619b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57987c85-c687-426f-9cd3-11abccb138b7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73e1e9b-058a-4560-87da-3ca294718ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba47dd19-eabb-46ea-af79-edb88fe011f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb679775-d7c5-4afd-a809-fb7665d37e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7187ab5-1689-495c-a205-b0724ca97c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c61e3b-7931-47ff-8b55-7bdc4e16969c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa183fc8-1b88-45d4-8a90-23d604465c08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee9d665-0ef9-4282-9787-cd501d6436e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e449b32-d79d-49c1-95bd-adb014197a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2972933c-5e9e-49f9-8638-d55e6b63d990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537f50c3-c092-437d-bbfd-ae1fa71054f7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814a5372-4bcb-40f3-b60f-8a0153fd6118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1664b57d-1159-456c-8ea4-e7ff29a77b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ad8263-20c1-4180-b18f-6e0722875ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c08ef77-b9d5-44bb-a9bd-02cabf94a6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c39bba-63d9-4d03-aa01-2f4eb0bc2364",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be3b75b-0334-4691-9dd2-6cb4e73cbf82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba5e988-788f-4220-9859-e4405519fdae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae863273-c029-47c5-afd4-0ea0fdf60073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99f13b4-e26d-4100-86a9-9726e286051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3cc926-8d0b-4791-9309-8c1af74f6b6e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a712decc-1bac-4815-823f-aad6998ca430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c5542f-a5ca-403b-a8d8-d539643367e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac3c4c3-f5f8-4851-ae8b-c213d8bebb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0001a487-bf92-4bca-9ea8-0fbee4caf394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d154988-c789-41ab-98d5-764ba7b1b750",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd76a08d-0350-4624-87f6-c1185acc9204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67204183-6ee3-46a6-911a-044b37945efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04db3b9-645c-416f-a270-fe4dd47e3dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8bd324-146b-40c6-959a-6c06c3d4dbd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd09db8e-30d8-443f-8d22-fee61c982b69",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df51179-8394-442f-8ebf-c7883590871e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e4db5af-0f82-4ceb-b2cc-928a21ca55b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a5ad7e-50b9-4b1f-a9ba-ac9fa71aba1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f28c85-b549-4a15-a070-e718d85b9d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a7c679-f975-43cf-bb58-5e6d08c99c4b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfa4461-4e52-4362-96cf-47ea6fc2da60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eac10b58-b3b6-46d1-86e8-799dd331656e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a6d811-a940-4211-956e-079a03903cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a2924c-f840-44d5-88a4-0086a8221f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8cf5b7-27c4-49bd-8948-d462552ce911",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc7125e-1d3e-475f-80ea-c20d97db9603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abc3cb8-6ca7-452b-ba02-df46fac55eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb3c967-b5a1-4518-838e-49aa390c34b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6665d96-b889-487c-9c0a-b220c8c5d823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0f847d-838d-4228-b059-539b96b26d80",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b6b1a5-fd51-42c0-b229-4b4a5c12b704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc315aa-cc86-4cec-b689-63b30c904e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b40b48-b6ae-4e0c-afac-bc295bb0096f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd1bfe0-f71c-428a-80f3-6034de9f4a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96f1313-2ca6-46c9-bf41-bd63d33211d7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5916fc26-2a73-4f90-b2f6-8c36b2c3f48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "288a9565-b3c0-45f7-8e01-067a008b5f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71196b1f-d8aa-4462-af2a-9a8880c20753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f862a2-745b-4400-9e3a-bef0200fdd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ae4f50-2192-47cc-ba5f-61bbc1cfe11f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d846fcb3-c00a-491b-bb5a-793f8395b759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83440471-970a-4601-9aaf-57f6752ce85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05557374-af52-471b-adab-c938fdf6a5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399b84e1-1047-4bed-9b41-88e6a2bb5374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023e29ad-f7c2-4607-a41e-30ef884ec23b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a11f901-77e4-4c76-a721-2cd3f0566deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43f719e-4e8f-45b3-b52d-65ed5ca01867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e604a1-2a23-41c4-838d-b4589e37251e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36268e51-2b02-42a7-9410-72e5ddc34c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc942dc4-16a7-4dd3-bae5-1608e70c48a2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31ed266-5530-4fe7-bb4f-f5a3d9490919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ce0d7c-2923-469e-a853-c8a4f5323ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e1c4b0-51cb-42a1-89ce-0deda03c3fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa5aaef-21e7-4fab-871b-dfa304426975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3285db4-7fca-4641-ad17-eb7b7a10ee89",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bdb8b0-9e26-4f89-b957-cf238347b4cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a7433c-cead-49a5-9c80-1fd98a5b792d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b733947-47c9-4912-ac77-4a96dd7e6000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd598f9b-7f99-4277-b281-4b2daccf015c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ccfa27-06f1-4c7f-b547-44632cc2eb1a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe476dd7-a6b6-4075-a869-555a67b2102b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb9dc8f-6647-447e-b7f7-e2a4d4e2a6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4766b810-54be-401c-b44c-fd58131e5690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f45961-4e63-426f-a721-a142dd9055de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c62829-2370-4204-ad35-b555af98fb6d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee96c2f-4edd-4a6f-b564-da7b698254bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ce3031-97d0-4946-824f-b09be183008e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8e246d-c7d0-4f53-8891-51ce2b8b96a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f65be6-e43c-4438-9c8d-4d8d0f0b1ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68031ddc-f3d8-4faa-a4a2-639e28315788",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e91d7a-cdfc-4ccc-9b6f-f784867730e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5671b7-573e-4d2b-9f43-67a3cd1bb7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a58faf-a936-4774-8efd-741c5b5f34a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba057f2-3c5c-47d2-b84d-357f26131a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfd50d5-c0ff-4b58-ab5c-2a2866a7da2a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77adcf4-451f-4a4e-a83e-e7629e6dec4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f16ac3-87c9-485d-859e-ed458a31f2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5ecc2f-bd70-4ce9-83b2-a1bbc0aa3cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda5b3e5-4489-4082-97db-926ff81038be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55a63a7-c88b-47cc-9bd1-8d382a658fe3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b6475-d100-4d1b-8eeb-c303591a2f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf0c45a-d64e-43a6-8efd-386a5c4f1018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207e3858-3221-4cc8-998f-670799738083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3526b809-2bc0-4be8-96ae-52b45162731e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeadafb6-3881-48f3-a7b7-d66679a21ca7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c731d8e9-f427-4cb6-9d9d-1588af5bc8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deeba93a-206d-4306-94a4-c12836edf3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee84f1f-1219-4b87-acfa-8bf3ffd94ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6618f5-4031-4693-8c5a-01c1e5d99ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06efc48a-4f73-4839-be8a-14844a59f5b7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd6dcdc-c7ca-496c-a5fa-89988d2ad5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2336b8-6be5-41e7-893f-beb04060e186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e39e7fd-9ea3-4c78-b63f-1598cd1fe320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ceb53f2-adaa-4ec5-b53a-f07e26c2061e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1917a816-59f0-44bd-b5e8-173ef620646c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a265553d-053a-443d-bdae-aa1d3b9a24d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf581cf4-2829-4535-94dd-d9c5147b7844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7394b399-7ff6-4e11-8610-3a33e34b9e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a69d4da-3482-4d5d-a945-6b4cb00caa2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8acd06f-f344-44af-9a5f-4f1c5eecda9d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3770c49f-c047-41ef-b49a-4cbd93ca0814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5db907-baaf-462d-8045-4841bf43a981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f75fc0-8c91-4dee-8f3d-234ee3c2912c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520e44f7-b026-4615-86c2-459a53d30d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4244c0-b246-400e-950a-1e1fa5b8573f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e9b774-95f3-43bc-9b0e-faef69f2e5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4120908-c17d-4029-9234-cbc705230c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c07433-d314-4066-86c9-c45242433636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3358bb-abe5-4030-ac14-aa389e197ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914860f0-26cf-47e1-82b5-58886b881aee",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a44f272-8a55-4cd0-9b38-d814e1b39c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8806aa18-30a4-48cc-84b5-2c2e4c177703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98af8f6b-d086-43fc-a29e-277b667790fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0148a0-d32b-4873-9780-04d2153d9efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1effef-d9a0-431e-b767-8b1c3e35f3a3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7eee0b-88c7-4145-a5a5-a590ee689814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad5ff3b-25d5-4956-bb25-89f9960d5f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213e3f42-c504-4257-93eb-5bdfee84dda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e9e710-9165-4443-a676-355c0a38fd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0030efe7-305c-44ff-bf71-17062942893f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901cf2dc-e45f-4966-852b-2a5edb9c16b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5403b901-02b9-4301-90b8-876c6ea99764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf103dea-58cf-4f53-ac43-04dc5672baec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edc0792-e0b2-4e8d-b6d7-e3cdda4459e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051f4139-3197-48fe-b07f-43020846bfb0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9a1427-a468-4f03-b56f-05fa14e4be4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda16485-8392-4a7a-b846-556ee542dcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bc69f0-0f56-4c44-bd17-0a4b9194514a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64e991e-4356-4872-b362-06a234401bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50e7f2b-26ca-4f63-805a-a9333ae55946",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a65cb3-2849-4b32-bdfb-604af36c8e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ff379c-a42a-43ff-8207-9a79980e1b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134ec350-dee8-49be-847c-63e49462ad82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ebda914-f48b-4dc7-9d44-62e267b6c299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eff9fd-7fe4-4ff3-aba8-ca19f08100c1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b7e30f-6357-4df4-bceb-41b52e51a09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7266cc2e-147c-463a-8fd0-487de5e2f005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6c1d7a-26fa-4306-988f-46cc33ffa86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06ecbac-e6d7-4b01-b09f-cfefb0b93424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c83c4d-377e-4451-a7ca-2ce1d91b1d54",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1506083-d74f-4e6f-877f-09fa3ff4cda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4da1966-4d48-44ed-b988-0e46b144dd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4def264a-57ff-43fd-b825-aeecec43623b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32ea377-4005-4dba-9a91-c708f28790e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ee90eb-e181-4327-bd44-6491911f6427",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1469f844-a47f-4974-9519-0e0cb7e0cc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18839de1-b0cd-4935-a0b4-9f5f6a35406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede8e590-4afb-45b9-b845-6166de44fac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff45d2ce-6e55-4268-b889-fd2667b0e7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d328dde6-fdd3-4919-918f-c5c28b3778e9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b643d75-fe91-4242-a6c1-5d7fcc742c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67baef42-cdaf-4149-9834-69602d413205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b550c5f5-f951-47ce-accd-5084a55ab27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68186270-70eb-4d59-991f-1ff614b6c3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcb67d4-72ce-4508-88d9-2f85b69e6e3a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e4fc5e-6ebd-45c9-9b14-c21a5b56bf96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6cade2-50d1-45b3-99fd-1d44f7977ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0bcf59-846a-4239-ad44-4c5aa07751d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867eebcb-884d-4935-bfc8-7794815c5a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305d9467-9314-4c29-9952-6de5b1e3e0cf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b2f813-ac28-4ce7-ab07-448c6b4ade4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af06287-a55b-4843-af30-aa31cf13fb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5920c9-1629-4a0f-9fc4-eefeeeed5bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900c38ca-82d4-4e47-8b60-39021ac31fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11479dcc-ba2a-4d92-aea0-3ef4bff74664",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455c2238-be18-4216-aa0c-bfc7657a0964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a532454-d352-493f-8f0c-bf6e1f68620e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d83d8e8-ed0e-463b-b1d5-72903c8def0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86a9590-82a6-485b-b0ab-fd28b24faa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27a7ddc-b947-4ee4-8bcf-9a819b737bf1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5708ff2b-f30c-4a04-af84-3dfa55a5f03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38c1deb-5a05-4d57-9222-77572ee727b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d940b163-eabc-444e-934e-533a8b804416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7aa91be-6545-42f1-b70d-5db4c1541cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a18609-5c2f-49c6-b6a2-09b8c8043ecc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f585a4d2-b3a3-4acc-907c-6db3a8dac211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea49812-8d1c-4448-aa5c-0d34245cba5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15d4eee-996e-4604-9bac-f0eecf64a61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f70f8f-250e-4e4d-bfa7-c8dd880a5a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203934bb-055b-4249-bab0-1d22b3389cd3",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4eebb1-836e-4b93-bde3-4f638d45c131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c42d110-24c0-4f4d-ae98-2336db9ff3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf69ac4-4220-4abe-87a3-796df6d3a1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be5e743e-1479-4c1a-a3c6-d7889f1a1155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a3ed8-9ecd-4f19-9c61-95288596e79f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4a0aea-4175-4da0-8525-3d98c30d6694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45037fe6-7770-4bbc-bf9a-917324f03fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3baa764-7127-4110-a673-ff9c1d789968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974ade1f-ee8f-4075-b08c-f0b1f5899c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385d8904-2475-407d-9b6d-0bb96104fda7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07a505f-003f-45b3-a934-65bb8a6c92a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0683b964-a49b-44f2-8041-e280c5ae4e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e463417-fecb-4483-af7f-868ffac402e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97fe3be9-45ed-43d3-8b73-295651e5e0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01b241f-9d79-4c17-81bb-921aa429efd8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55303e80-17a9-499d-bcbd-ab6bf51cdee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabd13a2-bdd1-433d-9038-97959a740250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebea849e-f416-4df8-b4de-d6d41da6f0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edb9c4c-e207-4189-9312-1996451bc1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4898e85e-7d11-46dd-a7af-2ed83fc12907",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de3dc97-b249-4856-9ba2-a7790e1660ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98aa44ed-78c7-4032-a25b-72dfc6e520e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7f7e50-826b-4831-b3ed-d15bb7c2df58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b063d9-2755-4014-9219-6b2e9012b26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97075a6e-fa3c-4020-a62a-56c406b0a06a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fdca46-90dd-4f2c-9deb-0c74caedd994",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b81f508-897c-4a83-8a90-0d7e90443ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c87c0b-78a1-4621-b4a8-5de82e85adad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef16968c-07bf-43b9-af17-212d7f55960e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6540e9fd-7702-4661-a4bf-9bf6fe5bc86c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d568f2-999d-4567-b2dc-808694966833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46fa8e2-7ce1-4ae6-942d-5fe0a35fdf3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e37f304-12cd-4f1d-833b-d2488a2d9aa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ae36bf-95f5-4c23-ba8d-688f637bde6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f240f0-9587-489a-99a3-15a46109c407",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d60118-d21c-4f1b-9fad-56751d02fd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455260fd-72c5-4152-81f6-4fb1712ee0a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f158ee9-768c-4393-a9d4-94286961f1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5b2a09-cccd-4682-9b43-52573efd19a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490b3bb6-733c-4c46-9d67-57600d4106f0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e780a5-f5d7-437d-a692-ce4d8e5539bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89be485c-9cb7-4b6d-aabf-745b6e78ffa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acac213-0e66-40d7-8879-6947ef546c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6be59a1-e7be-49fe-9fbf-e7a2d1b5d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7bf589-42a5-4a7d-b3bf-f941f70882eb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83ccc3b-0866-4d76-b46e-0dfe8f3cc95d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b42250-8b64-4f0c-8d04-e2b86d1e32e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1a29c7-1343-4129-92e2-3c588e6eefe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09295ea-1852-4056-8570-cd8f83bf7c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1273f7ed-fa0d-43b9-a97c-040b7c0ac40b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980c662f-1315-45a4-a25f-04e64383f3b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "954a2468-dfee-4c4a-9eec-fce272395e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a6bb13-96cd-48df-8775-7c95f9519493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cea0f5-941e-4b91-be52-c2eea2d1926d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069b4b62-14b2-435b-84e7-77ef76debd36",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175da9d9-f565-452c-a0c9-299e4a9b527c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bc29dd7-0044-42e9-bd1e-564ac9a42ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf81931-6e72-4474-beb0-28f09eada265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defa86dd-b50f-4e20-a7d8-9927cb1c2024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9611826a-2024-44bb-9332-715c8b3bac96",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ae4afe-2abd-472f-b1b4-d8368e749618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee4f9e0-4f95-46a4-8dea-2be2312cc812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8430c35-121d-4a25-852b-48d580272f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbefb4c-3b1a-44d4-be12-44b3ce8211a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e5762b-6a5d-4762-86b7-838c52cb401b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af35b159-5336-4db5-8d9a-008f94f7c201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce420b4d-d75a-4fa0-988d-4072312f7c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64c59c7-a21e-4e9e-a121-74217f182b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023cd1c0-7fad-49b3-92be-e764960a8863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cdf370-5025-4f3a-9944-2091b7091793",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fbd662-6640-4398-8a7c-957ec8dc2162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713ef0a9-1742-469f-acf4-3bd9b077e8ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d731d5b7-faf3-4261-ad8b-eaa3b98b2786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e6fb8c-ed11-49e7-a42f-d5b8afa332f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24598abc-0229-4263-90a1-d7a601a2fe66",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa8daaa-31d5-4b53-8537-105a3ee9ab56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ecb904e-eda5-4997-80f1-12e611be6363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2a640d-6d0a-4f8b-80df-69e3ffd245c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf84fec-82eb-4f00-98a1-c785ecd38538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622f6bd7-3edf-44ec-8257-17b0f9800458",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373ef008-bf0e-4cfd-b62c-c3aa750af0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d6a4626-8e31-4f0f-8304-8f115d14962a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43114dc2-7fd6-400f-a80c-87c6bd1bac0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c345a5-20f7-4c3c-8f48-511f056d94f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733b750d-37c8-4aa3-8590-bf0d85b1574c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09758d10-b7f5-40d2-89b4-6b24ca3ff19f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8da9523-89ad-4a9d-818f-1f317d2fdbba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53235e76-b90b-487f-b76c-560d11378bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194466c9-af29-460c-ac0c-0a432128523a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fa006b-7b1c-483e-81a5-f35809f1591d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83354a1-1010-4c6f-b9e0-eeeab989d895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d7f2fb-ffcc-4428-906a-c5bf91fdd189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a87fc7-6340-499a-a82f-5edd561fc308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21c35a3-1f9c-4cbb-8789-f9be0c96284c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b936c661-c04e-4fb4-88c3-874d669418df",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41010fe3-c488-4fca-9937-0d2c44d77fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d615c430-f5d6-41a7-b968-17de5db2eeaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22236c6-1cbb-4845-a0ba-7cf00e83a40b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba2630e-6a89-460f-b91f-170fc3da9771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213334c7-d1b5-4297-a008-500b4ebbda4c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a88292-b769-40d4-ab74-cf151fb3619a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c08a0e-ee8b-4080-ba6e-18f246f0586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7935311-a81e-4420-a5b0-ea9f33d08015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760be53f-0baa-43a0-b83c-ad91468d1617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c62e76-81d0-483d-954e-72c2c4abc702",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438c83ed-c18c-40a9-a11b-2e5e17472a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b89f79e-005d-46e1-a026-bcafabf27046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6baab669-9996-4725-a7d6-7745ce46ee76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c6de8f-c339-45cc-bac3-44af3bb923cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e4cbe0-418a-49c1-a002-02961755eced",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01174876-4b96-4d8a-9d5e-52b662a7c21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f976ee69-8e91-4ad2-924e-5045ad28a624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f10e6c6-ca18-484a-8ea6-5be7b571454b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453c83e3-586e-4fda-9ff0-bdd8cc8714dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73c64bc-ddd1-4e4b-95ad-581acb1e1a3d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f19818a-93c0-42a6-b3e4-848b3be96774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b84996-07ed-4050-b97c-1acd6c777a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfc39c5-7b17-4abe-861f-30a00b8e653a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2aa3c00-c7e2-43a7-83b0-162c9a6f962d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c439365e-fd58-4705-a590-ae55b2e16fbf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a247d795-19b7-4815-bbe3-18c620bcf147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6676b9-c6b2-4ffe-acdb-52485b25817e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6347e9e-0fd5-4c9c-bfbf-d9872518e069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c8e25e-a318-4eec-b8c4-3bc85f4d568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115ef696-bc05-4a26-8e7b-a227f5caa51c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca51e25-2dcf-4e96-84d6-096bfe8cf5d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c50fd1-0efe-44a2-9240-1d796e4de54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21154f2d-e238-44a2-903a-5e08359a3b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52175f15-181b-4d8c-b31c-1652f3d24b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec90fdd8-71da-4632-9aaa-dd08b87e3d2d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a04244-b225-4f40-bf9a-430cd3e7ea3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d68121-07b3-400f-9f75-0256a69e4675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740104eb-0eaf-42fc-b745-80a238bebeb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799946db-d327-45ef-9234-04d4bb088619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810c45e6-63a2-46d9-b0bc-f4117765fd37",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b0e967-7af6-4d2d-9fa2-d378215cdd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cadc6df-8541-4fc6-abcd-b824b5fa810c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7898fbe-9fd7-4071-9c86-b925cc44b838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c0b30f-b509-4ed6-b5d6-8e012067fc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd688fd-7969-4f88-bc76-631d13a905dc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b13e41-154f-403d-9ed4-6c85bbea22c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c86051d9-acdd-4653-ac57-e96fe67cc3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383e2bf8-7d0f-4ffc-abdf-95b42dbd1ebb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da3b263-6d92-40a5-bd3d-b7181f59405f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623301a6-b21b-4816-9d77-43f4fdb45015",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce08d8f-337c-4884-96c3-040aa4269477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a155ce-39ea-46c5-8102-32af1f008e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f282df3-76d3-40e4-aa0b-300c56c78421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116dae71-301a-476e-8982-f7d29f294a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2be0b8-7060-4acc-b260-657b6c1157dd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da4e7a3-723c-40de-96b3-01f294101955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a4014f5-6e4d-43be-93f2-bf6a0895a5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7094b4-ba32-487f-985c-918025b47ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5def0bdf-b3c9-44a2-b53a-5a8902a3f295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c8ab4c-854e-4fd3-af81-0a0e09fedd40",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ad205a-c94b-444f-b0e0-8ae0bdd27c06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fbf481a-72fe-4083-be1d-65c8d915287c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e219e7d3-31dc-4f45-82ad-84f31543ddc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b4bd1f-519e-4159-ae45-24038514fdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc846559-c4f6-4ba3-b612-c906afa0ae4d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b60ab0d-45ff-473c-a196-8993767da58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f4c8b63-65c4-419c-b59e-99ef0ad36bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd4e381-5dc3-4cab-9026-2f5b4022600b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f637ce41-ce8e-48be-be80-56212a56ec22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fece035-56a9-4aa2-aced-a617fd6f102f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d99965-80bd-42d6-bbca-c6fd36ddeb54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86bbf0ba-3b4d-43ce-954d-219e7e3b10c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0703c55-b924-4d86-a23e-af00d04deb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52165213-f2c1-4e23-a860-562bf285c1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb948e1-87d2-4ffa-a0d5-49e2bb7c6568",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581fdab0-7c96-400a-ba64-2106f4c4fe1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e51e26-cf59-440d-94c4-61ae1d451b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071665e7-f96a-4c2b-94ce-57dfa85a7963",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746d9b8f-42ec-4762-8440-689017a6bf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3d6166-0e1a-4511-aacc-394bb97935bb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e3d0e0-7b34-4d24-bf17-2e36a98371d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc7a917-1e36-464f-a826-227cfa954313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787f1650-69e8-49dc-8b25-9a5705361c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa22a615-64c1-43f3-b719-daeca6ca07b9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e71b6af-19e9-49ae-9348-025c7ab8f79e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ccd139c-a249-47b3-b242-a30375282f33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14f30207-7318-4e17-8703-3ec0c50a7d31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b503e8b-295a-4209-8648-1e15b190bc14"
                    }
                  }
                ]
              },
              {
                "id": "45182ffe-713b-44a5-a697-e965d9139123",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbcffee6-2725-476a-8acb-67f5d013d330",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df27781-5c84-4777-9ca3-6bf130c1be84",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "98fec813-e3a6-41ca-86d6-1498879b40cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d9d2cd-719b-43d6-9070-f4a3fb450526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f791317-7c13-4601-a559-b09258d702b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45d28561-7606-4360-b0c8-c82821de6bb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74c83605-40f6-4334-8ba1-5a4abbab0fe2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48256aaf-f515-46b8-8786-a42fc2ccec11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0eab4f-fa4c-41be-9f85-ac6b6905fef3"
                    }
                  }
                ]
              },
              {
                "id": "cf307a54-8772-4559-a8b8-16aef71d3436",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "037046ec-2f1f-4e3a-95d5-a93169654e3e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f52375-8cfb-4a95-a254-76e1e590da5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c98a2729-373c-4a55-92c6-06f5ef820b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ec6799-1351-437c-a688-52aeb7aa05bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd7b7ce-cb64-4020-a03d-aa308733ba83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6747c4ff-47c9-46a7-87b1-26a8d5b80799",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9e1cd876-d137-4568-afc3-c39271dcb5b4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c277558b-e97e-4257-9d97-7bf3d3636b7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "082b9696-3745-4a91-b1f3-c5f5960de161"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60a436e3-74b8-49f8-b1f1-0b32f10d1203",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9347c5f4-466d-41fc-b719-3017e645a504"
                    }
                  }
                ]
              },
              {
                "id": "cd800190-665c-49e0-88ec-de6179be3eb4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f8df102-4a9f-4636-b1eb-fa0e27066153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3ba71eaa-39a1-4376-9e02-d17d4a1da17c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94e91459-54f4-4387-be7f-77112a7dfdde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c0aef10-4cf3-449b-a146-c277367f7796"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a0f7a0a-402a-4bf3-8c50-49aea2553a94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9ee5a5ae-73ec-4535-a4ad-ec42d5349d6e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33061703-0efc-4f32-b261-4862bb49307f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd9e52f8-4e76-4e4b-a914-50e29f0deae8"
            }
          }
        ]
      },
      {
        "id": "73fefcc7-23c8-485b-bc9b-9cfbb8789523",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "819f8a1f-69e0-4f39-840d-971bd2fcebf8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "daf2b2b0-a38a-424b-b62f-07fc486cd6c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db235938-1791-4d26-bf39-804a8419ced2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80538ee-8b6a-4184-8510-7f2440d67b17",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "51d8d403-4276-48c4-9a5a-db8583d08d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fadb85-f8ee-414f-be3c-7d7bc59a4d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f79e5ce-84f6-4874-909d-dd8a7a115b98"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3da6e47-8676-4766-be57-c68c6958dda2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cb362ef-e6f6-48e8-834a-49fc4747f89f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e88aab39-9c00-48ad-8c79-d83baeb96e08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6cc6cf3-6538-48dc-8cdd-781bf17ac9ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f0673a-e5ca-4d3f-b095-53ef3bac11a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a1f3b84-e526-4518-a9fc-2ec1a46656f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16633d17-d2ec-4997-bde7-dcbeb864f665",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fded733e-17ed-403f-9f20-74e037d6a0f3"
            }
          }
        ]
      },
      {
        "id": "de5f45ba-28cb-4f7b-9275-390cd7bf09e1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1d07884f-0c6c-481d-aa26-3823dd090162",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e747b589-2e00-4479-9054-daebd1033e56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98db05a6-a0e8-43f1-a0ba-b13a8255cb62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d26d967-cea0-40b6-b1a7-90129cf11ff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d921af77-f6ff-4ace-bd49-dba911bcce28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6e875a-e734-4c09-b614-496935931daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecb9be8b-0a33-4598-b02b-48e2020b4336"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51a5aea1-d8ef-4e54-9755-ac69beb491de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efb55f9c-dd83-470b-96b0-38a79a48a062"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32d853b7-69c7-4f93-9c02-ef444fb2ddd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47ad9240-377a-4896-b255-0345be19ed0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e0e31a03-be6e-4909-8cb8-9938686612ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "87bf8732-6196-4a69-a6b1-cd799328bcd9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34b8a244-273d-4a3b-a564-37406c4cc820",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5bf14f6f-3069-490f-9efc-9d8d27410c71"
            }
          }
        ]
      },
      {
        "id": "0e357d89-ec78-412c-a953-00491cd01ffa",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b674ce14-e7db-4eec-8e8e-cc55148e9aa2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8184187c-4699-4328-9e5e-e118e50e4b9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05d9d8b8-7d4a-4b37-83bb-03c6e7e381b8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f8c34e-1fc4-4d27-9444-a6e10bd6893b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ae1669c-26e7-40db-897e-8d78f9aaeb1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb7d2e6-8066-481e-b766-137db4dbd237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f6e5e69-e6d0-46b2-bb85-03d3eb98900f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "078843ec-da10-4e53-a168-554e7821a4b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3de59ce3-9f32-4539-a388-dfce7eff15e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b40a619-bbdc-4f71-beba-f37765e1d258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c1859f5-b8c6-4db9-a97f-012f6627726c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6689e486-c3e7-46c6-9413-4a7b3dc1f096",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "244eab05-6837-47b5-85de-66b36e02d845"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0881c700-bac2-476e-b654-c8b4c93b58dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42caa313-d74d-4cbc-85a5-ee6be0391092"
            }
          }
        ]
      },
      {
        "id": "d64d603c-a50d-4e1a-9030-cbbda41616cb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ed35631-55a7-49ff-ad6a-d68ccdb56078",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a684a8cf-a022-4e12-9219-095f9374a23e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6deb48fc-7cc6-4e2a-b9c5-e24bf165cdac",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0812f03d-a63a-49dc-95d4-29429eaef0e8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "14110b11-b7fa-4a21-81af-905ea866b721",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.61403508771936,
      "responseMin": 11,
      "responseMax": 503,
      "responseSd": 62.3686140101143,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699230914262,
      "completed": 1699230947925
    },
    "executions": [
      {
        "id": "8c5271a4-1d99-4061-a199-c82bcc5c5ed1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6cb9e30b-55b7-4b33-8d03-3c5327dbd614",
          "httpRequestId": "a4664b28-4afc-4d02-bd5f-3402a4b3711b"
        },
        "item": {
          "id": "8c5271a4-1d99-4061-a199-c82bcc5c5ed1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "438c8ca6-d6d4-445e-8317-73491b5f31ce",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "a4185c63-62d6-4d89-8c08-2cc2a297bf00",
        "cursor": {
          "ref": "8759e298-3a94-493e-b73b-b5b0530e0558",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "954e2a88-0003-4a69-b7a4-269484489862"
        },
        "item": {
          "id": "a4185c63-62d6-4d89-8c08-2cc2a297bf00",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8117f548-f0a4-40c8-972e-14eb07d2ef72",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "5495b36d-243a-4861-92d6-2e916f32e6c6",
        "cursor": {
          "ref": "7c2fdfbf-81ae-4875-8275-c78089fcdf0c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ac98e02b-4281-4c2a-8db1-a22f1a5031b8"
        },
        "item": {
          "id": "5495b36d-243a-4861-92d6-2e916f32e6c6",
          "name": "did_json"
        },
        "response": {
          "id": "908fb525-98c9-4234-8542-a08dbe36cd71",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da69d8e1-33a6-4764-a708-bfa86f19ffc8",
        "cursor": {
          "ref": "123216bf-d8c6-4669-be2e-5197f51f499c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3d4eca6-2a1e-4b15-bded-434b46df3879"
        },
        "item": {
          "id": "da69d8e1-33a6-4764-a708-bfa86f19ffc8",
          "name": "did:invalid"
        },
        "response": {
          "id": "4f1d060a-86f1-4463-b30b-516008a821ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da69d8e1-33a6-4764-a708-bfa86f19ffc8",
        "cursor": {
          "ref": "123216bf-d8c6-4669-be2e-5197f51f499c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b3d4eca6-2a1e-4b15-bded-434b46df3879"
        },
        "item": {
          "id": "da69d8e1-33a6-4764-a708-bfa86f19ffc8",
          "name": "did:invalid"
        },
        "response": {
          "id": "4f1d060a-86f1-4463-b30b-516008a821ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b43f0b-c70f-47d8-8b60-0a4c2f71b7f6",
        "cursor": {
          "ref": "fc0a26f1-5514-4b36-8cfa-7ccae4cc419c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ac115ea0-0c00-41b4-bba0-9e3e6c0aa1ce"
        },
        "item": {
          "id": "b2b43f0b-c70f-47d8-8b60-0a4c2f71b7f6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "40a30a5f-183d-4e24-aafc-253d845f1562",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c30f909-d8ef-4da5-a472-93c076f32390",
        "cursor": {
          "ref": "fde845b4-8b59-4d4f-befe-9d9b4fdef82a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3bb084cc-889e-40bd-9398-2a27743e4e61"
        },
        "item": {
          "id": "4c30f909-d8ef-4da5-a472-93c076f32390",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6e10769c-650f-4e59-aab9-04c201115151",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2492e9b5-df12-46ee-a841-28fd9f567077",
        "cursor": {
          "ref": "60fc279f-5e28-47b8-b815-239f826498a5",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ffa86576-7f16-44be-b8d6-af9dc89624e3"
        },
        "item": {
          "id": "2492e9b5-df12-46ee-a841-28fd9f567077",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7056203c-8c62-4c38-a682-7fe2f3e9603b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405c7dec-eb83-4814-83f1-0ba15848f21d",
        "cursor": {
          "ref": "15d2ebd2-2dfd-4db3-98a1-a1b28cdae235",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e4046465-7216-44a2-918d-b5bdc7db3f7b"
        },
        "item": {
          "id": "405c7dec-eb83-4814-83f1-0ba15848f21d",
          "name": "identifiers"
        },
        "response": {
          "id": "132252ef-2cfe-471c-868b-26b63f50fde6",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d98476-be58-411a-83a4-b2ca32f1cc67",
        "cursor": {
          "ref": "06788bf2-0a43-46ef-9b31-9d89024e9398",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "40bbaf83-cbb6-4cf6-a2a9-ce00bc68d504"
        },
        "item": {
          "id": "50d98476-be58-411a-83a4-b2ca32f1cc67",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a1e8544-7e31-41cd-8259-a2f6c5ea6e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39683f51-cbdb-4f33-8091-b996bde201ef",
        "cursor": {
          "ref": "17184bbc-b779-4594-bbf2-52a5fd538224",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e0616afc-d011-4d9c-aa8d-81ba407a1c2b"
        },
        "item": {
          "id": "39683f51-cbdb-4f33-8091-b996bde201ef",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "75e8ad23-93e2-4f4a-aab0-047153a0fcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56534b1c-072f-4ed8-a287-88f05c2a180e",
        "cursor": {
          "ref": "7657596f-5f62-401e-9f8c-afa5325a33c4",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "757a8a59-a3d8-44c2-9bf2-51a8e54c05bc"
        },
        "item": {
          "id": "56534b1c-072f-4ed8-a287-88f05c2a180e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2cc99dcd-171a-45b8-8763-9b945b78fbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c51052-a503-4b55-b890-88e833a22aac",
        "cursor": {
          "ref": "90d2db84-fb93-4325-a7fd-6b71656826d4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71326207-7f63-4381-8fc6-71df070aa5d2"
        },
        "item": {
          "id": "b0c51052-a503-4b55-b890-88e833a22aac",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e3e5489a-01f6-4efa-80ec-4882bd064b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfbe601-6f32-4da3-845c-d40e2afc8850",
        "cursor": {
          "ref": "7f58c8b6-a8d3-47ac-922c-868227c58a6c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9b5b89f4-f5ee-4055-9cdf-5e6a517cf017"
        },
        "item": {
          "id": "4cfbe601-6f32-4da3-845c-d40e2afc8850",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "18aff7e4-56a7-4f73-9a81-ad0a6c45bf34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45683c07-d452-4f48-a2cd-507c1b239db6",
        "cursor": {
          "ref": "9729ca2a-c66c-421c-81c3-5e8c58a779cc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dce715ae-5c92-4fdc-bfcc-a716c30a6650"
        },
        "item": {
          "id": "45683c07-d452-4f48-a2cd-507c1b239db6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "155dccde-e04d-469b-ab33-2c2ba7efedf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc9895d-cffb-40ae-b459-e8f83d74568d",
        "cursor": {
          "ref": "c3cb0dd0-21b5-497d-9913-285250ca1e52",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5838381c-b24a-457b-a38b-1554b80fb07e"
        },
        "item": {
          "id": "3dc9895d-cffb-40ae-b459-e8f83d74568d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ca8b1133-a7f0-4908-9d9a-99086163e9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62806fdf-13d7-4edf-83ef-ddaf53fa8980",
        "cursor": {
          "ref": "20320332-d745-4766-b3cc-32f50facb985",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c903a907-4bfb-493c-860e-923ebcae0531"
        },
        "item": {
          "id": "62806fdf-13d7-4edf-83ef-ddaf53fa8980",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "60a2b6e6-496f-4a03-b0d3-2949d583a394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f3663e-6fc2-4aee-bda1-f9d2e6644a0d",
        "cursor": {
          "ref": "203ae76c-fb24-4a7f-ac3c-05cc5f748f56",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3f37bb8d-7b7c-40ad-9b56-8d723263ddfc"
        },
        "item": {
          "id": "87f3663e-6fc2-4aee-bda1-f9d2e6644a0d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "af2c7120-d240-4bc1-9f58-d7dce33812b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626af425-90e4-4a38-9db8-37f8788ab33f",
        "cursor": {
          "ref": "69864993-a5e4-4f32-8264-c3040650f5ed",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "360fd378-91ba-4763-91d8-ea9d287453a2"
        },
        "item": {
          "id": "626af425-90e4-4a38-9db8-37f8788ab33f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "da81893b-bf86-40be-b254-9aa1e8e525fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29cbc40-e641-4b45-b66e-3353b2a214a1",
        "cursor": {
          "ref": "9aa7424a-fe44-4c09-bed3-1527f423ac98",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "23bf7a89-2c09-47a8-994c-5798f5b97815"
        },
        "item": {
          "id": "a29cbc40-e641-4b45-b66e-3353b2a214a1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "60fc7d96-0fb1-4e62-bded-f27523663380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcb6e9d-df0e-4822-b081-ebaea53fd3b0",
        "cursor": {
          "ref": "fa6622f6-20a3-45af-a8c7-25446e70d116",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "eb843d5c-1342-4594-a5fb-ec33e13c78c0"
        },
        "item": {
          "id": "bfcb6e9d-df0e-4822-b081-ebaea53fd3b0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ba06b558-9a97-4511-8201-8b0f050a7d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb82fb5-fdea-49be-af5b-f8505cae3e17",
        "cursor": {
          "ref": "2bac5b3b-4ae1-4e9b-a825-51c35efccf2a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4d8d9a53-104b-4d86-86aa-05d13e1d02d3"
        },
        "item": {
          "id": "fbb82fb5-fdea-49be-af5b-f8505cae3e17",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3e30a52a-b7e9-408d-8bf3-0451a6840b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5ac02d-9523-4a78-8113-008d7788aa61",
        "cursor": {
          "ref": "802a1c71-c320-4995-8bca-33e3943f8244",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "eda41c43-76bf-4ca4-9a73-3a5bda753934"
        },
        "item": {
          "id": "1d5ac02d-9523-4a78-8113-008d7788aa61",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "131a6037-38cb-4868-b4ff-a14a12e74e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87847cb3-c5d8-446a-95df-3fd04e65da95",
        "cursor": {
          "ref": "44823846-0a29-4548-9560-7e133040e268",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f449ac27-5df9-4e05-9896-6f62e283095f"
        },
        "item": {
          "id": "87847cb3-c5d8-446a-95df-3fd04e65da95",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "51a2421c-a42f-412e-bea3-7b5aed428319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d77552-1c1f-4192-9951-d278a47deb61",
        "cursor": {
          "ref": "7df037ad-2f34-4f96-9b2f-e8528a72d216",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "404c1d5e-4519-42ba-9df9-a1383f05de07"
        },
        "item": {
          "id": "c4d77552-1c1f-4192-9951-d278a47deb61",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b31cf81c-da40-46b5-9648-ca557114baac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6edccf-b007-4c74-8536-a212db2351b5",
        "cursor": {
          "ref": "cd45222a-0414-4966-ba81-f48f4eea14bc",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "55114d7a-6745-48e9-bf19-7a8104b7c3cd"
        },
        "item": {
          "id": "3a6edccf-b007-4c74-8536-a212db2351b5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b516c74b-75fb-4144-8d9b-766f4ed5a360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2903132-9c60-41f1-8ba2-7ad8f7057d3b",
        "cursor": {
          "ref": "76af65fa-d518-4c81-a9f6-71635583e580",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2d9fa3b8-b638-4e0e-874b-fd1241e17ab3"
        },
        "item": {
          "id": "e2903132-9c60-41f1-8ba2-7ad8f7057d3b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eeb8a1e4-8ef9-4c5a-9c86-2536250ca699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7bbc43-282a-49ab-aaab-7a92d2e4d3a6",
        "cursor": {
          "ref": "f99ddd09-b289-48e3-8436-f7a4a1920fcd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2c11768f-22c3-490f-bb63-4334a127f869"
        },
        "item": {
          "id": "4b7bbc43-282a-49ab-aaab-7a92d2e4d3a6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e0ebee97-703e-431c-a777-ffd8bef78ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f40d10-9f90-4c26-b2d4-d533e6cff532",
        "cursor": {
          "ref": "aadd7213-fef7-42b9-943f-8cca625fd036",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "40109b28-b8fa-4a13-8771-45e89ff97898"
        },
        "item": {
          "id": "50f40d10-9f90-4c26-b2d4-d533e6cff532",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "361194c2-8e7e-4b1f-b632-6dedcf190fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84801a42-e24b-46a3-b4f4-eac2c2fccd20",
        "cursor": {
          "ref": "e9262c47-f480-4d9d-b98a-c270fdef1394",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1d147d82-a1ab-4164-a5e1-7948963f2413"
        },
        "item": {
          "id": "84801a42-e24b-46a3-b4f4-eac2c2fccd20",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9b4bc017-2ed5-4c1a-8c1d-e4f3573ae01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6168500c-2ca1-4629-b7ed-63d7e25d46e2",
        "cursor": {
          "ref": "7e741327-6f6c-4416-95ff-6ab5d3c3d513",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "22ec0051-65f8-4f4e-a6c4-448fcfadb019"
        },
        "item": {
          "id": "6168500c-2ca1-4629-b7ed-63d7e25d46e2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "367c2301-194d-4895-80d5-273488ca5fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f8fca0-2172-4cdd-b9f6-dd2542f80163",
        "cursor": {
          "ref": "a94ae8fd-c0c9-4c77-920b-9d93761e2096",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c57ec5cc-11e2-485b-9b20-c9376759707f"
        },
        "item": {
          "id": "06f8fca0-2172-4cdd-b9f6-dd2542f80163",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8bb3e85b-0368-41a9-bc60-9ebc59b78481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293b6b52-8bf4-4e07-a96f-d242d83bb689",
        "cursor": {
          "ref": "99b9a52b-cfd8-485e-9bd6-6a83507576cd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "64ec78dd-988e-474b-a143-de78d21fe901"
        },
        "item": {
          "id": "293b6b52-8bf4-4e07-a96f-d242d83bb689",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fb63fe8c-e538-400a-8f81-ba5a9734d7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bf4b4a-bd81-4228-8c70-11f9af680c60",
        "cursor": {
          "ref": "a3de4899-44a5-4f17-822f-89e0c95513bb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1ce1fcc8-e7af-470d-8b17-ca634a744ce4"
        },
        "item": {
          "id": "e0bf4b4a-bd81-4228-8c70-11f9af680c60",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "be0c1792-0f81-4b5b-afe0-d4aab1fc77d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d848fb06-b535-400a-974e-00e89db7e728",
        "cursor": {
          "ref": "b65dffee-6587-4f3a-a0ad-ddf79cad40e1",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4b220000-1faf-4af8-89f1-3bc6e1c72150"
        },
        "item": {
          "id": "d848fb06-b535-400a-974e-00e89db7e728",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9ea49baa-8f0f-4083-bd91-4f615cb3fdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7581734b-b10a-4ebc-931a-cf6e19d351bf",
        "cursor": {
          "ref": "e11bcba7-f62b-4a91-883d-abd54106883c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d516fb99-4dad-4814-b6c7-2247988208dc"
        },
        "item": {
          "id": "7581734b-b10a-4ebc-931a-cf6e19d351bf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9b96c0be-8414-459c-a936-c95d2b2ba8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3b0a50-aaad-403d-8a97-42644bde5c4e",
        "cursor": {
          "ref": "0412303c-ae76-4a29-890e-4570104df845",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cf7c9e4b-50eb-4612-b33a-f7df29fffdf1"
        },
        "item": {
          "id": "db3b0a50-aaad-403d-8a97-42644bde5c4e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9f2cdeaa-b9b5-4d60-84bc-c456898b2d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059ef9a1-f720-4907-a6a3-30b371d0586a",
        "cursor": {
          "ref": "5347adb2-01b4-40ed-b121-136dc1ca9525",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fe2835ef-3079-4dad-815d-721b3a99c421"
        },
        "item": {
          "id": "059ef9a1-f720-4907-a6a3-30b371d0586a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0553a9b-59a5-4933-b266-b517205c282e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c929497-2a60-4284-8875-b56515b20543",
        "cursor": {
          "ref": "f43f4be2-19b6-45a3-8d4a-a519dd5b7673",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1b3dc746-448f-4bec-8461-6d0dc13af5e0"
        },
        "item": {
          "id": "2c929497-2a60-4284-8875-b56515b20543",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cb915f55-b6e0-40a3-8c6e-4ec48a5a9e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7080a8-7750-4ce1-a9ff-9e331c74c10f",
        "cursor": {
          "ref": "35ad4614-e769-4d72-b3a1-6fadc386776e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2bde816b-3bbd-4a32-8de0-db8407d9e6d0"
        },
        "item": {
          "id": "9e7080a8-7750-4ce1-a9ff-9e331c74c10f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d9a91972-1d1a-4264-a8f0-7b2442ff4671",
          "status": "Created",
          "code": 201,
          "responseTime": 503,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "1b0f0bb6-0b6c-4b90-9524-109abf9cc291",
        "cursor": {
          "ref": "aa6aca89-7afd-4bd3-ac5f-8579d890d8c9",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6c9084bc-2813-4625-b866-f8eb1ab9fddc"
        },
        "item": {
          "id": "1b0f0bb6-0b6c-4b90-9524-109abf9cc291",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "301c865e-17fa-44ae-b51d-18ce24f66027",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2c8b4441-24a3-46d7-9abe-654aef2706e5",
        "cursor": {
          "ref": "f9ed9615-583b-44ea-9a43-a67b567faaa6",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "33b5685f-20ca-4983-a701-9b2dc830a3eb"
        },
        "item": {
          "id": "2c8b4441-24a3-46d7-9abe-654aef2706e5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1ac1e58f-727a-4f97-86e2-42a3ba6e1f8b",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f61eb9ba-9d22-4ee3-a73e-485d21b5ba43",
        "cursor": {
          "ref": "499e3117-8593-420b-b1d8-000d4f2f01c4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "641e7a89-de93-4d36-8a81-9098aecb09b2"
        },
        "item": {
          "id": "f61eb9ba-9d22-4ee3-a73e-485d21b5ba43",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "917c52e8-eb1d-4a9c-aea1-dfce453810ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040985d7-d73f-4fd7-bac8-a09e95f04449",
        "cursor": {
          "ref": "288e4ec6-95cb-4827-ac43-5cd63f4d1325",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9604412c-ba89-4c9e-9161-bc316d7c3896"
        },
        "item": {
          "id": "040985d7-d73f-4fd7-bac8-a09e95f04449",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5a282cf3-490a-4e2a-a1c6-8d06a13aa313",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4b5d3c1e-c1ed-4cbc-8fc8-9b8164845075",
        "cursor": {
          "ref": "5a017270-4259-4156-9d5c-840fda8f15fa",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5f087fcf-00ca-4556-86cd-69a8c481ccfd"
        },
        "item": {
          "id": "4b5d3c1e-c1ed-4cbc-8fc8-9b8164845075",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "aaf69700-6748-47b8-8d87-733975a53ce9",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "41b267a2-8340-4428-810a-acb5d3f34bc8",
        "cursor": {
          "ref": "cc72594b-76b2-465e-918b-313607069e14",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "75ebdf91-a94e-4c6a-9023-7d1a5b274c47"
        },
        "item": {
          "id": "41b267a2-8340-4428-810a-acb5d3f34bc8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "317fed79-6a15-45bd-8f3f-a2ffce351f7f",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cb25f254-da21-4488-8c47-8f61bfc2bfe0",
        "cursor": {
          "ref": "b3d73036-52fe-4315-8800-0ed309bb65ea",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6482bcfc-50fe-459f-9638-b349e8b32eae"
        },
        "item": {
          "id": "cb25f254-da21-4488-8c47-8f61bfc2bfe0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "71326251-2636-4271-87e6-fcae3e9e1f42",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "11a23fd0-d732-4387-b9f8-8f6d1d3e9286",
        "cursor": {
          "ref": "86214efd-5c31-4e3c-838a-e9f29f4b4fb1",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1d8ca35b-cc15-47d2-a901-4c0a81cf5ab3"
        },
        "item": {
          "id": "11a23fd0-d732-4387-b9f8-8f6d1d3e9286",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e661809f-50a0-41e6-818c-8aba5b757ea1",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "06d3e969-7a86-4768-a629-9759f874f982",
        "cursor": {
          "ref": "8254e931-7330-46e9-8773-8d893c7b68a2",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07f436bb-bcd1-4dbe-a246-7e955b94ffc6"
        },
        "item": {
          "id": "06d3e969-7a86-4768-a629-9759f874f982",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6b56574e-1f64-40c3-a0c3-93a4f2809b34",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "50cacdff-0adc-4b22-9cab-9a4c8b913598",
        "cursor": {
          "ref": "2aa93456-52e6-44fa-83af-1d4761ab0921",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "876d583b-2423-4fb5-9982-918287548f91"
        },
        "item": {
          "id": "50cacdff-0adc-4b22-9cab-9a4c8b913598",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f6c8dc3d-5bd4-4b78-91a8-75243f6b0aa6",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4ebea7ed-9696-4ffa-baff-8163d00ec58d",
        "cursor": {
          "ref": "c6733f89-f7c9-4bd1-bc19-de13c977c0ba",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f435212b-83d1-4c6e-926f-a9ac9af05c91"
        },
        "item": {
          "id": "4ebea7ed-9696-4ffa-baff-8163d00ec58d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ba77ee46-6815-4e5c-9803-0b82ab231e76",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f29a52da-a264-4b00-8ba5-3f89133dfc29",
        "cursor": {
          "ref": "4972c4cb-6c9f-4688-8640-76db3b921c6e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a286a135-cd8e-4973-a3c7-a06feca342d1"
        },
        "item": {
          "id": "f29a52da-a264-4b00-8ba5-3f89133dfc29",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2ee8513a-32c8-4d3e-81b1-ba59bcc7878e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1e363438-df27-4961-aefd-1daf8a4becd4",
        "cursor": {
          "ref": "494d386e-831d-419a-851b-137f9aa384ca",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8e20c673-b60a-45df-bc80-58f9c45d6a5a"
        },
        "item": {
          "id": "1e363438-df27-4961-aefd-1daf8a4becd4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9c14fa4b-3a6c-4cab-93ce-8b2bd459feca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952d3e30-0e72-4b0c-ace0-e632dc8c1b2d",
        "cursor": {
          "ref": "91716468-2548-4c08-8454-d94e00b8fe79",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4e0c5a73-3922-4ba1-976c-bc0733f4caf2"
        },
        "item": {
          "id": "952d3e30-0e72-4b0c-ace0-e632dc8c1b2d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "87b75ebd-0610-41e8-b3cd-8f7c56893fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d30e52-d151-4b3b-bab3-0f8e50bf8d55",
        "cursor": {
          "ref": "049a211e-7f8d-4ba9-a44a-e95728f38b46",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c6ef4b9f-6c86-4dc0-9e12-139bcd7ce851"
        },
        "item": {
          "id": "83d30e52-d151-4b3b-bab3-0f8e50bf8d55",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "92455622-eb71-411c-be57-c774c29fc0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51151c9c-e042-470a-9edb-9436a587099a",
        "cursor": {
          "ref": "2282fe8e-6c45-43b0-99c2-fe1ece06caf1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b001f47d-ddff-4e7d-96b5-eae408cdb786"
        },
        "item": {
          "id": "51151c9c-e042-470a-9edb-9436a587099a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f1c7f026-87e7-4711-9abc-cf5a181e465f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131125fd-2df7-4671-a783-a3a6ea90c09c",
        "cursor": {
          "ref": "004fa1b9-6168-41ac-bdf7-023c1fd97a1c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1674aeef-2d61-43d2-a079-f8e0a858f608"
        },
        "item": {
          "id": "131125fd-2df7-4671-a783-a3a6ea90c09c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7449618-68c4-4591-b259-712d14beb32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8cabb8-78bc-4d9c-830a-1057ed50d4a2",
        "cursor": {
          "ref": "533cec66-cd53-43ce-b325-0fb6b4f3b682",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "41e5980a-5eaa-4cbb-8419-3cd495a4e126"
        },
        "item": {
          "id": "3b8cabb8-78bc-4d9c-830a-1057ed50d4a2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "046ad8a4-dc46-497c-8604-e0f4b5a34a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d4a52b-58e5-4690-95cc-c9d7637e4b28",
        "cursor": {
          "ref": "79c013e1-5e45-4ee8-9bb3-855ebeba095a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c332662f-bb53-4dba-971b-239e4737c178"
        },
        "item": {
          "id": "15d4a52b-58e5-4690-95cc-c9d7637e4b28",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5abb5b7f-b9e9-462b-b8db-c4a10d57d7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07a52a2-7610-45e2-b614-a3d7aa0d9fb5",
        "cursor": {
          "ref": "078b408f-7e41-4d41-a25e-5dc373d59c3d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a7a0b297-fc95-4688-b0b4-0e5c75798ea5"
        },
        "item": {
          "id": "d07a52a2-7610-45e2-b614-a3d7aa0d9fb5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "88c0db29-7b89-4b60-a862-bcca5962cb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dfcdd4-ca23-495d-8cd5-13e14864d68a",
        "cursor": {
          "ref": "32a70753-2f9c-4f25-b8de-22bd66e464a8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2d0ba779-5ae3-4634-90f8-5c183474f7c8"
        },
        "item": {
          "id": "87dfcdd4-ca23-495d-8cd5-13e14864d68a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "169b67fd-85de-44f3-94b6-a026ed4b8b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6410b7e2-db78-4dee-a81c-81b9eb8cd14b",
        "cursor": {
          "ref": "b821a592-fc38-480c-80fa-c314cdf54fbf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ac7da74f-d2ce-40d9-993a-a82be5426059"
        },
        "item": {
          "id": "6410b7e2-db78-4dee-a81c-81b9eb8cd14b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b110e5ab-a0a9-4224-91f3-ef7636580ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f42de34f-45ad-4844-a0c3-f1e98e2c4e11",
        "cursor": {
          "ref": "dff8c125-f2fc-4bb7-a08f-022d39781115",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dc1bbe61-74ec-4a32-a1e8-56824bb8a743"
        },
        "item": {
          "id": "f42de34f-45ad-4844-a0c3-f1e98e2c4e11",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "58b4199c-d4fe-4bcd-b44c-7c3fa5efee83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd43eeee-d178-4167-af6c-44d6c4d9d4fb",
        "cursor": {
          "ref": "cc4260bd-9e99-4687-9e8b-479f90929022",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "31756e69-4675-4e49-99e3-91b8af2267f2"
        },
        "item": {
          "id": "bd43eeee-d178-4167-af6c-44d6c4d9d4fb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "50fe72d4-a858-45d2-9544-43dbfaf3a539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f230692-5837-4f36-96a4-afe0dd3ff819",
        "cursor": {
          "ref": "a2a57445-cb3d-4fda-8a0c-0db4263a3d20",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fa060d0f-8694-429c-b02d-70de502b54fd"
        },
        "item": {
          "id": "8f230692-5837-4f36-96a4-afe0dd3ff819",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "049553c2-6f9c-4b5e-b106-b846a19a5689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd563a5b-fb35-4105-9ca0-1d357abcbc15",
        "cursor": {
          "ref": "90c22af3-84dd-44de-a90d-ac6afd5ec7e1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "26c10d0b-6ea4-4321-b908-c8a5846262ff"
        },
        "item": {
          "id": "dd563a5b-fb35-4105-9ca0-1d357abcbc15",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c94ee75d-e7fa-4d7e-8f96-5194dc67f558",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "66724a7c-0c33-44fd-a558-3dd05c351eaf",
        "cursor": {
          "ref": "f33b81f4-6d7c-4d75-93d7-1437cc2bccb3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "105fb1d8-d33f-456e-a06b-085b5d035fd3"
        },
        "item": {
          "id": "66724a7c-0c33-44fd-a558-3dd05c351eaf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bb76c991-bdea-4a29-a460-4f54584fc089",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c45a150d-bcb9-44fa-a699-7b7d64e9e349",
        "cursor": {
          "ref": "b18ef7f3-9369-4aa6-bb6f-7907772bc2e1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ae85b362-4e2e-4dc5-a1e5-ba3db759b47b"
        },
        "item": {
          "id": "c45a150d-bcb9-44fa-a699-7b7d64e9e349",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13ea5c61-c34c-4410-8a05-1eebb679512c",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "22864836-93f1-4fd7-a1ea-a08e64e1ce80",
        "cursor": {
          "ref": "6bd5321c-81b9-4ecf-8888-f6ee54b504b0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4aa755da-dfd3-4463-bbdd-622990e994ec"
        },
        "item": {
          "id": "22864836-93f1-4fd7-a1ea-a08e64e1ce80",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7df9abf9-7f7e-4e7e-81a7-aca4432a9c67",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6553c4fe-5ced-46d8-8741-509159a2ef2b",
        "cursor": {
          "ref": "77c5feb4-e9c4-414c-b936-1efcbd9a4e96",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45b19909-3920-4223-92c6-461b8f074237"
        },
        "item": {
          "id": "6553c4fe-5ced-46d8-8741-509159a2ef2b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8d2e1f9a-2c0f-4faf-bd84-378d19029472",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4134bea2-b524-486c-a029-76076429fccc",
        "cursor": {
          "ref": "4f75ef1f-8cc3-458f-9942-3d7d4e0228d9",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "361cef38-899b-40a4-8a3f-80a8505294d0"
        },
        "item": {
          "id": "4134bea2-b524-486c-a029-76076429fccc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d64fdbc3-8f46-4400-b4fc-77b8ebe73225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f14d9c-54dd-4c34-b37b-23d075a40dc0",
        "cursor": {
          "ref": "2d2b2bc5-7164-482d-b0f0-3895cb42542a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c5c4458e-13d1-421d-8b2d-84925c2ccc82"
        },
        "item": {
          "id": "d9f14d9c-54dd-4c34-b37b-23d075a40dc0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "22e9a774-709f-4451-98e7-64bddbc1232c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ffd227-d84c-4768-8e13-62b587e44c07",
        "cursor": {
          "ref": "72b0726f-9a93-4902-ad06-d4896fbb4f21",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a10922be-2f2b-4ef3-9af5-3430bb61f1f8"
        },
        "item": {
          "id": "a3ffd227-d84c-4768-8e13-62b587e44c07",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5e869517-b704-47c9-8019-2fe8a91578be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d051780c-186f-4755-afea-1bc86813e796",
        "cursor": {
          "ref": "4e36d4c3-41d0-4933-a291-18b01f435909",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "88639aa1-75f9-4c0f-8c39-0ece00fe5fa5"
        },
        "item": {
          "id": "d051780c-186f-4755-afea-1bc86813e796",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "39990430-ed22-46ec-8f11-c11891fafbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7aae966-68e5-48ef-ace8-620c654f747c",
        "cursor": {
          "ref": "39c2c77f-60c5-4e86-899e-03841fee3ee9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c9da3295-8d33-4168-adf9-58f976adb69c"
        },
        "item": {
          "id": "b7aae966-68e5-48ef-ace8-620c654f747c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d3ae9604-4255-44a5-bbcf-c8c8d76beb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f846bf30-0a7c-4f52-9a78-a9c0a2d6602f",
        "cursor": {
          "ref": "bc62fa16-aabb-4d47-b8bb-f117b748fe08",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "75bd0437-4949-4221-b599-1b9f28a7815e"
        },
        "item": {
          "id": "f846bf30-0a7c-4f52-9a78-a9c0a2d6602f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "47eebfa1-2994-4b0e-ba88-90dfaef1f476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83583ae2-7767-4e6e-8283-1b1c8259e406",
        "cursor": {
          "ref": "b3dc9e8e-3dc1-4a2b-8457-5a9da50d2e69",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "223290e4-e42c-4058-a10f-e4fc65afffd1"
        },
        "item": {
          "id": "83583ae2-7767-4e6e-8283-1b1c8259e406",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f13ddd3e-ef03-4315-8f25-e698f6240c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166afe33-f881-45e9-855c-8387701623cd",
        "cursor": {
          "ref": "82969a09-7c83-401b-ad70-d5ed8a74c297",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "16b2ef0c-5aa5-4aa2-9ed3-4a4895fd49c6"
        },
        "item": {
          "id": "166afe33-f881-45e9-855c-8387701623cd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "450ae25b-3d4e-4b5b-b25d-3417ca4a26a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddc3e26-3ed1-4c2c-83ad-ef32235183a8",
        "cursor": {
          "ref": "378ad9bd-0049-4a10-afbd-228912ec8338",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9f218c6d-4262-4e5f-9195-dca80ab58b36"
        },
        "item": {
          "id": "8ddc3e26-3ed1-4c2c-83ad-ef32235183a8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d21aecf8-4138-429d-a86d-0e4ec50ffd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcbb34c7-6ace-4f3f-b671-e6adc9b4846f",
        "cursor": {
          "ref": "40b7d4df-6347-4c20-9c91-f132a36daae7",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b84116fb-dd83-47ee-973a-8ca758859786"
        },
        "item": {
          "id": "dcbb34c7-6ace-4f3f-b671-e6adc9b4846f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0df78315-a805-4a03-bce2-be69edcc7969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3843c561-287f-4c0f-8191-e0e65b7a88b6",
        "cursor": {
          "ref": "f5889afd-6c4f-49e8-a0b7-3fda78bf6056",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "765b45fb-7a5d-43da-be90-2ecc60d98393"
        },
        "item": {
          "id": "3843c561-287f-4c0f-8191-e0e65b7a88b6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "09160b03-ab8c-44b5-8fc8-918d07aaa64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752debe8-f35f-4ce4-9e44-aaff495b790a",
        "cursor": {
          "ref": "f1a2584e-77e2-4ce9-8057-0f10c743cd37",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8025287f-2b5f-4671-8935-fa54e43f8ee3"
        },
        "item": {
          "id": "752debe8-f35f-4ce4-9e44-aaff495b790a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "755c99e8-e276-45ac-9519-00f9c3f313c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01383066-130f-413c-83bc-80fd6de5853e",
        "cursor": {
          "ref": "87617c96-9b9b-4776-8902-1be8de6d39ef",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fbc2d5e3-556c-435e-911e-62781e353f40"
        },
        "item": {
          "id": "01383066-130f-413c-83bc-80fd6de5853e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "80193353-72dd-4b30-a611-430c9c1a015e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a00176-23f6-4301-a486-25e1c9af8efd",
        "cursor": {
          "ref": "5dabbddf-a822-4de9-bf8a-1ba03ea6ba1b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "86ee4209-74e5-4c7d-96b9-22872ee7a5b4"
        },
        "item": {
          "id": "33a00176-23f6-4301-a486-25e1c9af8efd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3c7d5f31-f06d-4279-acb6-20697471e70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4044c400-a376-43d0-b978-084376b9d3ec",
        "cursor": {
          "ref": "f328d9d5-bc5c-43c3-8c3e-d40910065856",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "68a5546a-bdde-4656-b3b5-eea94df67f7c"
        },
        "item": {
          "id": "4044c400-a376-43d0-b978-084376b9d3ec",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "58197e63-4c60-41af-b268-3a34f6ec8b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf510cfe-1b1e-4939-b34a-6fb35e7de06a",
        "cursor": {
          "ref": "d7e09433-faeb-4ec8-8a6e-631f2431d600",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4425c77a-7cb8-430d-81ef-db4a45e2b707"
        },
        "item": {
          "id": "cf510cfe-1b1e-4939-b34a-6fb35e7de06a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d271754a-3401-4b75-b80c-8bd3d80c8a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c4f4d1-2f1a-4412-b303-e4815c3a8c11",
        "cursor": {
          "ref": "6e3f0ca9-5d1a-4929-a31d-833467058c27",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c167dbbc-4e72-4b37-afaf-d4277e5149bf"
        },
        "item": {
          "id": "37c4f4d1-2f1a-4412-b303-e4815c3a8c11",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a317ec7a-4ce8-4202-8376-40ff32c7ab2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7638d344-677d-4ac1-b690-1d4a94525cc5",
        "cursor": {
          "ref": "c8ef03db-a4f8-48f1-aa13-0c51699e7f90",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "42660861-4e26-452b-8db8-6b24254d680d"
        },
        "item": {
          "id": "7638d344-677d-4ac1-b690-1d4a94525cc5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5d9f3bec-bce9-46b2-8d2d-27dc6c9bf39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228ce2f0-65a8-48f2-a8ba-96a0f86afe65",
        "cursor": {
          "ref": "53f3a233-1121-49c1-83b8-3772fde12e86",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "277b4ae9-25c9-41a7-a564-8988951a9ec7"
        },
        "item": {
          "id": "228ce2f0-65a8-48f2-a8ba-96a0f86afe65",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "05744682-5e30-42a8-b8eb-baec916e1ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3c247c-fe55-47dd-8ebe-58de5034b45a",
        "cursor": {
          "ref": "26d85c98-8569-4efa-9ef2-ff7fbd9dcb41",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "82932e11-ceea-4f92-a423-d6ceeabc6a7f"
        },
        "item": {
          "id": "3e3c247c-fe55-47dd-8ebe-58de5034b45a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "83a709c9-285d-45af-b3a9-289aa8a753a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ded94c-af23-44c4-9047-351162517fcf",
        "cursor": {
          "ref": "10e00a49-fa33-48d4-8d0d-c3b839c32bb6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f123fb3c-1612-488e-8e3a-ede579f6b05c"
        },
        "item": {
          "id": "22ded94c-af23-44c4-9047-351162517fcf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "59ece5b1-3cc1-4ba9-ab3c-e492d46c527f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee58d8b-7869-43de-adc8-95d891368f08",
        "cursor": {
          "ref": "c5674e77-48a5-47bb-8d23-edc1758cb968",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "05f221fa-29ad-4230-942b-3ba3fd6c0f12"
        },
        "item": {
          "id": "dee58d8b-7869-43de-adc8-95d891368f08",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d6814fb8-198e-425c-adf8-41d18a0da425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6873e8b-1642-4153-a467-071e6c9afb8f",
        "cursor": {
          "ref": "16dced65-11b0-4a08-aa91-fb6af16646a8",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "507efc5d-9909-41b6-b71c-53750c03cd18"
        },
        "item": {
          "id": "c6873e8b-1642-4153-a467-071e6c9afb8f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f02d6cca-0114-4b03-89a5-2b5b95885649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacba6e7-943d-461f-8810-e69c61541d76",
        "cursor": {
          "ref": "80b79b69-2d52-4dbf-a15d-a47075eb4b5d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6b2acc53-3a3a-421d-8bb7-e31f2ac18e16"
        },
        "item": {
          "id": "dacba6e7-943d-461f-8810-e69c61541d76",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b96396bc-fe50-45a6-b0b9-3c3c6b6bd6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac09622-6b47-4239-892b-e7f47a7e13c8",
        "cursor": {
          "ref": "1c2be7b1-07c1-4f35-bb49-1ec5a97cb30d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b0532b5b-aabe-4d8a-94c5-5fd2392ec73e"
        },
        "item": {
          "id": "0ac09622-6b47-4239-892b-e7f47a7e13c8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef8bcfeb-0f99-4a32-ae3a-2cb67e627ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3987c3-41e2-4a31-be0b-043dbf71f365",
        "cursor": {
          "ref": "96f45b1e-9590-4bbc-9e9c-b503031ca52b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c6fe02db-1559-4406-b1e5-cb333726f4e9"
        },
        "item": {
          "id": "ea3987c3-41e2-4a31-be0b-043dbf71f365",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b79bc3f9-f640-4858-b78e-fbd4ee00384a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13778703-890f-4a04-bdd4-77c50ceab4ed",
        "cursor": {
          "ref": "e2c3436e-8934-4b05-ad13-ee67fa938158",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f178b0dc-b88f-4f85-9a63-03a816e73bbc"
        },
        "item": {
          "id": "13778703-890f-4a04-bdd4-77c50ceab4ed",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "27dd552f-0ead-4601-a121-1ed8d989a9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725ef2e4-bad6-48f6-a34a-9705a91e3b29",
        "cursor": {
          "ref": "a8819c17-4585-45a7-b2d3-c3b3fb50862d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a69fd54-451c-4d2f-9eea-a1deb3a9cac6"
        },
        "item": {
          "id": "725ef2e4-bad6-48f6-a34a-9705a91e3b29",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9064a807-6665-4384-a36f-66b85a18de80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024bc95c-e2ad-47b7-9e37-a275530d6292",
        "cursor": {
          "ref": "93b8da81-bfc4-494a-a214-9d68be87dcc4",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fd13dedb-9b1a-4b0f-b660-088700e9e39d"
        },
        "item": {
          "id": "024bc95c-e2ad-47b7-9e37-a275530d6292",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8cf567a3-a8e0-4738-b99b-031077dfe07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2ee7d6-41cd-46ca-bd5d-e7d51d83cc11",
        "cursor": {
          "ref": "9d8d616f-843f-4731-ad3c-70b71a7efb44",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5973c494-60a3-4fd8-9a64-4556afaf7625"
        },
        "item": {
          "id": "cb2ee7d6-41cd-46ca-bd5d-e7d51d83cc11",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "43d0381c-b4d6-4126-858e-4cd8ab739cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b31d096-4edc-4d61-b454-ff8f79d27f6f",
        "cursor": {
          "ref": "30ae892e-392a-469c-80f6-98ed3dad9fd4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f76f5e6c-19d1-4645-a3ba-e194cb10a162"
        },
        "item": {
          "id": "7b31d096-4edc-4d61-b454-ff8f79d27f6f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "32537802-075b-40be-868f-35bd83d4afc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3714ce23-03da-49b4-b70f-30e4f1134cfe",
        "cursor": {
          "ref": "ddcd07ab-fbd5-491d-97b4-89df39de764d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0479e86c-ad44-416a-acd5-cff92fc673d3"
        },
        "item": {
          "id": "3714ce23-03da-49b4-b70f-30e4f1134cfe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "51177656-18ac-4820-9530-b750f20ea790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9a11f3-8923-4128-a0d6-a99b11b6cd76",
        "cursor": {
          "ref": "ff28a874-41f8-470c-9dbc-bf1ebfcb9004",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4b3169e1-2fb5-46d1-b056-258255fb1ac8"
        },
        "item": {
          "id": "fa9a11f3-8923-4128-a0d6-a99b11b6cd76",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "06023b77-48a8-4c94-a051-dac3985aad82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "bb280991-7dd8-4810-94b1-a19576b49c4d",
        "cursor": {
          "ref": "c5b257d4-9aba-46a7-b0f2-8be26c28cc8a",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2b5868d8-0782-47e6-beeb-34eb0611337a"
        },
        "item": {
          "id": "bb280991-7dd8-4810-94b1-a19576b49c4d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "624316b0-3b2e-4005-8bc0-5de0f7d87d79",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f08b01b-5a61-49ce-b076-84d7c3467d06",
        "cursor": {
          "ref": "dff96230-6eb1-42ee-aa02-bdf22f155156",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "642fe4f6-e2b6-4d68-87e9-60c695a397c4"
        },
        "item": {
          "id": "7f08b01b-5a61-49ce-b076-84d7c3467d06",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e70efd53-d3f5-421d-98b4-76a34e72671f",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e8c5ed-4f8c-44de-a9f2-fc3580a82f1c",
        "cursor": {
          "ref": "504d2002-7aec-4108-850d-17d1ccd76d22",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4d335e02-9d69-4b7b-aeae-ef97d19dc9a6"
        },
        "item": {
          "id": "13e8c5ed-4f8c-44de-a9f2-fc3580a82f1c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dc4324c1-b8a6-4b08-9393-4a7b3104f27e",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "af39ecbf-dd19-4efe-9a0b-53af52ae059f",
        "cursor": {
          "ref": "f11f3f75-d82a-471a-ac7d-445d3afbb6bc",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "693a404a-0f2d-45d8-9150-7134b77e9831"
        },
        "item": {
          "id": "af39ecbf-dd19-4efe-9a0b-53af52ae059f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8e422018-4ee0-4d1f-abd7-603aa298732f",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1727ea59-2262-4549-b689-c53d229e9089",
        "cursor": {
          "ref": "33891717-0d87-47a9-b91e-0f17266c2eef",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5ca90b91-168a-44d8-81b9-c848f4d03c43"
        },
        "item": {
          "id": "1727ea59-2262-4549-b689-c53d229e9089",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a605fed6-e7af-48c2-aa29-d3ba3e59d8e1",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-06T00:35:30.013Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-06T00:35:30.013Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f9059698-df87-437c-846a-737d9ebbbf62",
        "cursor": {
          "ref": "c0adab15-a609-4f4c-b914-4ffd54283e2a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e9bc86ce-a4d7-4882-a9ab-15d40dcf67c0"
        },
        "item": {
          "id": "f9059698-df87-437c-846a-737d9ebbbf62",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dd66f470-a38f-4660-9c27-ad3b31441d7e",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fe08b0-20f4-4fb4-97f1-e54f8c2c6780",
        "cursor": {
          "ref": "4690164f-23f7-41fc-a165-8630a15c7253",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "be7ec833-3e7c-4ec0-b947-c251a9336a95"
        },
        "item": {
          "id": "18fe08b0-20f4-4fb4-97f1-e54f8c2c6780",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3faaba59-52c9-4015-8c4f-8842cc516379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b5ce36-5f44-4cf1-b0ce-858428c00486",
        "cursor": {
          "ref": "925a1a32-18c2-445e-b4f6-815368e0228d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "57a7e8f0-5fb2-43fa-9f0d-7953bc5435ec"
        },
        "item": {
          "id": "47b5ce36-5f44-4cf1-b0ce-858428c00486",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f215219c-9455-49d4-859e-1f4ae2e77632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea5e185-44f5-430a-b560-896a98c86212",
        "cursor": {
          "ref": "f060002f-fcf4-4cfc-8fbd-2663b06bb74f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f2d0e557-6885-4546-8f5f-61b5bfbb6395"
        },
        "item": {
          "id": "2ea5e185-44f5-430a-b560-896a98c86212",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9673f11f-35d9-479e-a7be-569f83182c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a201186-701b-413d-b343-f1977341e4b3",
        "cursor": {
          "ref": "1d7dfa4a-c586-4dcb-a850-38967ccd5a9b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "71ea9ce7-eb7a-4c31-a8dc-dee8b2fa7b50"
        },
        "item": {
          "id": "0a201186-701b-413d-b343-f1977341e4b3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "223db898-317c-4867-8102-fe958950f59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45060789-3107-4782-a766-0ca05b228e31",
        "cursor": {
          "ref": "ed8d245b-59fd-4b9a-b4ad-cd59a87260c7",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "47e0c6f7-c5b5-436e-a968-416d76cd1813"
        },
        "item": {
          "id": "45060789-3107-4782-a766-0ca05b228e31",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ac990c75-42b3-4679-9ce5-bcdb53080a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c27f86-add2-49ff-8ceb-ee42f91ab44d",
        "cursor": {
          "ref": "9d4b2062-7e60-49b3-99fc-7bc9db55dc9c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fde26ac7-d13d-46ef-b1d9-203988dbc1e6"
        },
        "item": {
          "id": "43c27f86-add2-49ff-8ceb-ee42f91ab44d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ce9b31e7-725b-4e4b-827e-48218cbf06f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063d3ef0-61fb-438f-b2a3-88f8058664ba",
        "cursor": {
          "ref": "2963ee1f-dd89-43ad-864b-f28367a36c54",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "108f1057-e7ad-4225-818e-5d42656fa3c3"
        },
        "item": {
          "id": "063d3ef0-61fb-438f-b2a3-88f8058664ba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d440d0af-ceaf-4dff-97c2-b079ed8d6f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161f78e6-d634-4eea-8c0b-bd2b0597e9f6",
        "cursor": {
          "ref": "09f89328-bcda-46fe-9a4b-7b0a7eac9a78",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3cb7b3fb-50ab-4e2f-9f0c-56d0f1823591"
        },
        "item": {
          "id": "161f78e6-d634-4eea-8c0b-bd2b0597e9f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b60aeb27-b905-47ca-a903-0077805ef2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689879fc-72a1-436e-8977-7d12b79c4c13",
        "cursor": {
          "ref": "28c73257-81ef-4fa6-a55f-2e0c50ab9ae8",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b8ff4b06-9bcd-4248-b8d6-92c7a2b16c40"
        },
        "item": {
          "id": "689879fc-72a1-436e-8977-7d12b79c4c13",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "908e9eca-715b-434c-a83a-070b95b03460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2b224d-6a05-4214-a21d-ab339c708f15",
        "cursor": {
          "ref": "3b0ec35c-4fdd-46a2-af6d-bcbaefef0d53",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ca3ee687-fb64-4711-aca1-33aa68ead8c2"
        },
        "item": {
          "id": "da2b224d-6a05-4214-a21d-ab339c708f15",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0f0de90-9234-4d9c-bf83-5e3f466e0b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204a5eea-fd22-46c8-8de1-61bb4506a9be",
        "cursor": {
          "ref": "41a28ad6-9b45-4359-a402-e7e30f97fc23",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1df946d4-29b7-4b54-8780-1f7fcdf94ad7"
        },
        "item": {
          "id": "204a5eea-fd22-46c8-8de1-61bb4506a9be",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "47aa5dce-0d58-4128-9436-cf159a96933f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d66c6ce-2d77-430f-861b-28125305bc41",
        "cursor": {
          "ref": "0e276aab-e2f8-43fd-b221-bdd09d2936f3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e1cee92b-1a04-4f5e-b0cf-387dd6794510"
        },
        "item": {
          "id": "0d66c6ce-2d77-430f-861b-28125305bc41",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "14127e2d-bacf-4d1f-936a-c07d40e51faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7054d8-74f3-4690-a313-8caca6e4fc0d",
        "cursor": {
          "ref": "a6959c2d-2a5a-49f8-bf41-72205b928c38",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "840cdd62-fb62-4992-8b64-f3018b9332a1"
        },
        "item": {
          "id": "3f7054d8-74f3-4690-a313-8caca6e4fc0d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a9494cca-86a9-47a3-b52c-b6847633167e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c07cf3-0dfb-483c-9e9d-fbf09604a00c",
        "cursor": {
          "ref": "16b69837-1a20-463a-afbf-672a31b4286c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "28becc0d-0f4f-4387-8cf2-cf0d934780ce"
        },
        "item": {
          "id": "22c07cf3-0dfb-483c-9e9d-fbf09604a00c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "083b2b37-f86f-43d3-a6e6-2f4c754ae969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8246742e-16cd-4514-bbd5-4cb7570081b9",
        "cursor": {
          "ref": "719502c6-f862-486e-8f6e-03dcc336b6f4",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6e3dfdc9-15ee-49fc-9eb7-5123c58d446a"
        },
        "item": {
          "id": "8246742e-16cd-4514-bbd5-4cb7570081b9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a3d5abf4-5663-46d3-891c-626d18e54ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a119039-a9a2-47da-a239-d3b6ba009d15",
        "cursor": {
          "ref": "e3dad1c5-509f-437b-bc53-71bdec665eeb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b53e0730-8ddc-4e27-8f3b-57d7192f0df7"
        },
        "item": {
          "id": "6a119039-a9a2-47da-a239-d3b6ba009d15",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "65ba10a1-be83-4dde-9e6f-4245dc93017b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60983882-6cdb-47d2-9446-1aaa12b66d0e",
        "cursor": {
          "ref": "6118ac2e-6b37-4180-819d-8f96c56dc5ea",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "237aad35-7309-421c-8a4e-39faa3a73514"
        },
        "item": {
          "id": "60983882-6cdb-47d2-9446-1aaa12b66d0e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b6778adb-3955-4f9f-9de2-25957d80a4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db519df0-d1b8-4386-9a15-bd403cd95474",
        "cursor": {
          "ref": "fc449380-6e2b-42ea-b4d5-4007f065e576",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b623052d-dd9a-41f9-bfae-eddaebb0da3e"
        },
        "item": {
          "id": "db519df0-d1b8-4386-9a15-bd403cd95474",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3f499c97-0d7a-4b2d-aad2-8d4d6948b6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67e9454-fe4d-420a-986f-f292131ef05f",
        "cursor": {
          "ref": "ff15c5aa-00ac-462d-b04a-7144c5bc6974",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7ca2a221-1727-45c2-b072-581ac8cbfc1e"
        },
        "item": {
          "id": "b67e9454-fe4d-420a-986f-f292131ef05f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ed738915-d99b-4231-b8e3-f51d7f29a9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576f4c28-451f-47af-8dd8-8ff11e99653f",
        "cursor": {
          "ref": "d37df629-fecc-4e5c-8e3e-9b91b59c0ea5",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "632355d8-e2b9-4f35-a71d-a9aba1478a4a"
        },
        "item": {
          "id": "576f4c28-451f-47af-8dd8-8ff11e99653f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2ea557b6-076c-453b-9b2e-40b6086e3ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7f0a51-c5d0-4f7f-9328-751692a40ec3",
        "cursor": {
          "ref": "1cdc8e21-02b8-4c0f-b5a1-5f1f91b5ed3b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2d0baf7c-1c35-4f9e-bb8a-4b3d0390284d"
        },
        "item": {
          "id": "fb7f0a51-c5d0-4f7f-9328-751692a40ec3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "79ca3ca5-66a7-4113-954f-f97f12e815ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfae6e21-6494-4875-88dd-56e8778712aa",
        "cursor": {
          "ref": "e9e310f1-59db-4b17-8221-ac411259a52a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3f69ac01-3f07-46b7-bc6e-06f6b108077f"
        },
        "item": {
          "id": "dfae6e21-6494-4875-88dd-56e8778712aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2ef6d0cd-50b9-44ef-8776-638fb27a9eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19fbbf2-fa65-4769-9835-913afb4c4153",
        "cursor": {
          "ref": "4291767e-55e5-4b33-a344-18f49addcb9f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6ba995b3-d291-4a5f-bd2c-df85b21791dc"
        },
        "item": {
          "id": "b19fbbf2-fa65-4769-9835-913afb4c4153",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "30fb8fe5-0e5b-4f83-92bb-719951d5b7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d428a8cf-01a9-4771-a47c-62feef406957",
        "cursor": {
          "ref": "3f0372be-1c44-4c0c-be75-f85497a47784",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e176201a-70e5-4fc4-8a39-2e481a730a6c"
        },
        "item": {
          "id": "d428a8cf-01a9-4771-a47c-62feef406957",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1eceb57f-da4d-49f5-a9dc-2527e3ac5eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5748d33-3349-4956-8b61-13368c34d388",
        "cursor": {
          "ref": "d2596ad1-1ebe-47c3-9143-722baf83a16a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "74d11b8a-cd85-43e6-b4cf-9871cdbf9a4f"
        },
        "item": {
          "id": "b5748d33-3349-4956-8b61-13368c34d388",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "54499389-7588-409a-9373-8b4e292028fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4019cb-344d-438f-b73a-d758302b9e3c",
        "cursor": {
          "ref": "d01e059c-57d3-4476-bc30-32331c8b3136",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4c3d5811-cb7f-4a48-87f2-11bebd4c63eb"
        },
        "item": {
          "id": "1f4019cb-344d-438f-b73a-d758302b9e3c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e189e99c-bd50-406c-9e3d-b048dae43185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0333ecd4-7dd1-49d2-8c21-44562f0d954d",
        "cursor": {
          "ref": "dcdaed4d-c0f3-4ae7-b3fb-6998abe9382c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9f749248-ade1-49c4-9ef3-cccb55bbdef1"
        },
        "item": {
          "id": "0333ecd4-7dd1-49d2-8c21-44562f0d954d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1500e2aa-6801-40b5-ab4a-77ee4b9e5d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10703f48-9e91-46be-9bad-1338c8f3fd39",
        "cursor": {
          "ref": "f6bc91b5-99f6-4c49-984b-5cb4ad264891",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "35d0256f-f231-496b-a9ae-d6b5da6c2759"
        },
        "item": {
          "id": "10703f48-9e91-46be-9bad-1338c8f3fd39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2a4b5b2e-27d8-425a-a85c-ebc9a4c66683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e61851-9391-4245-b279-8d0d5858f0ee",
        "cursor": {
          "ref": "1cb7a3a5-6b89-4ca5-b16e-9f882a04c62f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dd0dcc51-9c11-4c4b-8164-4a46fe6a485d"
        },
        "item": {
          "id": "85e61851-9391-4245-b279-8d0d5858f0ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad6ae2a7-a7b2-47aa-afc3-9ec219c68265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64b6908-db4e-4e8f-9db9-b796ecc51561",
        "cursor": {
          "ref": "084797c9-148c-4b18-bf18-3f83616a360d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e7aede1c-0337-4c3d-b819-0cc6d8dd8646"
        },
        "item": {
          "id": "a64b6908-db4e-4e8f-9db9-b796ecc51561",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3d3555ba-58a2-4a28-bc27-5c8b5315e3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36d714b-84dd-48fc-a9fb-3e55269feb0d",
        "cursor": {
          "ref": "cbfa1e26-a1f7-4d21-8c7f-311a1a06364c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "210fea66-dd3f-4ba2-8556-b146b8f20cfe"
        },
        "item": {
          "id": "f36d714b-84dd-48fc-a9fb-3e55269feb0d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6d6f8e9-58a4-4f0b-803a-46e74d15b308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0d42d5-d374-4dc0-9aa8-dd09f2b60512",
        "cursor": {
          "ref": "d746e8bb-dd6e-4bae-aa13-fe7100658000",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ec78d19c-e7dc-4637-9f69-7a701a08bba4"
        },
        "item": {
          "id": "4b0d42d5-d374-4dc0-9aa8-dd09f2b60512",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d37e445a-88fa-4558-9820-997f6e3e7458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32a6c98-7411-4153-b4b1-265500406946",
        "cursor": {
          "ref": "08e7cf21-122a-419d-962b-5ca037f5ff15",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b80c38c3-9cf0-4530-a8a9-f215dbf6d77c"
        },
        "item": {
          "id": "a32a6c98-7411-4153-b4b1-265500406946",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fd8cf05d-31eb-4f6c-b700-334815218a7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c72ea1-a0a7-4d14-bcc0-0893d34e92f5",
        "cursor": {
          "ref": "bc34012e-5a44-4b3d-8b5d-5f4e45d16987",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1cb34485-bd86-49db-b0f1-c68c005cfe9b"
        },
        "item": {
          "id": "d3c72ea1-a0a7-4d14-bcc0-0893d34e92f5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "32453d9f-4ad2-432d-a91f-4425f6be0e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf76872-eba9-4c29-8109-6f6e3da491f5",
        "cursor": {
          "ref": "0783eaeb-bdce-4a05-80a9-894b8d369aba",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3c7bc306-eef3-4dc3-9124-6b2ad966e01d"
        },
        "item": {
          "id": "abf76872-eba9-4c29-8109-6f6e3da491f5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dc1eeee9-c30c-4a15-9180-ee240eee0b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1af740b-cc33-45af-b266-bb81c3954d94",
        "cursor": {
          "ref": "be613a7d-9ec1-4439-94bb-dcc6c3e3a2ca",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "53f95066-c6e4-4bde-a005-1512ce4ec0e0"
        },
        "item": {
          "id": "f1af740b-cc33-45af-b266-bb81c3954d94",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "20d2494c-321c-486c-84d2-28f3cac4bbf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb665ced-b0de-4d29-9387-05d5c9c88db7",
        "cursor": {
          "ref": "b4f9076e-9b4a-47f9-82fc-25e546779fbf",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7132e177-a319-490c-b196-a59b2bce7cd4"
        },
        "item": {
          "id": "fb665ced-b0de-4d29-9387-05d5c9c88db7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dc85396a-f876-4d89-baca-856478b5f3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2b92cb-276f-4d2b-8c6c-943d9efa37c3",
        "cursor": {
          "ref": "ba18e719-78f9-400b-b5fc-81a9e7e1d336",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "414246ee-d1e3-4533-a7fc-e9bc669f3a81"
        },
        "item": {
          "id": "8a2b92cb-276f-4d2b-8c6c-943d9efa37c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "73b9885b-05a8-471b-b075-1d7cc2a62591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc7cccb-f814-4035-a028-d0f142c681cb",
        "cursor": {
          "ref": "edb2d2a9-df59-4b8e-884c-ba4b65bdff00",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3d705b8c-9bfc-4167-ba9f-c19d767a77d4"
        },
        "item": {
          "id": "efc7cccb-f814-4035-a028-d0f142c681cb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5fc8452e-0e24-4160-9842-3869e0237220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2907f514-1a53-4c64-8030-7eef9f5efc38",
        "cursor": {
          "ref": "af06d572-2242-466e-9d23-1dc89f4c88db",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe0e3441-73ef-4518-8b58-1a8e9a527979"
        },
        "item": {
          "id": "2907f514-1a53-4c64-8030-7eef9f5efc38",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "039216cf-24fe-4fad-a78d-47fe438d286d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad327ae-b80d-45fa-ad16-267a4e9f3f09",
        "cursor": {
          "ref": "b1fe32af-4a1b-4475-953c-d375a3a120dd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1f8c61ec-263c-4187-a80a-fb79b0f3cf9d"
        },
        "item": {
          "id": "7ad327ae-b80d-45fa-ad16-267a4e9f3f09",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9c8dd5b2-e338-4b87-b661-c52fb0f8c565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173e880b-d977-44fb-b2db-a339792061e4",
        "cursor": {
          "ref": "673ab4f6-7fae-4947-9de0-4769afa6394a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "900cff51-8e7f-4124-b162-10bca7aacd16"
        },
        "item": {
          "id": "173e880b-d977-44fb-b2db-a339792061e4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ef3dd5b0-4885-47c2-b54b-d27415bf9cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01746035-460e-4ef8-89fa-4b61194597dc",
        "cursor": {
          "ref": "dcd62b24-d13a-40a0-a025-4d62abac6ec7",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "647f1aa8-afe4-46d0-82d9-f18c3d1294ce"
        },
        "item": {
          "id": "01746035-460e-4ef8-89fa-4b61194597dc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4f342ff1-bc39-43b9-ab75-12249cd28b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7387e4-4e3e-4ac1-ad92-4cf52ebbf81e",
        "cursor": {
          "ref": "d3614094-807d-4d4d-b00e-1a8abf55d007",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d78ba1d-0822-47d6-bf81-c6a09a737120"
        },
        "item": {
          "id": "3e7387e4-4e3e-4ac1-ad92-4cf52ebbf81e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "98f7e59e-efef-4726-a79d-79f18f9f0bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1078fb9-f441-4a63-a98c-222ed229f671",
        "cursor": {
          "ref": "a6fd17f1-5d49-48c3-b651-3f9a08a9f0f0",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f06564d8-2892-4ddb-9a17-cc041e96c1bf"
        },
        "item": {
          "id": "d1078fb9-f441-4a63-a98c-222ed229f671",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8c9a245f-a57e-4317-8810-f648f79873ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfaada2b-1f6a-411c-88a7-b7da6e3d9860",
        "cursor": {
          "ref": "62298ff4-e5a4-45aa-9908-9d670ff45d7b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e557d00f-9331-4117-990d-ab708f1becf5"
        },
        "item": {
          "id": "cfaada2b-1f6a-411c-88a7-b7da6e3d9860",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1ff2d81a-16f1-4001-836a-2177ca02755c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f8fe01-fa23-46c1-8de0-f44642e95cd7",
        "cursor": {
          "ref": "987bb660-a92a-4bdc-802a-862b8573ad4c",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "adf4e719-61b8-452e-b8e6-260394f76b45"
        },
        "item": {
          "id": "78f8fe01-fa23-46c1-8de0-f44642e95cd7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aa443ff8-7d5f-4a9c-ae35-ecfe49561232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab20cdc4-c9cd-4de0-a0ba-1220edb6ba9e",
        "cursor": {
          "ref": "18baee83-1f61-48b6-bb68-90d374d25ab9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "27bcc411-33b0-45f5-8374-52b8e5dc2e48"
        },
        "item": {
          "id": "ab20cdc4-c9cd-4de0-a0ba-1220edb6ba9e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6420da0e-d112-4dce-b9bc-81b60e94ee4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd63967b-4858-4b6b-acea-2bf73269f6a5",
        "cursor": {
          "ref": "1099ec96-fb3e-4607-9a6d-416ab7cb6ac3",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2d8fb4fa-daa0-4a5d-b7be-ce65e5d5783f"
        },
        "item": {
          "id": "dd63967b-4858-4b6b-acea-2bf73269f6a5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c0187461-4955-42c1-afd4-439e8548b40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2722c0dd-9aef-4459-9404-5872b4f1af4e",
        "cursor": {
          "ref": "e7ae15f8-6cef-4de6-bf1d-e0dc3c70942f",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3e2e97ae-35c6-4f49-925c-d2937f29ce5b"
        },
        "item": {
          "id": "2722c0dd-9aef-4459-9404-5872b4f1af4e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c590969c-9741-469a-b2d0-8a172232d627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c263b58c-4244-466d-8265-0325fad890f9",
        "cursor": {
          "ref": "acb684e6-8783-4880-a36d-e0b830c7ac47",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "84a26c5f-458f-4b74-814e-1e9fe7ad6177"
        },
        "item": {
          "id": "c263b58c-4244-466d-8265-0325fad890f9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "37433e38-07d8-4ea2-90a2-f034e43f1ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89947a65-0010-49c0-a34c-99ba8ef7a831",
        "cursor": {
          "ref": "66edc8a8-86bf-4252-b4db-2847c3e3cd57",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "09150ab1-51fc-4b0c-8a4d-8eec875827e4"
        },
        "item": {
          "id": "89947a65-0010-49c0-a34c-99ba8ef7a831",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "989ebbbe-e4a4-48b0-8164-ce7d547184e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf53d75-a678-4273-b42a-987dd7a21a0f",
        "cursor": {
          "ref": "86071e69-97ea-468d-9340-cb48f5c880ba",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9384fa45-069e-4433-9b3a-07a87994bc0b"
        },
        "item": {
          "id": "4cf53d75-a678-4273-b42a-987dd7a21a0f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "13a78bbd-078e-4dfe-9f18-cb18eacc8441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149b1344-47a8-4fd4-8e2d-0b486eb862af",
        "cursor": {
          "ref": "c93c11ea-8249-46f6-a300-4553e5c779e4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ac83c6fc-fef3-4303-ba95-b371681567c6"
        },
        "item": {
          "id": "149b1344-47a8-4fd4-8e2d-0b486eb862af",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "959e1422-6b45-47c0-9b03-452c46c26613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44ee765-08e4-4deb-b617-a1cbdff91b90",
        "cursor": {
          "ref": "c174a755-37ab-431c-aeb3-f6f999d22a04",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "34a11025-72c2-4148-bfa3-3ade1ce05646"
        },
        "item": {
          "id": "f44ee765-08e4-4deb-b617-a1cbdff91b90",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e174da2b-4552-48c4-87b7-032bda874f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4e2b05-98a1-4a73-8523-aaeb0bb00663",
        "cursor": {
          "ref": "d4228dd7-acb5-4f94-a241-27be22da3c9f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "821fef76-ed44-4dd9-a4e7-12d33183d4a7"
        },
        "item": {
          "id": "1e4e2b05-98a1-4a73-8523-aaeb0bb00663",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cd115433-0dd7-4567-8036-4e9e27045576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d48a76-51d1-4aa5-a135-6ed78eee29e2",
        "cursor": {
          "ref": "d422edee-c3a6-4ae0-b1fb-88640c326381",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "29560976-5557-4050-b426-e2ab96e1f36b"
        },
        "item": {
          "id": "48d48a76-51d1-4aa5-a135-6ed78eee29e2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a30ecde7-6673-438e-974b-566b614e0a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29a7739-069b-48ab-bd11-c4a773849eb4",
        "cursor": {
          "ref": "8c7704ae-e6dc-4596-b2f5-201f6146b6ec",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a2bf41e8-d284-479f-943d-7ad1aa20ca16"
        },
        "item": {
          "id": "d29a7739-069b-48ab-bd11-c4a773849eb4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0cc7d1f6-e186-4b71-a347-42ed61f91ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b45d5bd-3fd2-4954-8919-15c77c9b88ea",
        "cursor": {
          "ref": "c4bfb08a-1792-4c2a-908f-a6c94d6782cf",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "02d1279a-238f-413c-a94a-50cd8e5a9c80"
        },
        "item": {
          "id": "2b45d5bd-3fd2-4954-8919-15c77c9b88ea",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "84f7ed72-3ef8-4ac5-9f29-7147698bcc27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaabb9e-1066-4dec-952a-937c0e5d9456",
        "cursor": {
          "ref": "a7a40a30-0728-4e5b-801e-bf844c529605",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "65f0772e-c864-47df-9027-61fd5560f10e"
        },
        "item": {
          "id": "0eaabb9e-1066-4dec-952a-937c0e5d9456",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a4af57b6-5fc9-486b-8888-58184f3ac2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc4fc5a-d106-4b50-a697-d1aa36ffb917",
        "cursor": {
          "ref": "b704ae71-a28d-47d6-8068-f2c49363f581",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c6d7bf2d-e432-4917-90f7-5bdccd44f392"
        },
        "item": {
          "id": "7cc4fc5a-d106-4b50-a697-d1aa36ffb917",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2d73747c-6643-4df4-b1ea-6249568c3eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2e2bc3-f960-4d43-9558-7fb5e681d4df",
        "cursor": {
          "ref": "2da5ee2c-73fb-48e1-83a1-80e947ff8552",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a7c4d37f-a888-42c5-958a-f9699571141b"
        },
        "item": {
          "id": "8e2e2bc3-f960-4d43-9558-7fb5e681d4df",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d2713fc3-8eaf-4cb8-ae2b-b246a10f1b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c401bd-08a3-4043-a579-9bc31a3258b2",
        "cursor": {
          "ref": "ed3fe538-1972-4d30-b144-ddac9a5157cf",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7ad7c510-51c2-4264-9a16-786ed050b091"
        },
        "item": {
          "id": "95c401bd-08a3-4043-a579-9bc31a3258b2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d471e80c-8889-4492-a27f-bef687fa7362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49f508-828b-4eb0-92df-876dbcabe644",
        "cursor": {
          "ref": "56004b9d-8278-4539-ba3f-f388d88e8c73",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "59b2882d-47f0-4736-a547-4e8610f99822"
        },
        "item": {
          "id": "6e49f508-828b-4eb0-92df-876dbcabe644",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2e4e85c1-b6fe-47e1-b073-560c310e79e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229ff5a7-640c-4516-8932-982bb12d7804",
        "cursor": {
          "ref": "a69cf189-4ae0-4e27-a8e2-49703bb1a39d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7573a100-a6db-48ae-81e2-fdb2ad3bb3ff"
        },
        "item": {
          "id": "229ff5a7-640c-4516-8932-982bb12d7804",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9e93f400-17c7-48a1-9e88-af31d2437dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3575aba-3c3e-4147-93f4-35ba5010b03d",
        "cursor": {
          "ref": "178bfe79-77a4-48a5-a0d7-57bc71483fc0",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e1bbf5b4-91c1-4aa2-b9a1-779ef83b763d"
        },
        "item": {
          "id": "f3575aba-3c3e-4147-93f4-35ba5010b03d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a119b2b8-6dee-41c4-a393-6e9f95f5a426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bf6621-75d6-41ad-8ed3-84026e53f47c",
        "cursor": {
          "ref": "099b383c-0087-4946-9031-991e65a4708e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cf01ef9b-95d3-4a35-a1cd-b1c39209df09"
        },
        "item": {
          "id": "93bf6621-75d6-41ad-8ed3-84026e53f47c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e194aae6-f65e-4ce0-85fb-9efa97ed999b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5499524-e6d0-485a-95c1-6b7fca56533d",
        "cursor": {
          "ref": "b944e532-12ff-407f-8697-96123c2446b0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4c4a88cf-3d92-4f0d-a63e-7bdc0a81f5a3"
        },
        "item": {
          "id": "b5499524-e6d0-485a-95c1-6b7fca56533d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "738cc55d-70f5-44af-8952-ead2dd275951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4967cd44-85fd-48ec-b728-1b4c28594511",
        "cursor": {
          "ref": "227c000c-366f-420a-a941-54ce3cf360f0",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7f50dd9d-637f-4615-937b-35a81f2347b0"
        },
        "item": {
          "id": "4967cd44-85fd-48ec-b728-1b4c28594511",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d78d63f2-6c6e-4f8a-97fd-9d184e0f3a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1bc58c-1d51-474d-b17d-f7a48ce85d47",
        "cursor": {
          "ref": "ca862581-d1f2-49da-ad75-f89677777c6d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d5fd56dd-77dc-4c10-bc08-c1856600e213"
        },
        "item": {
          "id": "bf1bc58c-1d51-474d-b17d-f7a48ce85d47",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cf55a1e7-7465-4867-8ca1-af275727b254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994d4c8-f1e9-472b-8d54-2c7528134f94",
        "cursor": {
          "ref": "79ac5fa2-0ed3-497e-ba21-d7ba3a7cfefe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8f2c8144-b8cf-4266-aa46-6b8fb8a9001b"
        },
        "item": {
          "id": "f994d4c8-f1e9-472b-8d54-2c7528134f94",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "67495840-08e6-43f4-82ac-0258e1d28b24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115d437d-43a7-4f7b-afcb-273c037f7006",
        "cursor": {
          "ref": "0a1f8d57-1c9b-4001-880b-6f5cf5ad8f14",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a9df878-207e-4d53-8494-1c7a6aea6e72"
        },
        "item": {
          "id": "115d437d-43a7-4f7b-afcb-273c037f7006",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dd9171c0-0f44-4340-b1b7-347b013d14e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e7a505-4407-44e3-8f6a-9f31fdb2fa28",
        "cursor": {
          "ref": "c00b4cb3-e3cf-43e3-b7e0-e22665bb0c91",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cdde21b0-ef46-4249-a381-dfd4b643d93f"
        },
        "item": {
          "id": "50e7a505-4407-44e3-8f6a-9f31fdb2fa28",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "397b6789-4ced-407b-8a48-9a454c06cbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4a2321-155a-4377-85f0-31d079612fee",
        "cursor": {
          "ref": "9053f0d5-63d2-4536-9530-b6034a553297",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bb4e84d0-3593-4342-ae53-1a5b9c509689"
        },
        "item": {
          "id": "fd4a2321-155a-4377-85f0-31d079612fee",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b6b0840d-447e-4d58-bb2b-634eedf89bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b7934f-dcac-45be-acc9-d3648399b1a3",
        "cursor": {
          "ref": "e9dbcc73-83b3-4d62-9e87-d1958116aa84",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "733becf2-49a1-4024-9016-573a82323f22"
        },
        "item": {
          "id": "56b7934f-dcac-45be-acc9-d3648399b1a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "12c1dcb4-822c-434d-82a6-a00eec3b3c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6ae824-5c21-45ef-9ce2-0e69841b4fa6",
        "cursor": {
          "ref": "cc945d51-3dce-452f-b00f-479e2f63dc78",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "20e2a2a6-4798-4c01-9944-fe1c7c51acc2"
        },
        "item": {
          "id": "6c6ae824-5c21-45ef-9ce2-0e69841b4fa6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5beebeae-9eb5-4d7b-acf1-657a0f7df2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1a9827-b421-46c4-ac59-b38147ba0238",
        "cursor": {
          "ref": "b5c02b01-647d-4de5-92f2-6f920f9b8304",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b385108-4723-42e5-842e-4eb772fd3075"
        },
        "item": {
          "id": "ad1a9827-b421-46c4-ac59-b38147ba0238",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "53b10bfa-0ff9-4962-93cc-70f5bf9ef6b8",
          "status": "OK",
          "code": 200,
          "responseTime": 245,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d9cf0c16-47e6-4c0f-afae-f997e5474cd6",
        "cursor": {
          "ref": "a3e7d124-4f63-4076-88f9-958aa93fc242",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "13e24426-61c6-4fc0-a6b1-bad1cd44c802"
        },
        "item": {
          "id": "d9cf0c16-47e6-4c0f-afae-f997e5474cd6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eb253121-a90d-4500-a36a-307a84983690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c42b13-3229-4d21-93a2-6de0bd671844",
        "cursor": {
          "ref": "c31385d6-a3dc-4760-a8a6-406182c11478",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f8834c34-c381-4464-87c1-3afac36248b0"
        },
        "item": {
          "id": "c3c42b13-3229-4d21-93a2-6de0bd671844",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "688ae130-a187-42e4-86ba-a3eb06bb630c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ec8b8f-7698-44fe-be66-c8ee6589129e",
        "cursor": {
          "ref": "217b529a-08d2-49f7-b9df-46dc08b77d12",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a1ff943a-c50d-4252-a944-59c69b4605f3"
        },
        "item": {
          "id": "a4ec8b8f-7698-44fe-be66-c8ee6589129e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d0aba4c1-1680-4589-be6b-454646250f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f061e16c-4906-464d-ba3e-a9cf00d01d19",
        "cursor": {
          "ref": "4a28f005-54fd-4c38-92ee-654c5ee843cb",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1c606263-d51e-4cfe-9078-c03e0daee55e"
        },
        "item": {
          "id": "f061e16c-4906-464d-ba3e-a9cf00d01d19",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "834985ed-e8dd-4630-bae5-78fe50e9753d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421d96e7-7a72-484b-98e1-ff497e83d7c9",
        "cursor": {
          "ref": "d424f481-e73b-4c21-b685-25c3fa76877a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c61ce62c-9ca6-4ca1-bf72-44b9f8995d6a"
        },
        "item": {
          "id": "421d96e7-7a72-484b-98e1-ff497e83d7c9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "dfa0eb86-7645-459b-8487-04a7b5a6c3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906edcde-749b-4641-b779-08eed6c1a17c",
        "cursor": {
          "ref": "c80ea391-f672-459c-ad54-eb8b98eed9fa",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fc2467c8-fd86-4c36-b065-d9d61497d5ca"
        },
        "item": {
          "id": "906edcde-749b-4641-b779-08eed6c1a17c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e8a0fac3-1f54-4725-8e71-4d10bf9b24d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b9f666-e5b3-46a4-abff-f363729f9f2b",
        "cursor": {
          "ref": "f97973b6-395e-4f09-8d34-d04381799fa4",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0c98ab16-5aaf-489d-935e-dbba0448a583"
        },
        "item": {
          "id": "d8b9f666-e5b3-46a4-abff-f363729f9f2b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6be95aff-2d69-4292-acda-e5faa341973e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d90590-f997-45f3-8e0b-f594a7c95801",
        "cursor": {
          "ref": "3e60cf32-b28d-451b-b052-3c6fc8e05d3a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "30d8ca6d-7db5-4c02-b593-57f52bf9471f"
        },
        "item": {
          "id": "41d90590-f997-45f3-8e0b-f594a7c95801",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "973f55ff-8b70-4f84-8327-d8dd6a4195b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2856c66-7005-4512-aeeb-db11b13d5e59",
        "cursor": {
          "ref": "2872967e-58a4-48bb-b5ea-28de12ce065b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d9258d4c-1b44-4fdf-a53e-d2fe63930888"
        },
        "item": {
          "id": "b2856c66-7005-4512-aeeb-db11b13d5e59",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "71b9e2c8-e432-461d-88dd-49c00bd64b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd2502e-1c34-4ef1-8fc1-cdf6a9a475f6",
        "cursor": {
          "ref": "2265e2a1-fd54-421b-99db-c8709b22f995",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "29fc14be-8f06-49c4-b672-853a63ec9b34"
        },
        "item": {
          "id": "7cd2502e-1c34-4ef1-8fc1-cdf6a9a475f6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "118f82ac-fafd-420c-8293-8fa35e046c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e44e02-9257-4c67-9d4f-6294bf0d3c54",
        "cursor": {
          "ref": "d1920abe-d410-412b-8421-b1eb29e369d5",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "be8ba2f3-22c6-46f0-988f-c2a5d7f76929"
        },
        "item": {
          "id": "e6e44e02-9257-4c67-9d4f-6294bf0d3c54",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1534b582-b685-4b19-a528-3ae4b61bff03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47714a7f-7c8d-4d2f-9e18-c71b87ad5d17",
        "cursor": {
          "ref": "c52dad31-5f8b-425c-9188-457d66d17949",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "133e70c1-41c4-405f-8617-b835bdda94a2"
        },
        "item": {
          "id": "47714a7f-7c8d-4d2f-9e18-c71b87ad5d17",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "337626ce-7e1f-41b4-bcc3-e5b66834c5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218635af-5f4e-46df-9deb-f70d63c6b0e8",
        "cursor": {
          "ref": "55cd9c6d-4fe9-4b56-8595-367b774dc9f6",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f8250c31-c785-43b3-9831-ec85e461622e"
        },
        "item": {
          "id": "218635af-5f4e-46df-9deb-f70d63c6b0e8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2c2ce3dd-ce90-4dd0-85a0-298ef56757a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714fad49-2d9a-48cf-b1fa-caa49d1cda59",
        "cursor": {
          "ref": "34580f96-7cfa-4459-a57d-b7857cf62820",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5a43fa11-572d-4791-8b52-c5226a42093a"
        },
        "item": {
          "id": "714fad49-2d9a-48cf-b1fa-caa49d1cda59",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "73c346e6-8a9e-449d-a72f-a2ea50f22d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce7aac9-bc4b-403e-bf9e-754663c0d999",
        "cursor": {
          "ref": "670922d1-d9b9-4484-b484-dd1bee66cb98",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c68f1b46-2f4e-4b9b-8b26-482e9d234ac6"
        },
        "item": {
          "id": "0ce7aac9-bc4b-403e-bf9e-754663c0d999",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3542fbbe-90d1-4040-a46a-c94f97d97ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7cf14e-225e-44fb-82ad-f7303675104d",
        "cursor": {
          "ref": "9dd82bd5-03e9-4e81-93fd-46ab480e12c4",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "50e3f724-f66b-4860-b281-590812a13461"
        },
        "item": {
          "id": "3d7cf14e-225e-44fb-82ad-f7303675104d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "60e0d095-6501-42b0-a6a1-83094b9812a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57987c85-c687-426f-9cd3-11abccb138b7",
        "cursor": {
          "ref": "de821338-2d15-42ad-8935-d05a638221b4",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5524fabb-723c-466d-aebb-2249339395b9"
        },
        "item": {
          "id": "57987c85-c687-426f-9cd3-11abccb138b7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2bb3188e-494f-4d39-946a-95301bf78acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c61e3b-7931-47ff-8b55-7bdc4e16969c",
        "cursor": {
          "ref": "b19969c4-d41c-4c2d-bb4a-4288b459fe7a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2f2a4f15-9c67-401c-8bf3-e397bb33f0e2"
        },
        "item": {
          "id": "15c61e3b-7931-47ff-8b55-7bdc4e16969c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c6e5e0a9-b615-420a-8e17-16446642cd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537f50c3-c092-437d-bbfd-ae1fa71054f7",
        "cursor": {
          "ref": "bf44fb2a-1830-48d0-ad76-6b613c8c2f7a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2164fb6c-6894-4c2e-94e3-e2c4ccb5bfcc"
        },
        "item": {
          "id": "537f50c3-c092-437d-bbfd-ae1fa71054f7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d2777e17-551d-4f4d-95e8-03a356c641ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c39bba-63d9-4d03-aa01-2f4eb0bc2364",
        "cursor": {
          "ref": "630972fb-b3c2-4588-a16e-decf2eab145e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "de2e428e-c653-4c2b-aed1-26a4dd15a811"
        },
        "item": {
          "id": "34c39bba-63d9-4d03-aa01-2f4eb0bc2364",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6c171dca-ca23-4531-8dd5-beb06db50191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3cc926-8d0b-4791-9309-8c1af74f6b6e",
        "cursor": {
          "ref": "c608e02e-cc46-4c64-9d06-fa483af56736",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cc1d6c5a-54fe-4e7e-b950-54414cb1170f"
        },
        "item": {
          "id": "9a3cc926-8d0b-4791-9309-8c1af74f6b6e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2ed67942-d2dc-4c20-8fb5-92e8f4648bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d154988-c789-41ab-98d5-764ba7b1b750",
        "cursor": {
          "ref": "45110e51-c6b2-4595-a731-1f944e2b5a76",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7efdc942-30a5-4f08-8c13-8b08b4bc3c4b"
        },
        "item": {
          "id": "4d154988-c789-41ab-98d5-764ba7b1b750",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3dfcef1b-1d69-4e79-be13-e6fa843a79ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd09db8e-30d8-443f-8d22-fee61c982b69",
        "cursor": {
          "ref": "88c64fd9-61b4-4edb-9049-dd8b1c323619",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aef4d8b0-38ec-4974-ad79-1d8a677aeba0"
        },
        "item": {
          "id": "cd09db8e-30d8-443f-8d22-fee61c982b69",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c942ba53-977c-41d0-bff4-0eba5edd407d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a7c679-f975-43cf-bb58-5e6d08c99c4b",
        "cursor": {
          "ref": "b88687eb-8a34-49f5-ada9-967a26be8aeb",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f148fd23-c12d-4066-b59f-a3a3be69c526"
        },
        "item": {
          "id": "28a7c679-f975-43cf-bb58-5e6d08c99c4b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "45d31cf4-dee1-4ac5-a3dc-49612ae3d882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8cf5b7-27c4-49bd-8948-d462552ce911",
        "cursor": {
          "ref": "b7989979-8398-494c-b3d0-cb54c17df23b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1ca6af1e-e30a-4c77-bdd7-363e5facefc6"
        },
        "item": {
          "id": "9b8cf5b7-27c4-49bd-8948-d462552ce911",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3c1498c8-35eb-44f6-9201-c3881b5e0902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f847d-838d-4228-b059-539b96b26d80",
        "cursor": {
          "ref": "6d50ef6d-125e-47c5-bb24-63e8ea6aa59b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6297cfce-5389-443c-8fb2-40e61d50538d"
        },
        "item": {
          "id": "bc0f847d-838d-4228-b059-539b96b26d80",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4a3ec16a-daa5-4fd7-b100-51ab842db2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96f1313-2ca6-46c9-bf41-bd63d33211d7",
        "cursor": {
          "ref": "ac02fb9f-1f7f-4db9-a61b-c1f9f2dcd620",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "279b0aac-b0a8-4f40-a1e7-1271beda6993"
        },
        "item": {
          "id": "e96f1313-2ca6-46c9-bf41-bd63d33211d7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c7cacaa1-664d-40c6-8384-3950fb728bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ae4f50-2192-47cc-ba5f-61bbc1cfe11f",
        "cursor": {
          "ref": "52021595-2ba2-4539-a98f-e600b515a4f0",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dc64b4ab-d41f-4f14-b914-2ced01f8a156"
        },
        "item": {
          "id": "43ae4f50-2192-47cc-ba5f-61bbc1cfe11f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "294b6e6f-203f-475c-8405-f12dc4ca4cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023e29ad-f7c2-4607-a41e-30ef884ec23b",
        "cursor": {
          "ref": "14c2523b-487c-4f70-ace6-e5511975e764",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f2eede53-be24-4059-ac74-5581b9b3dc38"
        },
        "item": {
          "id": "023e29ad-f7c2-4607-a41e-30ef884ec23b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "df0bfcb2-f9cc-4383-a24e-5b0a4a3948a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc942dc4-16a7-4dd3-bae5-1608e70c48a2",
        "cursor": {
          "ref": "69a6834d-e903-443b-83a9-cc461e86143f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d93372e1-11a0-4dbe-935d-21f1be726953"
        },
        "item": {
          "id": "cc942dc4-16a7-4dd3-bae5-1608e70c48a2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0c120d3e-1788-4f76-9506-670e0c97e640",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d3285db4-7fca-4641-ad17-eb7b7a10ee89",
        "cursor": {
          "ref": "23b0872d-1418-489c-a033-fcc2865696b2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d8eca2f6-2223-4b0c-8927-a5d948455549"
        },
        "item": {
          "id": "d3285db4-7fca-4641-ad17-eb7b7a10ee89",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "13a60f2f-683d-4d88-8ce4-aa9c18919da7",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "55ccfa27-06f1-4c7f-b547-44632cc2eb1a",
        "cursor": {
          "ref": "ecb2519b-2bbc-4ebc-af08-77513390836d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f82165fa-5164-4b65-ab14-8f3f0bad22e0"
        },
        "item": {
          "id": "55ccfa27-06f1-4c7f-b547-44632cc2eb1a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7a0ca0ef-50d1-478a-800a-98f72e76d37a",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b2c62829-2370-4204-ad35-b555af98fb6d",
        "cursor": {
          "ref": "373a8a6b-eab6-4255-b175-da46f195e38e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5c5fc2e7-5d1b-4ab3-8ea6-81821c74c7f9"
        },
        "item": {
          "id": "b2c62829-2370-4204-ad35-b555af98fb6d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c390416c-e24a-40c2-a38d-8cf2ac26e53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68031ddc-f3d8-4faa-a4a2-639e28315788",
        "cursor": {
          "ref": "28034aed-e8d2-4e27-9827-9edca5f08a35",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "99e7747f-8b09-456b-84a9-2d0c0eb1093c"
        },
        "item": {
          "id": "68031ddc-f3d8-4faa-a4a2-639e28315788",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5b2df080-3249-4d74-a78b-cb6b889ed967",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cdfd50d5-c0ff-4b58-ab5c-2a2866a7da2a",
        "cursor": {
          "ref": "562dc6c9-168b-41fa-936a-f2b9a0c1c6a9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ee982920-acec-4cb1-9ef2-174480ff5ef4"
        },
        "item": {
          "id": "cdfd50d5-c0ff-4b58-ab5c-2a2866a7da2a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "abb2c72f-f6b6-4916-b009-4b2de70f84ed",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d55a63a7-c88b-47cc-9bd1-8d382a658fe3",
        "cursor": {
          "ref": "efaa1ddc-e1f4-4892-85e6-5ee3da3b84cf",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0743365a-3b49-4d5e-a415-b49d11a9cbea"
        },
        "item": {
          "id": "d55a63a7-c88b-47cc-9bd1-8d382a658fe3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8a435ba7-8594-4558-bb91-f0eeb45cf1ac",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "eeadafb6-3881-48f3-a7b7-d66679a21ca7",
        "cursor": {
          "ref": "d66a39e1-9437-4756-a8e9-845e54e5e918",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "32f06a7c-aa3e-41cb-9899-75567f3ba0e7"
        },
        "item": {
          "id": "eeadafb6-3881-48f3-a7b7-d66679a21ca7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9dacc3bf-23d8-47e5-a657-a1a379c41467",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "06efc48a-4f73-4839-be8a-14844a59f5b7",
        "cursor": {
          "ref": "f7587c03-ff75-4341-9e7f-7bef86f33cc1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1e84203f-fa8b-44ca-b075-cb981c2fdc7e"
        },
        "item": {
          "id": "06efc48a-4f73-4839-be8a-14844a59f5b7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2e94bc34-c8dc-465d-a0c6-51b1e14f05c1",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1917a816-59f0-44bd-b5e8-173ef620646c",
        "cursor": {
          "ref": "d49500af-21da-4082-9a80-4e2d8cb44002",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "543a4595-a550-42d3-b463-976448e09203"
        },
        "item": {
          "id": "1917a816-59f0-44bd-b5e8-173ef620646c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f2a178f9-0fc9-41f7-90a6-a0c459eb8550",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c8acd06f-f344-44af-9a5f-4f1c5eecda9d",
        "cursor": {
          "ref": "72a5ef2b-77e1-446c-8e4f-9234627382db",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "05a962e8-5b58-4772-a02a-2671ac417ad1"
        },
        "item": {
          "id": "c8acd06f-f344-44af-9a5f-4f1c5eecda9d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3fbdbb9a-e5fe-4089-8d68-dfa5dd56d0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4244c0-b246-400e-950a-1e1fa5b8573f",
        "cursor": {
          "ref": "f580a049-e7a4-4829-b592-1d787064ec1b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ff5bdc9b-60fe-4214-906e-89da05b9e826"
        },
        "item": {
          "id": "9c4244c0-b246-400e-950a-1e1fa5b8573f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d31cafa1-4caa-4727-8e88-c7d8429ffceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914860f0-26cf-47e1-82b5-58886b881aee",
        "cursor": {
          "ref": "5a258a26-4a9c-4b1c-979f-8e24646c1e29",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "14a0b04d-c0ec-4edc-9edb-07aab522e76c"
        },
        "item": {
          "id": "914860f0-26cf-47e1-82b5-58886b881aee",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "78d078e7-27bd-4546-9b4d-c0eae6c074e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1effef-d9a0-431e-b767-8b1c3e35f3a3",
        "cursor": {
          "ref": "1db0bd77-63e8-4033-b597-8824d5e59186",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2d3c1bb1-82b1-4fc1-a15e-694f66d9018c"
        },
        "item": {
          "id": "2c1effef-d9a0-431e-b767-8b1c3e35f3a3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d4feb8b5-2e31-4d0f-9a55-2d587749d84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0030efe7-305c-44ff-bf71-17062942893f",
        "cursor": {
          "ref": "991bf376-559c-4790-a2ee-df51cbf89000",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "03aaa9b7-3f3e-437b-876b-aa3ca85e93ca"
        },
        "item": {
          "id": "0030efe7-305c-44ff-bf71-17062942893f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "456be1be-2e9a-4208-8392-b8cb42e92870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051f4139-3197-48fe-b07f-43020846bfb0",
        "cursor": {
          "ref": "013d6962-baa5-4bb2-98df-c94ce6303182",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fde72087-b6dd-43f4-baa4-413d5221e8ab"
        },
        "item": {
          "id": "051f4139-3197-48fe-b07f-43020846bfb0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b4b2a811-2672-4768-882a-d3341f455970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50e7f2b-26ca-4f63-805a-a9333ae55946",
        "cursor": {
          "ref": "1787517a-5ad8-45d2-b6e6-7376a0931707",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2d37c4ef-a28a-4072-a454-96542eb90ef6"
        },
        "item": {
          "id": "a50e7f2b-26ca-4f63-805a-a9333ae55946",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9e139d72-7917-40f4-9c19-e36d8dee5cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eff9fd-7fe4-4ff3-aba8-ca19f08100c1",
        "cursor": {
          "ref": "ab443c44-4920-45bd-9e22-ab1c38a47d81",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ca6db852-445f-4973-8cb3-e6c670bb9e10"
        },
        "item": {
          "id": "d3eff9fd-7fe4-4ff3-aba8-ca19f08100c1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d277b459-d5e2-4a40-8595-be161ca020f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c83c4d-377e-4451-a7ca-2ce1d91b1d54",
        "cursor": {
          "ref": "c4297829-e716-4066-8d83-f043b7ce8311",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "95253673-e498-47e8-b133-604466a72362"
        },
        "item": {
          "id": "32c83c4d-377e-4451-a7ca-2ce1d91b1d54",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8b027df3-bb5d-4783-a00c-9148c9c6b667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ee90eb-e181-4327-bd44-6491911f6427",
        "cursor": {
          "ref": "8d468092-00a8-4d73-94b1-f51241309507",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e9336bed-7964-4838-9e6a-c7b554e1b8d3"
        },
        "item": {
          "id": "d5ee90eb-e181-4327-bd44-6491911f6427",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5b673ce3-19a4-4f01-97b3-e8bc49b2a361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d328dde6-fdd3-4919-918f-c5c28b3778e9",
        "cursor": {
          "ref": "2ff5226d-4bf3-44a7-927d-241a1d319cda",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e258e3d7-ccc9-4244-b38d-02f7779f4631"
        },
        "item": {
          "id": "d328dde6-fdd3-4919-918f-c5c28b3778e9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cc211cb6-405b-4ca5-aa3e-441e3a987aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcb67d4-72ce-4508-88d9-2f85b69e6e3a",
        "cursor": {
          "ref": "df9bf224-7c76-4ca1-9db6-85b6c41e1c92",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a294e12e-0d15-4029-a86b-847d9f347e6b"
        },
        "item": {
          "id": "1fcb67d4-72ce-4508-88d9-2f85b69e6e3a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0f6fae31-6cdb-4683-80f3-bd068d1c91af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305d9467-9314-4c29-9952-6de5b1e3e0cf",
        "cursor": {
          "ref": "031473dd-a6c9-4fa9-9cab-b9a005d765cb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "54c0f7ea-1897-4059-81a0-75cae5ba5d0d"
        },
        "item": {
          "id": "305d9467-9314-4c29-9952-6de5b1e3e0cf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f448f215-ee83-4d78-910a-9ef5b76d81bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11479dcc-ba2a-4d92-aea0-3ef4bff74664",
        "cursor": {
          "ref": "9519f3ef-c2be-4397-b4fd-006069a3afc3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bd61e39a-6c23-444a-a298-f249aaf102d6"
        },
        "item": {
          "id": "11479dcc-ba2a-4d92-aea0-3ef4bff74664",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5ab91b23-13fa-428d-94af-5dddf0f74bda",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f27a7ddc-b947-4ee4-8bcf-9a819b737bf1",
        "cursor": {
          "ref": "a5acc758-e0cb-4a9e-8b39-e361b98cb42a",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "450a5c4d-d3d8-48a2-a5d4-424f1490e48a"
        },
        "item": {
          "id": "f27a7ddc-b947-4ee4-8bcf-9a819b737bf1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "87202c1a-8fdb-46e1-83b1-5296007b00e2",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "31a18609-5c2f-49c6-b6a2-09b8c8043ecc",
        "cursor": {
          "ref": "320c85db-25d5-436d-8cfe-a77638250058",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "af576a54-fd17-4124-9e94-f199a373f093"
        },
        "item": {
          "id": "31a18609-5c2f-49c6-b6a2-09b8c8043ecc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a56e2a22-b90b-42b7-8b50-906573c1b9b4",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "203934bb-055b-4249-bab0-1d22b3389cd3",
        "cursor": {
          "ref": "f9e6d6ab-6cd3-4929-9ff5-516974e5ba87",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "273d749f-6429-457c-8639-4e4bf0e2d4c4"
        },
        "item": {
          "id": "203934bb-055b-4249-bab0-1d22b3389cd3",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "76676ece-c43f-4296-88de-10603bead0f9",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "483a3ed8-9ecd-4f19-9c61-95288596e79f",
        "cursor": {
          "ref": "2d1443fd-b41b-41c6-b66a-bd4eba83eaba",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bcc0d50b-db2e-4d90-9df0-3ee63060eb16"
        },
        "item": {
          "id": "483a3ed8-9ecd-4f19-9c61-95288596e79f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "759eebb8-aa42-415b-8818-3b0316aab272",
          "status": "OK",
          "code": 200,
          "responseTime": 234,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "385d8904-2475-407d-9b6d-0bb96104fda7",
        "cursor": {
          "ref": "bb9421c1-d173-48d7-8371-39303d378950",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c240e4bc-45eb-44c7-a35e-0802003faa2b"
        },
        "item": {
          "id": "385d8904-2475-407d-9b6d-0bb96104fda7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "61182b19-4e46-4c58-955f-26e4cb74e222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01b241f-9d79-4c17-81bb-921aa429efd8",
        "cursor": {
          "ref": "b0e37072-4b20-4116-aaaa-b39feb097eb8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e0adfda9-60c2-4ee1-95df-f753d01ff321"
        },
        "item": {
          "id": "e01b241f-9d79-4c17-81bb-921aa429efd8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "53e9ac0e-d430-44f1-924f-f8b438fabfff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4898e85e-7d11-46dd-a7af-2ed83fc12907",
        "cursor": {
          "ref": "5fc65217-6a26-4fe0-92de-41a02bd9f5cf",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f4d484bf-59c7-4c06-adad-d153d9623132"
        },
        "item": {
          "id": "4898e85e-7d11-46dd-a7af-2ed83fc12907",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4d4e77ac-d69c-4be1-83be-be4689fc1a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97075a6e-fa3c-4020-a62a-56c406b0a06a",
        "cursor": {
          "ref": "06cfde9d-6719-4a88-a73c-bca91eff7e54",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9c64f3d8-e9fb-4d6d-9b99-3f0d8eb334a0"
        },
        "item": {
          "id": "97075a6e-fa3c-4020-a62a-56c406b0a06a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6dd8777b-d3ba-4a63-ab5a-05722c8f427c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6540e9fd-7702-4661-a4bf-9bf6fe5bc86c",
        "cursor": {
          "ref": "df4a5427-724f-4786-95c0-9eda4ac1166d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c87c59f1-c0a6-48ac-a73f-f16f3c936ccf"
        },
        "item": {
          "id": "6540e9fd-7702-4661-a4bf-9bf6fe5bc86c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "24d2211e-f363-44bc-ba0d-f9325eda72c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f240f0-9587-489a-99a3-15a46109c407",
        "cursor": {
          "ref": "c77beb8c-d1db-4fb8-8c6b-ff8b2f2ec307",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8c80b134-0c65-489c-9d77-6c1ea62c5f9e"
        },
        "item": {
          "id": "f0f240f0-9587-489a-99a3-15a46109c407",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "65d1aace-6057-4a8f-956a-1eda88c44a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490b3bb6-733c-4c46-9d67-57600d4106f0",
        "cursor": {
          "ref": "1fdf34ea-1770-4d2d-9684-2677695f9c56",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1561ea8e-5dcb-44bb-8cfc-82a7b2af3ade"
        },
        "item": {
          "id": "490b3bb6-733c-4c46-9d67-57600d4106f0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "367e64ba-1a5d-4e54-a0b3-4d57d85b1fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7bf589-42a5-4a7d-b3bf-f941f70882eb",
        "cursor": {
          "ref": "d8c5af02-4324-4aad-8e0e-9e3a9f95dcd2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "83f9d4bc-f445-47fb-8893-9db47ef80241"
        },
        "item": {
          "id": "fb7bf589-42a5-4a7d-b3bf-f941f70882eb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "38ba9154-36f3-4abc-8eb3-e3a35f05e112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1273f7ed-fa0d-43b9-a97c-040b7c0ac40b",
        "cursor": {
          "ref": "66639b2b-568f-4b54-b29c-707ef3305529",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "95da59c9-557e-4403-b319-5a149c3fc96b"
        },
        "item": {
          "id": "1273f7ed-fa0d-43b9-a97c-040b7c0ac40b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5b7e37e1-906c-4608-9f61-494ddf13e887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069b4b62-14b2-435b-84e7-77ef76debd36",
        "cursor": {
          "ref": "6ebc4d66-5d04-4736-86f8-f5938b495a7c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "38262867-aac4-4dc8-8fbd-8a2dcd6b9f42"
        },
        "item": {
          "id": "069b4b62-14b2-435b-84e7-77ef76debd36",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1981c3f5-d727-421a-81e5-af7bd7c63cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9611826a-2024-44bb-9332-715c8b3bac96",
        "cursor": {
          "ref": "edc1c319-5165-42e9-a04b-60a0a2ae8a41",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6bf755e3-f4ad-418c-847a-3a5cb06b5cab"
        },
        "item": {
          "id": "9611826a-2024-44bb-9332-715c8b3bac96",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5517337f-928a-44cf-ad3d-63ecd15aa6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e5762b-6a5d-4762-86b7-838c52cb401b",
        "cursor": {
          "ref": "0ea6df1c-5368-4c0a-a2c9-fd37e9105fe6",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "10b2c76a-7763-41e6-a364-1371db455057"
        },
        "item": {
          "id": "f7e5762b-6a5d-4762-86b7-838c52cb401b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e770ca59-fd00-4871-9d57-39d8475ab007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08cdf370-5025-4f3a-9944-2091b7091793",
        "cursor": {
          "ref": "d234813e-cd92-474e-a617-9609c100a731",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bc62f884-19e5-4b60-b528-406244df8f02"
        },
        "item": {
          "id": "08cdf370-5025-4f3a-9944-2091b7091793",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9c844226-c856-4009-a755-24d790ac89b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24598abc-0229-4263-90a1-d7a601a2fe66",
        "cursor": {
          "ref": "538606cf-630d-4dc9-a949-22ac96221b79",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2b5628ff-4b30-4425-809c-6ae8852faf93"
        },
        "item": {
          "id": "24598abc-0229-4263-90a1-d7a601a2fe66",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "90fd2f89-524e-4ea6-94f8-ea9a7e047bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622f6bd7-3edf-44ec-8257-17b0f9800458",
        "cursor": {
          "ref": "e55eca21-ebda-43f4-b372-d8286d59d06a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d30d620a-e64a-481b-a286-da8cb3af245c"
        },
        "item": {
          "id": "622f6bd7-3edf-44ec-8257-17b0f9800458",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "505762c9-cc5a-43b7-a52d-d4f0120bff9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733b750d-37c8-4aa3-8590-bf0d85b1574c",
        "cursor": {
          "ref": "9bd0ac9d-dca6-41b4-969a-2c2af5c2c70a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b012f1e4-8642-4325-bc30-e5818ac02976"
        },
        "item": {
          "id": "733b750d-37c8-4aa3-8590-bf0d85b1574c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3c0d02fd-c624-4b58-a6f8-4035031bcbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fa006b-7b1c-483e-81a5-f35809f1591d",
        "cursor": {
          "ref": "a6e3ffc9-5d82-4d29-baf5-9f5ec139db4a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "80ace8c6-242a-4679-a26c-88bf433a5007"
        },
        "item": {
          "id": "98fa006b-7b1c-483e-81a5-f35809f1591d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "02e4c0ce-3e01-4800-9639-d50987a9e18d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b936c661-c04e-4fb4-88c3-874d669418df",
        "cursor": {
          "ref": "76554e04-ac62-4567-b85e-0c7a8049b623",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dad7f15c-ec21-453c-bd75-74a5499ea0b5"
        },
        "item": {
          "id": "b936c661-c04e-4fb4-88c3-874d669418df",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ecac9e85-df1e-446f-bc4e-e647b0658ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213334c7-d1b5-4297-a008-500b4ebbda4c",
        "cursor": {
          "ref": "65ebf6e7-6e71-4307-a599-cd61e8538800",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "144382f8-e3d0-415a-8712-f2fe8d110145"
        },
        "item": {
          "id": "213334c7-d1b5-4297-a008-500b4ebbda4c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "91c41eb6-b770-498f-ae2a-4156a729b478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c62e76-81d0-483d-954e-72c2c4abc702",
        "cursor": {
          "ref": "e7fcfb0c-ec73-413e-9e3b-58077782ce49",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "863e1068-2857-4d55-a5c1-7200fb210cbb"
        },
        "item": {
          "id": "e7c62e76-81d0-483d-954e-72c2c4abc702",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7e67f207-9185-4d33-b62d-cd413f8fa0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e4cbe0-418a-49c1-a002-02961755eced",
        "cursor": {
          "ref": "94ef23a5-d597-46ad-a296-33f0f8e78455",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "475583e3-6b6a-44ab-92c9-1098829d9ad4"
        },
        "item": {
          "id": "b1e4cbe0-418a-49c1-a002-02961755eced",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d602847a-dca7-4703-858a-1f756464a5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73c64bc-ddd1-4e4b-95ad-581acb1e1a3d",
        "cursor": {
          "ref": "ed5b0370-d63a-4c4e-a78a-e5b710e89ac0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a1829032-de93-4c76-92cf-2fcac4d63f0a"
        },
        "item": {
          "id": "e73c64bc-ddd1-4e4b-95ad-581acb1e1a3d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "12245664-a5bc-44de-895f-095851bfc30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c439365e-fd58-4705-a590-ae55b2e16fbf",
        "cursor": {
          "ref": "4ea7151d-63e0-420a-9b53-62c7c6745384",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c6a2976e-9a51-4960-9ce1-f7ab1dad2376"
        },
        "item": {
          "id": "c439365e-fd58-4705-a590-ae55b2e16fbf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "df159be0-f923-4292-859e-3b3f7315d5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115ef696-bc05-4a26-8e7b-a227f5caa51c",
        "cursor": {
          "ref": "9fdc162f-39aa-4edc-b3e7-4b3c4d27cdf0",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d4880e5c-c67c-4c10-a3fa-e2c8500ffa43"
        },
        "item": {
          "id": "115ef696-bc05-4a26-8e7b-a227f5caa51c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6eb3fbd8-5f8a-4fab-95eb-27f2d58930cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec90fdd8-71da-4632-9aaa-dd08b87e3d2d",
        "cursor": {
          "ref": "5e4a133b-6e30-4f86-8440-cf719301e362",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1886cb84-17b3-463f-89bf-2d64d2143522"
        },
        "item": {
          "id": "ec90fdd8-71da-4632-9aaa-dd08b87e3d2d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a29eed1e-f8bc-4dd0-89f2-cae4b04252a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810c45e6-63a2-46d9-b0bc-f4117765fd37",
        "cursor": {
          "ref": "83748a00-7b99-47e5-8a74-d52726b7cb87",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2319e0fa-575b-4289-82e6-7b7f4bd20178"
        },
        "item": {
          "id": "810c45e6-63a2-46d9-b0bc-f4117765fd37",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0504a2c8-4541-49fc-9196-e324e983a220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd688fd-7969-4f88-bc76-631d13a905dc",
        "cursor": {
          "ref": "8f20efa7-2bb2-4b9f-8ef1-9a3e37076faa",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4f2749ee-30b8-4fb0-a2bc-36d13b37c4f0"
        },
        "item": {
          "id": "cfd688fd-7969-4f88-bc76-631d13a905dc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7f4699cb-b39d-4c01-ba75-6309005f066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623301a6-b21b-4816-9d77-43f4fdb45015",
        "cursor": {
          "ref": "a37c7ced-b0f1-499a-b1de-e6c5fda65566",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "1be366e4-c985-4033-a7a4-e1731bec77bd"
        },
        "item": {
          "id": "623301a6-b21b-4816-9d77-43f4fdb45015",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "71442160-5e25-4052-95a8-81be5803b421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2be0b8-7060-4acc-b260-657b6c1157dd",
        "cursor": {
          "ref": "48021623-bcde-4f74-a2c9-654b6aeda1eb",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "894b3b26-643a-4bd4-827e-107f97b2b98a"
        },
        "item": {
          "id": "6b2be0b8-7060-4acc-b260-657b6c1157dd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bffbb97c-048b-4984-9d77-5013fe276b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c8ab4c-854e-4fd3-af81-0a0e09fedd40",
        "cursor": {
          "ref": "0c9e8c3a-4407-40a3-a4fa-e11194f9d014",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d2a66361-cd8b-45e3-b8c1-8d1c4a87f129"
        },
        "item": {
          "id": "a0c8ab4c-854e-4fd3-af81-0a0e09fedd40",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d5413e0a-45e0-4ddd-b6f9-e4909aafa219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc846559-c4f6-4ba3-b612-c906afa0ae4d",
        "cursor": {
          "ref": "86845c0c-d25c-4f55-803a-66abed17b126",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1c4f3f78-c023-4707-9ad7-67af2a719579"
        },
        "item": {
          "id": "dc846559-c4f6-4ba3-b612-c906afa0ae4d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7a9377e9-00aa-4d2f-8b7c-044f3e167e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fece035-56a9-4aa2-aced-a617fd6f102f",
        "cursor": {
          "ref": "308a7a8d-c9c6-4a4a-9b18-fbe9c2d559f3",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9409bc3b-4d85-46d5-9306-dd62f038bf1e"
        },
        "item": {
          "id": "1fece035-56a9-4aa2-aced-a617fd6f102f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4ff9c142-ab4c-4f52-ad2a-85412f35d94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb948e1-87d2-4ffa-a0d5-49e2bb7c6568",
        "cursor": {
          "ref": "4e90ceb0-5d6b-4adb-b1db-89f2cad06b82",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e67463f3-fead-44b6-8538-3aee5c9c4ae0"
        },
        "item": {
          "id": "eeb948e1-87d2-4ffa-a0d5-49e2bb7c6568",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "09eb2994-9e2c-4e85-ab7a-db6cf5366fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3d6166-0e1a-4511-aacc-394bb97935bb",
        "cursor": {
          "ref": "30779afd-865c-4db0-9d08-96f0e1f1e30c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9a93819f-a4cd-4808-b8a8-7c334f5c3b2c"
        },
        "item": {
          "id": "ee3d6166-0e1a-4511-aacc-394bb97935bb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "42889af9-5282-46ae-bf71-e95adbe7b5f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcffee6-2725-476a-8acb-67f5d013d330",
        "cursor": {
          "ref": "5a8daa25-4de9-4c73-b93b-bf338fba9832",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b933517b-c046-4ab7-9431-f76e8c360af5"
        },
        "item": {
          "id": "dbcffee6-2725-476a-8acb-67f5d013d330",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8d3e514a-ed66-4b74-9e26-63793787dbcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037046ec-2f1f-4e3a-95d5-a93169654e3e",
        "cursor": {
          "ref": "0f3b24d9-f86e-42be-8240-c8dcc259ee09",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "314a8b2c-1868-48ce-ba0f-1b39d938f2a7"
        },
        "item": {
          "id": "037046ec-2f1f-4e3a-95d5-a93169654e3e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1c16b160-a8c4-483b-b1a6-c653e87e0133",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9e1cd876-d137-4568-afc3-c39271dcb5b4",
        "cursor": {
          "ref": "17878c27-dbe9-4e20-9b59-6d4559b685b1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d374e7be-aecd-4211-a20d-9aae21b08886"
        },
        "item": {
          "id": "9e1cd876-d137-4568-afc3-c39271dcb5b4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e43a0278-d87c-4320-a300-330260e313d9",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd800190-665c-49e0-88ec-de6179be3eb4",
        "cursor": {
          "ref": "41fd6ce6-57bb-430d-bb5a-093e4c308533",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8e400d12-d68c-4072-a04e-c908a39ca094"
        },
        "item": {
          "id": "cd800190-665c-49e0-88ec-de6179be3eb4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d8a83300-3402-4453-89ae-0e8ab4bd5abb",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "db235938-1791-4d26-bf39-804a8419ced2",
        "cursor": {
          "ref": "dcf8b3eb-e803-4b08-96c0-f806f216b450",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "31cc6cb6-b1de-4ba9-be10-8b8067a96158"
        },
        "item": {
          "id": "db235938-1791-4d26-bf39-804a8419ced2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4dda67c9-4ada-4589-be01-fe912f66793f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db235938-1791-4d26-bf39-804a8419ced2",
        "cursor": {
          "ref": "dcf8b3eb-e803-4b08-96c0-f806f216b450",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "31cc6cb6-b1de-4ba9-be10-8b8067a96158"
        },
        "item": {
          "id": "db235938-1791-4d26-bf39-804a8419ced2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4dda67c9-4ada-4589-be01-fe912f66793f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98db05a6-a0e8-43f1-a0ba-b13a8255cb62",
        "cursor": {
          "ref": "b098e8ac-9ff8-49b7-bb00-66750f0393dc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5c65aa87-3a5d-4619-9294-f6216e9d9e17"
        },
        "item": {
          "id": "98db05a6-a0e8-43f1-a0ba-b13a8255cb62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "46fcd2e3-d251-4bdd-a8d1-97af9c951a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d9d8b8-7d4a-4b37-83bb-03c6e7e381b8",
        "cursor": {
          "ref": "20c29701-a122-4285-b38b-ce4c79b6d41b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "65fd9f76-831d-43c3-b7a0-9fe8d6acca84"
        },
        "item": {
          "id": "05d9d8b8-7d4a-4b37-83bb-03c6e7e381b8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7381d7e7-97df-424f-88f6-774d89c5363f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}