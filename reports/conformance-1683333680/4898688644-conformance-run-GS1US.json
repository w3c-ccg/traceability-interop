{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3d926b20-bf29-406c-af62-09e268cfc7ec",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1b26d795-873b-4d6f-a7cd-97b8e2ab049a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96d97eef-6996-4999-94a8-50a6e38e803b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8db28c44-4d33-4b2c-92a7-263231bb4255"
                }
              }
            ]
          },
          {
            "id": "1349802f-8781-4153-a16f-5b4fbaed3dd2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "00ae814e-e68d-45b3-8c00-f0bc2a4476e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fa1bec57-d47e-4e18-bf32-be2a34e6b122"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f303463-146f-4917-8197-edae089636e4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "15db555f-c235-4798-8f69-b44afe568954",
            "name": "Positive Testing",
            "item": [
              {
                "id": "400466a1-6842-40d5-9d0a-cd4c4639de66",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c556d70-4369-47f1-a454-b2c720bb772e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ab03826-32ac-433c-be92-6afc0d79895b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51f9cabb-84a6-4136-b5d8-0f186f3b9f07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "389b585b-927e-429a-9e6f-f3728fcaa2d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b51ce64d-5188-4221-b31d-103d08b4fd6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c98e5338-b787-4d81-833f-6b4334c62520"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b73e47ad-bb97-48d1-9424-7e7ad365c250",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a34c4d9c-7dfe-4763-a9a1-a02cffc137f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f211f0a-9f9b-4282-9a87-6eadfb78bc95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "597a44bf-6660-4c6d-bbeb-5e7d7a311048"
            }
          }
        ]
      },
      {
        "id": "7ffb019b-1186-4b6e-ba02-6fdd83a3b4b0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3f138680-ec8d-403f-9c80-23f052c78e75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "254b170d-d032-4b3c-b3a4-2c4ad9da6b1d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4266fed0-afb1-4d8c-bf6d-e8f3f7bab737",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3750a976-7d2f-49bf-92f1-7d4ace648250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30ff05b6-2c36-4000-a377-126d67f4e16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d50c7a5-2788-455b-80d1-16407fffbcf9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f4fc36-3cb7-49f7-be4c-5767ac7717ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b44226a2-ccbf-4e5e-8461-6ad2db094eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d11b31d-0f3c-4ef0-86c3-ce42a2dd4b1d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c6df64-2c15-4da7-ae55-038cd931fa28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d81e818d-a374-4436-ae1a-c288e37fdba8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acba9aee-4e9f-47f4-a9a8-8ef6ce287bf7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c640609-6fac-497b-8788-f1d7a59fb91c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d37f1a-fc3a-47ba-981f-7b4159e66d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7a0b111-7496-4fe3-a6c2-bd8a4d005a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fe7ff1-3820-4426-b088-0f890fd3b9bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44236e9e-b7ce-4424-90ef-4f50b8096860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b8ca6d-bf86-4c2f-95b8-00deb10af2e3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15f0342-890f-4c3f-8689-46c382bceca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7ab5030-710c-4872-a4fa-9b00025e9817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7e92c0-66f8-48bd-a664-4619a91929b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "33f00aa0-b7ac-41ad-a1b2-ecb798dae1e8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b0e6dffd-ecd5-4ef0-bb1d-ff3e7b140845",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1691b2d-ba0f-4fa3-a04e-24adf4847d52",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aad93c08-3af1-4f9f-ad6e-2c45c3e52201",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3577760d-d1c6-4cb2-82c7-c58174637481"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c60d5725-019e-4dd1-a7df-be373f823f34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "116a97be-6bcb-4530-8119-a4d49135c77e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07df6066-d8d0-4693-b0f7-d92978fc9189",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "912d9f7a-e27c-46a1-b97c-422b90f5d829"
            }
          }
        ]
      },
      {
        "id": "cecbb58c-8b33-456a-b90c-c1138fead1e5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dbc18cd9-b608-4da6-bf3a-6eb6692c55e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "110ac2b9-a9fd-431b-beec-78482575f1e2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "246ef07c-01f7-45fd-8bbd-ea5956fb598c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a576ce40-59dd-48cb-bd4c-c7d90f279f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f46716-d426-4aa5-bf36-360a12ee94bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afe7622-695d-4545-bce6-381195a9a12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8164031f-b011-4caa-ad91-4e9adf9636dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75da5a71-8957-4643-83b4-d9ed9369e523",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "522e0ff5-39ab-4d63-b53e-9eb38ee3fe86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b58147-bee6-4418-bc1f-50185015d095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1dbdfc-b319-401f-bf9f-a83e9a1ac94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a81ac65-6690-4777-9a43-9f82771d87de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11069431-8945-40a0-bd58-c091558ab1dd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924d6542-9735-4249-8ba7-e81530ac662e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88090b15-831f-4eb7-a110-1f292524bb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e154f08-986f-4528-ae2a-6ecd56da5133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fad4f8d-0a45-4c81-8462-3c617f5faaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80d4804-fff6-4dfe-9add-4d1264ebbf66",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7ca134-967e-4700-bad9-b71734e17b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2811a00-bc6d-4755-9bdb-aa6cc61f4285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c75cb17-4c4a-44fa-a18a-fdb03815ff1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17e906ab-13e0-48bb-9be0-19d56d892f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7860bd5-7c2f-4a5a-a689-38e3ac7e1391",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e26353-eb0b-497b-bd16-a898f9e0d39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7027c0-e2d2-48ae-92d3-9495b0ba3213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bab60f-afa5-4957-b803-b2babee24800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7a43b9c-bf6b-47db-b9d6-662fefc86163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972db620-a6f7-4f9f-bbf3-4a477817ed10",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b91770d-de2d-452f-84e0-5d7c1211d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce3b13a-3928-485e-8fca-b9e94f4be8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb77c83-6b9b-4430-a360-e4e267f3f8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28958f6e-62fd-405e-8c7f-e44010415506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ab8085-63d7-4f4e-9b3e-e0d1a119bf95",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d152e3f-fb7d-45fc-b3fa-7c45a91b525b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96cd28cd-e5eb-48d7-905e-0256369138fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b32beae-ff1f-465a-8261-fed0d2f80377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "215f8489-cc57-43dc-9d2c-bbee6b7deb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e827b4af-252c-4c6a-bd9e-fd14533790ce",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3648446a-ea60-4a6c-a26e-fce78480b7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c18322e-f65f-43de-87c3-afd6399583cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654dcbd2-64e4-46a7-be64-851e84716e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecd94c72-fb71-47bf-9812-97b7cf89e7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfba9678-c7a0-4e74-a40a-d5cb84f64e9e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31369090-2136-4fb0-8ddc-f2a7e6b239b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b816859-0d98-421a-a01e-78cf5990e714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d08f0b8-dfd1-4989-991d-dfdaf864f1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8f32388-aa17-46fe-9ccf-e75aea969e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9af6975-7f00-41e3-8c17-ecea6ac12817",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073aa0ca-7920-4aaf-b0b6-f90870d31159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecab03e0-ca7b-42db-9d0c-481783c9efac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0edf4ec0-8d93-4b14-894e-41caa6a7eaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e75cc1a7-e9d7-450f-912c-b948b7c429ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fe3275-0162-413d-ae4a-13e291494188",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e23ff9-5101-4bad-821a-1e692e3b06fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d53e55-7086-45ca-9216-86a9d056bf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eee731f-b182-4b37-ae97-0511bab234c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6abaa3b9-bcc2-4268-90dc-7370daa16c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac3ad0f-30b3-4f93-979d-9dbb13479dd2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7f24c3-c61d-4a0c-bfae-59d32f154ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe037037-95f2-4fb9-8c91-78731b6d9305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f91e96-0cb7-445d-81bb-e2d950adef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31b74b20-18b7-4c11-a5f1-c31bfc575ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52d67e4-28de-408c-92ab-e890331952bc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fe66d1-2f71-467e-aac3-80bc8c6261b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15718235-e9f8-4c4f-985c-8fc444e6a31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8472aa1-ffd8-48b6-85b5-a31c05be5055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91be495e-3e81-40d6-a417-e4329b43d1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afaf27a7-d759-41f6-9506-e6706f2295f0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94e24ec-7bda-44a9-815e-6ee7fe695add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca053a4c-60e9-4962-8952-cb4e966c7c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab0dfe0-c5ce-4cc8-b079-bf6c47c92373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ce547b7-90fe-45bb-87bc-c0d13a64256a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe121931-5c93-477f-bc75-33e29306bde0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26be44ea-ecbe-4e18-a175-0b81b0295e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a00c9f-22cf-4ba9-b077-462f49a5efcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833b96e-73d0-4eb7-9cb5-dc07e9b934ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49b657dc-a118-4d3a-99e4-b528ec703a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc8ad1c-6e17-4666-ba31-ab526ddf755b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0b96ad-e06e-4f43-885e-c51c61189385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5082d047-3865-4ebc-810e-d8b1ab68f22d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0483bdb8-bb85-4bfb-82e1-6d68c886335c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67dfc796-d509-476d-92a1-1acadb9d7554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893518a3-b1ea-4059-a532-b6d875989c3e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0035bd2a-984e-4557-acd3-8dd12943cafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f032b390-0a78-45c5-9925-d182e70e26de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2771e65-2442-48e5-be66-3d52a89cb866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e8a8e3-239e-4a11-907f-0aa7fde059a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5250f8-e803-4169-ab81-eb3c6127ffdc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abd03a9-9a04-4b01-b801-e9dbb5383862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8918553-f3e1-4872-a7a8-6867b20d5217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393bbf61-de69-4859-b4ce-eace7a1bc93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b65f6a-89f6-49c0-9a26-b210ad873e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eded1cb0-1bb8-4cc0-a0f0-e7f56843408c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d6cdd4-c906-452f-abb3-6176838f0abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf30bfd4-460a-4238-bcd6-3805a2fece98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8618a3d-2e7b-4039-af69-d0b7b74f02d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd3e8dc-fdb1-4867-9959-1f98731f5634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38256f4b-12fd-4624-bfe3-e6c1ffb3a957",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1c429f-8509-4f35-a29c-11940770b987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3c5a10-b737-4fb5-ac21-670df6b5e602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbe288f-ba90-4c84-b5d4-297b6b82d375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "195cadc8-5577-4827-abfa-1ea10f14718b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035c0443-41a9-4f15-9b66-1bccff7e2291",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4b504a-54bd-4ff0-8169-587a71cc5c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047d4984-bea8-444c-b449-e20c9d5c51cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b5fccf-a720-4b55-baec-7905f9c3f678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96a4f96d-3d64-45cc-b043-f7ed3fed6302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce44ee4f-a650-49a1-b681-e18a29af360a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bdd043-c0a6-46c1-a08f-6426f75af808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc07a33-62bb-4d93-9796-0e8d5638b2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cf69a4-349b-46ea-914c-904c86091e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19bbbcf6-c08d-4b33-9ac9-76f2d6509e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d0f929-2aad-4807-87e5-fad219794b2e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9145676a-31ef-4c24-bb54-dfe21ad89ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec21c463-706c-459a-a941-dcc3baaa7096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9056a988-b264-47f4-8cf4-e81c152138a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e55a4e00-7a74-4586-948e-7c68e72b20f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864334b3-3f98-4ec0-9310-f6eaa8c1b744",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c6e947-20b0-4d96-9aa0-43d228b3049b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c10e93d-2749-4891-b426-2975439b3b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2921701e-f37f-4947-8085-c3c42534f3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ec940f-df28-4110-8ecb-0c8a79d06e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e431e944-9b4f-411f-bb91-9c3b8bb81423",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295057c5-627f-4884-8142-4019441b005e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41894a10-e1e7-422e-bac8-649e18572bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6076b0b-3cee-4bc0-a401-c2eadc8a422c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbbfbfe-e460-4f07-bd9d-87a9f3a4998a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b628ee5b-9422-41b5-9720-557c3c8074d9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef75f9a4-0edd-4379-b66f-494a67469a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6659783-0d2c-4c64-aad0-6eac71b5d163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0791e7c9-27b7-447e-9841-bd4b874a9031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0ab363-6d2c-4431-9ab1-7e7945cb5fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98083f11-1f5f-4505-9dc0-1398213bb85d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b43b4f-c33b-47d7-bc7e-d6417779e31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0ca623-5953-4bdd-bc54-36b56f518b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b292c5c-8d8a-4a79-b024-58637d6ca847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8be2038e-5732-45b8-998e-0216f4731eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fb1aa3-45e6-4f02-bb79-e8d694b90656",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fd70a5-2fcf-42c8-905e-fff7ad55ede1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d29602f-6267-4a84-b4a3-1e8685f1d96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ff8c53-b8ac-4c5e-afc3-45235d9f7d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec3a9ea-50da-4a37-8711-a8671a5310f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef493f1-bac7-41d6-9e2d-a248fe798b8c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7831568a-8523-4534-bbd3-348fe9fc781a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f92e1f3-f629-4b42-930a-97af2333fe12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e97128-2504-41db-98b9-e55debee7b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0578cfc-380d-4d1b-8767-4fb1ca8886a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abbb7ab-d09e-4a8d-bdbe-02114ff4d3a0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d2bad4-20c8-40aa-918c-9270246ca3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7fda9d-76a1-427e-9cc8-e7ab652f58e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2abca2b-09ce-4726-bc52-ade4a9bfe397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2ef0c1-aacb-45c4-a276-7ea04ec05de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a180be6-e12c-4826-b5bf-30d58ffb297c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb3d114-2ca3-42fe-b0f8-52f346bcf10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698e4f5b-5bae-4587-86bd-aad05a8acd67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e38fa42-e352-400f-a385-dae9bd50714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d09ea26-3758-492e-80a4-f9fe1bba8794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4344899b-8426-4c34-93f8-7459f4ed0bd4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6264913e-4d4e-46e7-9989-52bcb400f186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf05a36-f5e2-4454-bd84-5d1c3988be35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201ea35b-9ac8-4c2a-904c-707026b384d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da19fdf-8e40-4578-a54b-4da5e3529c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b0481c-14f3-4355-b4d2-d6d5849c6373",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e22531c-3d7b-4109-b3d4-294028f0677f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8196ddc1-bf51-46c7-8992-c5374d5fa974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe89d40f-62b5-4851-aa1f-6d73d33668cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc49dcb-7f76-4340-ae55-872c329304af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0dffe0-f17c-4094-b010-73787e120704",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44d0573-d0cf-40a6-bc40-514318496679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2278b82a-4617-4a81-9056-f237bc0743fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ae362c-ea44-4f17-af77-05cb457693bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee209bb3-cc96-4518-ba3b-445c65b75670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3405f4-3935-4724-aa74-0d29693e5cec",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aecc18e-7a80-4c0e-8680-b1b248eb2d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5030485-bd6d-4078-be24-f777e3eb894d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab05152c-a762-47da-a488-0111f653fd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "da76d288-3ec9-41d1-9ddd-003bed4aab43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f101f79-22ba-49e9-9118-b6c9ee41f833",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af584f4e-c546-4a37-9d24-1f886c8b04f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e67e84e-573e-4758-8c6c-cf6209fdc92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ada54b9-65e5-49ee-ae64-d563bd1fabd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "828d9306-8686-4bb3-8006-dd92275e98de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec4310e-6fb4-4deb-a201-274da72dbaef",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac518272-b30d-44a2-a41e-505d7f9aa097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09f5133-3581-48be-8e06-22bbb4077c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ab50b3-0afb-47b0-b5e6-0bb278ab4d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da0b4f5c-ec9b-4bc9-b717-fe943d9b49f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed6092-ba34-44c6-a26a-f84394b6afac",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a16512-f661-4a95-bf8c-e79371ef5baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e34e35f-3833-44e6-b44a-5cbebd5b8836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b46e5b-0739-42c6-adb2-481b1af686d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8007dc1e-3b2c-4f72-8ec9-58592021a9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf04cc40-fb87-48a3-b782-a62bacda0cee",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89064e5f-ee6a-41b7-881d-b5fd8905f67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587ac126-517f-456d-af66-4d96fdea39b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647ab674-83b1-487e-92c1-c4691dfdbe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5eae53-657e-4975-b478-c058a27355eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06641e32-da74-4b12-bab7-0e4d7a42ccfa",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a517503b-6811-45c6-9476-e291f6c41ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616c8730-3b22-49fb-a102-b0b34aaf1dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94ade84-15f2-4db8-a944-3e78b5552884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "06a4fb6e-fa67-43e8-8133-16f9f9e9b083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ced96f-fe28-44ac-9f1e-6a403ec0b4f3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3c4832-abf0-478f-948c-8623db792ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b75844-74dd-47ff-a976-da5d256a363d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06a66ae-cac4-451a-8e9a-ecdf9d86dbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b634646-abb4-42b2-bdb2-db91a3ea541e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efa3147-27ed-4f88-98be-e1d3a4b84ee7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5202e5e3-90a6-43dc-8450-bf2dfd7c8325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25d0a8a-483a-495d-b5ef-12581031f933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b08f92-611f-4844-840b-736cf96f0775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "13a25cbd-9e39-4be0-aa95-aaad78ad7217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e343083-adb3-4356-a7ed-a5ad92083842",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27214920-6eb8-4879-bb9f-c73f4621f61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8416bc-b3d1-4adf-8b38-f66a81c84666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8b55e3-58f8-4b93-a3d8-b91881168b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "76253387-751e-47d8-883e-9065aba4e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1c6a36-d586-4601-bde6-b2c2daa214c3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f5b3e0-2cc1-40ce-8f41-b356c55d1e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b10ba5-4583-416a-9bf7-97eb73f09ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db87925-395d-429e-b445-fdce15e89eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f1398e-6cd6-46ad-b5d9-437f993cde41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c147cff-3c6d-4258-b876-d718b20dcda3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899fc9fa-449b-4e47-b295-cc6a6a0ade17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862f4451-89fd-4057-bea6-138083cb4cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfaae74-be5b-4250-a73b-b9340eea84ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce1b63c-4e7c-45eb-9b98-8338a0fa7c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d958e55-4e37-4527-8b6c-11f325c0cf0f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ac0d96-b73c-467e-9642-0cae9fea8aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4a2172-dbc3-4526-85d7-dbfbd7275b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52973112-5d82-4380-87f6-1e2a80684780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b89be415-11c6-4c53-8adb-a04d074fae36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c380dda-7487-4021-b5c7-fdcbe8cc4081",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1916db2-1d94-494d-934a-09ae05ea9081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd84695-77da-4868-9539-6a7785526313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdde2129-1c22-41f8-8c73-5a6a98fd0617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d3660a-f554-41b9-a737-72ab79ec6df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0034d6c0-0fad-41ea-8a59-7eb86b492071",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3296383b-97c2-4295-b040-d3227d1314fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b35744-21e9-4a0e-a079-15c8e1265bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5ec3ea-0f61-416d-990d-664ae51c180b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab87b5e-c697-4e9e-b270-b6a7775b0622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7a3910-2054-4e1a-ad45-4bc16a3c90c3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78d6848-1bf2-4017-bf72-e1b72ff44ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa486c79-d42e-48f7-9b77-e06e77eb84c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5903624f-34ef-4c4b-b429-8566ca4dc26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2567cbd9-1753-4a5f-b4b6-31073f93751e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608acec6-8c8a-4762-b7ed-ec6fb37a7dd9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb963310-e76c-4d33-aec3-e5177dafc615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9e89b2-b486-4866-94f2-0dbaf6c092af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a10bcf0-e10c-4cb9-b54d-24d44ea7b200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c89413c4-e600-46e2-8fde-d88261c93b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f9126b-d236-4684-a98c-693713e9e049",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d22ee0-7e22-452d-8a45-096101310c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becdaee4-5609-4890-8158-a3ec9bacf912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3b7ea7-6636-4b34-8d64-8327df796bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3619c5-3d79-45c9-b6da-1b2b396bcebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e40fbd-8f13-4b40-985f-6c030b9c2212",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8434f2-ab5d-44e6-acaa-73048db42f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77dcde2-ef1d-4dde-8a3c-bdda12b50975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2411ec-d375-4321-b5a6-0b16bb19fe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7072e9e4-4eee-4f23-837d-e701b92ff9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6369508-27f5-444c-a440-087ff8c1ef7f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c07067-68be-4e79-93e6-89bcc3c954ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52094d17-3711-42d8-8523-b5aecd42bb1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c35284d-7066-4e05-9f36-ce4f666dff48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc20db58-00a1-4793-bb68-0c85a4e64fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4daac93b-4dca-4d8c-b504-7fbc44eca850",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f224a5b-59b1-4196-a8fc-98aa436575c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1c4262-fc3d-4e69-a822-000a3d3a11fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4c2b8d-534f-448d-a5c8-ef1ea812ffb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6caecfb-d74a-4f8a-a3bc-a766bf1e4151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9536f13-04e4-4488-82b4-490d11a26f76",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e4ae91-ad4e-48a4-86ec-c4276464be3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a7578e-1cc7-4115-971d-14e8c9d1cb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce9323b-3639-42ff-b14b-8d94621e8728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b37434e-c9db-4e40-8e74-27bdb4ab726f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bb6ac7-f57b-4ec1-ba25-b130f01cbe3d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e6e8ac-04e6-4ec9-8940-474c70cf3964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9feef6ff-6897-4535-ace7-8cd36edf7d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5fed7e-acae-420a-a6b1-dec9a5ff9aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3f15660a-c7a9-4c51-91b1-f62c635d1a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5733f0-fae0-4821-be9f-023af0f1d803",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5768b69f-8d40-4b68-afe2-0cfb3b013534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc2755e-44b5-4963-98bf-003a60e1452b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf8df57-843b-4a54-a1d1-7221001a055c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2812053-dda8-4ea3-9f82-6a38286a925c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b5daf6-3392-4acf-8f79-4979e4103f6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c238115-3bf3-46b8-83f1-4ffb35cac854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2003a0ad-54e6-453a-8352-d53f7b378f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbda100-f7b0-4f7a-9019-a1bd7dee433e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "05cd8a5b-89cd-493d-86b8-08bd86eba37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a8210ce-7ea6-4d80-a7c8-44b61675ed08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9d0a7-e220-40cb-aace-2a66a90220ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33b3ae1-9529-430b-93d6-63435218d488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4783f45-c80f-49d6-8def-2c46d937c1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "966f1c69-1496-40f1-b955-544897ee604a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610111ac-3317-404a-9c29-00474080ef98",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9409f04f-1e02-4100-98c3-8c7af437d71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b23330b-16b1-4eda-a451-a1901fccb274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80b5463-26c3-4fce-af5a-6b00130d1eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e14995a0-9f88-4633-a284-925dda4ef3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25bf8e6-4d13-4c1c-9b58-7b0051aa475c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e578a547-2ffa-4c1f-a471-f6eb95a425db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f9aac0-af1c-4b0a-b955-3a093a0e4b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0df9d7-6a02-4ced-9804-7d29c28329e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d588ce-75bf-44e4-b0cd-fb9c725048f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dba5b3a-88f3-48cf-bdf6-889daaf4ebd6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fbcfad-a4c0-444c-b490-c54e6a666dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c94b20e-46d4-4e23-adc8-eef60a704e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96b3eb7-e62c-4790-a4ad-e8c928bdd855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6aa4b4-1d04-44d9-b7f9-c1f7c42418e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83528ba4-8eba-40fd-825d-fcb749473a04",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3eea8eb-232a-4538-9d5b-bb3bda2d82f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a8c3c9-f4d4-4bd3-8e7f-4afd35a75391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfab701-8307-49e7-8e97-e4d46ee177c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c97b38-1dda-4cdc-b490-ef4578a5bb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dd07e5-3fa6-40f1-b8f7-ecfada0b0d16",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c684c8-94a1-4451-a653-1c0fc408559a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f023b89-896e-4425-8a3e-3d191f61b8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb6897d-0158-4db2-9207-8c50afdbd338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a88512b-33de-4f35-96b6-bcdd53b88982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbadfc5a-4be9-4bac-a6a2-a37fafca687b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dba43b-db87-40e9-97d4-8dd669c16e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19746d6-2b8f-4793-83f2-2507c1545f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2922259-cf39-427d-b4fe-5f42ca013cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaaf43c4-4e33-43f5-a065-84855466ca8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bad306b-11bd-49f6-acb3-0157632a2849",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba77045-3c15-4c8f-a3f0-c77d822a418b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734acbb0-0785-4ded-933c-7b5f9b8c1d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8218e10-1e83-4746-b64a-b0c80268999c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9013cd8-5222-478f-85de-2bafe5cebc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfedbfa-7b8f-44cf-a110-942666d8926c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7f4570-58c3-410e-b167-5a396ab401cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad39f1f-16c6-4d1d-b67c-5d1aadb0e8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc44ea3-00f4-43e3-951b-7b1d8bd432ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f77c67-2c5b-4124-a0ab-ed196d44716b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ae2b91-d46c-445b-9220-790f739dbc5a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f02ea5b-7600-406b-81a2-c8d7548fb49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99de7ecc-1fef-41bf-9fe1-1ba263f27b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb71dd7-3caf-42a1-a0d7-ce2618839e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe984b6-b118-4a4d-8212-7605d76d53f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e78f1eb-5cee-419c-9c39-0c505e26c64b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2654e16-acb2-4f3e-be4f-d7e3beac3b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361c60a8-caff-4327-b245-92a1d91eb6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447a863d-9516-45f4-ad0d-eedb5abc3c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b80c243-5601-43d3-8a21-8c8801fd7a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0686d3ee-4ece-4fcb-a122-b3399e08cdab",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9682a0e-ae07-431b-91da-a06b8ce7ee42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1677312f-4e0d-4279-b20d-6b7c26a98d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fc463d-7eb3-45c7-8ec0-6db78852df9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45065668-fbb0-4f8c-a529-1a9202d5a56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b356bdd4-d270-43ab-aabb-166ec20723d1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b3398a-6d0d-4f55-9f73-466a130c243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0f3306-bfb5-45fd-a6c0-f097a2359a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78fc57f9-88f0-4d18-a5a0-31d5c18112c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4fe5d4-a61c-4bee-8e59-406d196be45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201a947f-0084-472a-8b25-9a8bf9299d78",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee01f93-ee9b-4834-8c23-42bc5a4e1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480fa491-7c68-4b09-b3ab-daa429066699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa22dc3d-d9b8-4e42-9cdc-806811c1b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5b0570-9bd6-4d0d-8728-47d6b25153d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf379314-d26d-4c8e-aa10-7d039a3a462d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dfc013-ed36-4b9f-92c2-7fb92c69dba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3c5cf1-0050-4851-adb7-14fa2cc5a52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471557a7-1394-4649-b53c-e2425338e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0253249-1c53-4239-b5ea-f954b901b85c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e4c3e0-42a5-4e47-994f-8b082f6577c2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47150937-a530-4a2e-a6ba-31cf8e610b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cbdd8c-0b03-4176-a8c9-ec7318d2e23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d61460-b21f-4418-b109-994818e61a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f24ddd-a84e-4ddb-adcb-f3b4882e476f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c93994-1c46-4896-af8c-01544e07441a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb43d2ef-0053-46a7-92c7-78f641463f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643d1d9e-d844-4ed7-97d3-5f5795d5fba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77df8050-dcfd-4c6f-a18c-d7e2aac312ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c1dd2f-9047-4be8-97ee-3ea93aa96cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab23e474-f4e5-4107-adc8-8daa49fb0259",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f204f79-58ce-4206-b8f3-11cbc606389c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1177c846-8596-4475-9840-cf3c1060969e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd015f64-9bee-4092-bc84-e43f5d786eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e92d46c-793f-4678-99bd-101f16e8388f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fc57e7-5faf-445b-a921-3cdae93860ef",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2389f952-75a7-4331-81e2-6aee41373bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f4402a-ba27-4ba1-b3b6-9c3c03350730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac288cde-f509-4e2d-bdc8-13c8cd2c28ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "21f76932-2fbd-441c-8614-95e2a4d25008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f99ffd-b843-4442-93eb-77cc77791232",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbccfaa0-7617-492b-88a2-733f1279abb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c6daa8-e8cb-403f-b2cc-3f40fd2ffd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddaf494e-ee30-4467-94a6-211fe6dc7593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a01ac58-3036-4057-a96c-ca3fce161c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b65891f-6485-4c66-ab37-638dc2780dea",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca673f82-a52f-4a0d-b68b-0d420e0c4a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d41e5c8-b905-4490-b1d4-51ece3b30784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3a71b4-be1a-4ca1-b3cc-7fd0a907f1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "121a1a91-ac49-45d7-a7c1-3ab7199e13d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a25ff5a-43e6-46ef-8fe3-659b7eb2d4a1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a00b6-0d75-4184-b621-a0bba298b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165deff7-e673-4c6f-bace-367fda1dfd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5c54ed-b582-45d4-a2e0-279801161295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ee117c-3450-4034-9bf7-e5b0b76d7175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19a7ca7-c295-4b31-a0d8-e9e31ec8ab75",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f42286-05ea-49da-82ec-a9c2947cf2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8a076f-0946-41d7-94e7-9562124942ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc71da2e-d3c3-4485-af2e-7921c9758f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cd6ec4-c500-47d0-a812-99e55884919e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f95003-4396-4720-a902-33d8db0a437a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f658d53e-a060-47e6-8c86-9764a4cf9b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288b4086-fd58-4e4c-96bf-4c620849812f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e164d0e7-213f-4925-aa59-ccf4b1bbd948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5966a5-c908-432a-b1f8-00efa44ced33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c378bcae-889e-4262-8738-dc21756dc0d4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cbc39e-8503-4d6a-92c9-f87a454d1ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd69386-530e-477d-83c1-e05b81049056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82f6e57-7f51-4eac-8bac-94f1dc767298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2988ea33-845f-4b25-abd0-6f109384d10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deb92c2-79cb-405a-b9f1-4d6bfc295360",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e06a88-e6c1-4344-ab68-1be2f468e0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa404f7-17a0-461d-8fbf-ed83883bd89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014620f2-ee47-4c0d-98a0-8ec09b4c3c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79bd8983-889f-49bb-86cd-112c5787a3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909d48bf-e55f-409a-b139-dc9fd1ee3958",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f246c2-69b3-4c0d-8cd8-3775e708e175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62943c9-7350-4661-86cc-133f7e4bb195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b90573-9fae-41f2-9161-893ba15a5700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83fd7103-d56a-4916-baee-86a1e68c53fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe09c34-581d-45d4-bc8a-76e5ecfd6999",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573690ae-da9b-4505-a36b-bfcebfa2b186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6015c722-7b16-4ace-96cf-4911b22c3388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3424ca97-cdab-4b06-9621-2521be5f07d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "886a5f6e-e86e-4335-ab66-cd652f8f8505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbdfe12-b2bb-49d6-835a-853055983ff3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ab8e29-04f1-4a68-a7c0-785ff80fa731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fed94e-7184-4113-a43c-a221b044f725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570f20c3-3200-4d78-b87c-01cab1cdd1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b4807e-4d18-4e55-9861-c7109f74c9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0783ae2a-1282-4518-8f9d-4264cd045ee9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3abe92e-7b2e-4c2f-abdf-87aed82f686f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023ea69c-f534-43e3-b8ba-9e0410fe1976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da82a4a1-6b14-4c6e-b3cb-461c44966850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c1b632-a716-4cf1-84c6-d256176c38ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dae0b9-d303-4d1d-a1e5-380ef2f4bab6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5483b843-105c-44b1-b7f1-c7d89b610b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e858f8-c310-49b4-968e-23b0b3f7df50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bbbeb6-1088-4c3c-ba8b-bfb4b214ccac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "348086e1-e3be-4ab0-93c8-607526a96e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10b9f7e-5cae-4390-aa36-f84c7da7a876",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3237576b-f66a-422b-8d74-5393168aa02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73af5bd-360a-4458-95ca-0264b5ec9bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d814ab6-1972-491d-846a-39772639b862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "672d4fde-648a-4c26-8eca-87cb90dd44b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f73820-86c5-41cb-ba5b-92624d362835",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e79d1eac-ce26-42ba-9fa5-3cc5964ed5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef29689-00e2-4207-b94c-9289217ef1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b0c080-5f72-4064-bb70-b7007bf17bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "405799be-0b4c-4cf1-b165-3907e74ed0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38bea353-ca0d-400a-897d-7e895477270c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e30bb50-19a1-4c68-adf3-f32fe3b88b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a0c6878f-b5e2-44a8-9aa2-571996d53c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b9758-4b6a-4595-b618-b4a376d55580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9271862-6056-4511-b4f3-717844b101a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b1a0621-275d-4d23-8fa1-93bd021fef9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ff826de-ac76-412f-bfd9-8c9cdc09b9bf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2909e1c8-e8d5-494f-81b6-2cd05beafe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "402dcb39-bdc0-4ec6-a9b1-6b6b3c110b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d856e3-f4a6-4ef6-9c6f-a0b4c1eca6f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "049626fa-7bac-4d4c-9230-df3e471b35b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc1057e-55a2-4c9f-89d1-5a248a82ee1b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0af9a92-8d88-439f-ac29-96570d027807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8291cb3a-3c46-4959-8302-75f6fc0880a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363006bd-8681-42e0-903b-f008bc5c6f30",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "377b1ac1-5488-4f5a-8cf7-b7e0813befaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7212a1d-1229-4975-a221-f1c9b7009090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a61961dd-9480-4762-8090-20772b3871ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fec1bab8-9f49-4e0d-aa58-7fd9fd6ec94f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6833fad8-c61e-450d-a84e-84994c4a9a8d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a871cabd-9598-4081-8be8-b620787ab801",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b088a907-28ef-446a-8818-70a2b1933254"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3f984b97-21f0-4b7a-89ab-75b3518dbda9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "83bf7d66-b3eb-4e70-b79e-a03091996377"
                }
              }
            ]
          },
          {
            "id": "7a4441a0-352c-4887-8191-0fea4a9b9ffc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "36e7241a-987e-4c97-b3d4-2b2899b9942e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16a891da-dea2-4e70-8a25-b7881836118c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8752a443-3bf3-442b-b03d-f146a126c3a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b0ff33-a784-46f3-b8db-b25ac2289f4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6f1436e-297a-466b-acce-26735edac791"
                    }
                  }
                ]
              },
              {
                "id": "7bc81b75-f15b-4da4-8d24-c510b1f7ad14",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dccb8f4b-47d5-452b-81ad-1de5eec5ded0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8360b199-4856-48c9-ad5f-e281cb686ebc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad9ab316-45fe-41c1-81ec-459045d23317",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c11d2ed5-11d9-4207-9983-d747e220f12c"
                    }
                  }
                ]
              },
              {
                "id": "cb7601f5-9640-4a14-b0f8-b089e609421d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "340e0eeb-8b1f-4f42-af4d-48b3f34bc993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a164bcd-3a54-428d-a511-c0b79342b784"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42dbd9c1-eac5-4b2a-885e-e6880dcd21d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e28a0c0d-9956-48f0-8077-3a275b5f34f5"
                    }
                  }
                ]
              },
              {
                "id": "742e8b16-580b-46e0-8d9c-29ebbb8de636",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dc04f22-966f-444e-bb86-3309816d016b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb0c5188-d49e-4d84-b0ab-ca7360d48c12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "235ee63b-7deb-4709-be75-e0c3dbb97972",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6949bcf7-9b2e-44db-9ae5-8cd4f759712b"
                    }
                  }
                ]
              },
              {
                "id": "44539657-40a2-4f3a-8256-808744ac3dad",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c1f6566-7d86-4b71-b8b5-8482a674f5fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "984c27ef-f21b-4835-9f87-56f6534e1d3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58a11dfc-6499-4860-9313-ff2c9e0f7815",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5d08e6b5-a9c7-4f18-a8c2-d23fa6ee31f2"
                    }
                  }
                ]
              },
              {
                "id": "69e937e6-59d5-4e37-b2cf-49cca6c78173",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12f80320-8649-4b9b-a7f7-9400382fae66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3cb2b40a-ff3f-403e-994f-d2ec17d36649"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b60903e-1b1a-4715-968e-bae798c6ca4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ff2321c5-f547-49d9-a333-658b1f65aeab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "209dacac-2d74-45c3-877e-d92219213721",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4c48c6b-98d9-4fa1-b7cb-d5616865a9f6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d8be96a-6815-47ab-9ea3-67a59941f5ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "893748eb-25eb-4b03-ac63-77c6805f7d8d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6af7609a-71b4-4bdb-91b9-dd7714258752",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "828f60e8-e83d-4587-a14b-4a12a965a5d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c56b611-ffe5-4d78-a296-ccc659c4d79b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2af0436-d89e-4335-a4c3-e8706ab9ffbe"
            }
          }
        ]
      },
      {
        "id": "4b469e38-fc85-47e6-884d-b7b7585fa13e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a5ddcc59-a13b-4dda-9f35-baf9aeb55a59",
            "name": "Negative Testing",
            "item": [
              {
                "id": "085551e2-cca4-4c89-b19d-c8597086b9a6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e77b3a3-1074-41cb-9252-75368e1e4fbf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3894db46-3d4a-48c2-9b58-dfb4f4bb1e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e941f5c-0640-4ab4-9604-8d699b4abfda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eb4f39-7bb7-45e6-ae6d-49487c7d330b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "007e27f9-e111-4205-8bea-9ce535af8307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc4a612-62dd-4b2b-87b8-b66852ef0ebb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57374dd-b63d-4fb5-a141-ec50b613dd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de497ae-edec-4577-97d8-3b1f8e419841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694ad10d-1493-4a91-94bb-0b8af94e37f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "abe08317-64f4-40b6-b849-aa2cf3d39bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a1acc6-e1ef-4b48-ac8f-17a932d178cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcfb139-7df4-4d8a-b658-1b4c1ea02129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f74fd6-e30c-4f12-95f5-be1002450eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7335d5-168d-43ed-b4e6-c628c16e2c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50b3ec77-0f49-4e1b-98c4-7daaa9b0d7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfd6f56-7013-4e35-b9ff-c98fd0975187",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bae729-a5e6-49ba-9ea3-e80f0b77ae41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2cbd30-7650-450c-82ef-631afe0cb2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493af1bf-30a7-4e81-8826-4d11227756c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d06a1b6e-efe3-4b57-9a0b-1ae1ef46017c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b808f32-58ec-42ed-bdad-b8e2823dc240",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bddc8e4-5e69-4450-ba9a-876f4cd6028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f381c605-b4be-4456-8169-50ced5550213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6636c9f4-ab96-4c7e-9675-d96a5351e724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b63ab3-6d59-4aab-aab1-c7c54b79939d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8b941e-4927-47ed-b30b-c5ff1062ef30",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190804da-46f5-419c-b6bc-611847de8b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d6a73a-d32b-4cdd-b716-d0a82bbbd913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a71119a-cd58-4599-97c1-61ec0e3333a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a987fdf0-7e62-471c-8e47-9bd3897eea65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e182eb-f96c-4dcb-a129-d07a851057ac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64881f9-2411-4838-a6a1-dabd33a39798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987a8452-b371-4784-8921-8293625547ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd25902-e357-4c0e-9fc5-ff2b2853d802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c29d6e-8c0b-43b2-b123-f5c07739ff5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a229a1-8570-432f-8710-1444a7bed548",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b351ab9c-86e9-4391-bf9f-6ea58cb911f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ac93ea-b001-4ef0-9ed1-fa100ef4d5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703b29da-e240-40e9-8af7-7806471c40ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1027960a-46e6-4128-95f1-2d5286b1178d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c82811-1a4d-4911-a803-8c1d6d6357d4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a36f01b-ef39-4afb-b881-e46d7d7db033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245d5564-c088-47ca-b0b0-b3b33bdefcab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ec0958-35b9-4ad0-9f74-b19c4f754af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec53005-3c26-49a3-8d74-740991a0b707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb3efef-c61a-4d1b-a607-b4e2fe9ef04c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4ba0d6-704f-4587-a592-e572ceaa0887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58912f3c-8531-49bb-8431-5974ea2fd90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51645e9-5075-4cd1-bb27-200d50674270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc87ee7-6c6a-4505-b763-6dadb8c418de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a293dd2-ed49-4062-8f5d-d817bed78ea0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428bfd7e-6618-411d-befd-b945cba9bd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36517737-72f9-4cd0-a66d-7d47814a7b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e028d0bc-285a-43dc-8b4b-eaf363f5baee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "22e21f10-2bf1-466f-a8af-fd114197f1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4729a56-0866-444b-b569-b406b5a574ca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f65d48f-0e58-43a4-b32f-9f96ed9e222f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08124f82-74e6-47f6-874f-90b3d322cd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023a16ad-6f36-4829-80bd-830fbbcbc679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "758b0204-7933-4087-8049-2f4a22697945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06bc1f3a-9688-433f-8d94-07a615063d86",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fab276-850b-4639-a3d6-1749b581e1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b2e0ef-49f7-4a5c-b903-df922956b4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7e72b3-05d3-40ca-95bd-2bf696d8d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50834ae1-4bb4-42e0-a656-6049b542686d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95955f2b-5c23-4bd1-8b25-bc9643a6278a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f152194-bd19-4547-8a96-56851d4f0861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f75d113-f4e6-4e39-8b73-b0bfb1d7c4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544581f4-2ef6-4b90-a0df-d42185ea6859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a68ac6-a338-4b87-b8c0-8e30cabd6573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d36911-2440-472d-88bd-103e662004ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72e09f1-112f-415d-b361-04d15911305a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090c46a9-2f5d-44ad-a243-49aea0f7d1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f71d34-857e-48b3-8ab0-2d42e7ae07d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa7a06b-50c9-43ad-bfc6-d7bccaad159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81b416c-44cc-4acd-86c0-a72202e9843a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b659c9-fbe6-4572-819e-bf751c368b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77c0cb9-23b6-4f67-9984-b822b21d2dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9dcdaf-16ab-471c-b775-fcb821c9da1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d81006da-6520-4695-b06f-d075c4127007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d29607d-fb19-49fb-80f7-a920db6be311",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47647d32-5f04-48c7-bd00-05497293101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598ea42f-014f-4adf-804a-425c51813dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29fd79d-a985-4a04-8ee2-dfa03782973e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9609d22-ce6e-4f85-a8e6-f48697c41cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f71f931-c96b-430c-8e76-00b0e18594f3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eddaea9-e662-4f0d-b501-6eea0c617ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88df4fbf-4933-439c-bbb1-91fe257a74a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0420bbc3-9df7-458e-980c-97c3dccc1fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4aa35bc-9c58-4a0e-80af-d1d90f887f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31397ee1-867e-4443-8b68-c447346eee8d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabbefa7-0afe-4f83-9ae3-76dbaeba7bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae911b0-300a-4968-94c1-a8ac7f386d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19c2fa2-40bc-4220-80a4-ccf88c2508c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb8dacf-dbb2-4d30-9059-ce34b0800f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504df3da-afd7-49cc-b446-3d6fa6321db3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba294b0-2ded-4781-97e7-2315f2bacb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3f68ac-eb98-4226-ad00-3f394d16a04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51790837-b155-4038-bac1-94309a32ed85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b45790c-596f-4b28-bd06-5532769355d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d58e666-da5f-41e0-8259-5e3e97bbd739",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2165a062-2b18-4d48-b2c0-a81b81bed6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603c2d28-12fd-4a81-9090-75be39a71d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b158e85-3926-4132-b898-8bfe337124b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bb40d6-87ee-4b20-8bb8-2cc007ff231e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f414907a-0f65-46cb-ba2b-94ec2fc06f36",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905f7f16-eb5c-4a69-90c3-e9dc8423a089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37a79d0-1776-46cd-86eb-89e0f5393306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b808312-a408-431b-a18a-0b2a2af48360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42e7d981-c133-4acb-b1ed-004229eba8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf24f779-96f8-41a3-8b56-1b1574390de6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc76c195-b0ec-4326-a6d8-87fd0f3d13da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5ce4e9-0b41-43c6-afba-33b70bfcfe2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5083970a-0801-4241-8add-e2f13373e1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e2a1b2-c01a-42cf-b156-1a8efd134b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a603770d-f629-4c62-9a75-70019d491e2d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb1471d-9525-404d-b42f-00d0fd6b4b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee24ec4d-3093-49af-a293-65fb51da0a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87664875-5745-4fa6-8ec1-1ed82584350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a3c4a3-72ad-4ae7-a97d-6018a267ebbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fd4493-54a3-4b46-8c6e-429798bf1e47",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909be0a2-ae7e-4614-b052-88810c731ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aded8b4-9bbe-4e9f-a017-edf21f2fe517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ea3d03-fb75-41c3-8d60-97b5f5afbe2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25de2e53-4908-44f6-9e67-aaeed69e41b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae1be42-7fe5-4bf2-a9ec-822e43421c6f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ad43c8-b6dd-4ce0-8ecf-38d1b72e528e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071dea47-40da-4f2e-ab0b-827e8e10f6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc6f739-4b6c-40ff-9dcb-0d8b59d00cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4d8ada-4977-4241-aa8d-6b0df1f368c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100015ef-75d7-4a1e-b244-2a7126a7ecbc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67ee266-96a6-4c0f-9347-17aa37dd1ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7907392-7091-44bb-8b18-9de0ddb471d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d122d8-1c80-4fae-9956-6a427d9144ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95346dc3-cd70-42e8-83f2-fe7fd6337695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f313c88e-0453-4d89-9cba-f58c4d110911",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8670506f-b44e-4559-9747-9796630af982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0621a7cf-508b-41d2-9577-95bea14864dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d75c00-4e53-4def-97fe-2c70b3ad3a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5ad768-1e42-4037-b4f0-b1d6a8ca86bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450f38ae-7962-47f0-b03d-120e909b7210",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef61d01-bd5b-48b1-9df2-5b79aaab964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1fdde9-d87c-4ba3-b3c0-0f5a8688034b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cc4f8e-8ba8-4e71-a701-8579c239c4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd95c7c-9ca2-4699-a1c5-206c98ad8423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0234a3-5ac4-453d-a2df-845abefd19f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd834c8c-ce23-480a-862b-b6c41aa8318b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a4f7d0-19b0-47f9-b375-f3ff2a1cca83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01476f4f-c3a4-4d47-878e-5e3577e28bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf5e469-a677-4df5-b1e1-7c063612ada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be9e14e-0800-4d70-a23d-507f892cf32e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c07f19-1007-4ada-9a8f-d48ae846c61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5da920-f77f-4d7b-9803-ffff9e4ac5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee760a4-0c91-4c9c-9a69-c77503a14e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de8ac06-ed43-49ce-9871-521f81756044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b733f30-f11f-4a9b-b3e2-6b1ea2eff1e0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148d0d71-7639-4242-af3b-1f7dd080107b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b650684-97b1-4dfe-b0bf-aedf36bea274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4ea495-c008-44a6-93fc-dd13fc5e6814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67a05c04-6bc5-4f4b-847c-010f7d456a8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c604c72-22a0-4d87-b69f-a7a125fd76e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0a95e93-244c-435d-ba95-cd8389641995",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d259470-e2f7-4545-ae15-973af6b038a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "33e60c27-3e6d-4e75-9d6b-e574298fcebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b424368-d635-4e4c-86d7-f1cacb8253f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8ca1e22-9db9-4de1-bfba-55df906d65d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67a8946-3496-4d43-929e-634640f0e69b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50481885-3176-428f-a214-73ef42bd6749",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0f577126-b2be-456e-98ad-36a3d877c4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a61423-defc-4c83-b7c3-ccf86e5330f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1e313de-1038-44c0-8d67-6b56820bc237"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5864e695-0120-4a69-8581-5523df9eb0a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73bae750-e932-40fb-a918-22fd6a22a1f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3611a07-07fd-4188-9a59-183014f4bcc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7dd8b1d1-4f9e-4b08-b9d4-caec2279a888"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "003d7f5b-9367-445a-8b90-dd20a8a10279",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f13d40a-5763-45d9-a3d0-2db7eb47b667"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3aa08a2-166b-443e-a179-a16b2fd3cab0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74d0d908-2cb9-4204-bf41-5922f8c6d494"
            }
          }
        ]
      },
      {
        "id": "8f25ede9-d93e-422a-9cda-9a63b785c50c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "186f0e4e-a20a-4e3c-97de-8a320db0393c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac848dd7-0af2-4819-88f8-fd797b7ad130",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b2fd3871-bfda-4721-97d8-e336c0931478",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60b6cd2-39bf-4261-9b94-b19c82e44588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205064ef-8f3b-4117-ae4e-98f4d36e4a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc81323-8dc6-43e1-88c2-21a67c87607f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d503f8-cf6c-43f9-a490-58ea609ecb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea9c4d2-07d0-463c-bf09-71d65b5d7a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ac7a1f-afa8-4f4c-8c46-e811b35abb57",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6950b50d-a3b6-4f73-8c6b-5edfe4e3c5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28142864-ed4f-4550-8f78-fa50b8317cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24d1433-48be-4919-a7a3-7c723f6e5dd6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c7dbfc-4f2b-4909-ad5d-bc81e1a306c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "566b2021-6502-49db-9fc8-92d9d2def543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd84fe93-98da-4fc7-be35-00a3a4ee2d52",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d695cf-1db3-4605-92c5-4150732e9197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ae8282-0c1e-483b-aa46-e719ce999b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccb2614-0ec8-454f-b838-4f71868525f4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d4b0bb-ba51-45c7-96fb-c00b80aad355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ded343-9132-465a-815c-ba66c6a36956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7bd46b-c031-4ede-8810-f6d63f40bf47",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2344f7-a984-4919-a81a-2e88f6e95cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d0ff0e-b918-41cf-89af-d26cd15f914a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdf36d8-2e09-4f58-9bf0-2eb77ea93a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b80c3c-4550-4385-b6f7-61fec336fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee400194-e638-42de-872d-15df9d8e0588",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb86fe18-25c8-4dd2-b3da-88abbe444ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caab2ca2-90da-4bbd-a86a-5f13672527ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada1e634-78bb-4270-b935-a4197da45144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbf3a1e-ba57-4f40-97cb-e1e4542e191c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7bab47-c1bb-441e-8cff-5d10a0c2e8eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2527f9-c303-48e2-bf6a-852ef6035d18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "144caebe-408c-4158-979e-84f64ff62a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08068059-7525-4324-a83d-ac1a6904b8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79234f2f-e425-4db7-a841-64f470bb4112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf37aa1-1349-401b-a067-edd6e2426a29",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65119ea3-6fda-4da6-9855-4537ce06e500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d85f062-b16c-4362-9fc7-c4b8bd187d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f7cd04-b45c-4c97-aa3d-215700a58f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea3026b-09f2-4388-8d0e-7866e16758a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd510132-549b-4ad5-b280-02e4e1c19b6a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e76414-8a92-476a-a022-23a78da92ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4ce45c-84e3-4429-af50-c1d0b8e848c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c048e32a-631a-4569-9262-ccb09140b8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769140d2-96b1-41ad-b352-74ae197a9f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fa95db-8693-4f6d-9ffd-204faf3f6d01",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbc50e9-3bc7-4982-958e-1b0e018328bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53dad186-3b0c-4774-8dfb-49cd4fb45ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af07603-19f5-4ddc-9caa-4da151e9d78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271f01bb-622d-4d8a-b9e6-e27e68e98a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b8033d-e7e1-49c2-9b8d-59180314cd23",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405b1573-3639-44a8-8f3f-64dbe266e7cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a311095-8281-4246-8946-34584ee35e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a377421f-3176-44e6-8aeb-1016e16dd802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4567b475-50a7-40cf-a79d-215006b3ebfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23dc839-d58a-4b2d-9196-4d9171a43fe1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b7dcad-470c-4544-8ef4-6f7a763f1c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6316c33f-61d1-419c-b38b-4aed9a3dfe95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c29db20-40ea-4d15-80b1-a770738b09b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff16136-8580-47c8-a7d4-7a4cd0aec7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2151a4-d32c-477e-99ed-b8b515828623",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece7f7f7-39a3-4088-a913-59de7a00cc17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aa83c2b-d8b4-40ec-b7ee-0436c00fe78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7be66c3-7a7c-4b95-91e5-d515ea1b8e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc4ea4c-fb9e-4df6-a233-a3fe1d033d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a9bf96-6899-4663-bda2-ed1e5eccd029",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4e3213-7971-4a5f-a9a0-ba921f119148",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7360035f-f093-4eac-9903-b9a917a9a007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fc3a22-4189-4ace-a862-a9cac3883011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c024784-5e7a-4e48-9739-608dafc56d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5804a73-748b-41ee-96d5-01715c5296e2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5a2748-a232-4176-9d89-30d84dff821f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60665b2-e67e-4908-81cf-17994ea26ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e7ba67-94b2-4068-a2cb-7916e7b32997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c66aa6-554a-43c4-99ba-079b61372e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84892776-aa7c-452d-9178-0fa023c67519",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189ca1d2-13f3-4b9a-a17f-716bbf092877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217bfd93-9950-4e88-bff9-53572c0d0873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949638db-056b-481e-a07c-0d2209e615a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc64d35-e5c6-48f9-bfea-9212d280d122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21e4ded-1a82-4f71-b7e5-376cf325b710",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea400237-ac82-4cd3-8849-d04285d5d8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cda31a8-f57e-495c-90ae-e05c82c4b784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ba1c1e-fabb-4cb7-8997-530d012810a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30431eb4-d8a7-4207-b2c0-b9f0fce07884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95eae14-a80d-4fba-9e7b-1eee087e4f2a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18ac7e-bbc2-4ca4-84ff-e7181b56502b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da08858-bca3-456b-9673-4d03917d615b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a380b4-3ff5-45ca-abd1-fa908e9905ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa45be7-d8d9-40a3-8d14-19fab7d77863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78f8719-4a92-4116-97ab-3d02a1b8349b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb4e51a-84de-41d8-8036-9da689a2ebeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d60a4c-9e03-40b2-a3f6-9ffbfc3e0cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaa26eb-2c65-4adf-9404-19bfdd988573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a25f10-7c01-4b0d-97d8-a2d1db549429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba604f8-e835-4e48-8b9f-70936958f71e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c5c147-0a4b-4f11-babb-49dd999f6632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5354fb-afdf-461c-95a2-0346c2359f51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "969c2c94-a09f-4028-a5ba-1dee910bafab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0920d2-9874-47cb-a07e-b86e9be1f18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4778ac2a-40b2-4497-a93d-95b23656968c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20f12d8-5638-4976-8c35-3a6b1820e0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a17fc1-688d-4b65-90e3-bcacc40ba02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db14bcf-e224-47a2-a605-7b6bf03d813e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee8b270-222c-411d-ae60-3a53ffa3bd27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba3f30c-0da0-401c-817e-bdc4da0fb1f9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7cabe7-e60a-4488-b197-617550f0432b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b503d1d-3752-4ab8-979f-880a6da3a793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec9dff6-3179-4ab1-8e7d-64a043018fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea49113-46f8-4630-a0f3-911410ac5215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6d3f8d-115d-40fd-a576-b9b1699d7a29",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa5031b-e25d-44ab-9f75-d0de6a5ee5a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f553443-e56e-4f57-90ae-dbfbc2699264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "372945ff-e3c3-4acc-81f7-88ac64f53eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afb7d10-5f01-4bd3-943f-a17a4ff395f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff626fd-e6b2-4988-b464-e1acd4206f5e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb62f2a-6329-4022-b7ee-b385bad147ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bfaf599-11e8-4aad-96bc-0da53bb75d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326c18be-bfe2-42f1-959f-dcb80a72782f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52277132-151e-4afc-be6e-0b4facc5db21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ff7234-0e50-4747-aad5-05845ccee728",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2dba16c-db9d-4bfc-8883-fc09c38d8878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8a5985-23f4-4799-ac96-459b18021d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f56784-f69c-4a60-bdb5-f8f771e40a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092622dc-dfb1-4129-a6cb-9d1975525e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33539eba-5826-4a57-97e1-2507323204fe",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e06ec9-4ed6-46d0-940a-5ecd592c4e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ee512b-63ac-4442-8fe2-16033e90f779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9396b0d-8211-4dfe-984c-3bbf7bcacbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0056d8-fc6d-4b21-a7c5-65a02e850311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013d9696-40b1-4167-b926-9e723bc533a5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e5c6b2-2add-43c0-84e9-6e8bfcc4b9d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25d5126-3e34-43f6-956b-8270525146b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6531f8e6-5026-4ac3-ac3c-3713f7cbf35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6af88dc-e608-4373-8da9-c2354146a89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5d163d-0169-4609-a93a-3571b38360e8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191f87ed-acba-4c11-b95e-155d417f8886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b76107f-0b46-4011-b076-6585c67bebf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b58de6-f9f0-45ef-968d-8bec5dc1ab8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ef47c5-a01e-4602-9cb5-56634185d17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20290e2-5009-4dad-851b-481d6fa92469",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7900c3cf-afdc-4da0-8f86-3726469148b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d9f293-55e5-4da2-9fea-aa0cf0db8961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4412ab-7b1e-4b65-9fed-571b575bed51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5cfb07-cbad-4251-8e05-34a66a7f7b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0a221a-2386-46de-9550-30b5fd9fa5ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2445988b-5528-42b5-9313-3fd9dac9d737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3931060-576f-40af-800b-03202ac5e121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc6055d-58a3-4068-9c13-c61b543c2179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa22e9ab-b3f0-431d-bc2b-0579c30261ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d315ec88-a584-441e-ad77-0886916c8ce9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1548c389-ca9c-43e9-9219-30443b5aa3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3ae241-e615-4791-8596-6bb30f79c5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61097b99-c7af-4312-a42a-6f33a35cc5b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c002ae1-9731-4037-a2c3-678071a3347c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eaf6172-984c-4863-acaa-7adf64d1f96c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4cb574-972a-4ed5-a515-be472e30721b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95b07a3d-043f-414d-8330-c463d729c282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c41c30d-5c6c-4754-804e-9f4425f5d17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7fc3c1-ecd2-4eaf-a8c1-0d0afae3ec77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b00c0b8-0ff3-45bf-b753-f2d636c4208e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e79ca91-b297-4ae5-87d5-743f30a68733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1227f5b0-e720-42ae-bd55-a4879cfe2c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6de5fe-f329-4431-a2ad-bd78211abfa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e685cd-846a-4b88-bbeb-7bee0f4ba67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0317fb9c-ea2d-47a4-b41d-4ac2489a2af3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0980c559-5337-4221-9ef3-acec7d55e4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbb9ae4-e7f4-4207-ac73-322e24f6a9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c5b75a-6128-4637-ade7-f8cc94abd55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b776923-120f-434d-a98e-fdbd5f374364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437903aa-1cf8-4cc8-ab00-767f6047d416",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f059a6-fa0e-40e3-a2ca-f0e26d72c22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b03029-9c89-4f17-8710-5dae82d44cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3e360a-293a-4837-bda2-1a8d60857bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f335ae-c425-4ef4-9095-6358cd345cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd45c94-e8d8-4b4e-902a-0586327f224d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8663f42a-1258-4e9c-b492-e63093a85245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4106b67c-8b54-478f-9d16-4ad44317d0ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4076949-a5e3-472b-975f-2336c8a0e007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dad377-d9a5-4d6c-886b-621aa909daba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe980e57-0c29-4ed4-ab1a-f6b254c5feec",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0493a15-3513-4736-8fd7-10b42b7d2aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f97b607-3c4d-4527-9834-30026184d6ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc484ae2-2c73-408b-90e4-904ad90fe70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeeec5b-d888-404c-b858-3fa1b9e9aa1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d9a228-036a-4fc4-92b6-52a36ec5c615",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada65b94-23c7-449f-b691-5fa0fbc6cdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c0889b-0797-4481-8886-f1a7af0ee18f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190c3a4b-43da-4361-9cba-45b4dd2e7f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d111a24-8686-405d-b565-2cb04280152d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d66a0d-ee48-4d42-b9b6-cb3fe320ecbf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490bf4cf-21fc-4b3a-932c-3063b48b90aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eaff5d6-6664-4bf9-be25-59edfe6533a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb262154-10b6-4c97-9bee-e4aeede6afe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c2a269-63f2-4c89-8d03-f18f00f51eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161b7c50-0e8c-4b47-967f-68924540ef4e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f233d3-b452-4a95-b06b-9123249a60c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ad55ab-6c10-42c5-9088-af3c56fbc139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bb9d32-a543-4440-a222-fd979ee92dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85d6d89-6d22-486a-ab58-633d4c9bac79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8584c18-b528-4c0f-82c5-ab92939bb154",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec3fc81-a30a-4e43-89ae-667c7c939cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dedeedf-d417-4fe0-8297-24afc394be16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3175caa1-62b4-4c4f-b4ab-f7a5f8522898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd35a37-a38d-4d4b-82f7-88ee36465f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e588e98-9aea-422d-a28a-92340aaf0477",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b07cf9-4f4f-4024-a9f6-54552152a4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49a962d-8c27-40d6-88ff-4270cb0328d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38142e83-b023-4aa1-803e-7fd9cfa43977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477d6e98-ead5-4fb6-8365-ef6d231ba756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0a9e14-6d69-4463-9caa-82156bdbc564",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbc61d0-f907-419a-9078-84ab0becc399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fb3b53-6cb6-4a3e-b64a-56b56d33185e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab7cfd3-51c7-402b-a387-e1057c1d548e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3124373-5d06-4da8-879e-5d713841e247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cfba81-5180-4eca-8974-d10ffc322970",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79deb685-925e-477e-ab29-9d711a48ff2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62944b4-3b09-4dd7-b0c4-61bedb88fcbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8500e6e-a4e6-42cb-9f25-ab7d369f6e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65dd48ba-5239-48e8-b24c-a0a6b836fddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4012c149-ba29-4340-a60f-5d00c7175a85",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5e7690-d5d5-4208-8610-6fcc4a9b1e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b4dbd9-0be4-4553-a903-632dbc516ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0847f6-3870-4216-9c25-d79a01e7e4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233da6a7-c769-41d4-b22d-5d9d898b12fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08573eba-9220-4c8b-b31b-57cd8b094c7a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c78253-8b5a-4ee7-a7b8-ac10392ef4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9d834ee-c921-4be7-94a5-dfeef4515cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c075d0-5bb7-4ef1-abb3-ac6477c0e797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7db44e-037a-47e8-970a-df2bb9b6e07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40219ec-50c8-46b0-aeb9-39f0cdccc160",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3894468-4d7d-4c46-944e-8315cc31bc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd1b360-47bd-41de-bcb2-9c07d5b500f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f99896-8089-43e4-b3d2-ac6bb6a4b818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0a1931-ccae-422a-ab7a-8187598e7522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d82f5a-9dfa-4601-8d01-173984f71671",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a13143-58ef-448e-844b-ae91bac1f44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cc06da-45de-45ad-9488-dd75cc54e26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09762b7d-25e6-44c6-9fa0-95916ce3fbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e4cf0f-4bc9-42ea-9840-6dc54082ec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8122809d-e808-405c-85ed-7ce9b4a28b49",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254bb7d5-c409-4ebc-b438-80e1fdd6977e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9557a4ae-734e-427c-a879-23df31a3d475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc9d323-7709-4e23-a61d-8b69c9b17fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a6c970-37c0-4ede-8300-e9bc72a2c3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d917bd3-e888-4aa6-a0b5-5b266e425439",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f86a40b-6267-4af8-9369-30ab9b37b11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2eabea-740c-49b2-935b-c2c6697dd72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4188de96-7d55-4d5a-9d55-acb90ae7dc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13316ed1-5895-4c3c-b85c-f6b9965bab6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afc9c38-b45b-4d76-afa3-93d1e089d4ba",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd002d27-1b68-4923-a33d-717e236b2b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4adf5e2-fd97-4195-b68c-5e9bc9d9c9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d8908c-9bbf-4c06-b3aa-de05e79ced32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70139ccc-e632-4ce3-8761-6e53f4ef4553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c4efc2-e34d-4123-ac7b-50cc921687f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b482e157-6f1f-4a8c-b4be-1aebcc8331a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205b0ffa-0e90-4040-ab14-014b8c5d578f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2202f5f3-8829-4c3e-97b7-9df93f6e8481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4f9932-751c-471b-8b21-4f5fdd66afeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49812ba-ab7b-4788-8e17-2c706dc5d4bd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fefd025-6fcc-4da7-b512-6937e37edc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00eb6d4-5f03-46b9-b2cc-4b2f1acaad70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "806fcecc-b1fc-4eef-9d71-ebff151a904c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2576e9ce-b07f-4822-8ceb-60b47f22e023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b03396-ec32-4d36-86a3-f5006f0abc54",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db9bfda-f20b-4c23-80c7-e8136301714a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa75475f-8aa3-4f8c-b4f5-5a7d6778d325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566a422a-c8dc-4fc9-bcbe-8d56dd6bcb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c465fe1a-3a74-4539-8460-1fe7ee2af8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918d4f08-d9f3-4121-b896-8fa53c3fa5a7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e11ce89-0905-461b-8234-2e18ee7d42b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c272f4-28aa-4b4f-b22e-31ddc1d60090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d183bd4-f820-4034-ad6a-41abed665107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c39bc8-e6ca-4453-82ba-722f02eb723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a87f06-6193-45c6-8e59-ab85f0847206",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee259cf3-9733-4625-aa7e-90e0937315d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf6651b-a94a-4235-9576-2385c700f884"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3aba34-067f-4dd0-8f5c-fa4384c55b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6268db49-1bc8-4df6-b6b8-d5e5fa91a8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8213fae-64ee-43a0-965f-d3e5f491686f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f589162c-4b6e-48eb-861b-d450e550fab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180508ac-b03a-4abe-8f19-cc69fb67a7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f9f69a-b694-4528-a4f3-d1803a76e85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a83db68-7811-4303-8d30-c905b9f1ebb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3552658a-6643-4739-b5f9-c68903c8b015",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9572e006-b242-421e-b7c0-9440820913e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce680148-a287-4bcf-ac74-655912049d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f027a1-db13-4dd8-9d44-6c3322f210b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0950fd14-723d-4b6e-8a24-508f3235e188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe63e25-0c91-4b25-a5fc-8ebdfac56bee",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9f9734-7bcf-4b17-a7a8-2eaa35a4e8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77555ff-ea84-41d7-bcab-298e38ce3e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ed2677-bb9b-4239-8851-5eacb4761fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540728a7-6660-473c-bba1-fc4573c9b8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81bc414-c71a-4079-85ae-0ce4986ccf58",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d9bfa-99c2-4028-a4c6-c1680ad244a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217a8101-ca8b-468c-ab1a-43b30fff81d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b6d0c9-7c4c-4348-842d-e1033e4722f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02c0969-03b7-4e00-9f34-0981a7d3b29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f49512-1031-47af-b848-b6a39729d5ba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf936f7-cf38-4072-bb04-d9420046b7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e797a83-3b81-4607-9f0c-510fb8c43771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa0e39f-4583-4794-b8c8-8056c35c152f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a16801e-d4db-4a78-84f5-d3060467ab7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd4c03b-2c2f-402c-ad09-0d82b4d4a3a1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476093c3-0fb8-4f5e-837e-139a9aae3313",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd36ae8e-628f-4c42-a04e-a7c65e43e63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9540a504-15a5-46fe-82bc-b8fd9e901e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4072e7d2-23bc-4947-970f-cf4e2be68d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c8e32-2a96-48c3-b65f-270c001b88c8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e984bc8-6fce-471c-94b9-00c2ff6c287f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "407076d2-1bdb-41b6-93b7-c008cc64913c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112f839-bc3b-4611-a1e0-65d166d5b9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106e09de-b3af-4dbe-a4b4-442092c76543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b08732a-6576-40e5-b910-ecff0d25d22d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a5b11e-627f-4492-b494-4f00fd9467bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a107b30-dafb-4891-9640-97da908644a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c943d414-1125-4df6-a8d4-d4a36279e40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c0d912-c47d-4bd8-b025-17f660c28937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94b73be-9164-4bc2-8dbf-53c4951e0210",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eda8f10-92eb-4b5f-8197-390a9d25913a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c3ef9c-2095-4b53-8db7-8ec947516224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6549678-df1b-4b33-8165-25c2d87d6487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f4b845-f1e2-49dd-9de3-a1e7aa2efc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50a52f4-6138-48c0-8bb9-91b381bc4bd6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a615f3-68ed-44d3-9bda-41db2962980f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23b6abe-84b7-4f46-8a53-f7acbeac062d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08667a2b-5272-40e4-830c-b328f90a025a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01454be-e958-478e-8a86-c016df98292b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6814a1f-2cdc-4b4f-9eb5-0fb209dd62a4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42913a76-c733-49f3-b5ef-020c2587bb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35277134-df73-44c2-b7cc-a2129d89c589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a88425-db6a-47b3-a68a-5b6acbd7adac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c157ba01-6436-4875-a135-a3342349abcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7793f74-95d3-4181-9e3e-9d620f3fd258",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eb5819-e527-482b-bdd6-33fb0188b913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f06ab1-b0c7-48e2-8a09-d86fb4f49dbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a925c2d-a047-434d-95bc-e1a349a66405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42cab9d-b7ca-4dfe-9fa3-0bcd1b994f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f300e1f-a3e9-41a9-b371-0cfb6baab648",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc9b74f-191f-4a56-a9c4-d223b6194962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1998bc8-5d13-4480-8cf5-47c0d13941af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5945f2-a5e8-4a76-aaaf-d81fb481ec2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1368e17a-98e3-409e-bd82-34ed0aab8973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78ab7f1-5d99-4c31-a96e-4c380bfb7e57",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b3a492-7fe1-44fb-875f-dbc5dabb490d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3045d47-08e9-43da-833b-8caac969b988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db35b27-ca9a-4540-b836-efe4d5eaebdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e1994e-56a0-428d-9b48-2afcefd00b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b051fc7-730f-4fb6-850f-fc92bf75a826",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cbea02-4c83-4883-928e-d232e5d07c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d724d1a1-3a7c-4470-84ad-e54cf177fddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f45494-b667-4052-9484-af538f439d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54f5834-d512-4d84-849e-c36fa0d9937d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ebf1df-1796-401e-84cd-c9a84d5177be",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d374de23-212d-475a-9bf6-189b37a37e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b227d562-8580-4846-80dd-f509bc720bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c000423-c090-497c-94d8-b5eb9ce9e991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9158b589-c9c1-4bf2-a9f7-e6ba77e37840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95692f3-1433-4560-a925-cdf6cf19e2c1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92568bc2-094e-495a-bac1-8a4beefa0c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf19c6c8-089a-483b-b83b-b8f6b1354f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d13a82-1a20-49ca-8ab6-b758c00ff94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6e065b-93ea-41d4-881e-8bd619699907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97eefc1f-b870-440f-b717-4670323f6611",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c5720f-6b0b-4bc6-b6cf-5196766c8428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273e3730-b9a2-4a74-9a81-67dde9a298fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f809daa-23fc-4722-8730-cbfa86aa0257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a020c2d-596f-4f4d-baa5-2a9604b8c88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5c5a68-375d-4479-a490-dccf8eff9656",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573ec90b-aa42-4450-9211-496c5fd550ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73089e5-07b6-4264-9a1d-14fdf95d93de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f05d1a-5a26-458a-8fb7-db9ca69361fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29857b32-6ae1-4f1d-9f29-7eea73541e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ba6877-a559-493c-8af5-d6f825b4ba02",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c48896-41ea-4503-9262-26ede982a605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b095f4a0-0c4a-4fed-a957-f9627bc7e7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfe1df9-1fd3-4a98-8fbc-5dafbb120f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3a1814-91aa-4806-a566-44a5c6a1573a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc0228c-1b85-422f-9a5d-b51ad5dc96b9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5c1803-5f34-42bd-9b6b-e39979930f59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da352d2-cef7-45fe-870b-64d8d75ebbd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257f553d-7c1f-4399-96aa-71388370fa11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b633491b-fe1e-40f6-926d-17492d39d07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b9f589-7f7e-450d-9588-9d29e6227dd6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87a29e9-1e31-4d33-826b-c1b1602b13a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f0a7da-bb05-47ae-885b-6d026f1b6a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0327b6-b0fc-4a57-b122-d88cb7d1dc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a2e91c-fa55-40aa-abfe-d955ba2f1e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4034eda-e632-4793-b565-aa84bd49c533",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8556bf02-9e86-40d2-ab1e-b60193dd3282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f5411b-9c82-4790-8442-60c6fdc10b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dbe674-b2ae-4392-aed2-14fd6075dd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108edd6f-90fc-4835-82e2-92dbfdb1fc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9abe05-f0f0-4d75-941a-ea0f275dff29",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7016ea9-512a-47bc-8fa9-c721ac81507b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a75f34e-8e79-4e71-b156-3c6e4ae57e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a0d81c-7391-4750-864e-c5e206262d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a79b8f-9bc1-411b-92d6-79df39880fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f673d80b-57b2-4ba2-ad62-6d5ad16ae17f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a96744-2549-47fa-b5a5-92b847498438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90229488-4ad9-42f2-a177-ce32a148d7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6d7d73-fe50-45db-962f-7b6397aba37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3db0313-b1ef-4b0a-9245-aa7a9154aa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ad3c74-f741-41d3-b477-1906d405088c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ed1f40-c591-4b94-aefd-8e579949e54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c9e9d2b-e817-46c7-93c4-189cdc17e46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eabd68-a644-4c1a-be2e-8f593c294dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff16213e-54d9-453a-8f71-17977511f6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e355c71-d189-4b01-90dc-d6ddb6fa3cb0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbcf4a9-94ec-4986-86ba-569126bb1896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7dcf2cc-b4ec-4569-a15b-8d0d2c969ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c2f870-89ea-4b41-a9de-66222b94c7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f12cb0-ec26-4b9f-b7b3-d8c3526ff714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9bcb70-79c7-4dad-b07b-fd45f788f485",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d632c2-2d90-4bd9-b162-4d87fe0fc5f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427c95e1-1d12-4f30-9d5d-14eafa457964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3dc946-998e-4f49-9c47-484935fb7563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798576de-6634-4256-9627-752b68911856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37108dc-29ba-4e54-b131-0b6f261d9a7e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b13379d-e490-4f96-a584-3084a33bccc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "230846d4-3739-46d6-b7e8-f4086729cc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d3fef3-10ea-441c-bae3-785333a4f31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2419c166-38fe-4c77-93c6-1e1fd376cb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7f7257-9a0d-4c55-9ada-b95b6b4ab669",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be15ff2-d8a3-4ea3-8578-6e0e9fb26c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df6385d7-5715-493f-9e2f-f6ae6eccd92a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fab4ce-a2b4-41ad-9d8d-31c9ee12c1f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba115a94-74e9-41c1-81dd-100dd646cbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21d34e0-470e-4d00-8d1d-e717da8d4972",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6c170f-1fb2-4efc-9c80-d40761bc6b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1992fdee-0d20-4b18-b5cd-dde0932e2bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0a8f4c-f0b8-4bc2-9bdd-b85f98a17299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac06327-d880-4d26-8b47-56f4177cfced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad8e0fa-5887-473b-8d3d-978beff75c3f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf7307a-e35c-424d-bfe1-a391f37bef50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec3a1b0-51ab-458c-84d6-1593b842c7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35ab02a-a4b1-4628-a5fb-ec2eb2714879",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70038674-e24f-4fdc-bc91-ac8f307631f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6641a771-e46c-4810-9214-14d0af8e9990",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d72a49-54d6-44d2-8c44-243b85952ef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c1706d7-ef86-49f6-8129-eabc873c4874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06eeca74-413a-4d80-8ee4-d4070b07bfee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b269bdce-8415-445c-95e8-1f9da9d38199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bb6039-9988-4f42-88ca-034463da045d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4104cf8b-675a-4323-a9c8-7a58c0a40346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b56f4b-c540-43a7-85e8-41e1326766b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3418f8-2e29-45e0-bcb1-e061645f5f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236b6433-3eb3-4f33-813a-a448fdb1740f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2710589c-2a93-47ea-ba34-b01ecf584c0b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce49bda-4f6e-49ca-80ff-def03d1894d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3794e7ff-ec43-4aed-89c8-4c0dc4741254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38aca25-1c78-41e8-920d-d32a0aaff1aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5dd3cf-c287-4099-83ac-6acfcc2d8ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08271dc-c56f-4506-810c-74d68d40b6e0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09da34b0-64be-44ac-af05-4aadcb3b52a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30e19e53-d1c2-4980-87af-307465a0f5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a43bd78-a951-48b1-9d82-e15c2c62f1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b3d58a-9a0c-43ce-a1b1-957bd356b9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6589503d-2804-4662-9af3-38082c11bbcc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e8e143-2755-4dbd-a70d-3b56b82bbce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8160aeff-1e4f-464e-af04-4b7f6e2ad113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39a1049-0bfd-4fa9-a2fe-2d507497dfea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6bf25c-ce38-4bea-a1f6-b19f2d7b42df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d442e134-f274-4463-9812-241d1f24150c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee7abd9-0c61-4a2e-9f16-7e83df95217b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f906b1cf-3431-4fd9-a018-1cb66377eda3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b169c8-12c2-4172-8891-fa30c9bbcc36",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe37cf34-cd93-4412-bd67-d88c249c2b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba231e4-96f9-45c7-b699-e7f5e38f21a8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bea12d8-2f89-42ee-bd21-c7365c649ee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c1aea6-b653-481a-b28f-833e76412c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1be677a-39d7-4a1d-bceb-a4e476fb2096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1fcaeb-482e-465b-ac1a-161c8eca42b2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96240d8e-f59a-438f-ab3b-24bb5664f749",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3edcedd5-ba77-4abc-85f1-f6ff14a993ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec2813eb-014b-4adb-905e-57350e3f66be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b4710023-5e9f-4f86-9371-84cb9eec8514"
                    }
                  }
                ]
              },
              {
                "id": "619274e0-6608-4d1f-afb9-516226c96678",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32898f96-2038-4983-8e30-2040f29c633b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48420f8-b308-4402-89e2-113bc1dda675",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fecd13b5-2dbf-4625-b52b-d3f75bcd5b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fe1f09-3741-4215-add6-6177520f29c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02fb17c1-83e4-419a-b40c-69cc9d54bf05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983f7108-5ce1-48b2-a378-7a77181461e9",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dbd8fd-e105-4703-b80c-44c6b85079d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9831bd2d-1f2f-4f2d-ac18-58bf17f6f6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494f9344-6a2e-4b4f-82a7-0321bacfc80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "754864f7-1c7f-436c-86b2-90abdc0f891b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e4e4f9d-d62b-4b76-b764-3814b1a8db07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcb85cb2-b55a-4812-82ac-4c0616d3b6b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2808076-2d39-453c-8c25-7055ea85e7f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9d2ed4d-16ab-4243-a97d-10dcfa39bc43"
                    }
                  }
                ]
              },
              {
                "id": "7996f3e8-81a2-40d3-80fa-2e08a0f62f85",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "99b00b47-921a-4cc8-8e0c-9f723833cdf7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d722e167-f15a-4f7a-a850-f49788008485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "722460f6-ac8e-426c-9a67-2fdb67cff60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948f3738-fcd6-4e02-927b-18b83faf64c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c324a9a-389f-4a2b-a30b-0e69413147e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "44cc49f9-2b46-4d82-a7b1-cfd22a79c24a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eece1a47-6df6-4bdc-bb34-3c822d4b5753",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55b9edd5-1deb-4eeb-8037-7952b1b05422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "05ac2780-0bf2-4c6d-8403-5327e14a9d8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "745796ce-eddd-4ade-8ca1-efb1c20bf336",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "423d3d95-d737-4611-914f-6ea739ed2c3f"
                    }
                  }
                ]
              },
              {
                "id": "38f93ee9-52f6-407c-ae85-7a486682037a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64cf11ea-8e1b-4649-9cc7-1b096b58fdf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d8c83af9-1a8d-4381-a113-3bf2dd0c602a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8be2d32e-0460-4dce-bf01-5828c1c7c91c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e6954c7-45bb-4d9a-92bd-b776376cd891"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc4b543d-9240-41e8-9b5c-92146e769d45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a2f20cf2-a480-4d14-9f6b-73c1d6321d32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89c69a74-a7db-47d7-a38f-dbfe7e3b95e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99a95b52-8ef8-4e64-b9f4-d1d94a50d636"
            }
          }
        ]
      },
      {
        "id": "e428b9c4-a699-4f48-9fae-1ea89db1982c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "79cbdce2-8683-4ff8-8f10-3a8400271b2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a304a75-69c1-4b63-83f8-07fd59fcc82d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2cbee1-c727-48c6-aacf-18451534f8ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc0159b8-3794-4082-9d37-57b8dd4263ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da8be4a-ca75-4624-b09e-cbe0e2980c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aeb3daa1-21aa-488c-92c1-64c42ecf8def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d027bac-c8a4-4856-88b4-d45304ece7af",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f924ea-bbe2-4bfe-ab15-3b5106da0108",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5f1a1259-6ad7-4f62-91bb-b9691e6069bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cca5f9-30f2-44d7-bbf3-d97af6274668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3c29f3-f4db-4697-abbd-bcf7aeae5000"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fcef20c-7590-4be8-b485-44316b242597",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a33539a-5d7e-4b37-ad17-c84c3089436a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fca241df-cb02-459e-baf3-354560c871aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cbe7c1e-dd00-440e-8563-1bc04b4f873d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "742fd7db-c900-4352-878f-d792046f1449",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ca7d0164-073d-441d-b78c-56780ef8fb4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1eca593c-a08a-40ce-9e90-0bc3e72b33d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc631130-fb4d-43e1-bddc-16741d272adf"
            }
          }
        ]
      },
      {
        "id": "40300313-04b0-4f83-9730-0c51aaef93cb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9fd4a2fa-4ee4-4f3a-bfac-6cf66e3213c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d76c8563-3a50-49b6-bc09-c1d92211efa5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e42a0539-8cfb-4760-baa1-196e8c2424bd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4f1b1a-66f5-4f9d-a477-48b680a3bf1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38d2f60f-c38d-43d0-b245-501d8707200d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c037e663-1e9b-4e24-9bed-05b26d159214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd1f057b-8448-42f7-8a4d-e2b2a75294b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1636741-8739-4d61-b8d7-179f5bf3ba02",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71679c93-f729-463f-9e17-9b23bc00a7d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ffebe832-1503-4c93-9b68-69c48e232f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca2ab3a-5b35-4bb1-a2c2-8fa14f7443a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85e12634-7df4-4572-935c-ee38937fc65f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "998764de-7396-4b03-b7ae-2768d6bb232d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a606fc38-e964-4511-9121-d547335cb899"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c93e9b3-8b6c-4d67-b03c-1dba6a0a7c6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "769552b0-0c0a-441e-b310-8b91dd0d9a33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2840607e-990d-44d0-a520-79ec1ce8a4af",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cbaec545-f591-4aa7-8047-bf91166794d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "790d1fe4-6d77-4434-b8d6-c6345f5cbd18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b723c31-599b-4c12-8623-0bdd10c06d0f"
            }
          }
        ]
      },
      {
        "id": "bfe975d2-7995-4a3c-b881-c83e5a0f329c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bcc56d78-07d8-42ca-9541-3e7822de4589",
            "name": "Negative Testing",
            "item": [
              {
                "id": "144c8b24-8fb5-4396-b44b-01ac0cf759db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "46bba904-742e-4989-a7c4-a6358b2eedee",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c947c14-de89-433d-bbef-b09014b9aac9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a00ebc95-9826-4fb7-98c4-3a94a3b26fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59af2c38-2025-4b94-b676-2253bf17f9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a885d77-c7d8-4969-b06e-36308347c9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925e586f-5711-4d7a-b0b3-5a8c0e98c674",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080063fc-05d9-4f71-933f-0a0aafa6c2e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f50c0f1c-5cf9-4d81-86cb-f877352a9448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8112dfae-54c7-4a7d-8ef4-4aafee1ca49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c0da483-83e8-4d23-b1b8-09ea4159c91a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7620f9d-fdb9-4a6a-9d60-a8dda445bcba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57a6ae3c-74e4-4e72-8e81-cee0306e6169"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f4e8b84-9253-4187-80e5-87f148c07834",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "812e4c31-23fd-4ea9-b7b0-fbb211b0ff44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa439211-0118-4208-a3c0-14eac6b1f7ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db048242-4dd7-426f-8f85-2867a267636f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea25ee31-0b28-46f6-a338-3b428945fbd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8b00776-6295-4424-89e3-7430551886f7"
            }
          }
        ]
      },
      {
        "id": "0c975a9a-6452-466f-b9df-57dd2ef7f91d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a070711-7afd-436a-99c6-6fdec1bdb49a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e432485-b588-4782-96d9-d104962e50b0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4076fa94-e37c-408f-8202-eb0d377fa846",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b17c77a2-876b-4d9b-bca1-ceb017685d05",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca81adf4-d912-4615-afff-93d48f705342",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 287.1192307692309,
      "responseMin": 10,
      "responseMax": 5709,
      "responseSd": 782.8255167214314,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683333222227,
      "completed": 1683333307612
    },
    "executions": [
      {
        "id": "1b26d795-873b-4d6f-a7cd-97b8e2ab049a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "83ca2212-6184-4e0a-b394-d58c4090acfc",
          "httpRequestId": "39e1d448-c38e-4d5b-9a1f-cc17cc6c6144"
        },
        "item": {
          "id": "1b26d795-873b-4d6f-a7cd-97b8e2ab049a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "13553166-c947-49b6-9f0c-875d25635d87",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "1349802f-8781-4153-a16f-5b4fbaed3dd2",
        "cursor": {
          "ref": "f1bb5e16-4b78-4814-b177-bb7c680fed39",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e8f47481-9b6e-4809-a8a1-3ebe4ac6a650"
        },
        "item": {
          "id": "1349802f-8781-4153-a16f-5b4fbaed3dd2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d479b03a-5ce3-4e83-b5f0-8e0f5269b2f6",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "400466a1-6842-40d5-9d0a-cd4c4639de66",
        "cursor": {
          "ref": "58bc169f-d3cf-4f73-9dc5-641ebef0dfee",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7bbd5cf7-8c65-4427-9bb8-aa1cf315b2e2"
        },
        "item": {
          "id": "400466a1-6842-40d5-9d0a-cd4c4639de66",
          "name": "did_json"
        },
        "response": {
          "id": "887578d2-f73b-43c4-a35f-cfcdbf24304a",
          "status": "OK",
          "code": 200,
          "responseTime": 609,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4266fed0-afb1-4d8c-bf6d-e8f3f7bab737",
        "cursor": {
          "ref": "87cd532f-4817-4018-bb54-5b128c00c543",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a04d6558-1878-42c4-be5e-ce0ab603eeb3"
        },
        "item": {
          "id": "4266fed0-afb1-4d8c-bf6d-e8f3f7bab737",
          "name": "did:invalid"
        },
        "response": {
          "id": "42a5bb6f-9287-49c7-b2da-fb92c76acb92",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1409,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4266fed0-afb1-4d8c-bf6d-e8f3f7bab737",
        "cursor": {
          "ref": "87cd532f-4817-4018-bb54-5b128c00c543",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a04d6558-1878-42c4-be5e-ce0ab603eeb3"
        },
        "item": {
          "id": "4266fed0-afb1-4d8c-bf6d-e8f3f7bab737",
          "name": "did:invalid"
        },
        "response": {
          "id": "42a5bb6f-9287-49c7-b2da-fb92c76acb92",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1409,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2d50c7a5-2788-455b-80d1-16407fffbcf9",
        "cursor": {
          "ref": "afea1e84-3aae-41d8-bdd3-8ab6c994c584",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4aeaf339-65fd-4be0-8d2a-031bd7a6485d"
        },
        "item": {
          "id": "2d50c7a5-2788-455b-80d1-16407fffbcf9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1571547b-cba0-4e42-b1bf-d107aeda5617",
          "status": "Not Found",
          "code": 404,
          "responseTime": 59,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d11b31d-0f3c-4ef0-86c3-ce42a2dd4b1d",
        "cursor": {
          "ref": "65f5723b-551b-4ac3-bd4b-0f161a1cd2a9",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2b23392d-cb18-41c0-9291-c356baef8d91"
        },
        "item": {
          "id": "8d11b31d-0f3c-4ef0-86c3-ce42a2dd4b1d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "967fbb43-bbdb-4beb-9600-62a715af4957",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c640609-6fac-497b-8788-f1d7a59fb91c",
        "cursor": {
          "ref": "321fe281-91d4-470d-815d-c4dccb8ade13",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "70b61b4e-b623-45f4-ac56-0b25461dbe07"
        },
        "item": {
          "id": "5c640609-6fac-497b-8788-f1d7a59fb91c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "70b0a32c-0718-4df6-b0cc-a7a3f62a2587",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "92b8ca6d-bf86-4c2f-95b8-00deb10af2e3",
        "cursor": {
          "ref": "1ed2892a-e44a-4027-bc88-8d31e3ed597e",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abd65dcd-ae80-4f85-9265-a7b6cc58d0b7"
        },
        "item": {
          "id": "92b8ca6d-bf86-4c2f-95b8-00deb10af2e3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "faf07130-5463-4d99-a925-1d8ddb96b48f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "92b8ca6d-bf86-4c2f-95b8-00deb10af2e3",
        "cursor": {
          "ref": "1ed2892a-e44a-4027-bc88-8d31e3ed597e",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "abd65dcd-ae80-4f85-9265-a7b6cc58d0b7"
        },
        "item": {
          "id": "92b8ca6d-bf86-4c2f-95b8-00deb10af2e3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "faf07130-5463-4d99-a925-1d8ddb96b48f",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b1691b2d-ba0f-4fa3-a04e-24adf4847d52",
        "cursor": {
          "ref": "304eb7c0-17e3-4270-95bc-feeaab67d98d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a4abe17-60f1-441b-b7aa-0b9f54d017d0"
        },
        "item": {
          "id": "b1691b2d-ba0f-4fa3-a04e-24adf4847d52",
          "name": "identifiers"
        },
        "response": {
          "id": "5f16d20d-de69-4de0-9918-3195bea7f323",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246ef07c-01f7-45fd-8bbd-ea5956fb598c",
        "cursor": {
          "ref": "2e0418e8-15c2-453f-9aeb-a5a0cb7b171d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b307b679-33f0-4ffc-8323-094ef661e0a0"
        },
        "item": {
          "id": "246ef07c-01f7-45fd-8bbd-ea5956fb598c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cd0347cf-0c14-45b1-a1be-dff302fe58ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246ef07c-01f7-45fd-8bbd-ea5956fb598c",
        "cursor": {
          "ref": "2e0418e8-15c2-453f-9aeb-a5a0cb7b171d",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b307b679-33f0-4ffc-8323-094ef661e0a0"
        },
        "item": {
          "id": "246ef07c-01f7-45fd-8bbd-ea5956fb598c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cd0347cf-0c14-45b1-a1be-dff302fe58ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75da5a71-8957-4643-83b4-d9ed9369e523",
        "cursor": {
          "ref": "703d0768-3210-4b90-8995-bdd44071b8cc",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36a390ac-18d5-4355-a4b2-041edae044bd"
        },
        "item": {
          "id": "75da5a71-8957-4643-83b4-d9ed9369e523",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af622dd8-5445-4568-a625-fe347b6598e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11069431-8945-40a0-bd58-c091558ab1dd",
        "cursor": {
          "ref": "789dfc4a-a177-4fbd-8cf9-0f87da8505a1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dca7aaaf-6c13-4396-9664-7a1e1e39a488"
        },
        "item": {
          "id": "11069431-8945-40a0-bd58-c091558ab1dd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "948967a4-7d73-4374-891c-2aea8b06650d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80d4804-fff6-4dfe-9add-4d1264ebbf66",
        "cursor": {
          "ref": "6502ef2e-bbb2-42f4-8489-e4966295ce4c",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d5b6c520-3a68-437d-bf4d-99757fb67bd4"
        },
        "item": {
          "id": "d80d4804-fff6-4dfe-9add-4d1264ebbf66",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "85f9bc8d-b1c4-4c33-a247-7ad9b628aef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7860bd5-7c2f-4a5a-a689-38e3ac7e1391",
        "cursor": {
          "ref": "de0d903a-8f7b-4403-a0f0-417b2d36b399",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "327e0d36-9533-456d-8056-518a5ad61197"
        },
        "item": {
          "id": "d7860bd5-7c2f-4a5a-a689-38e3ac7e1391",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c05b974d-8b8c-4a1c-abb8-4ce5859e1ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972db620-a6f7-4f9f-bbf3-4a477817ed10",
        "cursor": {
          "ref": "0ca1c6a6-572a-458f-9af3-772fb8ec4dd1",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fc027dd5-5412-45ef-b41d-6ca32abf4935"
        },
        "item": {
          "id": "972db620-a6f7-4f9f-bbf3-4a477817ed10",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "13c3b20b-fb1b-4140-b35f-19b0339035a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ab8085-63d7-4f4e-9b3e-e0d1a119bf95",
        "cursor": {
          "ref": "6e8b05f7-3d99-4636-b251-0f7f63d3ad98",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6038526b-af69-4921-8b32-ba009e9391dc"
        },
        "item": {
          "id": "15ab8085-63d7-4f4e-9b3e-e0d1a119bf95",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5f64c360-c200-4cdb-8e32-79020aec3f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e827b4af-252c-4c6a-bd9e-fd14533790ce",
        "cursor": {
          "ref": "acc982a3-bd19-4f4f-9c7e-39e05d4ab80a",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a8230f8a-1e67-490c-bde4-32f5d0754781"
        },
        "item": {
          "id": "e827b4af-252c-4c6a-bd9e-fd14533790ce",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6cc87f89-5138-4a1e-b911-05ebc1a7681b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfba9678-c7a0-4e74-a40a-d5cb84f64e9e",
        "cursor": {
          "ref": "e1b70358-7656-4b1b-ae4a-e8058b521e3a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4bd11fcf-170a-435d-971f-cbcff949fba4"
        },
        "item": {
          "id": "cfba9678-c7a0-4e74-a40a-d5cb84f64e9e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a94a7c83-76b5-4b76-9500-3ac5e7a6463f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9af6975-7f00-41e3-8c17-ecea6ac12817",
        "cursor": {
          "ref": "3cf5f81f-bb09-434f-bad3-3a21ed7a0079",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c561e4f9-77a0-4ae0-bf89-86cc7683222e"
        },
        "item": {
          "id": "b9af6975-7f00-41e3-8c17-ecea6ac12817",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "68f0f15f-00fb-42c8-9cd3-b8274c82f685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fe3275-0162-413d-ae4a-13e291494188",
        "cursor": {
          "ref": "a2c83ae0-6fed-4430-8eae-abc1b6fbd120",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "383fbfad-2ed2-49a8-ba42-b0624aec6ac8"
        },
        "item": {
          "id": "d2fe3275-0162-413d-ae4a-13e291494188",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b0b999f1-5b9a-4654-a5da-f4ae39eb37f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac3ad0f-30b3-4f93-979d-9dbb13479dd2",
        "cursor": {
          "ref": "87655c9d-1e3b-4337-bd32-7adb0d88ee18",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e47b952f-f0ad-4413-af5e-e9b7bbb7ed31"
        },
        "item": {
          "id": "9ac3ad0f-30b3-4f93-979d-9dbb13479dd2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d5ab1a12-7764-4d03-b7a3-068ca5468ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 946,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "f52d67e4-28de-408c-92ab-e890331952bc",
        "cursor": {
          "ref": "ab7c463f-c303-45dc-bc51-9363b1378ed5",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ca03e4eb-20fa-4981-9e1c-98fdefc6bee5"
        },
        "item": {
          "id": "f52d67e4-28de-408c-92ab-e890331952bc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "02c3b0c4-b0f5-4081-9e84-68f7c52765ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afaf27a7-d759-41f6-9506-e6706f2295f0",
        "cursor": {
          "ref": "f377b89b-cd7c-4882-a122-763e38275aa7",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7682aec0-d283-4e47-a19d-7945a916c42b"
        },
        "item": {
          "id": "afaf27a7-d759-41f6-9506-e6706f2295f0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5c3e39ec-7f2f-4cbf-b0ac-e9af1b0b2095",
          "status": "Created",
          "code": 201,
          "responseTime": 5709,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fe121931-5c93-477f-bc75-33e29306bde0",
        "cursor": {
          "ref": "398efe49-75a9-48c3-a566-fc29df2ce3ee",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5a39840e-37fe-4418-98e1-7273743b84c1"
        },
        "item": {
          "id": "fe121931-5c93-477f-bc75-33e29306bde0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a4ff5116-c5ee-46c7-87eb-a476071b73e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc8ad1c-6e17-4666-ba31-ab526ddf755b",
        "cursor": {
          "ref": "1c4c52bc-9f04-41da-b9ae-d5cc9f2c2645",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ffb82287-77e1-453e-8785-a0778f090346"
        },
        "item": {
          "id": "ccc8ad1c-6e17-4666-ba31-ab526ddf755b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3e88b723-fce8-41b6-875d-f6f08d41706d",
          "status": "Created",
          "code": 201,
          "responseTime": 4116,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "893518a3-b1ea-4059-a532-b6d875989c3e",
        "cursor": {
          "ref": "26f90b65-c3da-4ebc-95bc-f1ffa7fbb2eb",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b2c142dd-6e85-4682-86c4-c28f714038ea"
        },
        "item": {
          "id": "893518a3-b1ea-4059-a532-b6d875989c3e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c3b2527f-b80d-4f48-8b86-3bcc8a253b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5250f8-e803-4169-ab81-eb3c6127ffdc",
        "cursor": {
          "ref": "86069bba-0a47-4f6e-8bfe-eedc3d1777c6",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "78d7ea00-8329-4ae4-8358-9b34fa25c113"
        },
        "item": {
          "id": "ad5250f8-e803-4169-ab81-eb3c6127ffdc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df8bb428-2b7f-4ee0-b191-b6da25c6883e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded1cb0-1bb8-4cc0-a0f0-e7f56843408c",
        "cursor": {
          "ref": "29a2031e-b9ab-4558-ada3-8d65f3e6b1fe",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5e28883c-a124-42df-a89c-d9157765a7a7"
        },
        "item": {
          "id": "eded1cb0-1bb8-4cc0-a0f0-e7f56843408c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "421d865e-640d-4867-9ad1-4baad3366228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38256f4b-12fd-4624-bfe3-e6c1ffb3a957",
        "cursor": {
          "ref": "19844057-105b-47e6-addd-0f35d80786c3",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e1a6d096-be02-43b1-8cc2-d1c1370a9e03"
        },
        "item": {
          "id": "38256f4b-12fd-4624-bfe3-e6c1ffb3a957",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "26c3bbe8-6253-438a-a79f-56e186ce2f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035c0443-41a9-4f15-9b66-1bccff7e2291",
        "cursor": {
          "ref": "a1a6b18d-3fef-4c65-8d01-00970ef97469",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c472bdc0-31b1-4af7-a013-ce2e0400b750"
        },
        "item": {
          "id": "035c0443-41a9-4f15-9b66-1bccff7e2291",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5d759d6b-9e7a-4fd4-befe-e6988713bde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce44ee4f-a650-49a1-b681-e18a29af360a",
        "cursor": {
          "ref": "4f702add-5821-4e8f-88af-9fa7f51fe2f1",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "99142724-9cff-4b10-89c2-f9350c3d7237"
        },
        "item": {
          "id": "ce44ee4f-a650-49a1-b681-e18a29af360a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "951548bd-54f0-41ef-875b-c6d8e7d7f3d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d0f929-2aad-4807-87e5-fad219794b2e",
        "cursor": {
          "ref": "957b6e1d-9f15-48f0-adeb-5cd54c0d6af5",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d878f6e0-a22f-4f59-a1e8-c3533b92e5d7"
        },
        "item": {
          "id": "39d0f929-2aad-4807-87e5-fad219794b2e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "34928354-6979-4597-b76c-53470cbcc617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864334b3-3f98-4ec0-9310-f6eaa8c1b744",
        "cursor": {
          "ref": "9a1ef824-5a97-411c-9581-27e076ec8a4f",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fc10f6fc-c6b0-4028-a79b-4ad6a02465c3"
        },
        "item": {
          "id": "864334b3-3f98-4ec0-9310-f6eaa8c1b744",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a5dd162a-c36f-47f6-b660-c44e92c34e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e431e944-9b4f-411f-bb91-9c3b8bb81423",
        "cursor": {
          "ref": "131d27e2-6646-487f-8680-b85dc6f62e85",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "adb6cc3f-9a05-4706-93b1-75c7965ebf97"
        },
        "item": {
          "id": "e431e944-9b4f-411f-bb91-9c3b8bb81423",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2c6f1a02-69da-425b-ae53-834496d81bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b628ee5b-9422-41b5-9720-557c3c8074d9",
        "cursor": {
          "ref": "9876e4b8-74e9-457c-96b4-ad3f5a18ff40",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "92bdece7-dc8b-4c5e-81fe-39f87e64098c"
        },
        "item": {
          "id": "b628ee5b-9422-41b5-9720-557c3c8074d9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6926ddf4-8c22-4fe5-92c9-95755fee9b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98083f11-1f5f-4505-9dc0-1398213bb85d",
        "cursor": {
          "ref": "e573f843-fe3c-4109-8628-c3982d8aecbc",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "65ca2b37-1682-407c-b566-8b915247b72f"
        },
        "item": {
          "id": "98083f11-1f5f-4505-9dc0-1398213bb85d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0cd7e725-43ca-4ac2-84bc-524d9ca827d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fb1aa3-45e6-4f02-bb79-e8d694b90656",
        "cursor": {
          "ref": "af12f244-a65c-4bab-ac30-ce897d431414",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c259b548-1c8e-4acf-b3d1-921ae54c4e55"
        },
        "item": {
          "id": "23fb1aa3-45e6-4f02-bb79-e8d694b90656",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "799e263c-02cd-40cf-b7a5-06c4bc784f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef493f1-bac7-41d6-9e2d-a248fe798b8c",
        "cursor": {
          "ref": "192ca51f-565c-4b48-ba13-5df4bf59f274",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6bfc92e9-933d-4070-8c48-eb49dae4f710"
        },
        "item": {
          "id": "7ef493f1-bac7-41d6-9e2d-a248fe798b8c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c014c467-52ef-444a-b329-29265307bed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abbb7ab-d09e-4a8d-bdbe-02114ff4d3a0",
        "cursor": {
          "ref": "ba8c02e6-ccdf-4332-9c38-0c5466b48963",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "840fc04d-37a3-4f86-bd62-605771d86c66"
        },
        "item": {
          "id": "0abbb7ab-d09e-4a8d-bdbe-02114ff4d3a0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5dc7c200-c367-42ba-b97a-c6abc6506188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a180be6-e12c-4826-b5bf-30d58ffb297c",
        "cursor": {
          "ref": "a1f3a8e0-2df6-4d93-93f9-24f11857165f",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4ad99320-941a-4450-a9d9-4fb8f3cd8ba5"
        },
        "item": {
          "id": "8a180be6-e12c-4826-b5bf-30d58ffb297c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f79ee45a-7070-424c-8e5c-fdccecd44cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4344899b-8426-4c34-93f8-7459f4ed0bd4",
        "cursor": {
          "ref": "c9dc2b96-5c41-482a-aa05-175ae0c9d166",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "75bd22e0-66b4-468e-ac3e-8be6a114e59d"
        },
        "item": {
          "id": "4344899b-8426-4c34-93f8-7459f4ed0bd4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c0ca6168-8b0c-4a6d-ac94-5da27b6a141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b0481c-14f3-4355-b4d2-d6d5849c6373",
        "cursor": {
          "ref": "730da574-e47f-40b3-a357-809171886ab5",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b0650ee2-e1c2-408d-8f7c-3a2e84d27413"
        },
        "item": {
          "id": "a4b0481c-14f3-4355-b4d2-d6d5849c6373",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7dad9f51-6fe6-4839-bd13-bbf067f54bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0dffe0-f17c-4094-b010-73787e120704",
        "cursor": {
          "ref": "f8885ddb-4e05-4042-9d80-e77e934f8393",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "14cfe0b9-cee4-432f-85d8-fc5741b8352b"
        },
        "item": {
          "id": "9d0dffe0-f17c-4094-b010-73787e120704",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4dc564f9-2a2e-4049-904f-d36e144d9a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3405f4-3935-4724-aa74-0d29693e5cec",
        "cursor": {
          "ref": "95320504-86d5-43b6-8c76-11e6f40e4211",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a90cf5d-0571-4734-a7ab-3d7a830de01d"
        },
        "item": {
          "id": "bb3405f4-3935-4724-aa74-0d29693e5cec",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "23686d59-e322-4697-a10e-0294871e18bf",
          "status": "Created",
          "code": 201,
          "responseTime": 3777,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5f101f79-22ba-49e9-9118-b6c9ee41f833",
        "cursor": {
          "ref": "108a2e28-8da3-49fc-bcf4-2c83640b0a45",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f99dedc7-f07c-4514-9833-a7500bf7cc09"
        },
        "item": {
          "id": "5f101f79-22ba-49e9-9118-b6c9ee41f833",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f366486c-2bd9-406b-9586-413cd4991dfa",
          "status": "Created",
          "code": 201,
          "responseTime": 2640,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6ec4310e-6fb4-4deb-a201-274da72dbaef",
        "cursor": {
          "ref": "f43a6a23-235f-4e84-9779-923ab1d60866",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f77b16e7-0363-40f8-bacb-1f01df243c7c"
        },
        "item": {
          "id": "6ec4310e-6fb4-4deb-a201-274da72dbaef",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "49ce245a-7c91-4e73-8769-4cb7fc38ab8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1421,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ed6092-ba34-44c6-a26a-f84394b6afac",
        "cursor": {
          "ref": "669c1426-f3d6-48c0-bf33-9a778bc437ea",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "78921461-7986-42af-8eef-55703e49287a"
        },
        "item": {
          "id": "18ed6092-ba34-44c6-a26a-f84394b6afac",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6b6925b8-8338-45ed-97db-f828bc607216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf04cc40-fb87-48a3-b782-a62bacda0cee",
        "cursor": {
          "ref": "52e9bef8-9044-4cf1-95b1-6f85720a3604",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "829a5863-f8c8-4608-9ab1-8fe2f4bd461f"
        },
        "item": {
          "id": "cf04cc40-fb87-48a3-b782-a62bacda0cee",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a504daca-089b-424a-9f39-0c9e08f319b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06641e32-da74-4b12-bab7-0e4d7a42ccfa",
        "cursor": {
          "ref": "f01c1246-bcdd-4d8f-9dcc-862205f69e62",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4a4b3abc-9aa7-4e4b-960b-8bb760008165"
        },
        "item": {
          "id": "06641e32-da74-4b12-bab7-0e4d7a42ccfa",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "39079101-58fb-4664-8513-8d2f988cc8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ced96f-fe28-44ac-9f1e-6a403ec0b4f3",
        "cursor": {
          "ref": "18ac35ac-685a-46e1-b8d9-270d03cdbb25",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "574676dd-740b-45fd-b514-e1a086362c5b"
        },
        "item": {
          "id": "f4ced96f-fe28-44ac-9f1e-6a403ec0b4f3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6258dff2-e5e1-44c2-86d4-81e990933bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efa3147-27ed-4f88-98be-e1d3a4b84ee7",
        "cursor": {
          "ref": "e320467e-67c8-4a60-8999-e203c811ab0d",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c4bfe8c4-f536-45c6-99db-f68a7b497c3f"
        },
        "item": {
          "id": "6efa3147-27ed-4f88-98be-e1d3a4b84ee7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e1a28a84-fbee-444c-a0e1-26c87584be49",
          "status": "Created",
          "code": 201,
          "responseTime": 3017,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8e343083-adb3-4356-a7ed-a5ad92083842",
        "cursor": {
          "ref": "7d43668c-ecbf-4691-9a21-c6705df71caf",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "45347b7f-0413-497c-beb9-682159951946"
        },
        "item": {
          "id": "8e343083-adb3-4356-a7ed-a5ad92083842",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9d2155b0-a06e-4789-9bf0-0c9e1d26d021",
          "status": "Created",
          "code": 201,
          "responseTime": 2405,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ac1c6a36-d586-4601-bde6-b2c2daa214c3",
        "cursor": {
          "ref": "0c559ef8-3bfa-460c-b086-e736678238da",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e787f077-bc3a-4cf3-a3be-9b824647b765"
        },
        "item": {
          "id": "ac1c6a36-d586-4601-bde6-b2c2daa214c3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a20cfd4a-83a8-45cf-bce9-a9f2640a393e",
          "status": "Created",
          "code": 201,
          "responseTime": 2798,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1c147cff-3c6d-4258-b876-d718b20dcda3",
        "cursor": {
          "ref": "d42935d2-8e9a-4b1c-b093-d95f677af124",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "47854c50-5e21-4a37-aef5-b75c74bc89bb"
        },
        "item": {
          "id": "1c147cff-3c6d-4258-b876-d718b20dcda3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b50e263e-e798-4c0d-98b6-d94f97307a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d958e55-4e37-4527-8b6c-11f325c0cf0f",
        "cursor": {
          "ref": "7ae27614-3efd-4cc8-97dd-239cd81ccdcb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "97794139-8339-42b5-bd27-103c25aa3d2b"
        },
        "item": {
          "id": "6d958e55-4e37-4527-8b6c-11f325c0cf0f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b22e9a33-88a0-4f8c-9b70-b2f7f590918e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c380dda-7487-4021-b5c7-fdcbe8cc4081",
        "cursor": {
          "ref": "7ac7733a-5aae-41fd-9129-90f5e19d5ee1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3734aa68-37c9-489d-922a-6ccfc442fe2e"
        },
        "item": {
          "id": "9c380dda-7487-4021-b5c7-fdcbe8cc4081",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "efa3861d-c0d0-4395-9d14-fa60fdc9d834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0034d6c0-0fad-41ea-8a59-7eb86b492071",
        "cursor": {
          "ref": "4e7e6c75-951a-4df6-88f7-96533d451e5b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "353abfe5-8903-4cbd-9e33-d373f96c3a6b"
        },
        "item": {
          "id": "0034d6c0-0fad-41ea-8a59-7eb86b492071",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e0dce743-c636-4e3c-9e8a-1f498176e1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7a3910-2054-4e1a-ad45-4bc16a3c90c3",
        "cursor": {
          "ref": "17097768-c976-4124-ad40-61600c1a1f58",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7378f230-c6da-48dd-8575-ca32071f1a62"
        },
        "item": {
          "id": "2e7a3910-2054-4e1a-ad45-4bc16a3c90c3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "486226e2-e751-443d-acc0-6bb1266ae6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608acec6-8c8a-4762-b7ed-ec6fb37a7dd9",
        "cursor": {
          "ref": "4942b288-6cf0-4ada-a48a-647d150e5c88",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "788f7029-59af-436e-8ba4-e6e2b2891e47"
        },
        "item": {
          "id": "608acec6-8c8a-4762-b7ed-ec6fb37a7dd9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f071e205-7fe3-4a93-8722-46d178aee887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f9126b-d236-4684-a98c-693713e9e049",
        "cursor": {
          "ref": "e303c0dd-378f-44b4-80ba-3e2c9265097c",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "de46f962-15c5-4d7a-9791-e3fee7b25ac4"
        },
        "item": {
          "id": "07f9126b-d236-4684-a98c-693713e9e049",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "62626ae9-e52d-4b09-b736-738c065e53b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e40fbd-8f13-4b40-985f-6c030b9c2212",
        "cursor": {
          "ref": "f380a233-7e55-4df4-b6b8-dd4212f1c66d",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dbd97752-2942-445d-adea-345eb5e7cfd3"
        },
        "item": {
          "id": "97e40fbd-8f13-4b40-985f-6c030b9c2212",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2d40f518-eb59-4828-ace4-2b9fb1114b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6369508-27f5-444c-a440-087ff8c1ef7f",
        "cursor": {
          "ref": "8dc590c3-ca54-462e-a674-3f1cebad59e3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c418ced0-77a7-4807-b207-ec09d3693520"
        },
        "item": {
          "id": "e6369508-27f5-444c-a440-087ff8c1ef7f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "021db222-2546-43f5-9b29-3df65abc2d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4daac93b-4dca-4d8c-b504-7fbc44eca850",
        "cursor": {
          "ref": "f429f8c3-3542-4500-810d-b4dfc5673eac",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a34d999a-df26-48aa-839f-dfd9a1032f4d"
        },
        "item": {
          "id": "4daac93b-4dca-4d8c-b504-7fbc44eca850",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8caee333-d6e2-47e1-a245-833912d9a40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9536f13-04e4-4488-82b4-490d11a26f76",
        "cursor": {
          "ref": "f3e60fd4-8347-469e-b3a8-e441f537ac97",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5aa16204-e694-47ad-a744-51b79990f136"
        },
        "item": {
          "id": "e9536f13-04e4-4488-82b4-490d11a26f76",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0da33783-ec8a-4cb7-9f61-5487e3b14e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bb6ac7-f57b-4ec1-ba25-b130f01cbe3d",
        "cursor": {
          "ref": "72e10ce0-6176-4c85-9788-8e61a5a2f9cd",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ec63c463-bc92-4dac-b49f-1d6484c5fdc8"
        },
        "item": {
          "id": "53bb6ac7-f57b-4ec1-ba25-b130f01cbe3d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "725d7c1a-9cd4-49bc-9f16-d13c53f6f508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5733f0-fae0-4821-be9f-023af0f1d803",
        "cursor": {
          "ref": "63ef829f-26e1-4bb8-b39c-e05a35713dc9",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "10651c34-e196-400e-9d54-04f207e9fefc"
        },
        "item": {
          "id": "7c5733f0-fae0-4821-be9f-023af0f1d803",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a2766fc4-2003-41a6-a085-3647a51646fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b5daf6-3392-4acf-8f79-4979e4103f6b",
        "cursor": {
          "ref": "7cb2247f-330b-45f8-8883-999f441e96e1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6e46f1b8-ebee-4bfe-b999-814d738fdcf7"
        },
        "item": {
          "id": "b2b5daf6-3392-4acf-8f79-4979e4103f6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7792ba84-6e8f-4745-a0cd-665d5cc8d66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a8210ce-7ea6-4d80-a7c8-44b61675ed08",
        "cursor": {
          "ref": "ba692721-c9ee-408e-9401-dc9bfd3df489",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "259f73ef-bbf0-473d-a5d1-d7ccbc19cd18"
        },
        "item": {
          "id": "3a8210ce-7ea6-4d80-a7c8-44b61675ed08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5ad3f0cf-b7b7-4c8a-a35a-a1b8e67578e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610111ac-3317-404a-9c29-00474080ef98",
        "cursor": {
          "ref": "6a5d0da4-f50f-4cc2-ae8b-7533614ee368",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "81ceab72-4679-42e2-981a-2fce2affc972"
        },
        "item": {
          "id": "610111ac-3317-404a-9c29-00474080ef98",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "163c99ea-575e-497b-96b0-61ee841dd03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25bf8e6-4d13-4c1c-9b58-7b0051aa475c",
        "cursor": {
          "ref": "93f09ad6-55f4-42c2-ac5f-0a0703ad8c57",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "deadacb3-dbb8-4405-b87d-f34715e9c6c6"
        },
        "item": {
          "id": "e25bf8e6-4d13-4c1c-9b58-7b0051aa475c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d870000e-4a32-41d7-b729-428d38e1e970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dba5b3a-88f3-48cf-bdf6-889daaf4ebd6",
        "cursor": {
          "ref": "bd593a19-8a37-4c68-bbbe-b49a2da1bf10",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "52c1b10d-f6ef-47d4-972a-ab06ee3c1ff9"
        },
        "item": {
          "id": "4dba5b3a-88f3-48cf-bdf6-889daaf4ebd6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1dda11cf-3dd6-4c62-aa88-e56cbaaa0e57",
          "status": "Created",
          "code": 201,
          "responseTime": 3153,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "83528ba4-8eba-40fd-825d-fcb749473a04",
        "cursor": {
          "ref": "07fece8f-1625-48dc-a762-63c7b96be119",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "83fcbf9c-1bc1-43b1-b72a-68e0dfcfa25e"
        },
        "item": {
          "id": "83528ba4-8eba-40fd-825d-fcb749473a04",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "47a32135-8c01-4325-9ebc-97f5ffac0ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dd07e5-3fa6-40f1-b8f7-ecfada0b0d16",
        "cursor": {
          "ref": "f26013f5-0702-4386-a96b-316ce34e6ebc",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c6a51888-77c4-4d7c-a727-1618e56bc8d1"
        },
        "item": {
          "id": "79dd07e5-3fa6-40f1-b8f7-ecfada0b0d16",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b6cf8aa-5832-4c45-87fa-fabcf53e593e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 868,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbadfc5a-4be9-4bac-a6a2-a37fafca687b",
        "cursor": {
          "ref": "9a086bcd-7e51-4e87-a60b-2aac2a449d98",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "df2a74de-5caa-419a-8c0f-50bee80c6e98"
        },
        "item": {
          "id": "dbadfc5a-4be9-4bac-a6a2-a37fafca687b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50ca0a6e-aef6-4efc-b4a6-57ec7a98a908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bad306b-11bd-49f6-acb3-0157632a2849",
        "cursor": {
          "ref": "aad1345b-5919-4720-afca-cf0a1adf647f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b668346a-e2c0-44f5-a553-bfec69d0d456"
        },
        "item": {
          "id": "3bad306b-11bd-49f6-acb3-0157632a2849",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4d43e955-96f2-4a20-84fa-e850dc6cc937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfedbfa-7b8f-44cf-a110-942666d8926c",
        "cursor": {
          "ref": "1e085f76-d1a6-4c3e-9abd-751818b0920f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "00a4af60-fd3f-414a-b2f1-640535213beb"
        },
        "item": {
          "id": "5cfedbfa-7b8f-44cf-a110-942666d8926c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "873aa87a-979d-4625-b7a9-ad77a92c4a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ae2b91-d46c-445b-9220-790f739dbc5a",
        "cursor": {
          "ref": "e931f71d-8887-47ce-b50d-32a22928671d",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ad422e61-0dd5-461d-a579-9311e5be1e80"
        },
        "item": {
          "id": "b2ae2b91-d46c-445b-9220-790f739dbc5a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "477c45f5-faf7-49f1-b48e-d0a359fc0d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e78f1eb-5cee-419c-9c39-0c505e26c64b",
        "cursor": {
          "ref": "7dd33056-b4d0-45ff-97d1-e02dbc8ce3f0",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "50f1b017-30ea-4c71-b4e3-ffb0acdadf0c"
        },
        "item": {
          "id": "8e78f1eb-5cee-419c-9c39-0c505e26c64b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f26aa78a-0265-465e-bfea-05e578d865c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0686d3ee-4ece-4fcb-a122-b3399e08cdab",
        "cursor": {
          "ref": "9344bad8-8aae-47e8-a7a5-c5a6fdab80e2",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "48d79637-8c71-4971-a516-195fc2308942"
        },
        "item": {
          "id": "0686d3ee-4ece-4fcb-a122-b3399e08cdab",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e03e7c07-b129-488f-ba99-547147a07fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b356bdd4-d270-43ab-aabb-166ec20723d1",
        "cursor": {
          "ref": "021c3d99-5fc2-4e26-ba87-c41c8d7db987",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c064574e-7fbd-450c-96d1-f976ff9f1e66"
        },
        "item": {
          "id": "b356bdd4-d270-43ab-aabb-166ec20723d1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "172dcedf-4872-48f7-b395-fde0349ecb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201a947f-0084-472a-8b25-9a8bf9299d78",
        "cursor": {
          "ref": "7fe68acc-9cc7-4b72-b632-067b41da772a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "89525a6a-4e67-4113-9382-d95d8cf27efa"
        },
        "item": {
          "id": "201a947f-0084-472a-8b25-9a8bf9299d78",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9d136013-93a1-46ce-94e5-49776f06d647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf379314-d26d-4c8e-aa10-7d039a3a462d",
        "cursor": {
          "ref": "5364bdc2-f9c6-40cc-9966-232d44c8ae4c",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "88b383c9-0103-415a-8206-8f22e11d1451"
        },
        "item": {
          "id": "cf379314-d26d-4c8e-aa10-7d039a3a462d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "db84e239-ec03-4e1b-a216-1366bd1b6e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e4c3e0-42a5-4e47-994f-8b082f6577c2",
        "cursor": {
          "ref": "c2581c23-7f48-4282-b8a9-2c02b1699d0a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "64b13b3e-6aeb-4442-9b41-6fceb6c8b6ad"
        },
        "item": {
          "id": "40e4c3e0-42a5-4e47-994f-8b082f6577c2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "87d8ea4a-3050-46a8-9e64-2e4c9546d943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 770,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c93994-1c46-4896-af8c-01544e07441a",
        "cursor": {
          "ref": "ce267055-a118-4184-9f9d-9ab7a429d436",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "701d34f4-3c03-4c35-9365-418be5113a09"
        },
        "item": {
          "id": "e1c93994-1c46-4896-af8c-01544e07441a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9359e684-7023-4823-a170-6ead1f1540ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab23e474-f4e5-4107-adc8-8daa49fb0259",
        "cursor": {
          "ref": "60a405ff-f5d2-4c16-850e-25bf887f3e1a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7465067d-82b0-4876-8b11-e3e512bb598f"
        },
        "item": {
          "id": "ab23e474-f4e5-4107-adc8-8daa49fb0259",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "114b230f-28ce-4ef1-858c-633c48d88689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fc57e7-5faf-445b-a921-3cdae93860ef",
        "cursor": {
          "ref": "834ed0ca-4fc7-4948-8241-43cbc58e20f3",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "18edeb11-9f46-4e5e-85d7-c505cce91121"
        },
        "item": {
          "id": "58fc57e7-5faf-445b-a921-3cdae93860ef",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1c88604a-0e44-419b-83b6-bbb83df9551b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f99ffd-b843-4442-93eb-77cc77791232",
        "cursor": {
          "ref": "7defc48e-a8b4-4929-9260-da1df42b91f7",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "29a1a891-f3d5-435f-aa69-f7e552850ee0"
        },
        "item": {
          "id": "15f99ffd-b843-4442-93eb-77cc77791232",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "62712f34-acc2-4a80-8bc8-eaf9d8694569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b65891f-6485-4c66-ab37-638dc2780dea",
        "cursor": {
          "ref": "b8f580d6-3eb2-4972-9686-ee97e8ef610d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "141a9b47-7ba3-4942-b07a-01fcf2b90eb0"
        },
        "item": {
          "id": "1b65891f-6485-4c66-ab37-638dc2780dea",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4cac5093-819c-49c3-9968-3f71aa289bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a25ff5a-43e6-46ef-8fe3-659b7eb2d4a1",
        "cursor": {
          "ref": "ebcc8549-8909-437e-8be6-5ecba842acaa",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bee573d0-851d-4e59-8a0a-186a1d8ef929"
        },
        "item": {
          "id": "3a25ff5a-43e6-46ef-8fe3-659b7eb2d4a1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9592506d-4589-40bb-9fdc-d6b4bb79f882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19a7ca7-c295-4b31-a0d8-e9e31ec8ab75",
        "cursor": {
          "ref": "56efb2c8-6a1f-4e3b-810e-bd5103defe23",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "29ef08a5-7828-4464-8a38-6fc602bea276"
        },
        "item": {
          "id": "f19a7ca7-c295-4b31-a0d8-e9e31ec8ab75",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4aaaf427-b375-4729-8c1e-abbe591c7530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f95003-4396-4720-a902-33d8db0a437a",
        "cursor": {
          "ref": "b972cd86-5917-4fe6-9924-2625ba15387e",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1703f746-b9c7-4b2a-8e43-0459ccd3accc"
        },
        "item": {
          "id": "f3f95003-4396-4720-a902-33d8db0a437a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e456901-10de-41f5-8f6f-f17c331e56c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c378bcae-889e-4262-8738-dc21756dc0d4",
        "cursor": {
          "ref": "2b4b21d7-0849-4323-97ea-9a8130fb3ae9",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1655b6a6-3d35-467a-b096-4876a9edb1cc"
        },
        "item": {
          "id": "c378bcae-889e-4262-8738-dc21756dc0d4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b49f049c-330f-442d-9eec-6eccb8fbe64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deb92c2-79cb-405a-b9f1-4d6bfc295360",
        "cursor": {
          "ref": "62c6e99c-58b5-4b85-ac26-821d9b9fd981",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "991b02ff-3ea9-4821-8ba3-22c87d4bbe10"
        },
        "item": {
          "id": "7deb92c2-79cb-405a-b9f1-4d6bfc295360",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "32c72e5a-cfdb-49ad-87f3-b5e4430f1cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909d48bf-e55f-409a-b139-dc9fd1ee3958",
        "cursor": {
          "ref": "ad3db759-d357-440e-9995-ab42dac96bc6",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4ac6ffa9-4807-4f08-9884-f04653153464"
        },
        "item": {
          "id": "909d48bf-e55f-409a-b139-dc9fd1ee3958",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dad7f1b8-c5ed-4caf-8be6-21e80a25441b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe09c34-581d-45d4-bc8a-76e5ecfd6999",
        "cursor": {
          "ref": "1b6e2e31-5fe4-4ee4-a1cd-1713069b76f8",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7a2313db-8ab0-4b77-a603-8f7d05cca8fe"
        },
        "item": {
          "id": "6fe09c34-581d-45d4-bc8a-76e5ecfd6999",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ae13afc6-e622-4bdb-9973-e3d86a134baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbdfe12-b2bb-49d6-835a-853055983ff3",
        "cursor": {
          "ref": "134072ad-e061-458b-ad9f-aa4b9ee14fa8",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c036b95a-ded2-4cc0-9d6b-149efa0b4180"
        },
        "item": {
          "id": "9cbdfe12-b2bb-49d6-835a-853055983ff3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "eb39dd9b-80d0-4da9-943e-39d713d84441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0783ae2a-1282-4518-8f9d-4264cd045ee9",
        "cursor": {
          "ref": "a35ae035-22af-4d23-86e1-47befa7b7da9",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "09f86621-52a5-40d0-a3df-26314ef7eee9"
        },
        "item": {
          "id": "0783ae2a-1282-4518-8f9d-4264cd045ee9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "612d4dd5-625c-400b-83f8-422da8a0fc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dae0b9-d303-4d1d-a1e5-380ef2f4bab6",
        "cursor": {
          "ref": "36537499-b72b-4c27-95ce-9a18c5994961",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "175707bc-d3b1-4d6b-982a-e2ec5d710b9a"
        },
        "item": {
          "id": "08dae0b9-d303-4d1d-a1e5-380ef2f4bab6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7021bf7a-b634-4b96-89c0-2f6e341d7ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10b9f7e-5cae-4390-aa36-f84c7da7a876",
        "cursor": {
          "ref": "9be77f2f-eef2-4c95-903c-e9fd3272b511",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "55bb7561-97e6-4381-8b5e-0202393f171b"
        },
        "item": {
          "id": "b10b9f7e-5cae-4390-aa36-f84c7da7a876",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f11321ec-16a4-476b-8095-4c5e907d6d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f73820-86c5-41cb-ba5b-92624d362835",
        "cursor": {
          "ref": "e7e3660d-f8ed-4f3e-a7b6-170b4eb9219d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f7e8a5e4-97a5-42da-a557-cd5ce598d8dc"
        },
        "item": {
          "id": "46f73820-86c5-41cb-ba5b-92624d362835",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ced522ff-26fd-49df-a79b-3023585c0c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38bea353-ca0d-400a-897d-7e895477270c",
        "cursor": {
          "ref": "ddc20b1a-3d5c-4a98-a16c-aae747bb6997",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91fa9bac-c2c6-42ca-95eb-84f6373b7fb5"
        },
        "item": {
          "id": "38bea353-ca0d-400a-897d-7e895477270c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d01840be-140e-4e02-9ee8-da962968585d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff826de-ac76-412f-bfd9-8c9cdc09b9bf",
        "cursor": {
          "ref": "f3971099-642a-4214-93a9-65878ea7a44d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f05766de-2fed-4677-937d-afa9afd2dc00"
        },
        "item": {
          "id": "1ff826de-ac76-412f-bfd9-8c9cdc09b9bf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ccb90897-090b-4804-9cd5-c3f353c3bfb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "bcc1057e-55a2-4c9f-89d1-5a248a82ee1b",
        "cursor": {
          "ref": "98296455-dfca-47c5-98ff-c30030151696",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6f35904a-4389-417d-9f54-50470d53592a"
        },
        "item": {
          "id": "bcc1057e-55a2-4c9f-89d1-5a248a82ee1b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f829cead-d84f-4868-b57b-66390c15ce1d",
          "status": "Created",
          "code": 201,
          "responseTime": 2022,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "36e7241a-987e-4c97-b3d4-2b2899b9942e",
        "cursor": {
          "ref": "e42f7288-1ef1-488e-954c-f23c936993ed",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3700a927-5680-4888-87df-6cc0e90dcd12"
        },
        "item": {
          "id": "36e7241a-987e-4c97-b3d4-2b2899b9942e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "60d2d8df-65b1-4e06-8695-b4b638021d99",
          "status": "Created",
          "code": 201,
          "responseTime": 2518,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc81b75-f15b-4da4-8d24-c510b1f7ad14",
        "cursor": {
          "ref": "2356ff85-7311-4b17-b16b-93919fdc1c2e",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e0c4d18e-179d-4c88-9f13-61a86b46b3cd"
        },
        "item": {
          "id": "7bc81b75-f15b-4da4-8d24-c510b1f7ad14",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8f265b0a-c88b-43b6-9e75-0b80c6024db9",
          "status": "Created",
          "code": 201,
          "responseTime": 2356,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7601f5-9640-4a14-b0f8-b089e609421d",
        "cursor": {
          "ref": "2954edce-6686-4400-ae98-c17e97efd2f6",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9c078b0f-0a93-443b-901a-35bdc7c3a08c"
        },
        "item": {
          "id": "cb7601f5-9640-4a14-b0f8-b089e609421d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "04c70605-1bd2-40ac-8b5c-df89f2c79205",
          "status": "Created",
          "code": 201,
          "responseTime": 2317,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "742e8b16-580b-46e0-8d9c-29ebbb8de636",
        "cursor": {
          "ref": "451475fa-e677-4533-8805-8d743670f1a2",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c90a3c79-63fc-446a-a727-0672bf490d78"
        },
        "item": {
          "id": "742e8b16-580b-46e0-8d9c-29ebbb8de636",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a1cf6380-3a24-46c9-87e4-9d33e66834e8",
          "status": "Created",
          "code": 201,
          "responseTime": 2543,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "44539657-40a2-4f3a-8256-808744ac3dad",
        "cursor": {
          "ref": "470167ed-30dd-4147-9f09-9d7c129fa4b7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4e118465-0586-4ff4-a43b-67858ecace91"
        },
        "item": {
          "id": "44539657-40a2-4f3a-8256-808744ac3dad",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7e06ed6f-a53f-44b6-b231-0192d44d84ba",
          "status": "Created",
          "code": 201,
          "responseTime": 2078,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-06T00:34:40Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-06T00:34:40Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "69e937e6-59d5-4e37-b2cf-49cca6c78173",
        "cursor": {
          "ref": "dc5bdcae-08d4-405f-bfcd-3a52d057d05a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "773acc7d-1e8b-43fb-87f7-f8b11e4a09c8"
        },
        "item": {
          "id": "69e937e6-59d5-4e37-b2cf-49cca6c78173",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b1703ff5-28e2-4b8b-84ca-4ae831d239b3",
          "status": "Created",
          "code": 201,
          "responseTime": 3302,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e77b3a3-1074-41cb-9252-75368e1e4fbf",
        "cursor": {
          "ref": "12669679-806c-4fce-aaf0-d152d236c05c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "780f5e93-f787-4ca0-83e6-3cf5dc0109b5"
        },
        "item": {
          "id": "9e77b3a3-1074-41cb-9252-75368e1e4fbf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "38945414-2f3d-4ef4-a0c6-244d9ff1765d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e77b3a3-1074-41cb-9252-75368e1e4fbf",
        "cursor": {
          "ref": "12669679-806c-4fce-aaf0-d152d236c05c",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "780f5e93-f787-4ca0-83e6-3cf5dc0109b5"
        },
        "item": {
          "id": "9e77b3a3-1074-41cb-9252-75368e1e4fbf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "38945414-2f3d-4ef4-a0c6-244d9ff1765d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc4a612-62dd-4b2b-87b8-b66852ef0ebb",
        "cursor": {
          "ref": "b6056945-bf0b-4290-a424-53bde275a963",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2b70256f-5f72-4326-bbd0-02a9a6c8c1dd"
        },
        "item": {
          "id": "5cc4a612-62dd-4b2b-87b8-b66852ef0ebb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "da1cf659-b4f9-4c45-9dc3-ceae40520a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a1acc6-e1ef-4b48-ac8f-17a932d178cf",
        "cursor": {
          "ref": "c659a916-efe5-48d7-92f3-abc0a07e87f2",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4c4f4e84-09fb-4076-b0e5-5697adca87da"
        },
        "item": {
          "id": "a4a1acc6-e1ef-4b48-ac8f-17a932d178cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "62965810-911e-42d0-be7c-aca5509a8d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfd6f56-7013-4e35-b9ff-c98fd0975187",
        "cursor": {
          "ref": "4f5d4b3e-d79d-4e95-945f-690750e50ce8",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7d6eb959-5bbb-40d2-a815-e0eb9a38fce6"
        },
        "item": {
          "id": "9dfd6f56-7013-4e35-b9ff-c98fd0975187",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d11db76f-aceb-4b2f-8efb-70189bdc585f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b808f32-58ec-42ed-bdad-b8e2823dc240",
        "cursor": {
          "ref": "cc49d979-bf57-478b-a0f9-0ef0551ab66b",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2d918570-0288-4125-bf50-379e7fa791af"
        },
        "item": {
          "id": "5b808f32-58ec-42ed-bdad-b8e2823dc240",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b0152e70-b2a6-4edd-9726-ac041c3597e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8b941e-4927-47ed-b30b-c5ff1062ef30",
        "cursor": {
          "ref": "746239ca-0613-4158-a010-f7756b6f92aa",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7601df89-4064-4de5-84bb-a4ad49b2c12d"
        },
        "item": {
          "id": "dc8b941e-4927-47ed-b30b-c5ff1062ef30",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d5f5ea9f-4527-4343-9446-50d281e67c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e182eb-f96c-4dcb-a129-d07a851057ac",
        "cursor": {
          "ref": "c86d2230-8274-415c-adf5-e796f883e227",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "852b4113-6115-485e-9540-1d677a1c5632"
        },
        "item": {
          "id": "e4e182eb-f96c-4dcb-a129-d07a851057ac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "069b4969-17b6-4749-83c5-69f5ada6b4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a229a1-8570-432f-8710-1444a7bed548",
        "cursor": {
          "ref": "2b90096c-b822-4a65-bbaf-37a2aefb85e5",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f59784dc-ea84-4f21-9a19-23c76f21183b"
        },
        "item": {
          "id": "a7a229a1-8570-432f-8710-1444a7bed548",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "076c2ad8-e005-455a-8cd9-9b415ad56d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c82811-1a4d-4911-a803-8c1d6d6357d4",
        "cursor": {
          "ref": "b8d7ba1a-2fb0-434e-a0e5-cd5400726cad",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "be4a4ecc-1d33-4c78-9717-ec797c823400"
        },
        "item": {
          "id": "f3c82811-1a4d-4911-a803-8c1d6d6357d4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d0759383-48b2-4b29-a091-225eea7ecb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb3efef-c61a-4d1b-a607-b4e2fe9ef04c",
        "cursor": {
          "ref": "2df89420-af50-4f81-9899-e0ad65e6457c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a8102581-d91e-4f82-ad11-bdaac1330a95"
        },
        "item": {
          "id": "1eb3efef-c61a-4d1b-a607-b4e2fe9ef04c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e85c83cc-6d02-4d6f-99e6-2874c9743dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a293dd2-ed49-4062-8f5d-d817bed78ea0",
        "cursor": {
          "ref": "88cbad34-9eba-46c3-8365-d9e7746a37c2",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "eb9a58e5-4362-475e-9c41-724f91a4cb17"
        },
        "item": {
          "id": "9a293dd2-ed49-4062-8f5d-d817bed78ea0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "13a980f6-ecae-4ae2-918b-33d1c06acc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4729a56-0866-444b-b569-b406b5a574ca",
        "cursor": {
          "ref": "0485ad5f-8d43-4037-9246-432fb0489c01",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "585107c8-a041-4fe9-b9da-5de86adc748d"
        },
        "item": {
          "id": "d4729a56-0866-444b-b569-b406b5a574ca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e7fadf61-74cf-486b-874c-be51ba434d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bc1f3a-9688-433f-8d94-07a615063d86",
        "cursor": {
          "ref": "c3daae6a-5321-43e7-a5f3-542aca9672e4",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "248cfa71-a63d-4f2d-abdb-bdae5f4ba735"
        },
        "item": {
          "id": "06bc1f3a-9688-433f-8d94-07a615063d86",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "31d62a12-8232-461e-acaf-5a44e02036d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95955f2b-5c23-4bd1-8b25-bc9643a6278a",
        "cursor": {
          "ref": "05f70b53-12c1-49f7-97b5-42d6fc9a5241",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8af3b716-7e95-46a4-90fa-1511b98f0e7b"
        },
        "item": {
          "id": "95955f2b-5c23-4bd1-8b25-bc9643a6278a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8585820e-92a1-4a1a-8791-23c83b680944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d36911-2440-472d-88bd-103e662004ec",
        "cursor": {
          "ref": "3f9ca40e-960a-4986-bc63-035b9dd05e2a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "06c26f8f-9eb8-4d04-b86c-51df27295004"
        },
        "item": {
          "id": "73d36911-2440-472d-88bd-103e662004ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a0e0851f-08a9-4ccb-ae36-5078c2d21b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81b416c-44cc-4acd-86c0-a72202e9843a",
        "cursor": {
          "ref": "b2ee274d-75a6-45f2-b312-4aa4b2cb2af3",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d11abc17-b631-4b76-8bb6-3ca977734cc0"
        },
        "item": {
          "id": "f81b416c-44cc-4acd-86c0-a72202e9843a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4d6dfa63-7b15-4bca-a5f0-54c205b9647b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d29607d-fb19-49fb-80f7-a920db6be311",
        "cursor": {
          "ref": "69a2b6ff-0c02-4642-af78-0db6778d44cf",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "95dc8705-c548-46ad-a02b-7c242d90f62e"
        },
        "item": {
          "id": "7d29607d-fb19-49fb-80f7-a920db6be311",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "897f331e-9c59-4d21-9874-8ac587fd4ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f71f931-c96b-430c-8e76-00b0e18594f3",
        "cursor": {
          "ref": "9f27541c-d585-4fd8-82c0-67a377129594",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3f9f9751-9fd0-490d-b885-90a532a0778f"
        },
        "item": {
          "id": "2f71f931-c96b-430c-8e76-00b0e18594f3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a0891f85-0a7b-4b1c-91c4-0c1c3f0aac22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31397ee1-867e-4443-8b68-c447346eee8d",
        "cursor": {
          "ref": "20a320e9-feb2-4d48-87da-21ea5945ca8b",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4b8bf704-b52c-49ae-8099-c43be0cbad71"
        },
        "item": {
          "id": "31397ee1-867e-4443-8b68-c447346eee8d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "44facedd-95fd-467e-aa8b-438a991d3c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504df3da-afd7-49cc-b446-3d6fa6321db3",
        "cursor": {
          "ref": "145d1eb6-f703-4eee-8502-51c8c3bcf441",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "503bc476-caa7-4e63-8c3b-3e0740c15ea5"
        },
        "item": {
          "id": "504df3da-afd7-49cc-b446-3d6fa6321db3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bae1ecc2-8d24-4639-9316-ff379d0a3eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d58e666-da5f-41e0-8259-5e3e97bbd739",
        "cursor": {
          "ref": "263caaee-1188-4e52-9264-7bddb9411acf",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3a13dd80-e54c-4e12-ab68-d552afaadcfa"
        },
        "item": {
          "id": "7d58e666-da5f-41e0-8259-5e3e97bbd739",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d5b23470-abf5-42d9-bd66-aa1346c3effb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f414907a-0f65-46cb-ba2b-94ec2fc06f36",
        "cursor": {
          "ref": "52c790b7-1c7d-4015-b6c0-8af9e8724cb7",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "967a4a0a-c71f-4e3a-af23-cb6d91d0e54b"
        },
        "item": {
          "id": "f414907a-0f65-46cb-ba2b-94ec2fc06f36",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "59fd579a-9d04-49af-843c-71bd96914813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf24f779-96f8-41a3-8b56-1b1574390de6",
        "cursor": {
          "ref": "fa270225-9a03-462d-b827-2c7b6e1ba44b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "10ea18a2-d663-4907-ba3b-3bd4975757e9"
        },
        "item": {
          "id": "cf24f779-96f8-41a3-8b56-1b1574390de6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1d35fcf7-888d-4800-99be-8b0f00ac5c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a603770d-f629-4c62-9a75-70019d491e2d",
        "cursor": {
          "ref": "7a698df8-af10-4f5c-8467-3fd547ef4550",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "273c2101-80be-4bbe-a844-73e878c73f93"
        },
        "item": {
          "id": "a603770d-f629-4c62-9a75-70019d491e2d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "863bf045-3412-4633-a6ab-deefbc878534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fd4493-54a3-4b46-8c6e-429798bf1e47",
        "cursor": {
          "ref": "067e728e-5f66-410e-82e8-db838515a5eb",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a5ed9cb1-0260-4a08-b2e5-c789dc46e443"
        },
        "item": {
          "id": "82fd4493-54a3-4b46-8c6e-429798bf1e47",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "872f269f-424f-4202-ba79-9f9cdb94e203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae1be42-7fe5-4bf2-a9ec-822e43421c6f",
        "cursor": {
          "ref": "c96f76ca-e837-458b-8950-6e26fb0ce496",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2f787f1a-ba74-4210-8a88-9cbd7c57c869"
        },
        "item": {
          "id": "2ae1be42-7fe5-4bf2-a9ec-822e43421c6f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6e994eba-62e6-4061-9843-a989d404dfe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100015ef-75d7-4a1e-b244-2a7126a7ecbc",
        "cursor": {
          "ref": "1c9043f1-fa06-4282-9067-2e688bba34f3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8ccd2962-c09b-4944-a123-2de2b277c1d8"
        },
        "item": {
          "id": "100015ef-75d7-4a1e-b244-2a7126a7ecbc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bd84da95-42b5-4db6-a0f8-cff6afd8b6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f313c88e-0453-4d89-9cba-f58c4d110911",
        "cursor": {
          "ref": "499a049a-2b4f-4a15-97cd-6bc3533bebae",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e57d955c-e290-4fcc-aa76-d50f6993f53d"
        },
        "item": {
          "id": "f313c88e-0453-4d89-9cba-f58c4d110911",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "742cb8f8-0a62-40eb-8a35-b531b4d4adbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450f38ae-7962-47f0-b03d-120e909b7210",
        "cursor": {
          "ref": "a2834273-5aaa-419b-8585-7ab8510ec5c9",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "26656a31-234b-4999-93db-a5c97836ef10"
        },
        "item": {
          "id": "450f38ae-7962-47f0-b03d-120e909b7210",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "83e501a4-1cad-4543-8ec9-a1d61e1bcfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0234a3-5ac4-453d-a2df-845abefd19f7",
        "cursor": {
          "ref": "a69ceae8-d215-4d90-9a72-ccf6bd940fdb",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9992d5ff-e3a4-4d4b-9715-243831d1983a"
        },
        "item": {
          "id": "ef0234a3-5ac4-453d-a2df-845abefd19f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ae120d48-3b01-43b1-81e9-de71450cf460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be9e14e-0800-4d70-a23d-507f892cf32e",
        "cursor": {
          "ref": "26a6b86a-3f07-4c5c-91cc-16c0a3fc6e27",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8e236bf8-adab-4e25-a97b-088ba9789be6"
        },
        "item": {
          "id": "1be9e14e-0800-4d70-a23d-507f892cf32e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4a4ac0c0-2536-4f69-ba0e-1a000fd6a4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b733f30-f11f-4a9b-b3e2-6b1ea2eff1e0",
        "cursor": {
          "ref": "11f396ec-e751-47b4-b9fd-30f282a9f371",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "761a7c00-d41f-4eeb-a8a8-73757e010dd2"
        },
        "item": {
          "id": "4b733f30-f11f-4a9b-b3e2-6b1ea2eff1e0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "41cda891-4e71-4063-aec8-2b8bf950758c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a95e93-244c-435d-ba95-cd8389641995",
        "cursor": {
          "ref": "a66addab-b3bc-447d-babc-be51e72d3e1a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "33e638d4-16e3-4954-ab98-98d14c70bb36"
        },
        "item": {
          "id": "e0a95e93-244c-435d-ba95-cd8389641995",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "be50486f-845e-4166-95f5-75bd8d824c5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b67a8946-3496-4d43-929e-634640f0e69b",
        "cursor": {
          "ref": "5ffe6dfa-39de-4a92-9105-1e568c086ef0",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "da5fdbf1-d546-4e9c-bfdd-99ce51df6ad9"
        },
        "item": {
          "id": "b67a8946-3496-4d43-929e-634640f0e69b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0b98bc12-b454-4447-ab49-90e74176872b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b2fd3871-bfda-4721-97d8-e336c0931478",
        "cursor": {
          "ref": "7f0a5312-099b-46d6-8134-fe24b01ec8f4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6026664e-8383-4351-9566-894e2d258457"
        },
        "item": {
          "id": "b2fd3871-bfda-4721-97d8-e336c0931478",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f3c304f-5d26-4851-b22d-38f3c8dea25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fd3871-bfda-4721-97d8-e336c0931478",
        "cursor": {
          "ref": "7f0a5312-099b-46d6-8134-fe24b01ec8f4",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6026664e-8383-4351-9566-894e2d258457"
        },
        "item": {
          "id": "b2fd3871-bfda-4721-97d8-e336c0931478",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f3c304f-5d26-4851-b22d-38f3c8dea25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc81323-8dc6-43e1-88c2-21a67c87607f",
        "cursor": {
          "ref": "fe2bd798-f214-4fa8-bb21-a20ac9d3ae69",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7620e997-2e12-411c-8960-5bc99c938246"
        },
        "item": {
          "id": "3cc81323-8dc6-43e1-88c2-21a67c87607f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6b071c8b-2700-49af-a748-1e3035321f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ac7a1f-afa8-4f4c-8c46-e811b35abb57",
        "cursor": {
          "ref": "52c0a54d-c97e-473b-9487-67f4a8e4634e",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "214b77b2-7105-429e-8109-838cb61e0ac3"
        },
        "item": {
          "id": "82ac7a1f-afa8-4f4c-8c46-e811b35abb57",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "89e399c9-acc2-4963-817c-e81bb3f9968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d1433-48be-4919-a7a3-7c723f6e5dd6",
        "cursor": {
          "ref": "96cb3015-d17d-4d7f-a3c3-aab276e10a39",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "878ec3be-a36e-4684-b566-ee6551378d5b"
        },
        "item": {
          "id": "f24d1433-48be-4919-a7a3-7c723f6e5dd6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c7cc1886-b30d-4bb6-ae0a-f7ef0bb83afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd84fe93-98da-4fc7-be35-00a3a4ee2d52",
        "cursor": {
          "ref": "0e519a7f-2155-4a0b-89fc-bb176dc17358",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3b06ccae-cfe4-4898-b3bf-f0513e0fc0d2"
        },
        "item": {
          "id": "cd84fe93-98da-4fc7-be35-00a3a4ee2d52",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "73694dae-0f00-4f3d-9dca-f7500f337d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccb2614-0ec8-454f-b838-4f71868525f4",
        "cursor": {
          "ref": "2e71f838-2f00-4f7c-9413-0a553093511e",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2a5f503b-6b43-404f-95e5-098aba14c625"
        },
        "item": {
          "id": "5ccb2614-0ec8-454f-b838-4f71868525f4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c7f0c4ce-fcdf-48b4-b63c-0b3daa9ca5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7bd46b-c031-4ede-8810-f6d63f40bf47",
        "cursor": {
          "ref": "73d43a29-e4ab-4a62-b90d-b3a626290102",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b6cc399f-fc70-4135-b3d5-c258ab982e70"
        },
        "item": {
          "id": "8e7bd46b-c031-4ede-8810-f6d63f40bf47",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "daaff017-62c6-47cf-8162-4600285dd97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee400194-e638-42de-872d-15df9d8e0588",
        "cursor": {
          "ref": "98785658-ba49-4e30-a119-c061eb8752ca",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cd5cb531-7c80-424a-b79c-82d5b6f3d7b0"
        },
        "item": {
          "id": "ee400194-e638-42de-872d-15df9d8e0588",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "db086dc6-c4b0-4db8-83e8-bc54fe72cbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7bab47-c1bb-441e-8cff-5d10a0c2e8eb",
        "cursor": {
          "ref": "4f61bd9e-fe49-4482-838a-026fcc68567b",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9a3f6ddc-2dd4-4d39-8f13-fa3d564b748f"
        },
        "item": {
          "id": "7c7bab47-c1bb-441e-8cff-5d10a0c2e8eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "710fc9e3-552c-4cf5-86e4-5af5617b40b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf37aa1-1349-401b-a067-edd6e2426a29",
        "cursor": {
          "ref": "9ccedc13-bb72-4370-87c3-c8ac020019c5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "325969c2-7108-4b84-a6a7-29c688aa3056"
        },
        "item": {
          "id": "8cf37aa1-1349-401b-a067-edd6e2426a29",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8a857b83-2e08-40a5-9e27-4e1136b047e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd510132-549b-4ad5-b280-02e4e1c19b6a",
        "cursor": {
          "ref": "2cfa22ab-1f1c-4c40-a5fb-29a1e229d0cc",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "69c73adb-29c7-44dd-a3e0-74c2d144fda0"
        },
        "item": {
          "id": "dd510132-549b-4ad5-b280-02e4e1c19b6a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1f35cd9a-3e6d-4f43-8eca-086dceace0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fa95db-8693-4f6d-9ffd-204faf3f6d01",
        "cursor": {
          "ref": "ca520c77-26da-4aa4-89c2-d68eb82b06e4",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "44418071-723c-46c3-b7a5-80d9f5d0ecaa"
        },
        "item": {
          "id": "24fa95db-8693-4f6d-9ffd-204faf3f6d01",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ff86e84e-b5a5-4b17-8dd1-342e096b7cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b8033d-e7e1-49c2-9b8d-59180314cd23",
        "cursor": {
          "ref": "5eea27bb-833e-4e31-8e27-da8d323bc1b1",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7a9b5943-d765-495f-b83a-0c597daeacc9"
        },
        "item": {
          "id": "65b8033d-e7e1-49c2-9b8d-59180314cd23",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d63a7346-c4d3-4cd1-9b7c-ea3058a1587f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23dc839-d58a-4b2d-9196-4d9171a43fe1",
        "cursor": {
          "ref": "006f90d1-233e-4ac3-aab0-bdbaaff7fdd8",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ecfada39-c511-4f0d-8714-9a78cba4d073"
        },
        "item": {
          "id": "a23dc839-d58a-4b2d-9196-4d9171a43fe1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "80cd3151-cef4-4e22-9633-01c4bcccde6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2151a4-d32c-477e-99ed-b8b515828623",
        "cursor": {
          "ref": "b9d52965-222d-46ab-9566-5da4d952c059",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e95bf72e-febd-4ad8-9f3a-2d152b8bba07"
        },
        "item": {
          "id": "ef2151a4-d32c-477e-99ed-b8b515828623",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4f487c48-cfbb-4aa6-b11d-3546bd48d055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a9bf96-6899-4663-bda2-ed1e5eccd029",
        "cursor": {
          "ref": "01ee8884-60bd-494c-8df4-2f00050c6dba",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "68ec28ba-ba43-4966-acc2-7e73c80ac07e"
        },
        "item": {
          "id": "c3a9bf96-6899-4663-bda2-ed1e5eccd029",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e894d27b-f9e1-4a8e-8912-f2985aa5c1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5804a73-748b-41ee-96d5-01715c5296e2",
        "cursor": {
          "ref": "12d9abc9-e91a-49d6-b73e-7e1fdee42b03",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e8bd96b6-8393-4069-a456-27dd81f571d0"
        },
        "item": {
          "id": "b5804a73-748b-41ee-96d5-01715c5296e2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bfb43760-a718-4d0d-8438-bc38425887ab",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "84892776-aa7c-452d-9178-0fa023c67519",
        "cursor": {
          "ref": "6a8c8bcb-9bae-4803-95e0-c60c4fff60fb",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "87730b27-501a-4978-8fcd-37f7bf3d06da"
        },
        "item": {
          "id": "84892776-aa7c-452d-9178-0fa023c67519",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f5595117-07e0-42f2-bde5-e8922f6966f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21e4ded-1a82-4f71-b7e5-376cf325b710",
        "cursor": {
          "ref": "eb749ad1-e83f-4b0b-9968-9e3ef08f704d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a77c920a-524d-4706-bec0-5aa384792db6"
        },
        "item": {
          "id": "c21e4ded-1a82-4f71-b7e5-376cf325b710",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "63fe510d-95c2-4f6e-a99e-6b24594d16fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95eae14-a80d-4fba-9e7b-1eee087e4f2a",
        "cursor": {
          "ref": "b0ece020-c035-4cb6-884c-8bf02c43f46a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f2168fe3-ffc6-4003-94a6-9ad1ea39fa08"
        },
        "item": {
          "id": "b95eae14-a80d-4fba-9e7b-1eee087e4f2a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "05fad333-6e43-41cf-8e34-49236962d80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78f8719-4a92-4116-97ab-3d02a1b8349b",
        "cursor": {
          "ref": "7d8de8c6-3860-4348-a25a-2b85e3d00c0a",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7a5d6f1e-c5d9-4dfc-b3e6-c646fd2ce4f8"
        },
        "item": {
          "id": "a78f8719-4a92-4116-97ab-3d02a1b8349b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d6455a44-0111-472b-921c-6c44c55e258f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba604f8-e835-4e48-8b9f-70936958f71e",
        "cursor": {
          "ref": "7df84533-eaa1-48f5-8b54-5bc4012a6c23",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b3bd705b-ae6d-4b95-9ef1-f12d0a08ac59"
        },
        "item": {
          "id": "0ba604f8-e835-4e48-8b9f-70936958f71e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3b5bbb4e-ce84-4fb6-8e29-a1008284d93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4778ac2a-40b2-4497-a93d-95b23656968c",
        "cursor": {
          "ref": "547df434-22a3-44d0-9666-468623b6f4e1",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "88b9941d-7ed4-4b76-a73e-29f8544b5d0c"
        },
        "item": {
          "id": "4778ac2a-40b2-4497-a93d-95b23656968c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "caf614a5-9986-4134-8556-0aa3e2890fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba3f30c-0da0-401c-817e-bdc4da0fb1f9",
        "cursor": {
          "ref": "74a5320d-3a1e-42a8-851c-f85556fb6850",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e24dd7c9-860c-4c04-820e-187ead55ad24"
        },
        "item": {
          "id": "6ba3f30c-0da0-401c-817e-bdc4da0fb1f9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b1af624c-a24b-437d-817f-04756938f631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6d3f8d-115d-40fd-a576-b9b1699d7a29",
        "cursor": {
          "ref": "7d08f820-ed7c-4306-aaa2-79ddeb30e365",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8ad4cbd4-6bfd-47ab-bca4-ce4b131072c7"
        },
        "item": {
          "id": "3e6d3f8d-115d-40fd-a576-b9b1699d7a29",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4409ea63-0c46-46ea-8c99-41d354d28877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff626fd-e6b2-4988-b464-e1acd4206f5e",
        "cursor": {
          "ref": "65c41a4b-e5f8-4e1d-81a9-92664be60576",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "02c6fed8-dec3-4b07-a9e1-ba215a8f7e7c"
        },
        "item": {
          "id": "dff626fd-e6b2-4988-b464-e1acd4206f5e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "193ff631-7314-4d3d-8e35-de1c49955811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ff7234-0e50-4747-aad5-05845ccee728",
        "cursor": {
          "ref": "044ec533-2740-488a-9653-bff23e7fe780",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8863c0c8-24e0-476a-a795-b60c7f18b3bc"
        },
        "item": {
          "id": "36ff7234-0e50-4747-aad5-05845ccee728",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ccf6194b-7d0b-46c8-ab95-0fe1efcf7f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33539eba-5826-4a57-97e1-2507323204fe",
        "cursor": {
          "ref": "5f4e4548-1e38-4b27-9ddb-bff70e1cab77",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "afd1ce23-b159-4310-9e23-c55538858c76"
        },
        "item": {
          "id": "33539eba-5826-4a57-97e1-2507323204fe",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1775750d-5025-48ba-b450-ae7c035a0e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013d9696-40b1-4167-b926-9e723bc533a5",
        "cursor": {
          "ref": "5ecfd964-2f79-4fb4-94e9-e6f67f656b7b",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "12f4c3b0-bc09-437f-b37c-7ce30d09acc4"
        },
        "item": {
          "id": "013d9696-40b1-4167-b926-9e723bc533a5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a856554b-f7d7-4358-99fd-903b56d105f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5d163d-0169-4609-a93a-3571b38360e8",
        "cursor": {
          "ref": "04ed5bde-6bc6-47c6-904f-39078bff69c6",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bc19d098-d646-474d-ad12-01975c67d2a8"
        },
        "item": {
          "id": "2f5d163d-0169-4609-a93a-3571b38360e8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e2b1d992-f509-497c-8427-e252f33dac9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20290e2-5009-4dad-851b-481d6fa92469",
        "cursor": {
          "ref": "1ef483f2-1c53-41c0-8260-a1441be42ea4",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4cf3ebe1-ae02-4853-9e6d-1603eba5b2ef"
        },
        "item": {
          "id": "f20290e2-5009-4dad-851b-481d6fa92469",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "38b405ba-e9a6-4345-bb90-5818eb64456d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0a221a-2386-46de-9550-30b5fd9fa5ee",
        "cursor": {
          "ref": "982d66de-b0f6-4663-984b-4caa7cf0db84",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9c493a91-eee5-4486-83f2-17a0ae9ae15e"
        },
        "item": {
          "id": "ea0a221a-2386-46de-9550-30b5fd9fa5ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4d3ef5b3-4b72-47d0-8071-a3c42e08836e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d315ec88-a584-441e-ad77-0886916c8ce9",
        "cursor": {
          "ref": "570d6402-505c-4b6b-a344-d1d38e3def46",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c90c5de7-2c20-45b2-bb78-165da5e2ac31"
        },
        "item": {
          "id": "d315ec88-a584-441e-ad77-0886916c8ce9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e1feba0b-edd0-415b-8d96-d74657ddc420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eaf6172-984c-4863-acaa-7adf64d1f96c",
        "cursor": {
          "ref": "ad3aa4fa-b8fc-4a76-8f82-c7f2fb696241",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ddef6931-c2e3-4a92-99e0-fbe87a207ce3"
        },
        "item": {
          "id": "0eaf6172-984c-4863-acaa-7adf64d1f96c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ec38f358-6cd5-4d7c-9722-14cac032f30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b00c0b8-0ff3-45bf-b753-f2d636c4208e",
        "cursor": {
          "ref": "df621c40-e651-4587-955e-0353adb0445e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6ef93420-529e-480f-92bc-96d933922727"
        },
        "item": {
          "id": "2b00c0b8-0ff3-45bf-b753-f2d636c4208e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4440272f-1469-4a03-a771-a9c345a504f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0317fb9c-ea2d-47a4-b41d-4ac2489a2af3",
        "cursor": {
          "ref": "17d7efdd-498f-4433-8c8e-4b1ea83e071e",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7772b78c-1f17-4396-9388-4f18e4114cf3"
        },
        "item": {
          "id": "0317fb9c-ea2d-47a4-b41d-4ac2489a2af3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0e020aff-d972-4c82-ab3b-481bc749eb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437903aa-1cf8-4cc8-ab00-767f6047d416",
        "cursor": {
          "ref": "70b01966-32a0-4026-aef0-54d77724c50d",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3841f9bc-9c75-4e23-9a98-4c1151fd98a5"
        },
        "item": {
          "id": "437903aa-1cf8-4cc8-ab00-767f6047d416",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4834346d-071a-440e-b0f6-f8baff5b4a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd45c94-e8d8-4b4e-902a-0586327f224d",
        "cursor": {
          "ref": "ea68e56d-1779-4f59-81e2-7f7789bc218f",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "be81fd9e-82bc-4c9d-88fa-d5d34bf93668"
        },
        "item": {
          "id": "2fd45c94-e8d8-4b4e-902a-0586327f224d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "78e1a159-8911-41c6-bc5b-62624ee39b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe980e57-0c29-4ed4-ab1a-f6b254c5feec",
        "cursor": {
          "ref": "750bcc4e-145f-4525-95a5-482f62ee5be1",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a25b5a09-a9cd-423b-9ac3-8b59c2ad2c8d"
        },
        "item": {
          "id": "fe980e57-0c29-4ed4-ab1a-f6b254c5feec",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cc254716-7b8b-4c21-8df4-b48fef985aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d9a228-036a-4fc4-92b6-52a36ec5c615",
        "cursor": {
          "ref": "cd9623f8-4364-4292-bd2f-12125f077125",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "be43bab3-eeb2-4618-8d45-322c753d8cfe"
        },
        "item": {
          "id": "c9d9a228-036a-4fc4-92b6-52a36ec5c615",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0d92e5d9-c2d2-4395-a8a7-bdd16596dddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d66a0d-ee48-4d42-b9b6-cb3fe320ecbf",
        "cursor": {
          "ref": "a9df593a-96ed-4bff-8885-bab30e103ba8",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f9cc3005-35f8-433f-ac3d-073812292982"
        },
        "item": {
          "id": "74d66a0d-ee48-4d42-b9b6-cb3fe320ecbf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "139379e8-c396-4d1f-8734-cb4ccc8ea70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161b7c50-0e8c-4b47-967f-68924540ef4e",
        "cursor": {
          "ref": "53825bcf-5068-4841-a11e-5ad1eda52ffd",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "30e1c8d2-dd68-41f1-8e31-eadb5f47034e"
        },
        "item": {
          "id": "161b7c50-0e8c-4b47-967f-68924540ef4e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "52db79bb-1b8a-4930-b064-adc2f7201b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8584c18-b528-4c0f-82c5-ab92939bb154",
        "cursor": {
          "ref": "10dd0fba-1352-41ee-9991-96aa79dac112",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9f7c78bc-f9de-4e44-b8c3-59015a23f10d"
        },
        "item": {
          "id": "c8584c18-b528-4c0f-82c5-ab92939bb154",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "37422539-14dd-4ea7-aa32-174ac9b81b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e588e98-9aea-422d-a28a-92340aaf0477",
        "cursor": {
          "ref": "dbdb92d2-0a77-4d7a-8072-2ad27cc37ed4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "54c9d249-20d8-4515-b799-f6b3dc3d0602"
        },
        "item": {
          "id": "0e588e98-9aea-422d-a28a-92340aaf0477",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c1ed1c1a-2762-4c92-8cb4-f55a969ac266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0a9e14-6d69-4463-9caa-82156bdbc564",
        "cursor": {
          "ref": "88b505a1-c34e-4305-ab5d-e2a8dc5f64a9",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e051de68-7906-492e-83ee-b5198aacfe27"
        },
        "item": {
          "id": "2d0a9e14-6d69-4463-9caa-82156bdbc564",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cb22037a-1d22-4009-b099-5cf638e2912b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cfba81-5180-4eca-8974-d10ffc322970",
        "cursor": {
          "ref": "849f99ec-7fc6-473e-b03a-21c16ddeacc7",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "36dfd59e-4c7b-415e-ba59-b80e50459b06"
        },
        "item": {
          "id": "f0cfba81-5180-4eca-8974-d10ffc322970",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ba73950d-be73-4e6b-b92e-f8a7e2d7b740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4012c149-ba29-4340-a60f-5d00c7175a85",
        "cursor": {
          "ref": "62b5a74d-332a-418b-bd87-a2efbfaa20aa",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a268ff05-211e-4ea9-96c8-7694c99c2493"
        },
        "item": {
          "id": "4012c149-ba29-4340-a60f-5d00c7175a85",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b272e51e-5577-40aa-bb3e-6371a862b2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08573eba-9220-4c8b-b31b-57cd8b094c7a",
        "cursor": {
          "ref": "baafb7d2-250a-489a-9dbf-6db6581c160f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5c9281ea-40f8-41c5-a1f6-37af66b2e737"
        },
        "item": {
          "id": "08573eba-9220-4c8b-b31b-57cd8b094c7a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bff5c878-b6b5-4d6f-9ba7-22dd4b694f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40219ec-50c8-46b0-aeb9-39f0cdccc160",
        "cursor": {
          "ref": "b13a6a83-e14d-4530-ab1b-991c16a93830",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7355a79a-f40d-4f6e-a3f1-2411393ea86f"
        },
        "item": {
          "id": "b40219ec-50c8-46b0-aeb9-39f0cdccc160",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "99931937-ac35-4e29-9b51-529a8e2f14c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d82f5a-9dfa-4601-8d01-173984f71671",
        "cursor": {
          "ref": "ab98978c-e0bd-4799-a2b0-ef15839b5dc5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d5f64557-2045-4773-a56f-ff10294d2a21"
        },
        "item": {
          "id": "69d82f5a-9dfa-4601-8d01-173984f71671",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "29fdd993-f4be-4f30-b2e5-093ca83d772a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8122809d-e808-405c-85ed-7ce9b4a28b49",
        "cursor": {
          "ref": "fed42f3e-5c08-4894-b50e-6faa1e1a088f",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6d67efd2-5bfb-48d9-b385-a306ff58cb1f"
        },
        "item": {
          "id": "8122809d-e808-405c-85ed-7ce9b4a28b49",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "230520e0-29b6-44c7-a623-b1837f3d40ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 973,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d917bd3-e888-4aa6-a0b5-5b266e425439",
        "cursor": {
          "ref": "5d0c05de-a1a0-4f11-97cd-ad72b1ecd638",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "432b3a2c-cf05-4636-971c-fe685de54790"
        },
        "item": {
          "id": "0d917bd3-e888-4aa6-a0b5-5b266e425439",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "48c9e6e2-1ab2-47ad-9258-522a997c23d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afc9c38-b45b-4d76-afa3-93d1e089d4ba",
        "cursor": {
          "ref": "1755a0b9-4985-4aa6-bf98-330080ec6e01",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ccebfe30-2abb-42d2-98a1-96d96819dac1"
        },
        "item": {
          "id": "4afc9c38-b45b-4d76-afa3-93d1e089d4ba",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1da622bb-4d1a-434c-9dce-4ce8a53f30b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c4efc2-e34d-4123-ac7b-50cc921687f6",
        "cursor": {
          "ref": "2763f601-2a76-4057-b1b8-3940c84e85e7",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a744d449-b7e3-493a-85c2-699a8f9de4e6"
        },
        "item": {
          "id": "a9c4efc2-e34d-4123-ac7b-50cc921687f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b1881428-8c0f-4c8a-a1e6-331486df34a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49812ba-ab7b-4788-8e17-2c706dc5d4bd",
        "cursor": {
          "ref": "1e5c6fd3-84c7-4289-8ee8-509c5ddc3666",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "923a2a51-5f9a-42a4-9215-5f9b6f472599"
        },
        "item": {
          "id": "b49812ba-ab7b-4788-8e17-2c706dc5d4bd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e7e45003-cebb-4601-ab8a-79d2f8ee6d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b03396-ec32-4d36-86a3-f5006f0abc54",
        "cursor": {
          "ref": "82670632-74ce-49e6-8cb1-cf4f1800880d",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7c48f4ac-48e3-47dc-8281-8f49e08bb916"
        },
        "item": {
          "id": "01b03396-ec32-4d36-86a3-f5006f0abc54",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b97fb417-9e30-4312-aee8-baf2a597e5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918d4f08-d9f3-4121-b896-8fa53c3fa5a7",
        "cursor": {
          "ref": "853ed229-8da0-4cdf-abcb-65d485d2e006",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e7aa175e-9987-40ba-82ef-5d745deb83cb"
        },
        "item": {
          "id": "918d4f08-d9f3-4121-b896-8fa53c3fa5a7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e5b7cbf5-12a5-4df3-aead-2a978aef51f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a87f06-6193-45c6-8e59-ab85f0847206",
        "cursor": {
          "ref": "e978ae39-7997-4269-ad0f-427a1575baee",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c0f855d6-47b4-40b3-b5f3-20eec59690d0"
        },
        "item": {
          "id": "17a87f06-6193-45c6-8e59-ab85f0847206",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "43df98e1-f4dc-481a-bbb7-a5c46973188b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8213fae-64ee-43a0-965f-d3e5f491686f",
        "cursor": {
          "ref": "2e373f27-bda2-4b11-8c78-f786f871ea0d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5ec9f617-d126-4938-a35d-a7a506d3f3b9"
        },
        "item": {
          "id": "d8213fae-64ee-43a0-965f-d3e5f491686f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e23811ad-1e38-4d68-8003-d1f80f8f362a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3552658a-6643-4739-b5f9-c68903c8b015",
        "cursor": {
          "ref": "794db997-8113-43cd-98a7-7508171828d1",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d413cb7a-7fe0-49b0-bf47-ce54d7c80915"
        },
        "item": {
          "id": "3552658a-6643-4739-b5f9-c68903c8b015",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "154075df-fd09-428c-9516-5b1ed115a6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe63e25-0c91-4b25-a5fc-8ebdfac56bee",
        "cursor": {
          "ref": "d1daa2b3-7eaf-4f02-8cff-9641c709e624",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "948a72ad-2f2e-4f71-87bf-783296d7e7ba"
        },
        "item": {
          "id": "bbe63e25-0c91-4b25-a5fc-8ebdfac56bee",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "642a76ec-ab10-43dc-952c-4e3695ad0df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81bc414-c71a-4079-85ae-0ce4986ccf58",
        "cursor": {
          "ref": "eb562414-9beb-4717-a1e2-8c9d0ff5718b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3df371b3-7875-4e8d-9be0-0e0d1a15cf6f"
        },
        "item": {
          "id": "e81bc414-c71a-4079-85ae-0ce4986ccf58",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7826659a-509d-4392-ba6d-6eaabe437283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f49512-1031-47af-b848-b6a39729d5ba",
        "cursor": {
          "ref": "dc4e28b1-0788-404d-9e29-ee60534ab491",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "91267779-3ed4-4351-ab9f-f917e3835f83"
        },
        "item": {
          "id": "b8f49512-1031-47af-b848-b6a39729d5ba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f75ae911-5993-409c-9bba-c2a9c745dbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd4c03b-2c2f-402c-ad09-0d82b4d4a3a1",
        "cursor": {
          "ref": "61c85b37-daa3-44c4-ba43-833d1f9e9a9b",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bc1a3bb1-ed13-4f1c-a4a6-402921c7f3e5"
        },
        "item": {
          "id": "6dd4c03b-2c2f-402c-ad09-0d82b4d4a3a1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b1365403-1614-4075-a223-4b7862d63b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904c8e32-2a96-48c3-b65f-270c001b88c8",
        "cursor": {
          "ref": "8ae37917-2119-4844-b8b2-f37bfb407df8",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7a1f9a2e-8755-4a90-adc1-4593ee77093c"
        },
        "item": {
          "id": "904c8e32-2a96-48c3-b65f-270c001b88c8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "70a5929b-efaf-42b1-a0ac-89b70cebe559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b08732a-6576-40e5-b910-ecff0d25d22d",
        "cursor": {
          "ref": "bdb037e7-326b-4b02-84d7-ac5633aa057b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2c27ec81-c289-4975-af48-eba02f90409d"
        },
        "item": {
          "id": "2b08732a-6576-40e5-b910-ecff0d25d22d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "22709575-a055-4419-b1f6-89b6f5befb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94b73be-9164-4bc2-8dbf-53c4951e0210",
        "cursor": {
          "ref": "1e2c9758-d451-4780-aa6f-041ee066f7d8",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "198a042f-4168-4b56-ab09-95b2c3f03572"
        },
        "item": {
          "id": "e94b73be-9164-4bc2-8dbf-53c4951e0210",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "741650f5-4e38-4f80-ae9c-a72b448d82c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50a52f4-6138-48c0-8bb9-91b381bc4bd6",
        "cursor": {
          "ref": "2209b157-5db3-41ef-b1a1-db7419938a80",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "05d4ccd9-6c20-4fa6-89d9-83d8b7438410"
        },
        "item": {
          "id": "e50a52f4-6138-48c0-8bb9-91b381bc4bd6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "800093a0-fd03-4dbd-8f06-46fbd750611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6814a1f-2cdc-4b4f-9eb5-0fb209dd62a4",
        "cursor": {
          "ref": "20bbb23d-f2cd-472e-9ca7-9e899dd702a4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f27bf5df-97f7-46a8-856f-92e4d7e71764"
        },
        "item": {
          "id": "b6814a1f-2cdc-4b4f-9eb5-0fb209dd62a4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "54c576f5-9212-44ac-a3b8-45e4f118864d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7793f74-95d3-4181-9e3e-9d620f3fd258",
        "cursor": {
          "ref": "e0a9bfff-064c-45dc-94cc-7590949f1c7b",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ec53b56e-2e4c-4e65-abae-9461e6ef1a90"
        },
        "item": {
          "id": "e7793f74-95d3-4181-9e3e-9d620f3fd258",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "31eeb233-7cd5-40c7-8d97-53c1c50c6a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f300e1f-a3e9-41a9-b371-0cfb6baab648",
        "cursor": {
          "ref": "cf2ff9fb-7246-4545-93a8-6c3199ae609b",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9dd06489-5477-4296-9fad-d678236afb12"
        },
        "item": {
          "id": "3f300e1f-a3e9-41a9-b371-0cfb6baab648",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fd0092ea-9b1a-49b1-8d01-954c6aaff905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78ab7f1-5d99-4c31-a96e-4c380bfb7e57",
        "cursor": {
          "ref": "286e33f3-f918-434f-be3b-7682ce9ae14a",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a6483b05-59d2-4a5c-9acf-7cf775a4e9c3"
        },
        "item": {
          "id": "e78ab7f1-5d99-4c31-a96e-4c380bfb7e57",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "67888668-356a-4e62-a370-7b83be4c5984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b051fc7-730f-4fb6-850f-fc92bf75a826",
        "cursor": {
          "ref": "4676b8ba-eeba-4444-9c17-421f3ba811db",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "47eaf61c-b09c-45a2-bd51-14f67057307f"
        },
        "item": {
          "id": "4b051fc7-730f-4fb6-850f-fc92bf75a826",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7eb53ee3-0e69-4aa6-b721-37b3d48bb0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ebf1df-1796-401e-84cd-c9a84d5177be",
        "cursor": {
          "ref": "92705627-6dd5-44ca-8793-feff96b0a53a",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4c0baf82-ac64-4625-a243-56d49afb408e"
        },
        "item": {
          "id": "f1ebf1df-1796-401e-84cd-c9a84d5177be",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f7399963-5e72-489a-8a06-d10fee0489f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95692f3-1433-4560-a925-cdf6cf19e2c1",
        "cursor": {
          "ref": "da771afe-1785-4039-a228-186ec322a5f6",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7517e86b-df98-4335-9ab0-7b933e969eb1"
        },
        "item": {
          "id": "c95692f3-1433-4560-a925-cdf6cf19e2c1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7c9dfa9b-29a6-41e2-bcf8-2617bbfeb6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97eefc1f-b870-440f-b717-4670323f6611",
        "cursor": {
          "ref": "7ae7c0fb-5aa6-4e03-9f27-79ed5b5753fd",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "90b8cc4f-8850-4c6f-945c-2bdc16fa892f"
        },
        "item": {
          "id": "97eefc1f-b870-440f-b717-4670323f6611",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b3c14674-e531-485f-9296-74ac86c8adcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5c5a68-375d-4479-a490-dccf8eff9656",
        "cursor": {
          "ref": "23dc0df2-640c-47e4-bab2-827fb6e9dbc2",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f3a4de77-f69d-435d-8164-8c5a4376c06c"
        },
        "item": {
          "id": "7a5c5a68-375d-4479-a490-dccf8eff9656",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "542c37b0-a4e9-4ebe-9d0b-ec841cb1658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 925,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ba6877-a559-493c-8af5-d6f825b4ba02",
        "cursor": {
          "ref": "9ae4e8a9-150d-43cb-abdc-db5fdeed1400",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "eff12050-6ece-4e18-9036-cd72daa9680a"
        },
        "item": {
          "id": "35ba6877-a559-493c-8af5-d6f825b4ba02",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "eced38c0-17e1-4e19-8434-3a2aa19f7064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc0228c-1b85-422f-9a5d-b51ad5dc96b9",
        "cursor": {
          "ref": "96ce5538-6cc7-4a55-89bb-1aed6991f1d7",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3db9e446-f678-4e1c-b052-984a7e9db39f"
        },
        "item": {
          "id": "fbc0228c-1b85-422f-9a5d-b51ad5dc96b9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3c0ae205-e93b-4d1b-bf29-09b2b9f6e928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b9f589-7f7e-450d-9588-9d29e6227dd6",
        "cursor": {
          "ref": "9df186db-b684-4eb7-a52a-fa0bb8a63372",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fb823a48-e532-4857-ac1c-02757fb1db31"
        },
        "item": {
          "id": "a2b9f589-7f7e-450d-9588-9d29e6227dd6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "52f3bbcc-80e6-4d34-85ab-a70e31d046f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4034eda-e632-4793-b565-aa84bd49c533",
        "cursor": {
          "ref": "bbdd1d3e-fd26-4ce7-ac4a-217016a00f36",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a29ab80e-6809-4d5c-925a-f164601d7be0"
        },
        "item": {
          "id": "a4034eda-e632-4793-b565-aa84bd49c533",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4a4470ef-81d5-4e74-a106-23f1dc0ba168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9abe05-f0f0-4d75-941a-ea0f275dff29",
        "cursor": {
          "ref": "4211853f-2b7a-4104-aa03-5184b9cdfc16",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9566f7ab-feeb-4fc8-ab5c-1e595c3dd6cb"
        },
        "item": {
          "id": "0c9abe05-f0f0-4d75-941a-ea0f275dff29",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "27b44f2a-839a-49a9-850e-445dd18d40bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f673d80b-57b2-4ba2-ad62-6d5ad16ae17f",
        "cursor": {
          "ref": "82f4ae97-d3f5-4ebd-a557-f0045f28bf55",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5e9a3eef-bf8e-4587-bd1b-26061093b46b"
        },
        "item": {
          "id": "f673d80b-57b2-4ba2-ad62-6d5ad16ae17f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2bb27a06-e1a7-4487-87fa-f9e33f27478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ad3c74-f741-41d3-b477-1906d405088c",
        "cursor": {
          "ref": "086a3755-c27a-42f2-a7b0-d74b26aef270",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d99b35b1-0414-496e-8d6a-47b1627cd657"
        },
        "item": {
          "id": "97ad3c74-f741-41d3-b477-1906d405088c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ceb7d3a7-55f9-41c0-a7c8-fbb8b560a477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e355c71-d189-4b01-90dc-d6ddb6fa3cb0",
        "cursor": {
          "ref": "38b04a98-ac5f-4564-8654-1ac2d472b982",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fff3237b-1fb4-4ba7-8fa9-308bbd011639"
        },
        "item": {
          "id": "0e355c71-d189-4b01-90dc-d6ddb6fa3cb0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a66e4a4f-9621-420a-ab7c-9c0c2049a7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9bcb70-79c7-4dad-b07b-fd45f788f485",
        "cursor": {
          "ref": "26085c06-4ab9-4e62-9ea3-e741a69fc96a",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2241b3fd-4e28-4f63-bd36-0e467e697f6e"
        },
        "item": {
          "id": "ba9bcb70-79c7-4dad-b07b-fd45f788f485",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "53bbd6e6-d1a7-416a-815e-9cbc72d45792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37108dc-29ba-4e54-b131-0b6f261d9a7e",
        "cursor": {
          "ref": "fe495479-f37a-4892-84ce-eac5e775eb98",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "74218b5a-e280-40a1-a8be-1b0715151125"
        },
        "item": {
          "id": "c37108dc-29ba-4e54-b131-0b6f261d9a7e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0b2910ae-2fb5-4b9a-a869-0aa2f898970d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7f7257-9a0d-4c55-9ada-b95b6b4ab669",
        "cursor": {
          "ref": "fca1dac3-e175-41e1-baec-2f48af0e392d",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c9e88aed-7244-4f80-8a84-a9808fcbbcfb"
        },
        "item": {
          "id": "fe7f7257-9a0d-4c55-9ada-b95b6b4ab669",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d84944c7-8d11-40f5-813d-db4531227004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21d34e0-470e-4d00-8d1d-e717da8d4972",
        "cursor": {
          "ref": "c463ca2f-743a-473f-93ea-6094103db116",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9f178ff1-a084-4ac2-ab18-b7b0b849d8a3"
        },
        "item": {
          "id": "e21d34e0-470e-4d00-8d1d-e717da8d4972",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bf4b00b7-1aea-41f8-b5c7-339b5619fd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad8e0fa-5887-473b-8d3d-978beff75c3f",
        "cursor": {
          "ref": "e5bc52e1-423c-48d2-a19b-ae34cc5a5666",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "da7377d1-a60b-493c-9e16-0278b11eec4a"
        },
        "item": {
          "id": "6ad8e0fa-5887-473b-8d3d-978beff75c3f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "afb45e8e-7e6c-4e7c-964b-47c305a0c258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6641a771-e46c-4810-9214-14d0af8e9990",
        "cursor": {
          "ref": "35fd0e85-6e26-4a05-8ef9-90d38d0b5ea9",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "da2d6157-8aea-4e9a-8257-502bc45e57e3"
        },
        "item": {
          "id": "6641a771-e46c-4810-9214-14d0af8e9990",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "33f1a530-03e2-4303-8781-52287a9744d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bb6039-9988-4f42-88ca-034463da045d",
        "cursor": {
          "ref": "deb6b12d-9aa9-4919-895d-2c24945ce9e7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "731dece3-4487-46e6-9d84-4cf0599a7166"
        },
        "item": {
          "id": "92bb6039-9988-4f42-88ca-034463da045d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f61adcc3-9448-4bac-9aa0-47067034d328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2710589c-2a93-47ea-ba34-b01ecf584c0b",
        "cursor": {
          "ref": "c182a429-f994-440c-b9b9-cf6acf03c8ff",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6931c8d1-8bfe-4722-899e-fbc9f3d24cdb"
        },
        "item": {
          "id": "2710589c-2a93-47ea-ba34-b01ecf584c0b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "944bfb62-1f4f-473a-90ec-5b615c581382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08271dc-c56f-4506-810c-74d68d40b6e0",
        "cursor": {
          "ref": "20956fe5-30fe-4306-bfd5-12399c5e7e10",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7b3afc6f-3884-45f5-824a-098126180ec5"
        },
        "item": {
          "id": "a08271dc-c56f-4506-810c-74d68d40b6e0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "befdc3a0-afc8-48d1-8d0e-bb2bfcd9adfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6589503d-2804-4662-9af3-38082c11bbcc",
        "cursor": {
          "ref": "88b0a2cf-178b-4aa4-8b06-6b032462bd57",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ae756497-c092-4573-9c15-6aaa52819bd3"
        },
        "item": {
          "id": "6589503d-2804-4662-9af3-38082c11bbcc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "26615e98-507c-462b-a5dc-29f6ca5347b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d442e134-f274-4463-9812-241d1f24150c",
        "cursor": {
          "ref": "9c46c0aa-17b1-466d-b040-683c62bac01f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5db32ecf-096c-4c88-bf44-ad6d10094ab8"
        },
        "item": {
          "id": "d442e134-f274-4463-9812-241d1f24150c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e2839591-3ea5-4cea-9436-2a448f394c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba231e4-96f9-45c7-b699-e7f5e38f21a8",
        "cursor": {
          "ref": "99c9c78a-cf4c-4231-b958-d19a0b37ec69",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "06ca812c-cdf6-4165-a063-fe4becb3284c"
        },
        "item": {
          "id": "1ba231e4-96f9-45c7-b699-e7f5e38f21a8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8bdf1c6-bffe-4a4c-b5e3-8f91251332a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32898f96-2038-4983-8e30-2040f29c633b",
        "cursor": {
          "ref": "2e135aa3-c1aa-4013-b333-7f1a6b830fb2",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "697a2510-9d79-407b-ba49-13fca7422a16"
        },
        "item": {
          "id": "32898f96-2038-4983-8e30-2040f29c633b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3b40af74-b289-46cb-9c0f-e839d72d6e5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "983f7108-5ce1-48b2-a378-7a77181461e9",
        "cursor": {
          "ref": "5d3887fa-26f5-4a02-90bd-5df454fea333",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8647ca14-e389-4092-b1af-f8086d674406"
        },
        "item": {
          "id": "983f7108-5ce1-48b2-a378-7a77181461e9",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3d59a7a9-f0aa-403d-95fa-b7c3afc37f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "99b00b47-921a-4cc8-8e0c-9f723833cdf7",
        "cursor": {
          "ref": "e63a238e-385e-4d80-b9f0-45bb0c913c7b",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3cd0df79-38fc-47b8-9a61-f3534f57b887"
        },
        "item": {
          "id": "99b00b47-921a-4cc8-8e0c-9f723833cdf7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "13b5a261-4b39-434f-9daa-0cb557b61e01",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "eece1a47-6df6-4bdc-bb34-3c822d4b5753",
        "cursor": {
          "ref": "91b8114d-8183-4755-a8f6-41a2f102092d",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "daed0b3c-9fe4-401f-8eaa-4bec49404e1b"
        },
        "item": {
          "id": "eece1a47-6df6-4bdc-bb34-3c822d4b5753",
          "name": "credentials_verify"
        },
        "response": {
          "id": "46360ebd-c4ca-4912-bd41-f7e639fd4b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 3574,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f93ee9-52f6-407c-ae85-7a486682037a",
        "cursor": {
          "ref": "9a046078-7006-4cff-84ef-26cd1a9303f6",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d8cc551c-ef40-4aa3-a0a7-6aa8bcbc357c"
        },
        "item": {
          "id": "38f93ee9-52f6-407c-ae85-7a486682037a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e63dcc7d-3e3c-41be-a421-b6ef21a07ba1",
          "status": "OK",
          "code": 200,
          "responseTime": 2203,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
        "cursor": {
          "ref": "08b4de72-afb4-4efb-b2ae-d01007b99216",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "729a3915-b9fa-4472-9502-ee77865b8427"
        },
        "item": {
          "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "702ba273-807b-4696-ab01-9da98807535c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
        "cursor": {
          "ref": "08b4de72-afb4-4efb-b2ae-d01007b99216",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "729a3915-b9fa-4472-9502-ee77865b8427"
        },
        "item": {
          "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "702ba273-807b-4696-ab01-9da98807535c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
        "cursor": {
          "ref": "08b4de72-afb4-4efb-b2ae-d01007b99216",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "729a3915-b9fa-4472-9502-ee77865b8427"
        },
        "item": {
          "id": "9cd22226-9b02-4d33-82c5-14aeebec9f50",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "702ba273-807b-4696-ab01-9da98807535c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "9d027bac-c8a4-4856-88b4-d45304ece7af",
        "cursor": {
          "ref": "013dc03e-a81d-4f50-8b18-7bfdf1b34a27",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a57096d9-cc3c-49e9-9b81-83efb26a034c"
        },
        "item": {
          "id": "9d027bac-c8a4-4856-88b4-d45304ece7af",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ec48f7eb-04c9-4bd4-baaa-d8b8363299c0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e42a0539-8cfb-4760-baa1-196e8c2424bd",
        "cursor": {
          "ref": "8e4a0fc5-644a-425a-bdcd-0317cb8c4ced",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "49396510-3203-4655-9281-94f869303284"
        },
        "item": {
          "id": "e42a0539-8cfb-4760-baa1-196e8c2424bd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "929a814b-71fe-453a-bc46-944ec4560b40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e42a0539-8cfb-4760-baa1-196e8c2424bd",
        "cursor": {
          "ref": "8e4a0fc5-644a-425a-bdcd-0317cb8c4ced",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "49396510-3203-4655-9281-94f869303284"
        },
        "item": {
          "id": "e42a0539-8cfb-4760-baa1-196e8c2424bd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "929a814b-71fe-453a-bc46-944ec4560b40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b1636741-8739-4d61-b8d7-179f5bf3ba02",
        "cursor": {
          "ref": "4371e425-f444-46d6-9848-c40dfacbeea7",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "82e6241d-b872-451a-81ea-0e603438b3b1"
        },
        "item": {
          "id": "b1636741-8739-4d61-b8d7-179f5bf3ba02",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "52af5dc2-2cb1-49b8-a85b-52319fba73bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "46bba904-742e-4989-a7c4-a6358b2eedee",
        "cursor": {
          "ref": "97e7bd30-d5e7-406f-ba08-e37dbb2c4970",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9e2e9dd2-ecfe-4283-bdad-b43a002935b1"
        },
        "item": {
          "id": "46bba904-742e-4989-a7c4-a6358b2eedee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2523845c-0f57-498e-b385-5c4edd52645d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "46bba904-742e-4989-a7c4-a6358b2eedee",
        "cursor": {
          "ref": "97e7bd30-d5e7-406f-ba08-e37dbb2c4970",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9e2e9dd2-ecfe-4283-bdad-b43a002935b1"
        },
        "item": {
          "id": "46bba904-742e-4989-a7c4-a6358b2eedee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2523845c-0f57-498e-b385-5c4edd52645d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "925e586f-5711-4d7a-b0b3-5a8c0e98c674",
        "cursor": {
          "ref": "adea01e4-77f4-429b-953c-3fcf5559109b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "53ee3f3a-7ae1-43ea-a883-55e640840905"
        },
        "item": {
          "id": "925e586f-5711-4d7a-b0b3-5a8c0e98c674",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "11630ba9-9dbf-436a-a3ad-172e2a012bad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 184,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}