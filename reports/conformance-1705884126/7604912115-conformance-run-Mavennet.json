{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a7b0cda4-b637-4cc7-ab39-b2a0e63759e2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9aced463-ff22-4a83-829e-4f741433fc07",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "494b9b5f-c854-4447-b030-b915d51fa210",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0904057e-78e0-4009-a806-9f9d19299a87"
                }
              }
            ]
          },
          {
            "id": "a63adbc4-7011-49c0-a9f3-e9e27f53cf21",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c939eed-f12a-4aeb-824a-1ea483c1bea4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a4f7c890-ea20-4911-8b67-3f145992c81a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ece80c73-56ac-4d8e-be12-287d06becaa8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "29be4a66-9f4b-4770-ba94-7ec3cd839bd1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ffad9850-9bbf-4a06-90fe-2721bb147534",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7941093-08ea-4d3c-a30e-e02ad918bc79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81b67ae1-d090-4ae2-b43f-84267ed0ddbb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81722304-c35b-4fd7-9021-98f583520685",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac04ea9f-0a81-4835-8898-5d9f29b554e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6afc8ad3-f649-4d04-a12e-35d0a5621146",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba1492fe-b52b-4987-8d16-6c4a7d06a976"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c59c8bba-a71c-4d89-8cda-bf7fdc7694aa",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4645248b-d7e3-4a42-8213-eb3d3071bdba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73fe737f-e95e-439a-b2a2-2b8d82fe0781",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "714fb21d-66a4-49b8-9ef0-37e736f0aadd"
            }
          }
        ]
      },
      {
        "id": "9e465db3-1b45-4214-a548-16a40c857285",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c1fe8983-3808-47dd-8e9b-0c2249160942",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f03175a-17db-402b-a874-130b215f96d7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "76d81618-8fff-4368-ae84-8c7d811bd408",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462f443e-3718-42c2-9ea5-0a127077f529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "632526fe-e909-43d9-ae33-df4623141fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae548d4f-261a-449a-8a1b-8f918cb6e563",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20691dc3-12e7-4046-be5c-421dc539d6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bef3a139-3295-4283-8036-f901c482f566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8544bccc-22da-413d-90b9-521df1ba196c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df52ca4-78db-447a-b154-9385a34bdf63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6dd6a59-1b88-459f-aa12-19ab2c764100"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e89d2a99-a59c-4fe0-a336-51a8a4578e6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "500cf3f0-2ea5-4f09-b9d3-6c8b2d6dde1d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa99a3f-9b37-43f4-861c-825a0a4e66c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4f294a6-813a-4131-b1d2-aafc1b826db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5fa200-1a78-41ac-a9b0-abffff7d3562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89879c18-557c-434f-bf05-d740461acc53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "29a02137-a29c-43aa-82ca-e02e8d4733e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c8d64e3-c44b-4f2d-84ef-b7e6076e6ca3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "485362b7-465f-45d2-9702-272d417046b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "af29a3f5-7d40-42f8-879a-66b5886b85ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eaf5df7e-3cff-4f21-a709-ac62ed95addb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "04821b2f-22b8-4404-82f0-06434776701f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf9ea40f-64be-4636-932f-e21597e58a16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15e9f087-4227-4173-84bd-de3e76a5b920"
            }
          }
        ]
      },
      {
        "id": "2e8df0ca-b16e-4682-b41d-462026ffa1f7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "672ce20c-0b29-454a-b1e8-209a94539fa7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b35b3de1-ce63-492a-84d3-3d2af697b58d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7706da87-6fc4-4dbb-893e-2404b77eb910",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d239c589-61a0-411b-abe5-86f5e226537a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef288cc2-bbd2-4dba-8eea-ce75b7cdb881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10acff3a-1144-4dfe-b21e-dfee489a02d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b75cc7e-90db-4bce-ab05-32b625f5ffd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85797a7d-1746-4de7-967f-edbea9e14f1e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657d408d-10b6-4538-b35f-eb03885acc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2add3374-d9dc-4e0c-af5e-674848d181df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72db7ba6-8d76-4872-927d-f332e6e500d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1612014e-19b7-4377-b46d-941979648d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a381e1a6-fce6-4d9d-8ab0-447dc75e80e3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45255f5-f299-4cfb-9ad7-1afb52fbb213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0dbcd4-c3c6-4c32-90ed-f14b26d6ebd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a97d25-3138-4a1f-a9e1-08c7cf457026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27c97eff-ad18-4143-bf34-877c166e2450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50c0588-5644-4383-81b4-a9db9323b68f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e679f4-9462-45c9-8701-499d175dd81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a7f4ef-2aa4-40ce-a6d6-ed6f9d9388cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06a19a6-c755-4c69-aa0a-1ac3fcc0652f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecd4b799-4543-4f5d-91fa-dab54ef4e0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ef48cf-7e59-4f4b-9d8f-56071b32912d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b623d7e9-152f-4d94-bb3c-71e3bbe57565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb172664-e13d-42fd-86e2-008d0bce0bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c3f97e-fbb5-4718-ab9c-d40d5f660f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "293a29d3-80eb-4253-a0ec-e3c90df1057c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3164ae1d-cfa4-41ea-944d-6cb6a7a024dd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e6e09e-d756-4dd2-846f-28d31a803efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293041d8-aeb6-4d9d-8160-98ca4f3731b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556ef91e-35dd-4430-be1a-1a2967464d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "789116a7-5f51-4ca6-b910-024bab7e7a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b69f8ce-bb64-4070-8883-9b772a6da9ee",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d013d24d-19a1-4370-91ee-a51b088a9f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aab06b3-57cb-4694-95d4-e45ce9b71d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c9227d-4848-42fd-b962-6b1d6b974b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ca5da42-8b89-492f-a54e-7b4175b2e805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e414495-c758-454c-aaaa-b7baef4a96d7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e0ff6f-3c40-404c-b69a-bf5496191d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49000ce-9a64-4a02-a591-06c8565ea464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ca5f77-fbcc-496b-964b-bf473f76a428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2dc7f82-719c-4563-a4b2-57e60db0b9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1c9ac5-7633-40a1-a415-4f4a41d93f72",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852c14d4-a42d-4fd3-b40b-16e1f837740a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036a41ed-2be8-4e9d-800d-93c647e3ae85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee04c956-7341-4c19-93d0-052a63ceacd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a010421-f41c-4835-a3d8-b2b8b2a4dca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4270b6-1a82-49c5-9f8a-4b92dd9fd205",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a047d-4b2d-4439-8570-32de7d682a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa930fb-c237-4df4-91cc-13bfa75fd3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c742df-b920-4f8f-bf18-cfbcd0a791d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f5047bc-c95d-4aaf-84d7-8d19e5869c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d4e30-dd93-427f-bf4c-7d669fef61f5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcce2e5-03a4-4a9e-84d2-99e164e3da70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e904026a-c35c-4d04-b19f-a65b48b3d690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dde1d88-d6d1-4551-8b7c-a3e73bcceb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cd4ec36-5457-434b-b84e-0e963f7dc524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58ddedd-9107-42ef-92f6-fcdc0262f00d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4edfa53-7c68-4ec0-9ad1-24b6a02f7c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec08ddfb-0184-4a88-b881-ce3230d0e703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cfaf39-cf23-4ed1-ad80-0597e4c8d3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10614309-1b95-460c-abf7-586a01d9e443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d881dd-93e6-4be5-96d6-0bb64209bcb4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d50d9c-3715-4e95-b672-fd655f543bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e02c1f2-972d-478f-ad5f-efada7b101aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65efcec-9242-4b1b-afb5-68cd790e54a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eafff3ca-6644-4205-8b16-9a9c13994e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecef1c51-5df8-42f0-8438-ac5cf226a2e1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbbc56d-32d9-4272-abd8-89c4af7f9077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d0fcfd-86c3-451e-9c97-87c94f9b96e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3ac080-e19a-4672-936a-7fe5b1a3933e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01f53a5a-6025-4833-b099-13e025a88554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297e1e69-6dba-41ab-8126-2a00620a233d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e260f13-e6b1-4db0-82fe-0a30b9f5b0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4aafe6-9677-4ddc-8605-28d638d659d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4b676a-c4af-45f4-896c-5fa653236a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a403b99-3699-428c-b7b6-f309c2139fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bdd492-c2ab-4909-92bf-3ff0d46a1b9b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162d230c-3de4-448f-9f87-727d2f1c1d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0227d036-7afb-4a0e-b7f8-122a8dadb313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8eda8a4-4318-4936-93bc-c5dcba3a7510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c5f6105-2b6b-4020-9dd9-323ee73c47b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a810800-44c0-4776-b77e-0cce1e839a00",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86dfe82-cf93-4be7-849c-d0f3fe6f8e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b40e99-2495-4e7b-ae7b-e653a317fe04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a58fff-1bd4-46e5-852f-949a53fe536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1442514a-16b7-4cf5-8f84-515ece812b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fab98c1-5f30-40a1-85ea-c6bdc7b72d3c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e04c59-9bef-46c8-9e50-dcc41bc541df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ed4f83-e581-4151-b9b7-b3d738f8d014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de88d45a-bfc5-4624-a849-e5bfb69779d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da54d5a-41c7-4c6c-9c51-fa631f23dc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed81bf5b-e8c2-454f-8aed-b37fde076499",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ffd2941-12b7-4353-ac5b-13d9d36568ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa640f7-32ef-4fd1-8e7b-5b5f9ec1a6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac97d90a-6883-4b30-b6f7-d5a111092a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d58871ba-b718-4bd8-ac8e-08a6663bcca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c85237a-7cad-41b0-b8ca-d4c8ee871ceb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c84d5b-8919-419d-b51c-0ef833b4ba1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670673cc-3b28-4aa3-83f5-803723523fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ce73cb-142a-45bb-b29e-ee65d7fee56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc5228d-958c-43a5-b676-bd32294288c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc4d5f2-b08c-4222-9918-af426efc1255",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33043838-4144-48a4-a0c9-0ec688ffbe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68b9fec-462b-4a16-a196-7726323b9760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd5141a-28b3-49b4-9257-fbeb276936d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e181f9b5-ff22-407e-9221-f85a42e049fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdbdaeb-0302-4023-96b6-b98adab0c435",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b4cbb6-b8e0-410a-a3ed-e633c8cf8051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a28d95c-068b-4d3f-b7b2-52acb69009c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae10100b-714e-447c-8d3a-19da6bd1ca2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9862419b-e3f8-416f-ae1c-ad289ae4adb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cfdc63-f7b8-4463-9278-d7b6856ef74a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f352abed-591f-45f9-84a6-621e3b4097eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5baf890f-a8aa-476d-9564-aaf4dd827adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976bd34-2da3-4547-bdff-11bcde92f894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc8f5a9-32f0-42b8-9ea5-25cf585dbb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b567b6cd-409a-49a0-ae0a-3754c466393c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d256625-ed0a-4a45-b44d-a700730663b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad55879-85d2-4c84-8f53-c879ac088ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f147c7-f446-4b3b-8961-d2084f32ce8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2adc5c71-8dd3-4302-9af5-4baed83de099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68cb871-c70a-4b73-a30f-957c9bbafbac",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a164b61f-5b24-4d56-a700-a5a851e5dd0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751e8397-a37a-43b5-857d-effb998c1f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f92818-d6ab-4a9a-b6ac-5790b998af8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "79523b68-eab2-49bb-8e1e-a8895576bf36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19ef363-8ede-47b7-a714-a86c5a5d8f69",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cda3302b-1230-423c-8253-e9b9a4b517bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28af1551-9ee1-4c51-9e23-9a86ed5c5861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e53e825-ddb2-44af-8bac-ca74f49ffcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5225cc52-7d5f-4f17-ae1a-8bd379a46e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02d743b-9b61-4602-a8b9-3ae4a8b22c0c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef954c3-2110-4960-8771-adb380ac9795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874be805-684a-4bc4-bb77-d9f33f6d1479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e46a19-19cc-499d-bb4b-3a2ad35be039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e77e11d0-c682-4f36-ba97-4af0542ad32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b2cc7f-6df8-44e8-b128-a54457cce9b2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4836ce75-926d-4c4f-b070-f7085f6fcbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ea7729-28e6-4199-842d-1a5d2c74fdaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496adead-1ade-478a-b4d4-f9f2705b6ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea69a98-a350-49be-80c1-9db1ccc482a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87f8386-5a59-43d6-bc7b-f59a014bc535",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b050ef-01e2-488e-88b8-18a0f79c8fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece8af35-b7a3-43cc-b602-a199d48e00ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0d5587-c66a-47d6-9ed8-981b77cbb1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "622973d1-99ad-488c-bc47-a7ce3ba2a472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a072abf7-15a3-4329-856d-0b71015a2eb1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e91c5b-eab8-4dd2-8baa-a3b90ee01822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00dacd5-e883-4a5d-8134-c59e2374f1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e7fba2-d832-432e-87b1-3a5c55c7eda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9af9ef-a8fa-4a91-9c8a-6f8a70fce3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faeb9d78-b68c-45ae-b94f-faea64626452",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8f968-6c01-486f-bc4b-de0f1be3f323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40d7289-917d-457a-a849-1d9f54d12259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7036212f-9047-48d5-8bd8-3cf146feb20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6612e783-c199-497f-8601-c34a295d3f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01f84ab-83e8-4a5e-8d0b-2fcc5243c184",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4d42b2-ca2e-462e-b6ef-640036e50383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eec0345-5a3c-4d5e-a467-2d80e9823198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2a9f53-b917-4de6-a58c-a0f8f4da872e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "572d97c9-02eb-4c1f-9631-c64ef4231c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfd4990-bc45-44f7-b51d-4e0d6f6ecaf9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30aa1d2-5299-4c45-8512-e928102b6ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae5a54c-0d35-45a1-9d43-2d3afdee86c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29a1c71-e26c-4ab0-8293-7c76ee87a46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "022c9e28-f478-4969-bc6a-81714dc6135c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3ce77b-08de-4ae5-818e-a3cdfcec462b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc56cd9-824f-4942-ab88-6f97d4d4d794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387ada12-7f74-47e7-92a0-e6937760a9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8ed964-e00b-4b92-b06e-f6b0b52cf735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60547e90-872b-40ac-a47d-41504c39a7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e963f331-1a9f-49dd-b569-ed65097098a2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417f67df-4095-4852-8e95-3cb337b39bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed3ce2a-7972-4520-b5d2-bbdadbbefad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10890882-8b14-49e6-8cf5-58f49c5f5387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3150b45c-b8ee-4463-86d5-1465241cbf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857d93b7-cb7c-465a-989f-2eec59eee357",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41bd806-10ee-4f2e-8490-1acfbc92cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2aef5e2-d554-4884-88d9-23364988f2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758c62d7-769e-4e38-b274-a45d12ac405b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6ba945-e31e-4262-8d66-61b09c5100ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcafb5d-a433-45fc-a43d-5b3fc1267492",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c7c6a4-3c77-4483-b923-3fe53be01cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4ef1de-51d2-4d26-820e-c8cff48e6b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7ceaf7-8066-402c-8dfc-8d8389b667e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c02a38-c736-472b-be27-318e8ecdc30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed74e43-0f66-445d-ba47-91545f867289",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1629d89b-262e-4064-8b42-3ac123968632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d01d08-91c7-4591-80f5-f2d7ff7a77bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fd6eca-0b1f-4acc-9fcd-3c45377e6129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4732766-a2dc-4c45-a2c4-14ef7b668198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2a02f8-4bfa-43e7-a4dc-134b829e283d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8982c919-1c36-462c-9b4d-aef2a8b32c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977036f8-1196-4e3d-a8c4-fccaca67d0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1c047b-e089-4449-8104-ebf713327f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ca5a8b-a56c-4090-ad06-c3ffc148204a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99824289-49ea-4d11-8658-8d4a2c44a133",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c8a68d-441d-4771-9d13-0c50b54b5161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f27daa-81bd-4fb3-b87d-89a727bb23b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf7904d-0a28-4481-a26c-06403b8f0aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2ff4b7-ff46-49bb-ac83-4505f39a6e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f011921-27b0-4e84-999f-e3f85a4f9ae5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43722d67-3ef1-4534-9282-2d46c79f291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e48e26c-695a-4790-b0cb-d18b52ce569b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e160d8-102f-471d-94f4-618b1bba895b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5b4e6b-4762-4805-bfcf-ede4eedde181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a4749f-f1f8-4da8-b562-80d3f649115d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba581e3c-c19e-4626-8ea3-4b7eca59d871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9d4008-13fd-4581-87ab-b6dc507dae35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6bac41-eef2-4c86-8eac-96fa3d95627c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "58e0c58f-840b-4077-9a17-d18ddeb01365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba56c8b-6836-4a08-b3cc-3958b70d85ec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be220c36-a2cd-406d-b6a9-27fd51107f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1ace53-1a8c-4329-b72f-349a3dc0f4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1217f8-8577-4008-a48b-5c06df4ff017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8a81bb-b277-412e-8772-2649b821d857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19aef6e9-69cb-47c7-8b12-b2b108acfce4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7388b1-304b-451c-8361-75e806facf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8713067-c3dc-4204-8f98-27931019f5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d162ee-6018-4e60-9b8b-3db26f7a534b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "20051dbf-9722-407f-8e46-610a87bc82a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bd169e-3514-434a-8053-49befc751bd4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "338c5cbe-f4ef-4eb9-a353-58496f7cbaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d835eb3-9361-4d6b-bf8f-422aae27074f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1373fdf6-93c1-4bc3-b07a-ef9052816d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8079ee2-66d2-4709-9e88-4ae8d0642030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b83463-f532-4a51-a206-b074242c0f2b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6523b37-e85c-49a7-af24-60f1bf8d5651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b1f5f0-fa22-47e9-a084-ac9fadfa02e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abfadf8-54ad-4fe6-8380-439956cea808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1a5670-6eea-4e35-bae8-47900c5f1de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e94ed2-4217-4759-b5b6-322ad3dc86c8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee60baec-3274-407d-b406-a7756f5d2e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f4dfab-97af-4f7a-9c88-c7a35de0b7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919becc0-817c-4622-933e-14350d9d2a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57f7c65-03fd-4a22-acdf-ec0725ead1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f555ce4-b8dd-45d9-b3a6-996c94f5cc11",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac2dd7d-cc3a-40b6-8e30-8944a7920a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a2508a2-b410-4823-affb-7973ef8781a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdf5760-3b7a-4cf6-90af-34532ea3905c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38844bda-a154-46a7-8882-cfdd9f568971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5114a4b4-0f9e-4946-a192-6caf16390558",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a723c4-bfbb-4a7b-a845-af672bea065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7492414-7c09-4df9-b96a-6cf2cdec9efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0cc612-75dd-46b6-ab56-e80726bb0dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12c06ea5-e82a-463b-9665-c1df9d19aa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1807065e-2dc6-4543-819e-7d1c2943660c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6a99fb-9761-4bfc-b692-138a49d9e4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c02344-8f3d-46de-adcc-c76388029561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa42200-c50d-4f74-961f-9477cae319a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc68cc6-57f8-43f3-91bd-f81efc4d0222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1acb97-4a29-4531-8843-1bb405a1350c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaa3b19-6614-438b-83e1-cce3fa836837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2b1f90-679f-47ab-b1c1-972c443e375d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c011f49-8acd-4e89-9677-3ef564c37bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cbe534-f852-4437-b7b0-b63f763b52c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff0a550-26f6-40bf-85b7-7bcb33d7abe7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e862c70-9631-4c64-818e-19eda61a02ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b4a1d6-c90c-4480-8a8d-b61c5d8c1fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67960244-1a45-4fc8-ade7-00c92aaab9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c220c4e-cecf-4c84-b3c6-43e404a18fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083b97b4-3a94-4239-bc49-de531e092121",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4e991f-5379-4ffc-bf25-82ed757bdd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b752c814-7ad6-4ef5-a3df-da0fcec2f996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3425185d-e6d5-4fd1-a035-4818ed4d265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8cfc64-ee5e-47fe-a170-5a9959908b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f491a43-50f8-4e68-8ab6-a0cb5be883b0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f670632-4f36-46d4-a9cc-c541e1f05aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f48ac4e-e9b5-443f-8565-c71ca5ffcef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25048356-0425-4c2a-a28b-3548168114fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7a40b5-9c63-4338-b699-6c6bfdd94821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1038bf-3895-4fc0-8a1b-21570a7b959a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2cb4c4-894f-4a5f-898c-785077480413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea3e6e1-0a05-4668-9380-1494aa7534c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88674761-255a-435a-9083-c336b371ab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42abca9-ee4d-4dc0-a956-7bdf52447b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce15d734-ee41-4a91-afe0-23c1fcbd0a2f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b686ae50-b442-41c6-9d76-21e26cb68fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334d5da0-e315-45d2-8f16-7015a4219383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde32434-f929-48b8-aedb-d31573db8642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "73003225-a419-4e4b-aadd-6575cfd16196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd24bee-ea89-4cbe-8dcd-b50ee1346c7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac9a755-d944-4512-9423-11fdc4b0d794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5681084-001b-4fa1-a36d-e1058b608c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72947617-943e-4a7a-a7e9-816d7c11f931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f76cf64c-42a0-4720-a1a0-e4842380a128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1f545d-dbe5-4998-b76f-872ffcb6d4bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05615428-6466-4ed3-83fa-fd6ac6709501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67e1e76-a2e9-4e58-a604-a3e1e5aade03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64928e5a-da96-46fd-a686-dee913e41225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a81cc16-25e4-419e-b9ab-b50d08c0ecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7c0574-8bb1-425e-87d7-09e4c4bde17d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae669600-2446-4aa3-b4bb-a0acde04a873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb5a9c9-81b1-4cd5-8e88-4e97f431dec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c606a9-2942-4978-ac58-6c74dc9237c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0288a3-a1a9-4336-a9c7-d803e7211135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b092c5e-8459-4edf-916b-498f08e9578d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f78d1d2-d8dd-4a2d-9c09-08e379ff5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e24ec3b-adfe-4cf4-98af-f0faddb895ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9059f2-ea86-4d73-b679-3d704a620803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b10626fd-446c-4079-a9ec-edbd34090b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a3ad4d-aeac-4489-b74e-ff614958f2bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7564c2d7-2c6f-4913-a3df-1d1bac50fbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233fd3e7-cfcc-474b-90bc-7691232c922b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0547a7d6-d623-4989-9ab8-4a8d61f4e4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcb4d0c-4b2f-46d2-836e-3f2ba949c198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc38f123-b6d3-4a98-a417-b36284a421de",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9407981c-623c-4d2a-89a3-ce5d226ad47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be43bfc-4af1-493f-bf8c-dca03922c3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb51e66-c7a3-4e59-a1f9-8cdefe770630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "12c57138-56f0-44e9-997c-e1a6b01d47c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fff8bc-8fd4-441e-8444-f2c7d434fdfa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23d46f-4ced-4485-8cb9-960563f39fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518d4380-52ee-471d-95c0-f21f7080ecb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b2c411-cfec-4ebb-91fe-169a827b0059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5669ec77-e36b-4a31-92e6-fc2a55efa208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9de6a0-8862-4b57-b005-6212e7320961",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f17bf99-95ad-4285-a26a-23b5613c816c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f807377-978a-4c8b-9feb-4fda37ca376a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28d155d-fed1-4ebb-996c-07667491a087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f13508e1-ea2e-4b77-8420-2d0876b50d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056c0aab-ff2a-4ae0-b96f-0d8c641e0bc1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df00b248-37c7-4d1e-92e4-55335e2b1e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558893a5-fb78-486d-b913-e6a6d2674553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f422a209-01ea-43cc-aab4-b74836a42f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6933acb1-7511-4947-bb8e-0ac4f2e8e815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9fde72-422e-4b90-999e-403bc2dce7f7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3484eb-3f8f-4486-a04c-ca60100cdcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe8605a-e772-456c-8817-bfe84c672ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736cc66c-8fe9-45a2-87a9-f02592fc8465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d60f76bc-618e-4a52-a13f-7b924b6d86bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcab1d2-1931-4dd7-8fef-f73ee9567ff6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc604fb-137e-42c4-8212-07f5a9f9b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31196709-6d41-40cb-aea2-0341e2a8bf65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1f86db-9595-48c1-ba10-c745ea83c814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aaccd920-c2c5-450c-ac25-7773ace45460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a84dc68-3629-4b33-a22c-c85225f2da52",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac9eeb3-9751-4107-a231-b2da185765e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd84d07-f38b-4c37-a9e9-b92142b0213b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6f07c9-671a-4a05-bfde-67930ff999e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac705587-fd3a-470a-be9e-8c2935f1b6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791e0b7c-0dd4-4c32-9270-5b11637689ca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5942d6b-d249-434b-ae70-9d2179e686c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87398d71-4d1e-4556-9387-7470fc013f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebecd408-d151-4695-8ef1-8ddab62301ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc632f7-442f-4c42-aa8a-ce2ee2c834f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555a00f0-0ced-4600-89a8-ed0812574543",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336ee7ab-3e21-4970-bf05-4a6db7124944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eebbaba-4345-4924-a88e-f4c5ba722405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301fd434-155f-4b46-a819-7a5f9c85839c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71c76209-30b6-4640-a363-803250089165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe4c128-f401-4049-9ada-f247f91c7942",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1d1709-9e4e-4cff-8c6b-6b3e2712325c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48991c7d-2167-4dee-babd-c7457cd70b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d8bb44-efc1-4312-987d-144d00136f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70651f1b-6148-438b-93dc-5cb959272f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5f2bf4-5993-4a13-8dac-e54c54eedc1d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4025275-89bd-4eb7-ba57-b0c7a2d108ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9305c60e-ef38-4a9e-bd0b-2f97956fd942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873448bb-5d9f-4dcb-b98c-0c5396319659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c6e596-9cf6-49c0-8a36-5a4047fcfefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f056d1-1339-4949-ba56-d2e066142780",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a1fd41-6fa6-48ba-8109-a08c3b96d992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f8b3b7-5898-4c19-a41f-7d0f54c25529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c1d367-c77b-48d5-b3ac-c9ac46254d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3b501c-da48-4ce2-a1bd-a862237687d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c651687f-1d8f-4b62-a59b-6cce38e62261",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1284031-eb62-4c5f-be89-2c6d14abfcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889f1028-65cb-4857-8ef0-8ab9c83540d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec43b0e-a712-4b9c-a951-f54a7a494b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b59c11-a75e-410c-8f2b-73ce84a3abdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66888818-72b2-4c02-b1d9-b846cb59553a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15a0509-32eb-4156-8084-ef5aa48138da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08571990-5ef3-4884-aebc-7ecaf1163618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ed718d-3a1c-4fe6-b895-9d61bd7e0a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1228e8a8-aed0-48d9-bb2c-ed641a3b2683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6556a095-73aa-403f-8425-21d6b06e7c05",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff41f77-dc40-4aff-8664-aaca084d6fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8816a158-109f-471e-9514-01def6fe7d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028f86e4-1de3-4b27-9ae9-d7041f1b61eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e96e4fa-a94e-44e8-b4b2-1c928fbe85bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcbd33f-6ec9-4239-87a9-6f9aa457a494",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354ca289-80d1-455d-b2b2-512686648939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fad34cd-ffc4-4cee-b489-9747997cfec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3b2cb3-6a4d-468e-bb6d-96221eecfe99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e49590-e082-4de7-a65f-9eeef95c1c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c175bf-80ed-4ce8-b6a7-232424e175b4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f8b816-aa02-49fa-9a10-68d732547d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c612853-0e3b-4db8-bc6e-5ecdd6170c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e5c52c-d223-4947-8637-7e61800cd272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaca673d-ae47-4a74-ad6f-252ba0d23a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa76f48e-5547-40e7-a01a-c9094618e1b8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9950425-1d2b-48de-9c9f-ff2ea64216e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41df0f9b-1f9c-4529-8909-7af23d2c017a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b0ec20-dc93-4bb6-b0b4-530b6336f643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20cd9bca-0c84-47a9-b83a-caeff8661a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ae13e5-8107-4ca8-ae61-363221bcf231",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d2abdf-e0f0-41aa-835c-19bbb82b0fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dc0cfe-e36e-4454-8dc5-f1b7348a263a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97784813-2b61-43cd-9956-3ed970adc90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77ec9e1e-a0f1-4895-8a96-73548e8317d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8006ec2b-9096-41f4-9324-4adb686aaac7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f18e096-c9bd-4633-8bb9-16a1fe0312df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51dcff30-59c0-424d-8269-1f170df0f441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543be6ca-c990-43c8-9dbc-eb80001bb8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b4bfcb-cbcb-4f91-a082-dd82bd23fa55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2608e6-cf8e-405d-8315-57c1afbd897d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f11e93e-4157-4b0c-b1a6-abf7bd16dc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390cfd96-f067-4b74-9d69-439c41d78e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b82040-ae72-4a47-9a82-ec8cc940c8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b1d23e-5ea7-4ae0-9682-359d01d54445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0f2431-0c1e-44cb-85be-52dd1b89da7d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8231a9e7-9c96-49aa-8844-e97aa41bbd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed51411-44a4-4c07-8ac3-5dcd678bea8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd067227-b892-46ca-b98d-731e9d7ca7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7453d113-6088-402a-b885-2b033cb29002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8cc244-a40e-4350-ba8d-f253c92ecb32",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3a6a5f-cb15-4ed3-8a5f-0d2704f9a962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc25e7b-e0c0-420e-90cd-e3ac49a50c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd7ef43-8a47-4086-b2f1-24d82b983a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4860b456-74f6-464b-9270-626080d8e47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c166381-46e5-43be-8cbd-21ab9070d00f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6729b672-583d-4b54-a0fe-1a89a02b79fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93e59cd-c08c-4a56-8e9a-99666f829575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df6e772-eeb3-491d-82f5-7b53340ffae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1434990c-2531-4a4f-bf41-5e31f24b54df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c062a6cb-543c-4d4a-9792-093b206f6291",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b174fa-9654-4251-a1a8-35798177f1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f35fe8-228e-4671-a2a3-aa3a2b90fbab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f7b78c-f532-4fa0-8d09-63584be559c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2d46ff-b0a0-4cb4-8b55-94fc07f20d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696f487e-a546-447d-a48f-27f7db0d71b4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de652257-7b30-4d94-81a5-1ca46c78ebc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b752b48-5837-4b8e-87c5-e5499179501c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a81c0a-4cc8-4b0d-b73a-2aaf9ea2a9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95683077-0ecf-465b-ad52-1de0e5c15f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efb1e4b-741c-48e5-911f-9f77eaf3be45",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e4c725-d1e0-4276-bb50-f05f21b761bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1004a35f-0d3e-4a27-8d92-2f5c9ca7f48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c220a7-f9be-4656-86a0-30a2ddf3955f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "889212e2-1b27-42e5-b7b5-3db0835df378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a589e5-b7de-4beb-a9b5-12bc8caa097d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde82faf-d8ac-46c3-803e-02b52e7a1cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb68cd9-d29a-4725-bd1b-a5d60c20eace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5edd3b8-ba00-4425-9311-8fd40992d87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7764d55-86b7-4905-8ed3-66ae4ade0e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109e6896-a666-4137-8e7f-4ed0eabae3b1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33d7e98-3363-4b21-8a21-81ccba1b7ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ce1a1c-77bb-463b-ba0d-58538249de64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afac0753-9a90-412b-aa12-2cfcace2be09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec55690-b8bc-4503-846e-97f742b0e85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a6659e-ba52-4956-a1fd-ccf14ff99d51",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b620d3cd-a414-4e0d-ab29-570c8429f94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871613ff-bd48-47f4-bc8f-a4776edf65a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e454aa-f636-4764-8ec8-02a1e48dca6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "26831713-c5ba-4367-aa05-3eadf858abca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc15b9a-b535-466b-9bf8-9b7e0daef398",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cade2164-3338-4126-9685-88baf0887843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f0466197-be9c-44a5-a490-2a5126505cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb4488c-dea1-4542-a95b-f40f603b1c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae438b0e-7950-40f7-aa59-de11ec5b28ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aaa9c868-08ad-44a1-9bbe-132367a98aad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ab11af4-a448-4120-b815-246539ebeaf3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f783d332-bc03-4f44-85db-977bbd1945f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14129c0a-44e2-4c55-af25-bb10d94898c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dab1b2-3ce0-4e70-876e-39192bcdc1bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c01c1004-88be-4048-ab7d-589ce336bacc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f83cd287-7b45-4a10-a4ed-2417ef2949ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcc43e58-95c0-42b5-80a4-4c511798170d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d451fdde-37e9-47e0-8ff2-86c859e524d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4016706-830e-42fc-bcc9-2889273d5bd1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7292a197-a75c-4483-b286-e067879856c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a26b14c5-93b2-48cb-a705-b110f77c3eef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "422678dd-d556-4d32-80e1-9ce30c43f254",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff942ea4-0099-4fbc-844e-f610d000712f"
                }
              }
            ]
          },
          {
            "id": "5bc7a5a5-ce17-4abc-81a3-1a06306d25d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f935699c-8fd9-4d9d-8711-ad3a31e233cf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b2450f19-dcca-47e4-9558-412159ea67dc",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2932e91c-1e0c-4072-b641-e387d628b345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6b4e03ed-e46c-46df-b933-131454abf349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b754968-110b-48c8-bf8b-68f6b38aa7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec34ef85-aeb2-462d-a565-adb0d5125f3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "994d9645-2602-4654-b1f3-7f80a0ae4e24",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99e3f0ec-777a-4dbe-8d3b-23f4ee3a1c2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e028eb18-cddf-4b93-ad4c-98d7bc3e4f4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e6c727-6e57-4a5e-a19e-06f40fcb4279",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ccb646b6-4153-4271-8c49-f5976aee7c2c"
                    }
                  }
                ]
              },
              {
                "id": "e984ada3-f1c4-454a-b896-4503e42e52cf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aea08dec-15ee-400d-acbb-0a78652498e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c132bd02-a308-492a-a573-a3c92142a99e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30bf4cfc-1bf6-4063-86d5-238309f35962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "839f316a-7190-404d-ada0-dceb61c3f228"
                    }
                  }
                ]
              },
              {
                "id": "3cce4ccc-7b28-40c7-b2fe-945dde7413ea",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78f6dc55-7aef-4fb5-a8ed-31737a96e3a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9bb72521-41fd-498c-b9bd-e7b87db62445"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a292b09-cfa4-47dd-a496-b2af19b7a59e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9070e8f4-76a7-447f-b866-2816ab9ea5b4"
                    }
                  }
                ]
              },
              {
                "id": "4589d46e-8b96-4ec8-9fe2-3ba4bdb4d8b9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbeabcc5-0ce6-4aa5-a71f-2486d6fdd525",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04628884-4b88-41f2-80df-8f7b8302d034"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2be12155-ade1-4fca-a343-5853f70fd4ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "535828e7-9c3b-40bb-8cbd-0528e72cdade"
                    }
                  }
                ]
              },
              {
                "id": "6f021cfb-60fa-4e2d-ac54-d3effb26c90f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18be5f3a-7034-4f53-b557-d43ea8854262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7140d17d-d39c-412d-9cc1-f3f4dbca1084"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "502b0fee-2bfc-4b09-abcf-75065a6b533b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0d3a98cd-b205-4c5f-9d22-e1125a53e07f"
                    }
                  }
                ]
              },
              {
                "id": "a31516ea-8b1b-4e64-a6e0-f78361013c30",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e30f6e11-5b44-48ee-87b8-caea84f5ecac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4989e0bc-f808-4d65-97e2-6e0d69ec00c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b87a731a-4f70-489b-b3ce-700c82194f19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7618c207-7b95-4d21-a2e7-38bf62e1e0e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51c6ca49-fba9-4d0b-9abf-c2b8e70fb6df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56f85c5e-afc2-454b-baa9-77592662c157"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d58b3b8-e70b-4c13-93b4-429c5ea9bced",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f17f288d-fa0a-44bc-bc6e-9969587181aa"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43882f7c-06c5-465e-95a0-219d413a1c55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5fd5ba17-9a3e-47e3-b31c-4e140c2d96b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7dabcda-05b2-4751-8f9a-d89ef13fa59d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "225f2809-4147-4f4c-b795-cebde8c240f1"
            }
          }
        ]
      },
      {
        "id": "96afba48-3292-4e91-b7a9-e495bce73649",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7937fcb8-317e-4f40-8c0f-a6611d936c71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20fc665c-f63e-40b3-86dc-97310fe69911",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a9d7313-61dc-4402-a266-30d5fbbe1a1b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5443674d-f66c-49af-9fd6-679ef6f5d752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79772e7e-d261-48be-9431-1ea13f7de17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7727a6d-a0bb-4d0f-aad4-76e3d5b50238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cd7da9-02c4-4615-b559-67ca2fc9e885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b51d45c-3a30-4857-a20e-4a2133a120e7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2ccfda-d554-443c-ad91-2ece49003d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f2087b-60cf-4855-8998-005869468656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faf2453-7045-4c9e-9dfc-cb61eafb9d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5660f1-ce22-4839-9d02-37aa3c4d48e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f874e6ac-af87-4e7e-ab77-7d9db1da0083",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9035de-1f93-4ae3-a5e8-0f0e1c082f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b47627-901f-46cd-b81c-9c33f6dae242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088dbeb6-f19a-4e41-9f6d-5c34d1facb96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a62ecba-90c6-43dc-a3ba-a752e2e9b482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a650a0e5-e4c2-459f-9002-85855e6a7b80",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5431b692-b40d-424d-8f7f-a1efe5d61490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4725bc5b-dfe2-4019-83dc-87de20ab2a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dab792-a167-469a-8fb8-8d6e3d52a403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f760729f-78d7-4c08-88eb-702cce324e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1cfa31-6946-4d53-b908-000b8f8f97cc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738c3fea-ef10-45dc-9ea4-00c09a7b930f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f33078-6dae-4445-b3ce-0c601c84dd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deb5daf-e2bf-4567-afe0-ec0647330634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "131674d7-145c-4393-bb7d-09da9a3851d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eabe9eb-b6fe-4845-a8ba-1dcd766cea7b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e3c6d-480e-42d3-ae85-bf9ab51fec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a270714f-5d98-426e-b57c-61908ecb7b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e36f14c-0348-4d21-ba76-b968c36b1cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "703b9957-7b7b-48dd-9abe-50b523a3345d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d96ff8-8bfe-473f-bbe2-04e6da052bd1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081aa9fd-8c1c-4f8d-ace7-45a775075866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823a8c99-3d43-4685-a89c-da2abf84fff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d5453e-9b71-4bf2-bf09-5ef256ad0199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "74a316ae-0ac6-44db-a16f-f6a83444b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf2f06a-838b-4634-a2a3-8b008f47b004",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40446778-9572-456b-a60b-3c920ae80429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe60547-75cb-47b9-8882-84a3925007c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd98938-47fa-4e49-aeb5-b5bdc59d7163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1af7ba6-2802-47a0-94cb-c42bf933ee87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4480e0e0-bad0-40c4-be4b-e5454976e0d8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f0a0f0-1bdc-4137-bc34-d3455529fe71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8504c19f-b683-4d6d-bec9-894c1d45a665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec9a9ef-0dbe-4c4c-8fd9-0abdd89e7892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1841f958-5f2f-4d96-9f0e-f96a92c10b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a68587b-cbf4-42cc-a591-733945d88a2c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6de314-e431-455b-832c-bd54aeae9703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8509ff22-a1ce-42ca-b7f1-a2a99b4e212e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7728985-1393-4fe6-844d-4217c47f1a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb4c31-9ae0-47c5-9b0c-812598eb44f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5372b02-1fbf-4964-b690-8ed7edf37494",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaa5cb7-5e8a-46b3-9c99-c45b9730f2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22608936-2af9-460c-9f7f-267f72199abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdb5ede-1dea-4d16-b5d7-d94c5bde9fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ddf1a9-8a38-4633-9db1-4dcb5574f206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55f5e33-369d-4712-ae1c-31a1d4c66ea2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff39ebc-8378-4f4d-a212-ada18c102fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da21ee9-1f60-4619-a96f-8472be043e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36d1637-56d4-4bcd-b02a-98cd94034f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27d67186-8291-45ea-aee6-40edb7bb52ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3653da-d782-40b8-a794-7d166396686f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb764db-5ccf-469e-8d9f-b05bd260e4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a1d1f7-1695-4599-917f-f5f75c4bc552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fd9f7b-b0e1-46c7-9f25-81571ce28504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5b6710-907f-49a7-ae5b-465905dd4771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d269c59-3e58-4274-8603-887ec6d712c4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14f017b-38c8-48ee-b90a-17b51131cde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e914defe-b25a-4846-992b-12b62d82b7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b839a84-d298-4478-b76a-268bc9e655cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e318f0a9-31b8-44f6-b1e2-f1cc094a6e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55caaf97-dbe7-407e-ad94-3ee30740d369",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78245a89-3ce3-443d-9bcb-20ca554ecf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c897a381-1db9-4a93-b837-cc6f01ad43e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a60be37-919f-4105-9648-c60ef23f3c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2ede90-5f51-40de-816f-6ae7ce0eedfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4dfcd9-d497-4b2b-853a-55da7a82bda2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c71ea88-49dd-4939-9841-b53347c5d674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe0e98d-1295-4df8-868e-751722d84bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd290ce-41f2-4ea1-be97-646d3432c49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "49388765-f048-4f45-a083-b59fba9a141c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc31b57-3940-476d-8046-49b04eb5807d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3261e196-148c-4440-a8bd-a26c788bc402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6513bba4-873b-4e6a-9cc3-da659c5a4eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54a7d52-1545-4e5b-9bea-7b342adcd184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "97fb5138-6051-4095-b35e-72c77cb1b20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df095f0-f033-46ae-aa37-fc929fda4ad9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83733dda-8ec6-4195-b443-664dab4bcb20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c810fe-a5b7-4487-aaea-6d5a10e8c93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6cb48b-c331-4597-8ce0-c46b9b965b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85704d6c-ad33-4471-893b-03f5fb32f770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32fae84-5bb9-41e6-8f59-31b81d5e0442",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1843e6a1-592f-42e8-8c32-2682f44cedf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df505e1d-1791-45c3-8989-c879e75e1853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc0119c-eab2-4f55-b382-fb38ea1943c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a07f491b-91ea-4245-a02c-cb0dd8a821f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdfc0c4-9a63-4431-b7a8-73c6e0a96868",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d0105b-fe8d-4221-91e3-e8cfd5067aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca2083a-6880-4b00-8c67-c102544b9191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a9bf9a-1b87-4fac-9957-376c11c42f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd792a30-9c44-46db-8ea9-535f6a6e43a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2858761a-d71f-492c-9e76-937a89321a5c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d57acb-9ed1-489b-ac7c-1c31e7d898ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c7c685-386d-4b40-9c9f-598e883ab37b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2353a999-45d3-41ec-9f8b-7eb7775964c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef02d5cd-570f-4866-ba80-38e90a0cd794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e98e3c-d9d3-4c00-ade7-69e20a1acbfa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cecfc4-3685-48fb-8039-8cdf7561700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d968f39-74ec-4b84-87ab-d688b0ffe9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92c98d9-3672-4a95-8328-306198b0af29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7deed97-6ce2-48f9-ba00-1a263abf734a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663ff756-d336-4dca-9b3c-cb09e0b62f5b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec067448-f2f1-40bb-b19f-4abf2d02b259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a12f0b-68e4-4448-a4fb-b2c4a912fd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18d5f7e-1861-4f5d-a583-b27ab452e946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f06b07-27cd-4788-9c85-b16068f7faf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0e5fbd-b648-4f41-a523-16c9efe7e326",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d463f446-26c4-44d9-8946-53ce0245248a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440352dc-6284-48b9-beac-914f45ac31c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ad0ad7-3b82-45ec-a560-3034c786361d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c82b239b-299b-4909-885f-deb88f223330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5554e4c-6b9d-4170-b17d-5d0f9fabf114",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c45033c-4a27-48f1-97ef-3db8e48f7dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea1993e-4481-497c-8187-a3cae984bf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0882cabf-fee1-409c-a079-658176f7e04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aebe242-8ac3-4407-a80b-25ae63bd33a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2212507-4448-4f07-9489-f3bec968b926",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e42832-998b-4740-877f-3f741eef0498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43be2da4-a70d-44e2-8e35-7ab20ec3425c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d071c2d1-70cf-46d6-bb3f-04f283f32b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef3b1d2-84b7-4c46-9818-62968c295a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6f5df7-2b10-4974-9072-c102c8238d54",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c97f4a9-d7cb-4ce9-8684-c47968c766ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaef7a5f-f26c-48f7-9008-7ebdc755f85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e3c95c-966c-4783-8dfc-35479826edcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "042ea5a7-4862-42b2-9488-52e8b5b35b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc57a278-fa78-4ea0-8654-f43351734648",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed656920-a043-47c8-82bf-038e65b29926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "238f275a-adaf-4f24-a198-898815d66475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717eef2e-9bed-42ba-a8cf-6ce9bca10cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21a2863b-11bb-4982-8c0d-f24d4efb76d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc37824-0077-41e1-9ca3-6ba309081d0e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb7f3b8-f3d9-4f3a-9fa5-9456cc716f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10b0f00-2f04-4749-b361-5d4ee8d6a355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a4830a-3270-47ec-b3df-45523078f192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60560884-54d0-4aa3-b212-5e37ae72549e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12637f41-30a0-406e-8cc6-308142ef2714",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd0a51c-2eea-4ee0-aa28-fbacf9ccc0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9277dc-2c99-438c-b87f-73327138c6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d74a4bf-ad28-40a5-9d87-49584f4bae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0693176b-2a45-4bae-89e0-e7b8f6456f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860b05bf-986f-4c12-8022-f606c9f1e981",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63620e6b-8875-48b1-82c8-a7ea708a9e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdbae51-8c8e-4298-a108-0c4b92e45215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df572d3e-72f7-49d9-bb02-dbd8e15834a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78bb38da-49d1-484d-abc2-2aa82c129a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d541c0f-9d3e-4826-8beb-d7cc8e2719bb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b13469f-3b46-4d93-a9b1-7c9953190cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee7e2df-891f-4567-b8b9-a8e4c9b62f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3033b79b-856b-45cb-9341-e39f2dbe31e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb15663-5201-498d-a9c4-60d61e69644a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b4cd094-ab91-4b6b-b034-7618981df9e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a84c59c6-5a77-479d-9a43-424f7fd081af",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72ff28c-5fc7-402d-94a9-8b5f642379a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "118fbe37-3059-4807-bee0-1ce25b4bc075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d65d75b-6ac5-4950-bd87-6ff4b9f22a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c75d5cd-2496-4068-b63c-51a613435329"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5717ca42-839d-4255-b038-d4c3d1368b7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8e16323-5e8b-41c7-b7d8-b809398f8f44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b313681-d5b6-4513-b449-98255e36ef58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8dd2072d-0033-4d67-8c13-5fc95c1cfde0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a6b6b20-5447-415a-8e37-9a69ef69d677",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c8c256c4-692a-4f20-93c0-b7bcb966a374"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f560852-53ae-4f09-8a8d-5d0f50524f84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bffc8f36-2736-4ac5-99c4-ab8e67c786aa"
            }
          }
        ]
      },
      {
        "id": "34855d6e-fbb9-449b-9718-3fdf751902bd",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "50e8fc9f-6cfe-4ae4-a82b-e37894a103fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d0356eb-0c80-48a2-98a0-75833d61e673",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0bd48196-d1b4-4806-88a6-a0bb1d258c0c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced5e58c-bc9a-4bf0-b057-a7f435d4142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b4ba13-e41a-457a-8393-e05ba7ea7433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b447d6-a192-4732-b016-cf556cf0de0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "69015ed0-ede5-45d4-a0bf-b0dc29ec8cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948dd79c-f5d4-4b14-8a06-abe5b6124b37",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a540cb-f44d-4cf6-be8b-e02a34353e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eeed100-31dd-4851-a972-aaa1e41a642f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e6a580-ee88-4d96-b1fe-e7b338ab4c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0803cdf0-5bbb-4f83-941f-d0317c9d2fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6e9ee7-eb96-4ff6-ad5f-280c53a734eb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692544ce-eb43-4e23-a1d5-2ec4247563f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b920a141-1d4c-46f3-8cc2-e0cbe84fb9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8164baf-2f0b-445b-90e7-ffab00242147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65ebfc26-5ec0-49c6-8e24-d14b85a37406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f116b8b4-cf7e-4cd1-b92a-358b52d60fad",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c20d0bc-974b-48bb-b9d0-febed476f134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1190e3-88a6-4689-964c-0a7d30c6049f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad655f7a-2473-4af5-bd4e-d9adb79dc165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "448476d8-9c66-4dde-9a2f-5e98d7501a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b865c7-7c14-4966-8a40-ee7159e92d30",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a01115-b8ad-4ec9-86c3-263a1e8beb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f111d792-2dd8-4bd3-b760-28d208877524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814c8067-e46f-4c5f-b483-9290d2c713a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6907962e-6ea6-4c7d-bc7e-df2d1cc45326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287fe766-463a-44ca-a227-849823596060",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f6ebf4-1a1a-4856-bbd3-fdc2d8036a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ce97fe-b194-4d40-8bb6-dde113037e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a75554f-f312-41ef-a9a1-b4ebff882488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca78a5c8-1074-43fe-8c18-602d70bc8e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619a7193-f70a-408a-ae14-5fbdb7d75f14",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad654be-eb7f-4c6d-a9ef-43f5dc70070d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc882e72-04f1-4057-9824-38190dd110f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e759353-11c9-41b1-b9a1-cd43c424575c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "510ea17f-5e80-4b18-bbb4-3a0d708f5688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e19198c-8510-4a02-b869-44b9bed98d7e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002c2c13-5146-429c-8fb3-793c8612d0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3f27d4-a4f0-40e5-b1a0-cedc88cb7fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f885308-b468-4c7a-93cb-72fc49952c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7d6c9b-413a-4995-a338-61266662ba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea5d507-30fc-4d5e-a5ad-52135439e2cc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00371441-0e1b-4a7d-bf01-48eca482d32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256347c4-890d-458a-b0db-eb7fbaa8b1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e52a25-83ee-455f-9237-34248296394a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8625a75-5270-4702-bf0f-2d15ba7504f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a17c73-cc74-488a-a68e-4c30bfb786ad",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83c7140-c593-4bcd-b52d-52dc4a29babb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ede6cf-5762-4900-a5f8-9a906f703c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd1b1aa-e90b-4b4f-909d-b69bd8db94b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57d3c7bf-59da-4be0-b03b-9ce2b6f9c7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f74a291-019d-4e33-a81d-006f1c72d403",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76bff9a-b9bb-4cb5-ae88-2f2749a029f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894f6013-830f-44a1-88ee-56c091a3ab9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c582ed-fbdf-43f9-b01d-4d6c7eafa47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a67c1b5-ed02-422a-885d-4bdc4cc57117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8085a10c-9833-432d-93e5-d9bc42104e83",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbc9942-9330-48b5-b9b5-b220c44c1b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053f85b4-e41b-40c7-8cd7-6acfddc46d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f45e5f5-1450-4663-9db5-079aa57920b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36fb764b-3a89-4cd4-b1dd-75d83df47f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b4d9ab-5e04-4c33-9fc0-d1a35721cf86",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505a7aba-9b8c-4c24-9dd2-b734f7ada6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192dc242-cdfb-490d-9df5-5ff9a3ef01d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a155920-efd8-4dbb-9ef3-fba891060b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46f39ed8-3670-432f-a308-2bc1da38e4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7df8f2-0873-4547-84d9-c94db69e3bb8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598271d8-1feb-4dcc-a7bd-f268b674175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948b2290-03f8-403e-92c3-0f17b640b7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa62b63-09c9-40ec-9b49-29150bf77fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "974ad852-1b41-428b-9e8c-8bf4ccc4964c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f49fb6-8546-439e-b0e2-08e0e7b98377",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d2ce68-2ea1-44ab-ac9a-02502d76da60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2074d81-fdc5-4970-91f1-7343c1491008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f967810-b479-48ab-9c40-12d0f2ded063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "07e50e86-7fd2-4ef4-9db1-a3d669a3653e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e0e434-66d7-4096-898a-aa2c70cdf457",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ee1d7b-6990-44b6-817b-46355369fced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df60a56b-0710-4bd9-a258-418d5a599398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795b9873-c600-4233-842d-a7da7adf1f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "75c61c64-b73b-40fd-8ce0-5c37c7c2ccb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ca3642-1b10-4221-bca7-52d0c90db57a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebd2c1b-4f4f-42af-b42e-8e50c2227125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899a1873-6792-4753-a1ad-1d25a2702188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92a3c65-c241-47a5-b36a-861ddf23c8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2950a6a0-af17-49ae-a3a9-470b974ca622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17caea45-04a3-4910-ab3b-ab37dfa30d76",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dd6fcc-43e4-48f7-ac4a-82c49f9b9eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5368fc-6d2b-47b3-9971-58cb4025760d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3475a888-5fc2-434e-95c4-6da1e9e16faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef62eee-db4e-41bf-b1c4-fa1f3f604bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa457673-a655-4678-a547-b7d9ab4f49fd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf142dd-1fa3-4c2f-a4c8-e73ace946d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ad2f41-564c-4f79-aefb-084e44d39758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc98d03d-9d70-4d3c-aa0b-4bfcb7272c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa463b5d-3883-4179-96e0-14cdbb0b91a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a74ca2-2b58-4bde-9f3e-21d6521bb8e8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b73f5e-c882-4622-bb71-98bf1fefc438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25de7d5a-d266-47d3-a236-7771a07bd523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b1ead9-22a3-4600-b33e-a643dc75900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26272caf-cc44-4227-a331-f64f3e560af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0e07e8-6446-4940-819d-f83081528cc6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c347ee79-3452-48db-b8ce-9011bb6d524b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d765e21c-1dd5-4643-9636-48440f952393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e7afc6-7f02-4e68-853d-b1db3c95e6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23c44557-4111-4de8-8c5d-32294fff2a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae1d434-683b-4db5-a0b5-9544032e9de8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53651bf7-8e14-4932-94e2-0a6e6cd8806d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b187958-22aa-47c2-a3e2-48c9df5d4841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ef7dd0-1be0-4e11-9301-981dd70b9089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "643a7f20-378b-4866-acb0-445ad91bf885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb33b781-0135-4a70-818c-52724cf5aaec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a7a681-72b4-462f-a642-0a5a32e2542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f66f6f3-4344-4eaf-a686-50b885f23f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b073a558-d0f6-4a9e-a58a-b9bb453c7b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3860c04-4ee5-4ecd-9274-53c165c05805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c921da67-76b9-47eb-b227-7d32f6113253",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e3f579-9455-478d-853d-581e87889b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147c6e6d-0c48-48e4-8994-8ab705be43a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1d7753-ea17-4cbf-92a9-9f1d736a4d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401bb385-31fd-4a0e-b8c6-e1d7848fa9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0c8261-c999-4427-b551-45a35cc66e92",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fe59a2-5f4c-4cb8-8334-bc17619cd7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2710ccad-afad-4115-bff9-8997affb3c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0ee1b3-fc3f-43a0-8832-1f3d83d79d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da7c1f96-990b-4a21-8297-49e1b96db048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4beefbed-3db1-4f9a-be75-ef7ccb4bba2c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c54ce-cced-46bd-a54d-e73d5ca75357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec4c5e9-1d7d-4b0b-924d-0ade9b061ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd7abd8-58d8-4ca9-9a50-9d9475f498b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79733fa6-a1f6-4d0b-8e5d-350a1ed8a731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407c667c-c1fa-4aa1-b3c4-fe6fa2fac848",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47fd774-a632-45cc-9d4b-eaffbd809ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64be2408-a00b-4c3e-8734-678f19556c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c66355b-0fcc-4a46-b8a4-864b5808a431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c0fd5c-753a-4096-a78e-6d1b340d2222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42239666-9234-4ce4-af95-e7d52d878f2d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976426bc-8b8c-4467-92bb-765d325f591b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b21cce7-1995-4502-95d3-166fc430592d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be261b1c-a3e0-4382-a982-a50489412f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "945e7454-2515-425f-b268-5a5fec9f0563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf2df9-2e89-4f87-a528-d96e223feb08",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a946f2-8b23-49eb-abf9-215de941f582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79400b2c-951a-4309-b7e3-d137aba83f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b382adf6-8bc3-43d7-aab3-09f874e2a87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c3874e-3b59-4098-ae8c-d6cc75341e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f97b40f-5bf2-4b08-8980-0722256ff34d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a33d286-6d2e-4803-8500-15ea90fb062b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf31536-f644-47e1-b76b-2e77a873ab62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474eebc8-ba8c-48a6-851e-c29b73e00aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57b1ad4b-8ec0-41e5-8152-b18adbdf8ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa189c8-33d1-49bd-9dee-e0a4b8d3e58b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4283183-20d6-4c44-8793-1bcb030e3d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d05653-762a-46d5-b882-bc63deea2896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41b26c7-1ec7-439a-ac6e-79145ae9d058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb308d15-4061-4faa-b0ba-d3d3c3247870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64193fa2-12f6-448b-94e1-b29920c2df9e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9056256-1641-4dab-ae49-33a28109ab35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ec11b3-c6be-4ca1-8957-804a770b3684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa887f4e-3088-476e-b850-6d89b7ef23eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc531576-e622-49ad-946f-05f26c72ab92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e56feb-158d-4bc1-a8da-95c40c9a5d0b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83563851-74b2-445c-8bdd-e89deeec7afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd132885-e052-4d1d-9227-1440c80808cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095d34dc-a7a8-4d90-8759-e716180660f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e279f977-6f4b-494c-a532-0673e2f96128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30162fdf-1a76-496b-864e-7e92407cdc93",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551132b7-5ca6-4913-aa5e-78942318c76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131a8fd1-4521-4496-aeff-eb71bf52d5a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069c2c30-f2e6-43f4-b25f-650a92234bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9774cac5-9b75-48c9-8fd1-02d454ac63c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25648c8-054e-4f2f-a1ed-3427fe8ea860",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5afa29-50cc-44c2-98fe-16c2edf3d979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc254d4-da7c-46a4-963e-271232fd60cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937efd91-5726-47c0-a2cc-b3f50edd9970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "156506b9-a536-491f-bd63-2737d85333d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e664a16-e7ea-4c1b-bd40-357e48707bd3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41c0c6c-7c21-46eb-9624-533f3b267019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80b71ae-a0d9-4191-8c6c-ef9e148d2af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f14f41e-0ac4-4ccb-91bd-cf2fd4709c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc2136b-1fa5-45c0-8f73-e74a1d00c57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6248c4-9ec2-4a45-84af-979327a93280",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc773d6-fee9-49d9-a921-fc311f956d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d436278-52e4-42d5-8d32-e40f0f28a6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c87c485-2616-4d00-b220-9bb8bf54e335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cfe586-5940-4a16-9d7b-c91ff1032c8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c097394b-d669-4a85-a618-c4550ce24c6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9165232b-0a55-4eb2-bcb4-3a434cdab7cf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78431887-348e-4d1b-bb1f-6941a1248798",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7f8b73-8254-4ce9-9452-7a572fce5f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521ed0da-717d-40f4-8fa6-7761da3ceb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "788d3007-8690-496f-a1b9-912783031d12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bbf0069-79f4-4c2f-8718-cd3d450aeaf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04ff867c-208e-4986-884f-86789a507b6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "898d921c-59e1-409c-add4-88a23daefe4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db547566-f519-4923-907f-f124a8f3d36f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f2525d1-4ef7-43eb-b653-c195286bbc41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb3b6082-b5ce-4494-b02e-9f89a35430a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9367d836-580c-432d-a6c6-fe08439c6f81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3923135c-5140-4fc1-9fb8-dd639567621d"
            }
          }
        ]
      },
      {
        "id": "8840aa8c-a913-4e06-ba22-e3145d57f8bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b140f133-8fab-4eb7-a000-8156b661eec2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "853cd0cf-6c0b-4265-a360-ef27cd211991",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "12326ff3-13de-4416-a368-a5fbf008272b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93f9f80-f618-4ff1-8cbd-c70d275dc27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c0e9a1-87e0-401c-8fd4-9a001c33b54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc7c93-19b8-473e-8f8c-0f5f8370af4f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1668321e-0dc9-4ad4-ab2e-042cde6dc6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13781fe9-8c71-4a6c-8649-0077c387e6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7052935-9782-4fbf-b54b-0b70cb76bb0f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98f5688-fd14-40b2-952f-8ff7fd117c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3135c278-dd8e-44a3-9b05-32518d43a453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac7309d-3ad1-46a4-be89-7f2f9bdbb695",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf7abfb-b32f-4ad2-a740-2eed7f3a5689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6022ec-5bdb-4462-8a8f-b92776df7ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2b552a-50db-40d3-8f50-8398d4c691c3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edae5477-3e76-4419-a68d-0ee859491319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8549f813-8eb5-4bbb-a6f6-71760179af2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f974364-0956-416e-b03c-f5489db76988",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fb3c84-bc25-4321-8349-d7645e35bf57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5bcfe7-aac7-4295-9c88-37d305ec8aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d343c0-aa0c-4474-9b8f-540df2a28f96",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85184a95-a75f-4705-a664-d0aaf74fd55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4534eb7-7e61-442a-b00b-4ddddd2f07f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0eb7d7-da6a-45f5-bca6-e46b80d0435c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba5bab4-3259-42bd-8a85-9b7200ffe1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cf6d0c-fae7-4a8a-ba36-8c287e231750",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5726cf7-732e-49ef-ae92-cde055566fe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f6b8a8-cae5-4ad2-9d8b-f81ca7ad5d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a627b1a-c164-4f8c-bf53-a9d0ea686078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbeacde2-2ec7-421a-91d6-6a490485f52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac11136f-b627-4b45-9cd9-9fc4cd1fa055",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1587e5-c6de-4d0c-a0db-03a811536be2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "523d06fc-f8a4-447e-9859-91e79c7c94b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831ec714-caa8-4199-8e77-01caf11b6913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae3db05-2ea4-4cfc-b777-357640ce2757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ebde01-bb37-4ab4-bd89-99d69b254dc4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2411de2-c93d-47e7-a0a7-8fc86c8225bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1e4753-0e86-41a0-a468-7240cf051052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbfd5aa-cb04-472d-8189-9f2facc8d3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0478a2b6-9c90-4ea7-ab96-073561cc7792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d52541d-a5b2-410e-8b6d-408ffaf33a11",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e25140d-689a-4720-8221-ec2773eec438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168df110-3955-4649-8e1e-42b2cffd636e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d9662b-ffa6-4f59-9fd5-c06ee70868e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fcb7fa-1402-4a7e-82bb-1f1106848f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3bf374-e275-4bf5-aa80-602e57ed0bc6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a3399c-6d0d-4a6a-9f4f-ac107110fe09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1e7df0-7b89-41db-851a-7cde10c2b27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a852c6ca-efc2-46fe-8914-bbd31e2419e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edd6a8f-0d9e-42d4-a011-2682b18a7672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad1416f-7e56-4e7c-b4ae-fad558b6dfb9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215dc89b-59e8-485a-b586-593ad9c76afe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44eda288-1641-44df-b679-5e4c3c9678b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464e6071-9f88-4f5d-81ee-a5415b2f15c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9356cdeb-6470-400c-8abc-ec8f9909a4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55a7236-734a-44d8-9c1e-818117479baf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f29a7f-cbd1-4149-8005-c131245238cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0a8e60a-4a40-4c64-ba43-2d3b104f8749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9724af54-4f8c-4055-8fe0-25749c73bc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceadd5ae-474b-4a18-aad1-0718a7aaa52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e9b096-708d-48f7-b6e6-6abbbf93e6b5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbee9197-5b47-4f27-af3d-46f783afa518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5beb8257-e272-435e-a615-fcaf4d7d54cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70d0f48-4345-498c-bd4f-61ff76795333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4d53ac-83c6-4506-bc96-e2b57ddbc18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f463621e-7f29-4ca2-98de-17f76cc0a35a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd761a3-a90d-44a6-bb64-fa60611487b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "210a22f4-dc3d-4e63-9c0b-2e5ba1cef6fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7577b26-1502-4d86-86d6-1267635c21bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfde9e59-2cc1-4b4b-90df-0088b2b003ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f246cba9-bd27-451e-a6d2-b3b2fe944ab2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6a77f4-30b9-4e66-80d0-1d5293799c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd782474-e3bc-41dd-8c09-7a491dbea7cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a61c4a-0534-43c9-9049-9acbca243b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbac5e7-eb4f-42b1-8a59-ddfbcb5505ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0936f28e-c25a-4af2-9350-a2811d3d2039",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe916a43-8bea-45f6-99fc-22427b020e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da157ec-cea4-4ef7-a7b7-c032a6114e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e28fdd-067e-413a-8788-143cb527acc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c9ddc5-a6b7-4557-86e0-115bc80d8218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c047bfbd-7c84-4a6e-9cbd-86360c6ba5a2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e0e0af-a7c7-41e5-9d57-14694abf08e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bba31a4-3d08-4e33-ab58-9cdb8207e8ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d99ef63-6da8-4357-a280-5b417dc3e0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a252df8-7d08-4f30-a19d-89307b36019c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35f77b2-5f3e-4d54-8c90-9d6aaff3c22a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce9a357-e2a6-4d89-833c-b83434bd92de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e37981-5d12-417d-9e5c-9e3f8286851d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95df7915-5919-4db5-8355-614af625940b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1078fd56-2882-4c23-81b6-e4e7dfcb3dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dbaa92-3d13-4623-bf6b-254e24bbd928",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29310159-e11b-4630-8690-78ed38d28a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38fd673e-7280-4acb-9ce8-8864d1a70fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8cfbe4-86eb-4d2e-864c-0db0c0f5dc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d73d39-0cb4-4484-90a8-34dbbcf31412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e306893-12ae-4840-9179-cbdb6422e44e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fba855-e2c2-4daa-a690-d8022e9bd3aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77997efd-210d-4c5a-afec-2b8de28957d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9174c7fd-0752-4581-8f02-f857398da5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09059190-1672-4812-b3b0-4b43b5266d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced7270f-5c1d-4ffb-8b8d-e7dc3c3a6170",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3200d9-92d7-46e2-9caa-c46985ec5d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eeb900a-df6f-4d6b-ac40-0b025795026e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0c8168-a4d4-4ee9-b1ff-9917528db4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506282de-4cb2-4c2e-b312-b69c2730091b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0f3802-cc99-47a8-8e16-0b3f5fb62caf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d717e2-6c25-44a6-8d20-07ec2409ad24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f864ff17-0d47-4acb-a0e1-573be8c78100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea74b1c-0fb0-4617-b0f5-d45955b626d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc066a4f-e25f-4c13-b971-ceb5975de775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bda102-c3d7-4958-adc2-db2266aac8b0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13322c15-d251-4813-944e-ec2b01421f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7444c073-f5aa-42f2-ae16-5d332590d9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015d3111-3f51-475a-9622-05e189bb5ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff28faf-175f-44fa-8562-fd559d3c0f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db41b9e2-ccbc-4eff-b88c-06ef03b7672e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b7dfab-5444-4e2f-b37c-1dbf4f43396c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf403b8-43df-4ae8-9173-fdaac77256ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4624a58-8fa5-4b63-9f36-d134f391ab95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2384914e-8975-44be-921a-6ad2bfaedf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec3d755-72e6-46da-bf1a-f39a50a3a02e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ca34f3-88e1-42c9-810b-2253063c5393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61e89adc-de8d-40f1-91d4-69db354ecf02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3747f4ac-264a-4fad-8f1b-b4ac31a8333d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc16cb21-03c1-4f17-9701-16ca7e2d289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5973a50-a7f9-47a1-8602-a0c6bde29926",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e338f3dc-300f-42d9-9e3d-dc0b34576685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0b0f10-9f0e-4ef1-a238-d7da8c9062d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde8a313-3ba6-4e29-8497-3c3a26d6152f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467b3b8f-0030-422f-af2c-08fe3d56dc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13eae140-b0d3-4d91-91a6-1f46002167f9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0231f45-00a0-46bc-8210-2602085b00c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd263862-9ed1-42bc-a72e-e577773cf75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2830d86-4136-40d2-8fa5-14c1caaf7855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420238d6-3891-4aad-90e8-f3ba18d1c340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b119269-b9cf-431e-95b8-80adc0c74d6d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f08b5e-2c2b-4044-b9bc-33f25cac20a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef73bb48-fb72-44f5-87f5-4a05f7df6e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61977617-5974-43a0-a268-235bb3380c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d533764-50d5-4251-a1cc-e543978a8c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8ded2a-7559-43b0-9c9a-406a531cbedd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f917330f-71e5-45ed-915c-7b451a8fa8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f732c1-3156-4585-8b9a-b8a816766645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88709da-177d-4f60-b2a4-62fb41aa8d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ea1d63-c4b8-4209-8e7c-5b2ec5d4544c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9538f5-64e2-413b-b47c-aaaacfb74d82",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f67705f-2201-4e4e-9ede-fd676a06c786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d6cb85a-47e1-4a59-bb9a-d521ee7484ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be0944f-f4bb-4576-a19f-10619dd6526a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8835df6a-9c24-47ff-8010-4285e0e79053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd6c38b-6d10-4b88-99f6-05d5853b075a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1fa01d-43ef-4446-8e17-0e0d7390b60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ad3c77-aa07-4b16-854e-498cf65118d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3399d6-ccf3-4ac5-bdbc-716d5dd39d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10398e3a-953a-4aa7-a3a8-9ced86292fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f239f8-dc44-49bb-a1b9-07852dd88fbd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feda4ca-d816-44aa-bd89-b368d8211fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d07fc31e-cee2-42b5-848d-f4ed656ea18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a829dd4-42bb-47e5-9fe3-44fd4722237f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6049fdaf-164e-47bd-b12c-06307a49c3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8452a2f-0d3e-44e8-a6ae-931bc4d90a89",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721b307e-7eb8-49c2-a8d1-558b5e582d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab83657-f9fb-446e-aad3-0a6899a32d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c437831-38d1-486f-a535-da74646cb364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6e705c-ba2e-4afb-b629-f3f11c967114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a6f9b9-96dd-4465-aadb-5a5fd3b07ee2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b9e02d-13c6-40ac-815e-52514326e95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "053cbbb3-781e-4925-80ac-52cb7c7f76ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7df00b-8e58-46fd-bbe8-a312f8ee2521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e730c18-5ac3-4eb1-818f-4145ab82b4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3da429f-585a-42e7-a86d-444cf06c9c70",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7d4de1-3c0e-4179-ad18-b72f91a6c3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1405deb2-2e35-4d01-93d8-87136e59d547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31491d83-6d22-4ad7-958b-475ed4fc2196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1791b61-d4e3-403c-87b4-968813eddb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5cdebd-72b9-4e9b-9e41-725dbf81b6ee",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9989ee1-b6a6-4090-a480-c6a254435d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bee609-2711-4c8d-a86c-23a0972adc1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b25007-e038-4741-9b5e-fc2cc15cd942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee1cebb-7625-4a41-845d-d65290018c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47439ab5-62c6-4db5-ab0c-3a7528f17086",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fddd60-af54-403e-bdab-eb8cf9f5696c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f523f1d-9e2d-4b73-8b20-7c3021ff2e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449904ae-05fd-4a7c-81f4-dcfee76f653a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42392abf-213e-4a8e-a7bb-a70314acdf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a38978-3e60-467d-9e34-be7e220fae2e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b4d853-dc83-4a7d-8a2e-4ad08a856667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2320b85-8390-47b4-b178-25f7e0759f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9573b17-21df-4f7d-8bcd-5cf6c43ec71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3539f63-c6a2-4126-a6a8-a13b94ef5c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ef6f09-2197-48f7-bd51-ac0e5363b32b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a476796b-44cd-4fa7-a334-055a8d0b3f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7373d26-a831-41d6-86aa-9923ca5413b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6693a09-04c4-4c26-b674-76ac67a3169c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9b782e-bc4c-4e39-8d64-fec1033bb892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b96507-8b9d-4253-8587-7830bad746d4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2e1300-f7d6-4a6c-b3b5-bf132829d33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a2f127-0def-484f-9d0a-fd413e9565f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3737e0-67ae-4c11-a509-bb24b197a4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163e9c3d-058d-4c1e-8f15-f4a22d54d390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6461d3-23e6-4eaf-b771-cf4e8ed0db27",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cf6b09-918c-4190-b679-bf8b6783cab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e5a185-5c64-4eb9-86b2-af294c24fd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c064d36c-5e90-4d03-bdeb-110e5351d5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb253c0-3e2a-4aed-829f-1ccd1c22b833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38307038-3f12-4006-9fb9-1fbae6e87271",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dae44a4-b48d-4752-b0cb-23fadc74ac4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb44b9f-712f-4ffc-a7be-29c2d22f90bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead51d2b-14c8-4c05-96a8-bf241bf9b110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8b77f4-cd2d-4a53-b24a-3645491148a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d54f21a-9ef5-4e7b-8839-28ed2a70c02f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eaba589-5fdc-4c59-b159-cd1a438ae78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9084711-fec2-4049-99be-81f507a3c382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca8a4e0-ff42-4460-a000-99f2ff0f9733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bce9cbb-c803-4d8e-ae46-67ab44e7e2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6882bd80-aafe-433e-92aa-b7388b95c876",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee80d44f-4bcb-4c20-902b-71b6db355cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573525ba-6a9f-4b99-ac30-08943cb0803f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e372ee4d-00d9-4cda-bff2-44e6de759a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dabc8d-7baa-41c7-b330-3ca95f0c9233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da5bad1-39ba-4a0d-9b7a-18605c79bd94",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18375f14-6d84-4fcb-90e3-41eadd873867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65ac8cc-a31c-4270-97d7-e87f087eaaed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dffedf-c4be-4f61-9bea-0ab698dc6bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9db1a7-166a-4a1e-bb23-b166587c0c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d23a67e-c6d4-49e8-8175-23fdd810d10c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e4ba14-bf6d-4b9e-ae4c-56bf729bfd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932c0c5b-d280-478f-9c06-dce2b47d5c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894e3730-f6b0-4f7f-b6d7-d02224d9759e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6752186e-aafc-4ad0-b143-1ea8a1189e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f9be5f-4246-4717-8755-e7c83efefef3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b40998-69e3-4933-984e-15e393aba32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb82f60-73a3-43bb-81ad-cb9a0d0b5c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290b49eb-cbb8-4db5-acca-daecab2d4312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3912886d-e5d7-44b4-915c-61909b5ee96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a6684a-5ad2-4a24-8d87-ed66a58b26e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ed4710-c7c5-48a1-834e-1053b43ce30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccd1781-9e23-4a60-9685-32f0e694d7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bef706-6ee7-4298-8476-b7e6c47f32e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8efc04-b406-42b6-a503-de8233f23127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1064fc18-88ff-45c7-8307-00b040a9727b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb90e215-ecd0-4592-b9a3-4eed49bf4c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b96813a-e7b2-4bc3-9a6b-2e0f1cffdafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e35f41-4024-4016-a20e-7159e5b4a0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4caa0c-443b-4549-a45e-cae010c7e2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c93e01-a39a-4a39-b5c4-a4bd57a279eb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793c0b6e-dc76-4702-a334-4b85a95851ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc55a2cc-77e6-4a3a-a693-63af04f0ac4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e9b9d7-5336-4fcb-a5b7-3b3838ba08f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dc673e-f9bf-4f60-b3bb-5df1d9e4b9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c25f38-964c-4644-a2e4-a1a6cb42f7e1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c72966-2799-40fc-8277-b3dc18f77dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723a287d-c310-4e71-a804-c25b57e44c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014a5595-58d6-4cdc-bac6-58bd94e05b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7341c0ce-9fcf-4f41-b06e-2d2f183f6a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bede840-32ef-48ba-b21e-9c3d05eae4eb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b692aad0-8c4a-4d50-80b4-a5331233bfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95438bc4-bdd6-40bd-afe1-baf86c21d6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fad49e-61cb-44da-89a1-7c9caaadbd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca99105f-6116-4a67-a7bb-fc6f23103d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec98d1d-9c03-4ae9-bb28-92bc7c72ecab",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c68684-33d9-4114-9fc5-123504709482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697793e0-c422-4d37-b3bb-2ef16e1a3431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82ccbb4-5a80-4cc6-aad6-9db379035cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc1d843-4234-4fd1-9c2e-e1d398e94af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91047748-c459-40c5-ae0e-cfb29dc978a0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874c3ad8-8394-4756-8256-d0b1a8705e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805586da-95a2-4b18-9e25-3b0f57995ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e078bece-ee07-4d42-b06d-78c1abb74dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58a7927-c477-4ebf-b745-3add5add6e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98a1a1e-1895-4a90-9e6d-aeb72c4a05d3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7662b70a-24ce-4e9e-8d1f-608ca9d2f91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2232a355-6c9d-4b3f-8be0-1ec4a9b9e64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233d6631-f4b5-4660-9cfe-3ad403d49ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de3ed78-f057-43c5-8fc7-6647d7df39f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e3abc8-dc6e-435b-9584-e4bdd80579a1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f9b29c-7163-4cbc-aa37-435e10726f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7e15c7-688c-4a9b-96ba-cb91b520da5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654a35a3-f1a5-4fb8-a9c0-aa81165478c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3145ada-35bf-4d91-94dc-a14a0079a054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a942e407-7a87-48e1-8c73-f4957a7744d0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fa42f7-1b1d-4fb7-8bae-b78b2b0ccb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f197d59-56bf-45fb-8eab-33d87aebdf2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b967bb9-524d-4b8a-a7cf-308c34128a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf00b86-2bc9-4fb2-b34e-fcbe29762eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19203f9-b82e-4981-99d9-11c2ef549da1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bd4012-7596-4fba-8e8c-c97e6acf6b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809f7d8f-491b-46a5-b177-a2e6c2359a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d64037-ce44-4a73-9da6-aa503742be9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23078a2-f8d9-4094-8d31-80219e0932c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848009c3-7ba8-4fed-8d54-a03f52ac2c57",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8163947e-278e-430f-ac1b-744fa0dee0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e5a6bc-921c-487d-8790-50db368c1dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebc0f11-6af1-4590-8915-df11a644e738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcbefc9-956e-4e09-8e45-fb088c55b2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125e3375-e11b-4c01-83bb-cb209ea9eb1f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47033a64-6648-4272-8968-e8015e260473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12db5334-47fd-4127-aa8f-3ebf2ad7e952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b501f100-495c-4bfd-ba95-0661e06e60b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158ffe18-ae86-46f1-ba98-92f7d52dae19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2deaaf-aeeb-4e42-b209-c505eb37fe08",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b70c28-e07e-4bdd-a21a-b68c7e26a141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cb528a-dfe5-46d9-9522-94b0072f2d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f54a3da-4ebf-44ac-aaa5-0a130e45ed92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9e81fd-12d7-447e-8ae8-cca4b8f1351a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd57ba60-7d65-4c5e-a22b-0b341f637173",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64bacae-ab8e-4f54-8358-1b6b146669f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08bac88-6b8c-4b13-a6da-9377f1a44407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0796d553-7aff-4df4-a4a2-ccdb6583372b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6bc5c8-d1ba-42a0-b85a-50fcb3117970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc5593a-de27-4ae9-bdec-56577fea2f26",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2ab3f1-7ecf-45f5-8685-f11be51a8247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae77dda4-0e23-4aa0-9378-0d72f79cda06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb29dd0-2de3-403c-8515-1b646395fe20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d978de-ad03-473f-bb7a-442379e61ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8ccadc-23f1-42d3-9664-4e2366b8cdb3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1835b1-e4dd-4659-836b-005e72d01ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d6374f-5d0c-4922-864b-ff4f41d19274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb51128-5deb-4337-b140-41b9faa4c6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839b4d3a-e48f-4b10-8b53-2adec8926ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45773f7f-ca31-42aa-b036-a517f813968a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb0ba8e-d33e-4fee-8a14-02fd7c83d7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a4f7f4-9f98-4e78-a6d4-199458dd53c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcea69e0-f7e5-4b22-ba2a-459588c9761a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdabd584-0000-4386-ab33-7db7c28e2f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e32c73-22bc-4cd8-a3fb-ed2c5588d2b2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd737eb3-ec23-458d-bcdc-5d300ab37008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4b73d96-cf52-4226-845e-ede091af999b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8675aedc-0292-4bfa-a718-3c448e1b177c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347268fa-d2cb-42b8-88a4-314898fdfb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a95f7e-2c4c-42bf-a6b2-c88cb0e3230c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d07ddae-8825-48ae-af18-19eaa76e8e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1620c5b9-45fd-443d-8132-3db20f23e25d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321220e3-8b82-43ea-9fca-7f42e812df0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e411f5-db30-4778-ac22-c6820e489ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feaa528d-0173-42d1-a11d-dc6aea10ce99",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91a3e5f-e9bd-447a-9282-35efb4ab6957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "397586cc-dc73-4a27-8272-2489b785e9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80cc35e-10c5-4f96-ac60-4bd3de509d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed423ed3-2b80-48dd-8a16-8b9de774a5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf90cb9-9b2e-47ee-9f45-49df67da5e6d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c00ac-f25d-4eeb-9a5f-67dde89e6021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d4ad18f-7b2b-451c-bad5-9f33cb775f9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef801c5c-694f-4b9b-9a93-5ee3461378bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf05480-79e5-48fd-a2f3-c50505842e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46a1ab6-872b-4e62-bd0d-62eff538b58a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c9431c-9635-4661-a89c-93346069e578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cd6be82-fb0c-44b6-a1ab-b8188c05a955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f14f36-0336-476a-a9cd-8e2f6276c6dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c1cfaa-9fde-461a-b289-4da0dad2f87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf9d803-da9e-4f03-99e7-e17d6c8fd5cc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460d1813-9055-4d4e-84ca-d585b50127a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77c3ca5c-849a-482f-a012-509f24bc6e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b28b6b0-9b62-4af2-9638-0367481c5d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93025f1-4d21-481c-8e7b-32b7aadbcb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb7651c-ef29-47ab-b6b1-d9127863d96b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d3c999-3f28-45b3-bf1d-954cdcccccb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d95462-86f4-46ed-b94b-3432fa10c0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c7bcac-db16-49a1-95ee-7c112f650ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5bf395-c63f-4586-a449-68f6a1add690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4ba071-8c3a-4e3e-8c8d-94c9aa0ad89e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4a197f-105b-44db-a793-bf67622046f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3b749d-6f2e-4baf-ace3-59d0440630a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa144576-f8fe-43e0-a427-3d0cf1c043d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bffcde9-3aa9-46b0-bd06-f544bdf0cbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9939815-e838-4bdb-8221-fbd2cf13765b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83357d19-5fe9-43c0-9e2a-2da197c60bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06b6c7dc-1767-43b3-a265-05518cff93fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd99cf63-35c1-4ddc-882c-8b5a16604570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25503080-334c-4ee3-8aee-8337c83c184f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cb6c53-a9fe-49ec-a052-99d186870cec",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8d4855-c8d2-4832-a48b-c2647bcec9ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764da058-c381-4ea8-bd1f-5a3fce3b6fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf28d3f-e29f-4b95-a5b6-e8164d7acf97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8146ddfc-d27a-451e-8cf1-1fc45ee2a753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f654c9c7-017b-4269-b7ed-a688190a5983",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f7db35-1e18-45fd-83bb-c2ceb90b44af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b654d3ff-ece6-49dd-8374-4bd83c45fbb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652469e9-1a25-4175-9569-f66346118359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463f7b6f-b222-48f5-bf5c-f018bd2fdc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab4939f-477d-4e8f-9a16-8665b4fd4ce1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b5170f-2fd9-4730-bf59-f72e264ae641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc26d30a-4bb4-42b7-8989-5dd63a1bd6c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3f7f57-1e3a-4de8-a5ef-f8369115734f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c44898-cab9-4ff6-ae53-afdd5cfa13bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d68ee-592c-4847-b4f9-ad97057bb114",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48304b4-c196-4c03-8830-9069418d7213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc42e122-8ab5-41eb-899d-43152a379c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be96d62e-4df0-435f-bc5f-f5c1dc9f0b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ca0234-a7d0-4ce7-96e0-a280646b2ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5345003f-2904-457c-b1e7-f017087835a5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deec183-7004-4148-8459-a079ec109333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756482c1-578a-4256-8300-8f3b06b11e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8831504b-2a5e-48a1-9c73-e42b26487bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ac2738-8aa1-4b35-8e93-aa233fd7a862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81484e5-72c8-4a91-b01a-26162f345907",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868d3e70-46be-4e85-9eed-84f9e7f18497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1df46b7-17cd-4362-bd33-1f8338d6e642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befb94b7-8898-4b9f-85f1-a360ac6d0977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5fe085-d190-4402-8401-a55938317d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d00be2-57ac-4e87-96fd-dbfdf57d9675",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9717463e-e5e9-4b30-ba4a-a5c0e2402616",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b212034-a475-4e65-a944-62a4b93776c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce564109-8092-458f-ac14-80bfd3b91f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b37aacd-1f59-46a9-991a-f1498c4f233f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d88df3-83f2-4565-9303-6241f7a486e3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220b64c8-8f10-493c-a2e4-0dcb8664eef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce09531-8472-47e0-ad8c-ddf750a0dec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e446e412-1956-4b78-a970-5d3cdc1cd770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b468aad5-3c33-4e5d-8fc6-0552ccc5f5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0628864-89af-4ad2-bd60-f2abfda269cf",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb57d173-bcc8-4d1f-b46e-4df02c3b091f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f2acc2e-5f9b-4185-8b6d-defc61ae8e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8980737f-2bef-4d4f-8488-d2cf11ab72b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc46823-0e10-499d-9505-f0e1ec8fdbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fb665d-cb18-4e14-b5fc-20d5d299a6d4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71c48e8-1852-493b-8e8e-de275369aa04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29858c18-420a-4ae5-95b7-1696c9c28337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc1fd28-82c1-43d4-96ac-2873404d43cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4464466-ee9b-4f43-9a8e-bc8c13a04863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77568c81-2f61-44a9-8f1a-1e6b18ef15ca",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3516f410-ec7d-4477-abec-34aa4680d574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a61d791-fe5b-4b46-ba3f-035c15c8e936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64df1c2-43f2-48d1-97e0-4dd256864843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a897bd56-8364-4002-8296-8617cef12e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634a9e47-f771-4e20-a537-45e2389045ee",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b71713c-7c46-47bf-b1ef-d98c0a0dd6f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abc3bad2-e294-49f7-a0a4-a77d54d3fdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b78d43-78fd-4c99-b7a4-cf19b8232e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad091dc-d584-4bb8-bfdd-d70f99eec64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7c0e20-3041-4127-84a8-7d0f6a2b13c1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a55ecf4-0b47-48e2-9d53-1eecf4c594ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830df278-e72d-400b-8230-dd6fc113e4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786ac12e-2def-4a75-a76c-ef45eafccf32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b737573d-6db8-49e5-a361-f7f5d9312d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1856de50-0852-4a81-87be-15e825552e6c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716aae6e-d692-4200-94fe-b83a2939868e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d25140-5771-49a6-acc3-87ec8992450c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62008d35-e2da-40ec-a251-b6c2a34157d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82a1e1b8-adfd-4461-917a-af351e603b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14f0b41-d5a5-42d5-9a24-6bc603df17d5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff62334-74aa-4c68-bb05-5bd0385ea70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70427452-6b22-4755-8104-30cf874b9093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f6a137-2186-4f5e-b532-7a9611aecb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74617693-c02e-47ba-89ad-92b6a09e1ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27872865-bfb3-48da-9cc7-a05390ca3a94",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa8d9f0-3b80-4d40-bf07-01326c3a89a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "791b7e80-2401-406e-a80e-ae6be85cafc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69701db1-502a-4963-aae5-75e301f1ae04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0764ff-c7c5-4202-8400-8d1d5b4027e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564dce7f-f2f2-4ade-86b2-49d3335a8538",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058fbfb6-6e0a-4c60-89dc-05283ac627a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e969668-bda5-4837-8612-20da3d5ed06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff45825-32c8-4979-ae40-b11de1edca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49067bce-71dd-4da5-97d1-0ace9076fb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60090009-e252-49da-a511-7cb14a485025",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f416a-aa2c-4a2d-8c48-6cda5ac4c333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee582955-a9d8-4feb-9b98-ac33a9b345ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd101eb2-377b-4db0-ae94-6d34b29c1e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18749f1-d434-432b-a211-b7b55d7c0006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cbf994-d5e5-4ea5-9de3-113f64a23579",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d47028f-6e5a-4bfa-a7c7-86aeb2bc67c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6eeb7f-9455-4bc2-9afb-f3c8139cc0d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2e1880-b465-427b-8a90-a496962999cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b91bd5-214c-4010-a5e0-a620182a7166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b4a262-a779-49b3-a9d7-98b69de9205f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2ecea5-a5d6-4fe3-b1e6-0af2fcdb601d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b466228-be34-4acc-8f71-1553487e2507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1b1473-c150-4d0b-b6b8-d5a369eecfd8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b4ca9f-2162-4297-a958-71fab412740e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ad0a52-fdb7-4576-94b3-5862cc62eb89",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c344b8a-b54c-4ea9-9505-a7ef24f12015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f3db8df-b11b-4f28-9d15-61e58cb80d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a6aef3-18b7-4830-9f6b-7f5e7bd8b024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0b825c-b653-4ce1-b098-0a005d467001"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81e4d983-f529-426b-9890-7ca630e4b5ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2e07bc8-3814-46fc-8932-18c2fcf32d53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74747949-db4a-432f-9cad-b46d53cf5131",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30d7ab0e-293c-4c44-8a7b-ee56bd88dea2"
                    }
                  }
                ]
              },
              {
                "id": "c138844e-b807-4567-aaff-4c261eb43048",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d48247b-4619-4905-b72f-e7ee1febdf58",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8405df3d-3944-4c32-b1f7-737e356609be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d10b41c2-b83b-4ce2-8ea1-91cd887615ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cda5864-51a1-4f98-ac38-b888b5c74814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c9a4e4d-2b91-4719-8fbf-48916d2ff0d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3452414d-a947-4386-a0e5-f3bfd1bf5d2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9b6c540-1fda-4993-ba9d-e2d2fd2d17ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c8e6fa1-e6df-420a-898d-eaaa7bf57ea5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffdb67db-1751-44ef-a8ab-b9c5ae2e9479"
                    }
                  }
                ]
              },
              {
                "id": "aab0d5ef-728a-4e61-ae30-382a7df4b82e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4bd69d8c-a5fe-42c9-b3c4-ae22c3e80738",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ff6111-4218-4672-87a6-f38e9cd35e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "745abb5e-c37b-4cad-a3cf-34c4e3e0c0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a86cd1b-e15f-4387-99d1-f70ad1977269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da1dfe7-0c98-4e3c-a82c-0986c21a442a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "62b6a89e-bad9-40ec-a299-06ae4ac5c0e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1f66b49-c240-4dec-8e1f-5679c0da2e85",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b14ed2c4-7c42-483f-8106-607fa0ca37da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ddbddaf4-09a2-4e44-b9d0-476b1905cc58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ff1fc08-7b59-4bd6-979d-f10771aba612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bec98d18-7b0e-4499-8dd6-7e5f84837a0a"
                    }
                  }
                ]
              },
              {
                "id": "2bde0240-fd5f-4ecf-82c6-b2d7bc0cfef5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df329a91-7391-4bc3-bf33-23c89b7dd087",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7c2a87b4-b1fd-423a-9b53-833010fa9f2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba6cc1d4-26f9-4833-8e21-1572f63da3cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4bb49f6-8aa5-48c3-9557-7f39832eb37f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aab2dc2d-8e3c-4b97-8c31-e3e6bc6b74e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d399b05b-5d74-47b7-bebe-beccf4b4a047"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60dcbd6e-e4e8-40ed-8ee1-f39efc4338af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33677ae2-1385-4c99-8154-ea275af05445"
            }
          }
        ]
      },
      {
        "id": "204b8977-a290-409c-922a-c29151abe822",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a8737bf1-3b85-4f89-a915-2725d9772905",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6de55a64-a4ae-4b4c-8718-f6f7c7676601",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "437226ee-bc8a-450d-ac84-b8c55637eb38",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0f0279-b8ca-4765-889a-d9ae5364715d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fc9782fe-e86e-47ec-80fc-e1cdaf9d4c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48165ed5-a071-47a8-8efb-3fc5e4c4ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "633f29ff-19c0-463e-a691-425d94733d9d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "099c2282-6b7a-4e79-962e-67ee6b0f4e8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "816ba8f9-12ca-4b99-a7f3-92db22315f6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4b04f36-4013-440e-adfb-ac23c7c44403",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28eee0c8-b0ce-4634-b25f-cbeb82dc70e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c32bcb41-d925-45dd-9eda-73cd2e924287",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2c37a12a-7eec-43f5-a5f8-81dba5ba447f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3477e136-7d58-447d-ab97-983947045b45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d84f50ce-d7cf-4f9f-ad9c-b8aab52c6296"
            }
          }
        ]
      },
      {
        "id": "38d1c7fd-facb-4a79-ad88-da691975ebab",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "293b9280-0b3e-4cb9-aa00-097e135db826",
            "name": "Negative Testing",
            "item": [
              {
                "id": "939e5255-f67d-471f-a75d-f89ce06c9399",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be24ea9a-155f-442d-a7ad-7a83e71fcfb2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc80d332-931c-48f6-b555-17a956696035",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85b2438e-7f51-4948-983b-b7658ebedc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ed444f-a69d-4e34-b586-68978af4e767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9728f66-ab6a-4d1c-b1dd-30713fe6b7c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce314833-64b3-4130-917a-99e1ee396139",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a16da61a-b7c9-445e-a265-6ca1775cd782"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ceaf583a-f7c2-413c-b721-3b74405aa587",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a352bb8f-a0f7-48c1-9ae1-9d5044c0713f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34981789-5ca4-4e44-a1f0-97431b83a416",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0bb5e803-8e51-4d16-86ff-26dd12fb9cc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee390cd3-4f4d-44f8-8a62-62f713c76ad2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "917ba306-f446-4e96-8914-cff4c3f2168f"
            }
          }
        ]
      },
      {
        "id": "b2319d59-256f-45eb-a336-5c784201fba1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "343359d5-649a-4253-8535-5bbb41f4dd40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb700391-a61b-4087-8555-a3f1a10fc38d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "50c1a4b9-7ede-4b94-a9b9-2f2dfc335df8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0574a7dd-334a-4f12-bba0-6ae9f8db388e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23c2f147-0f9c-4807-8d72-970fcbeedc4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7756b419-7d7f-441c-ba7d-e5dd7527d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4392c8c7-1abf-4a8c-bcd0-c03759b8e698"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a34f5611-688d-40ee-b198-10a0eb761520",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64e6c13d-4c66-47f7-b9e9-6fa307b25c67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4552c677-78df-4e88-8fcc-df292439812e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76932f8d-60fc-4fb8-8dc1-ead1ce86a462"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "190c5612-955e-4d84-aa9a-c5e34c645c70",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c1a33b5c-b702-4fa7-a86a-4e4d30fae96b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f1a0090-9d8f-4139-9562-7ea69f42124e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35ab5580-dee5-4aab-b6e1-54cd009f07fe"
            }
          }
        ]
      },
      {
        "id": "132b4a8f-8522-4fdd-a036-666f92af6c84",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bdf41134-49a0-462c-bbb0-72a41275ff23",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc8345c1-386f-4132-ad64-b771e7c734f7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "910dc026-1232-4476-9919-a30b3d90674c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f07c149-3e4c-4133-8703-d88dc9d3590b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05be5b4a-733e-415e-be83-2c89ac6edb6d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 119.68771929824561,
      "responseMin": 5,
      "responseMax": 692,
      "responseSd": 74.36527219632471,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705883901560,
      "completed": 1705883944921
    },
    "executions": [
      {
        "id": "9aced463-ff22-4a83-829e-4f741433fc07",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5d831cef-ab77-4e85-8347-77f7324d74e6",
          "httpRequestId": "b6eff426-495b-498a-8875-55e0c0633393"
        },
        "item": {
          "id": "9aced463-ff22-4a83-829e-4f741433fc07",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "acba4246-6ad2-4477-951b-edb9ca6a64d5",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "a63adbc4-7011-49c0-a9f3-e9e27f53cf21",
        "cursor": {
          "ref": "d7b3d0f4-3de8-40af-833b-f5a8436a6648",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "74cf0ade-8ee5-4cdc-8117-bbe815e25aaf"
        },
        "item": {
          "id": "a63adbc4-7011-49c0-a9f3-e9e27f53cf21",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ea0be416-aeb3-4395-8ed4-9e617261d320",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "ffad9850-9bbf-4a06-90fe-2721bb147534",
        "cursor": {
          "ref": "93382ea5-5132-4fb1-86ac-99df421e010e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "21704b34-a77c-4616-82a1-55f78c623590"
        },
        "item": {
          "id": "ffad9850-9bbf-4a06-90fe-2721bb147534",
          "name": "did_json"
        },
        "response": {
          "id": "8d5c801f-9dca-4d16-a00b-12bad6b7fb79",
          "status": "OK",
          "code": 200,
          "responseTime": 692,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d81618-8fff-4368-ae84-8c7d811bd408",
        "cursor": {
          "ref": "e0dc2b73-f596-42cc-afd6-9d983811ef99",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70577ee5-142e-4fee-b925-e5546d3ec840"
        },
        "item": {
          "id": "76d81618-8fff-4368-ae84-8c7d811bd408",
          "name": "did:invalid"
        },
        "response": {
          "id": "af6e5dc3-46be-4dc3-ad9f-02e2e9ac1c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d81618-8fff-4368-ae84-8c7d811bd408",
        "cursor": {
          "ref": "e0dc2b73-f596-42cc-afd6-9d983811ef99",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70577ee5-142e-4fee-b925-e5546d3ec840"
        },
        "item": {
          "id": "76d81618-8fff-4368-ae84-8c7d811bd408",
          "name": "did:invalid"
        },
        "response": {
          "id": "af6e5dc3-46be-4dc3-ad9f-02e2e9ac1c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae548d4f-261a-449a-8a1b-8f918cb6e563",
        "cursor": {
          "ref": "e6d24b60-699f-44bf-8942-a49e3a7003d6",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "94ecdb20-1519-4041-a022-1e47f9a90abd"
        },
        "item": {
          "id": "ae548d4f-261a-449a-8a1b-8f918cb6e563",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "24fd6c50-42be-4e05-9771-b125cb9cd6e7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8544bccc-22da-413d-90b9-521df1ba196c",
        "cursor": {
          "ref": "520e3d54-01e1-4d2b-b315-7257d4ff46ad",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7c572ef8-38e3-48da-bd15-ee83a6805033"
        },
        "item": {
          "id": "8544bccc-22da-413d-90b9-521df1ba196c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "69718bc0-6da0-4f28-ac80-c51959165044",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500cf3f0-2ea5-4f09-b9d3-6c8b2d6dde1d",
        "cursor": {
          "ref": "cdfdae68-5501-4083-bcb2-24377744e3a9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0359c947-04d9-434e-82c2-bc0fbbdfabaf"
        },
        "item": {
          "id": "500cf3f0-2ea5-4f09-b9d3-6c8b2d6dde1d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fd7ed047-d462-4e78-8174-34b3998edd6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8d64e3-c44b-4f2d-84ef-b7e6076e6ca3",
        "cursor": {
          "ref": "473b6007-e3e9-460c-b16c-f711eb787510",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "106fe8c8-f898-4789-af79-5dac091bf8fc"
        },
        "item": {
          "id": "4c8d64e3-c44b-4f2d-84ef-b7e6076e6ca3",
          "name": "identifiers"
        },
        "response": {
          "id": "e1c11d58-1aca-4509-affb-52f074c5a134",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7706da87-6fc4-4dbb-893e-2404b77eb910",
        "cursor": {
          "ref": "82d06d89-5bb1-4b08-9b7b-8f72aed2e8ce",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c1eba915-656b-493e-b75a-70cb41787a48"
        },
        "item": {
          "id": "7706da87-6fc4-4dbb-893e-2404b77eb910",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b23e30ac-fe16-45be-b056-0b048b85cf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85797a7d-1746-4de7-967f-edbea9e14f1e",
        "cursor": {
          "ref": "6e26eca3-fea7-424c-bfcd-9604db36a9fa",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3e8d304a-b165-4296-b0c4-05052bad6ef6"
        },
        "item": {
          "id": "85797a7d-1746-4de7-967f-edbea9e14f1e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9554d943-40e8-40cf-8823-b74b771c5915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a381e1a6-fce6-4d9d-8ab0-447dc75e80e3",
        "cursor": {
          "ref": "ff3753b8-98ab-4559-809a-43ef989f6f40",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26ed844f-e634-4473-8831-3c1ec186042a"
        },
        "item": {
          "id": "a381e1a6-fce6-4d9d-8ab0-447dc75e80e3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1af4c028-896e-42a3-8bc9-036ec4a75c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50c0588-5644-4383-81b4-a9db9323b68f",
        "cursor": {
          "ref": "c3ebef7d-ddde-48b2-823a-78b381c537f3",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c10ea908-68e7-4ffe-b6bf-dd8b1c7141ba"
        },
        "item": {
          "id": "b50c0588-5644-4383-81b4-a9db9323b68f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2138385c-17df-4f24-a34d-76ae760ed685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ef48cf-7e59-4f4b-9d8f-56071b32912d",
        "cursor": {
          "ref": "90603ce5-bcac-487b-aa2d-b1155f0b3108",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ecf21532-a489-49c7-bc99-9807fc00c021"
        },
        "item": {
          "id": "46ef48cf-7e59-4f4b-9d8f-56071b32912d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "787555db-8b82-4605-a211-ee55d42b5174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3164ae1d-cfa4-41ea-944d-6cb6a7a024dd",
        "cursor": {
          "ref": "14de14a1-c42a-4a41-bf0a-f786b5b2f020",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c35b6360-b808-44ed-94d5-326bdea77ece"
        },
        "item": {
          "id": "3164ae1d-cfa4-41ea-944d-6cb6a7a024dd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c79cc3be-6bf8-4c98-b251-fc0359be5e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b69f8ce-bb64-4070-8883-9b772a6da9ee",
        "cursor": {
          "ref": "4d9163dd-ada7-49f1-b25b-1bc430f86182",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "912eda99-297b-4b6c-af9c-ff16f696a0d3"
        },
        "item": {
          "id": "6b69f8ce-bb64-4070-8883-9b772a6da9ee",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a8838ecc-e4fb-40e9-928f-82a26fb5a0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e414495-c758-454c-aaaa-b7baef4a96d7",
        "cursor": {
          "ref": "0cde61d8-1a4b-449b-be8e-80c8ea1e8481",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a20e5b1b-187a-4e5a-8e0e-6f3ab4538307"
        },
        "item": {
          "id": "3e414495-c758-454c-aaaa-b7baef4a96d7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0e7e00f6-34c0-4c6b-a1e9-7d13e565cc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1c9ac5-7633-40a1-a415-4f4a41d93f72",
        "cursor": {
          "ref": "4b10c447-81de-4d5e-b30b-db1131c4c273",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "af6f5c52-2d91-4191-8600-89e45975b430"
        },
        "item": {
          "id": "ec1c9ac5-7633-40a1-a415-4f4a41d93f72",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b51e858a-61b3-4f9d-84a3-28812a65479b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4270b6-1a82-49c5-9f8a-4b92dd9fd205",
        "cursor": {
          "ref": "4e2d2cb3-2137-4d06-afd4-384a0e5875e4",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f917d5f4-02a6-480f-ab10-5abc6b8e915a"
        },
        "item": {
          "id": "ec4270b6-1a82-49c5-9f8a-4b92dd9fd205",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8063843f-a34b-4dec-9cdc-5cde92d814b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4d4e30-dd93-427f-bf4c-7d669fef61f5",
        "cursor": {
          "ref": "31dd95a2-36e3-40c7-b971-a9d2ea5a7442",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3504c03a-274e-43eb-a641-90298eefb2f4"
        },
        "item": {
          "id": "af4d4e30-dd93-427f-bf4c-7d669fef61f5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a5a262b6-7f12-4140-a951-9f6fc91ba3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58ddedd-9107-42ef-92f6-fcdc0262f00d",
        "cursor": {
          "ref": "19886dd2-ebd1-4c18-bccf-abac5d2014cb",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cfe52bdb-d065-472e-9638-08e972027d86"
        },
        "item": {
          "id": "b58ddedd-9107-42ef-92f6-fcdc0262f00d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5901325e-2b1a-4b4e-9b6c-e5237b667592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d881dd-93e6-4be5-96d6-0bb64209bcb4",
        "cursor": {
          "ref": "8419bd82-a6f4-41a8-ab90-9b96f0f73790",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c2898d02-e848-4867-84ad-fd47a84ce3dd"
        },
        "item": {
          "id": "f8d881dd-93e6-4be5-96d6-0bb64209bcb4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "35ecc7d5-2c15-4cde-8cfa-635d39552040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecef1c51-5df8-42f0-8438-ac5cf226a2e1",
        "cursor": {
          "ref": "f54e8949-4aba-4aaf-bfe4-46064a8bc5cd",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "00a09807-7e3a-472f-84c0-05e3bec64761"
        },
        "item": {
          "id": "ecef1c51-5df8-42f0-8438-ac5cf226a2e1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "400d2bef-74b5-4e1c-a535-db695de6a2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297e1e69-6dba-41ab-8126-2a00620a233d",
        "cursor": {
          "ref": "bec90123-dc70-4f97-ad28-be822b4595bd",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c79088f-f8df-4ead-ae9b-a10541f5ec6e"
        },
        "item": {
          "id": "297e1e69-6dba-41ab-8126-2a00620a233d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cfbfdcc6-2dcd-488a-8832-7415f91b5b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bdd492-c2ab-4909-92bf-3ff0d46a1b9b",
        "cursor": {
          "ref": "cdaae6b5-3405-4c38-86ad-c75a091350e3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b24617e6-6716-4ee7-aca0-5df259397646"
        },
        "item": {
          "id": "03bdd492-c2ab-4909-92bf-3ff0d46a1b9b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3aec6b96-c284-4458-a682-801d47a2a176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a810800-44c0-4776-b77e-0cce1e839a00",
        "cursor": {
          "ref": "78390f85-556e-4d27-b358-1bfc3ee89897",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6f567c31-a5f1-4938-ad9b-2701aa67eb57"
        },
        "item": {
          "id": "0a810800-44c0-4776-b77e-0cce1e839a00",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ecd2b221-6fd3-425e-b4e4-1eecac9dd697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fab98c1-5f30-40a1-85ea-c6bdc7b72d3c",
        "cursor": {
          "ref": "ca7ca77a-3e05-4f95-9233-3cb95cf0aff8",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3aa0196f-bf4b-4704-aafb-86c098d0da42"
        },
        "item": {
          "id": "4fab98c1-5f30-40a1-85ea-c6bdc7b72d3c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "86dccc7c-20b2-4c3f-b3dd-d8f538a459ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed81bf5b-e8c2-454f-8aed-b37fde076499",
        "cursor": {
          "ref": "cd5c0e89-5f62-4a8a-a891-c2d1214c757f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ea222387-e6eb-4d4e-bc23-9c2e3b66def8"
        },
        "item": {
          "id": "ed81bf5b-e8c2-454f-8aed-b37fde076499",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fe928a91-5bf1-43ff-8bbd-a7df237f0e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c85237a-7cad-41b0-b8ca-d4c8ee871ceb",
        "cursor": {
          "ref": "ffb4b056-9b53-4138-b42d-2b88577bdbd3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b2bd0247-1c4f-4952-a8c4-c11237f6ab07"
        },
        "item": {
          "id": "0c85237a-7cad-41b0-b8ca-d4c8ee871ceb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3eccd135-9a5d-456d-8991-1457580cc9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc4d5f2-b08c-4222-9918-af426efc1255",
        "cursor": {
          "ref": "68768f34-cfc4-4d8b-ac2d-f0a54894ca49",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a5cfef21-c226-4a37-95df-4cf4ab1d58f9"
        },
        "item": {
          "id": "1cc4d5f2-b08c-4222-9918-af426efc1255",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "070c6fc5-c0b1-4408-9bc7-36db3153f70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdbdaeb-0302-4023-96b6-b98adab0c435",
        "cursor": {
          "ref": "baa4bb2f-a3bc-4603-bbb5-4185a747eccf",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0cc4c8cc-0a8f-4800-935d-b22e8c1a9a08"
        },
        "item": {
          "id": "3cdbdaeb-0302-4023-96b6-b98adab0c435",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9572b5e1-3d22-444b-8bfe-4a232b05988b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cfdc63-f7b8-4463-9278-d7b6856ef74a",
        "cursor": {
          "ref": "91802c44-8e23-470c-bb84-84ac39f08e03",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cafcac48-2398-465a-a61d-6bf9c94cf887"
        },
        "item": {
          "id": "50cfdc63-f7b8-4463-9278-d7b6856ef74a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b4189079-efe9-4cfd-ba4a-8c6fa1e9a79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b567b6cd-409a-49a0-ae0a-3754c466393c",
        "cursor": {
          "ref": "30ef2a8c-da3c-4666-b7c9-527b967d51eb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4b06c569-8d08-415e-a129-568d1469d661"
        },
        "item": {
          "id": "b567b6cd-409a-49a0-ae0a-3754c466393c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2908d8ee-ed51-42d4-819e-31c45fbb2608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68cb871-c70a-4b73-a30f-957c9bbafbac",
        "cursor": {
          "ref": "007c9286-d491-42a9-83cc-fd0df9d8f369",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "83e5fd3d-e201-4f66-87b9-aabe0187055d"
        },
        "item": {
          "id": "e68cb871-c70a-4b73-a30f-957c9bbafbac",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "893745c0-db5f-414a-a331-c6c30dba3257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19ef363-8ede-47b7-a714-a86c5a5d8f69",
        "cursor": {
          "ref": "aa5721f9-259f-4023-984c-97d410eb6c03",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "abe3104b-ea5e-4b4d-9edb-e58105ebbd3c"
        },
        "item": {
          "id": "b19ef363-8ede-47b7-a714-a86c5a5d8f69",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "10f63d22-afea-429c-ad2b-4242dcfd6491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02d743b-9b61-4602-a8b9-3ae4a8b22c0c",
        "cursor": {
          "ref": "73815d1f-399a-499e-9340-50bf6d3668d6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5bbde807-a9ea-4fd3-952a-b19b35411021"
        },
        "item": {
          "id": "d02d743b-9b61-4602-a8b9-3ae4a8b22c0c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b3324f71-0533-444c-b4f2-0f966bc18b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b2cc7f-6df8-44e8-b128-a54457cce9b2",
        "cursor": {
          "ref": "2e4d3bb2-af9d-4a2d-8f3d-11c0ca9b2b8d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "873ed100-e229-4335-a53a-7c2e0ff609fe"
        },
        "item": {
          "id": "87b2cc7f-6df8-44e8-b128-a54457cce9b2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "12bae8ff-d967-4c75-a305-5b780daae725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87f8386-5a59-43d6-bc7b-f59a014bc535",
        "cursor": {
          "ref": "5a7436ee-b325-4707-b0d1-0d3edf943584",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "76a0ef67-936c-4bfa-a4e9-e5bbf74568cf"
        },
        "item": {
          "id": "a87f8386-5a59-43d6-bc7b-f59a014bc535",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f13d73b8-0453-4eee-b9bc-434399b88054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a072abf7-15a3-4329-856d-0b71015a2eb1",
        "cursor": {
          "ref": "c889b1bd-002f-41fd-879c-599cf6d884cd",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "618151d7-02c6-40ee-9c1c-6e8d680fb5b8"
        },
        "item": {
          "id": "a072abf7-15a3-4329-856d-0b71015a2eb1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "be730339-c1f0-4081-9be0-adf3bddee0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeb9d78-b68c-45ae-b94f-faea64626452",
        "cursor": {
          "ref": "dccf4b50-7681-400c-9b6c-1a4ebcaf8a30",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0ee45c7-4dd9-4f55-be7a-885832e9d455"
        },
        "item": {
          "id": "faeb9d78-b68c-45ae-b94f-faea64626452",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "363e9341-2cf3-44d7-8aa2-fdd1e4910956",
          "status": "Created",
          "code": 201,
          "responseTime": 576,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d01f84ab-83e8-4a5e-8d0b-2fcc5243c184",
        "cursor": {
          "ref": "aa156ccf-78c6-47cb-96ec-29dd76f8ac6b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a90a0886-d634-4834-a859-e3f3c4fd739b"
        },
        "item": {
          "id": "d01f84ab-83e8-4a5e-8d0b-2fcc5243c184",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "577b770a-1624-4d53-a9ae-237cf26e6c07",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6bfd4990-bc45-44f7-b51d-4e0d6f6ecaf9",
        "cursor": {
          "ref": "e7d545c2-354a-419c-b5c6-d9a39626eb16",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d9e8a9f9-4bd4-4d62-b95e-56829cafef6d"
        },
        "item": {
          "id": "6bfd4990-bc45-44f7-b51d-4e0d6f6ecaf9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "18b511d4-7874-47de-bb9b-17b47df7e2e0",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8a3ce77b-08de-4ae5-818e-a3cdfcec462b",
        "cursor": {
          "ref": "ae06194d-8f5d-4d6d-a13e-e3950be97326",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b2bc6f6a-1610-4a69-b6e0-784e32126014"
        },
        "item": {
          "id": "8a3ce77b-08de-4ae5-818e-a3cdfcec462b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c58b5016-527d-4237-86d3-a7f6d41ab74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e963f331-1a9f-49dd-b569-ed65097098a2",
        "cursor": {
          "ref": "c7f6d53f-9235-41f9-905c-441a2587b19d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6bdda193-7258-4ab7-9836-4d4393f811b4"
        },
        "item": {
          "id": "e963f331-1a9f-49dd-b569-ed65097098a2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b1d978c-e95f-435c-91cf-c78659ee4b14",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "857d93b7-cb7c-465a-989f-2eec59eee357",
        "cursor": {
          "ref": "7879db14-d293-441f-92eb-b104d274ee8d",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "01e891c1-eab4-4420-9af4-cff22cccd500"
        },
        "item": {
          "id": "857d93b7-cb7c-465a-989f-2eec59eee357",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "06ca759f-5c5e-4d0f-b897-df18ea0088c9",
          "status": "Created",
          "code": 201,
          "responseTime": 414,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cbcafb5d-a433-45fc-a43d-5b3fc1267492",
        "cursor": {
          "ref": "b9036d74-0a66-4525-947d-267beff58239",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf64c540-adc7-45b3-84d6-832a81e8371d"
        },
        "item": {
          "id": "cbcafb5d-a433-45fc-a43d-5b3fc1267492",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63f30249-b66f-47be-9699-716afb4e0309",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8ed74e43-0f66-445d-ba47-91545f867289",
        "cursor": {
          "ref": "4a906547-f7b6-4219-8cf9-cdbfe59441e5",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "232c8bea-62d1-4583-9016-9a2db1b1e543"
        },
        "item": {
          "id": "8ed74e43-0f66-445d-ba47-91545f867289",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "50c60969-fc39-4211-8b0d-d70f9035022a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0e2a02f8-4bfa-43e7-a4dc-134b829e283d",
        "cursor": {
          "ref": "3cc0366b-647d-4443-88a5-9bf467a041db",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "95e7527c-9cd1-4915-8e01-6e08acbf401f"
        },
        "item": {
          "id": "0e2a02f8-4bfa-43e7-a4dc-134b829e283d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90c39736-d006-4ce6-8a46-c360f1fb6f20",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "99824289-49ea-4d11-8658-8d4a2c44a133",
        "cursor": {
          "ref": "4292df8e-7607-4e02-8eda-fc7c458e0489",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0e36f115-2140-4dbc-b286-c3ad2759c085"
        },
        "item": {
          "id": "99824289-49ea-4d11-8658-8d4a2c44a133",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "456eca43-b3ba-4e73-a371-e51ad3a46459",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1f011921-27b0-4e84-999f-e3f85a4f9ae5",
        "cursor": {
          "ref": "77bdfd14-7eb7-4df3-8f70-816936cb6113",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "391c135e-c0f1-4112-acc8-32b85a78ec4b"
        },
        "item": {
          "id": "1f011921-27b0-4e84-999f-e3f85a4f9ae5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d162970a-54de-4d78-93a7-0c4b2131effd",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a5a4749f-f1f8-4da8-b562-80d3f649115d",
        "cursor": {
          "ref": "d43681fe-fa8c-4350-a1e7-a2fce876cae3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3beee7f1-bf39-4cf1-a9d3-7b071518a2ef"
        },
        "item": {
          "id": "a5a4749f-f1f8-4da8-b562-80d3f649115d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b2298919-6faf-4c40-a364-c360487ba4f8",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1ba56c8b-6836-4a08-b3cc-3958b70d85ec",
        "cursor": {
          "ref": "2842a05b-c0a0-4f92-bfda-0882a77de9a5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4b184428-d72d-4657-919f-c0bdae233aa2"
        },
        "item": {
          "id": "1ba56c8b-6836-4a08-b3cc-3958b70d85ec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "782774d2-89b0-4790-a736-9075a0cfab59",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "19aef6e9-69cb-47c7-8b12-b2b108acfce4",
        "cursor": {
          "ref": "9fd4cba1-e707-4e34-a224-55e34c82d649",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "970b2117-62c6-4aee-89f8-002de5e50ea5"
        },
        "item": {
          "id": "19aef6e9-69cb-47c7-8b12-b2b108acfce4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e0244677-7123-4824-9a8a-6b112fc899e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bd169e-3514-434a-8053-49befc751bd4",
        "cursor": {
          "ref": "b6ea20c4-1b79-45fa-8856-4bbd4a10b174",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8f5f53c-a6d8-44c3-973b-16dd9f0e42e4"
        },
        "item": {
          "id": "e5bd169e-3514-434a-8053-49befc751bd4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "03692624-eb8b-4e23-b87d-4f175515e00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b83463-f532-4a51-a206-b074242c0f2b",
        "cursor": {
          "ref": "aaa9f018-bb04-4ac2-aa8c-0cf8f2d99c67",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "42f90a5b-7619-49d4-9820-da7ff6e2c6b4"
        },
        "item": {
          "id": "55b83463-f532-4a51-a206-b074242c0f2b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "15a63b9b-95da-454d-828a-1d2a1f7d6ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e94ed2-4217-4759-b5b6-322ad3dc86c8",
        "cursor": {
          "ref": "543052c0-7031-4828-bb27-f794af54dc93",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b4b2bc9d-4da0-48d2-8d12-99804dab94d4"
        },
        "item": {
          "id": "17e94ed2-4217-4759-b5b6-322ad3dc86c8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0069fe28-58ec-4ff8-b3ef-f15ca9584a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f555ce4-b8dd-45d9-b3a6-996c94f5cc11",
        "cursor": {
          "ref": "8f08a5e8-fa26-4f62-bf16-c849191d555c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a49d11d4-dbc6-4444-bf65-22dac88e2ef0"
        },
        "item": {
          "id": "9f555ce4-b8dd-45d9-b3a6-996c94f5cc11",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2503721a-6d64-4c15-9ee3-894892b735ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5114a4b4-0f9e-4946-a192-6caf16390558",
        "cursor": {
          "ref": "6e2895c9-78ca-421d-8d48-ba3789e21159",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e4f202c9-7707-43da-9aec-0ac1f8ceb357"
        },
        "item": {
          "id": "5114a4b4-0f9e-4946-a192-6caf16390558",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ee2a89d6-9b67-4ab5-9382-241fd9d90a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1807065e-2dc6-4543-819e-7d1c2943660c",
        "cursor": {
          "ref": "b1a4cb55-44a0-4052-aff0-db8120a376ea",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "62cfb197-2f30-45d4-ad09-31bee768995b"
        },
        "item": {
          "id": "1807065e-2dc6-4543-819e-7d1c2943660c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "833582bb-bb7f-43f5-be6e-a7a8289c7d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1acb97-4a29-4531-8843-1bb405a1350c",
        "cursor": {
          "ref": "d8072598-615d-4929-a361-3986a12d4f6e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f6fa8c1a-300a-41dd-b996-2a5bda173c30"
        },
        "item": {
          "id": "bc1acb97-4a29-4531-8843-1bb405a1350c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "502ce1e6-c809-46c3-a956-0129e96be20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff0a550-26f6-40bf-85b7-7bcb33d7abe7",
        "cursor": {
          "ref": "3ebdc226-4f33-402c-b15f-5de127be4df9",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ccf03e12-ea17-4a6b-bf71-1665be4ad423"
        },
        "item": {
          "id": "eff0a550-26f6-40bf-85b7-7bcb33d7abe7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3af21e9f-0b58-4dd2-9491-1ea8fc73e6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083b97b4-3a94-4239-bc49-de531e092121",
        "cursor": {
          "ref": "334479f3-d993-49b5-8d1e-fb8f340e7a4d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c680e986-ff59-4711-a95e-50fe6dbac108"
        },
        "item": {
          "id": "083b97b4-3a94-4239-bc49-de531e092121",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3fb24ab5-92d8-4035-b404-aa767525ba5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f491a43-50f8-4e68-8ab6-a0cb5be883b0",
        "cursor": {
          "ref": "379dffb2-c9cc-427f-a036-ba9e3c7d8991",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f5a3f49a-2488-4882-9f9d-0955eb96385b"
        },
        "item": {
          "id": "2f491a43-50f8-4e68-8ab6-a0cb5be883b0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9885bfed-5a88-4db9-8a16-34ebeff9e06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1038bf-3895-4fc0-8a1b-21570a7b959a",
        "cursor": {
          "ref": "033c8318-021d-4f0f-a39a-483b7fd10502",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1cae2927-1fbb-4389-b237-d692bceee50e"
        },
        "item": {
          "id": "bf1038bf-3895-4fc0-8a1b-21570a7b959a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c1673626-29d1-48cf-b1a6-76acd7bf9a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce15d734-ee41-4a91-afe0-23c1fcbd0a2f",
        "cursor": {
          "ref": "a7a1b900-6a97-4341-8028-368096769290",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "44056177-9b66-46b0-937f-eb18eb05cb6d"
        },
        "item": {
          "id": "ce15d734-ee41-4a91-afe0-23c1fcbd0a2f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6fa00018-f82f-493d-bfe7-fc1b83fc9060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd24bee-ea89-4cbe-8dcd-b50ee1346c7a",
        "cursor": {
          "ref": "2337fe52-ece7-4bf4-9acd-f8c41198cb84",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b803c094-cc4d-4250-91f3-9bcd91438d0f"
        },
        "item": {
          "id": "1bd24bee-ea89-4cbe-8dcd-b50ee1346c7a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1414fa1d-e66c-476f-9e75-78c500c0d2da",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ba1f545d-dbe5-4998-b76f-872ffcb6d4bb",
        "cursor": {
          "ref": "0c790c88-a785-4a96-8792-30412722e884",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e4dbf0dd-f867-4d97-82a2-f03c62041521"
        },
        "item": {
          "id": "ba1f545d-dbe5-4998-b76f-872ffcb6d4bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4a69de6d-e629-43ac-a56d-f3fe28dc8405",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0b7c0574-8bb1-425e-87d7-09e4c4bde17d",
        "cursor": {
          "ref": "3cec200f-81e8-4e84-8661-e19010567813",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e33f82ac-b507-48be-b5d3-e9c3bd1e9a28"
        },
        "item": {
          "id": "0b7c0574-8bb1-425e-87d7-09e4c4bde17d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "40846300-4321-4314-a944-5c69976c68bf",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4b092c5e-8459-4edf-916b-498f08e9578d",
        "cursor": {
          "ref": "fec0f33b-a7b9-4af9-b44a-0d8bdde2e89e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f433955f-a651-4759-ac57-0b8475750ce7"
        },
        "item": {
          "id": "4b092c5e-8459-4edf-916b-498f08e9578d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "49fceeb4-d17f-48ba-bcb6-61f0bd9bb33d",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f5a3ad4d-aeac-4489-b74e-ff614958f2bf",
        "cursor": {
          "ref": "c43b24fe-5005-4b58-abd2-943001a1385d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f7fa5de5-a4a5-44e0-964b-3246fd0aedda"
        },
        "item": {
          "id": "f5a3ad4d-aeac-4489-b74e-ff614958f2bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "10a304bf-f021-4c4b-9b3b-bcf8916f91b2",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cc38f123-b6d3-4a98-a417-b36284a421de",
        "cursor": {
          "ref": "57c1bc82-7715-4e8d-9d82-ee350802ee79",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d1ff7a4a-c149-467f-9e12-58eb466f50f1"
        },
        "item": {
          "id": "cc38f123-b6d3-4a98-a417-b36284a421de",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c2efc878-0da9-4241-8678-d1e1955737de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fff8bc-8fd4-441e-8444-f2c7d434fdfa",
        "cursor": {
          "ref": "1e1fccf8-6339-47b3-bfb9-765a750f1c7e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "14f1e9b0-5000-45f0-8913-a088a18e1214"
        },
        "item": {
          "id": "13fff8bc-8fd4-441e-8444-f2c7d434fdfa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "54d1c306-fd96-4ecf-93a0-207bc4baac65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9de6a0-8862-4b57-b005-6212e7320961",
        "cursor": {
          "ref": "34f326b5-8cee-400f-a6c0-0ce096668698",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "84cf1860-510e-4a32-8b28-9e9f84e61216"
        },
        "item": {
          "id": "0b9de6a0-8862-4b57-b005-6212e7320961",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "65bbe202-a080-4985-b7b2-70553eb97c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056c0aab-ff2a-4ae0-b96f-0d8c641e0bc1",
        "cursor": {
          "ref": "f322052e-357d-4539-84c5-8c82e8ed620a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "83770a47-12e0-4794-93b4-11477a5672b3"
        },
        "item": {
          "id": "056c0aab-ff2a-4ae0-b96f-0d8c641e0bc1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9a581dff-ce62-45a3-94c0-4a1cdd33368c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9fde72-422e-4b90-999e-403bc2dce7f7",
        "cursor": {
          "ref": "6e29df8b-d24a-4750-8a95-a8ba8ad538be",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e668515b-26ad-495b-8474-59ee3e71267c"
        },
        "item": {
          "id": "7c9fde72-422e-4b90-999e-403bc2dce7f7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f1c8d81a-110e-43ea-a556-d9a2233a26bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcab1d2-1931-4dd7-8fef-f73ee9567ff6",
        "cursor": {
          "ref": "6009287f-b0b9-4491-9f35-b0b9d05f860f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "89c4b370-8459-42f4-824d-408d3dba6408"
        },
        "item": {
          "id": "4bcab1d2-1931-4dd7-8fef-f73ee9567ff6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1d503268-1291-404c-b84e-3ae3d8c3b0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a84dc68-3629-4b33-a22c-c85225f2da52",
        "cursor": {
          "ref": "e44ab1ec-0674-4f40-9bf8-3188b7100719",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c8e6752f-7b7f-4d56-ba08-85d0e0030faf"
        },
        "item": {
          "id": "6a84dc68-3629-4b33-a22c-c85225f2da52",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8927b664-cb72-4fe9-9b34-f23f24521bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791e0b7c-0dd4-4c32-9270-5b11637689ca",
        "cursor": {
          "ref": "972a32b1-6352-4d45-84d8-dfb54868bb60",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0444bffa-808c-43bc-8bec-76285c424a8f"
        },
        "item": {
          "id": "791e0b7c-0dd4-4c32-9270-5b11637689ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "665cc528-1a56-4b3e-a3e5-55e3d88f39b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555a00f0-0ced-4600-89a8-ed0812574543",
        "cursor": {
          "ref": "63b921ab-6b69-4d64-872d-3170561a0054",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fd39a8a6-7a26-4199-8e7c-9de898481983"
        },
        "item": {
          "id": "555a00f0-0ced-4600-89a8-ed0812574543",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7fc0e541-6ed1-41ff-aa6c-b92caaf9a68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe4c128-f401-4049-9ada-f247f91c7942",
        "cursor": {
          "ref": "814e32e7-5cf6-47aa-8fe7-109866bdc16e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d5af9fe4-4466-4a51-aa11-9dbba9514f8d"
        },
        "item": {
          "id": "9fe4c128-f401-4049-9ada-f247f91c7942",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "dc917cd3-9f39-4ba5-80bf-4688cb5cfb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5f2bf4-5993-4a13-8dac-e54c54eedc1d",
        "cursor": {
          "ref": "445545fc-b666-4ece-aec3-59db95664262",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "763305ef-61c2-4ef4-9c03-aa827dc2a945"
        },
        "item": {
          "id": "9c5f2bf4-5993-4a13-8dac-e54c54eedc1d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "53aa3cfa-e12f-4b23-a837-39be9a205455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f056d1-1339-4949-ba56-d2e066142780",
        "cursor": {
          "ref": "1dbe693e-cd63-40ae-806a-c16cffe8b596",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6c3e131e-f268-4faa-a489-2c6c43a253b4"
        },
        "item": {
          "id": "e4f056d1-1339-4949-ba56-d2e066142780",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "371335e3-2fb2-4703-af79-0c82169f728d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c651687f-1d8f-4b62-a59b-6cce38e62261",
        "cursor": {
          "ref": "4b1c0240-7d01-4e6f-8637-b582586a75f9",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0fb6248f-26c9-40ca-90ef-95456e4c7663"
        },
        "item": {
          "id": "c651687f-1d8f-4b62-a59b-6cce38e62261",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "76e527f9-4780-4ece-a0c7-9852e14203ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66888818-72b2-4c02-b1d9-b846cb59553a",
        "cursor": {
          "ref": "6367bfc8-517e-4190-a87d-cbcaa8c232ec",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "017a209a-e2bb-4841-9892-afe481b39ae9"
        },
        "item": {
          "id": "66888818-72b2-4c02-b1d9-b846cb59553a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "563e3064-0d9a-461c-83dc-82eb6f2729ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6556a095-73aa-403f-8425-21d6b06e7c05",
        "cursor": {
          "ref": "e4b8e0b1-7fb1-4e6c-a370-24fa7c6a4077",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5e5c1745-a6da-41df-a092-7f30358ae6d3"
        },
        "item": {
          "id": "6556a095-73aa-403f-8425-21d6b06e7c05",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8935ec33-6d38-4896-8678-ddfaa7c98120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcbd33f-6ec9-4239-87a9-6f9aa457a494",
        "cursor": {
          "ref": "ebea794e-4875-4d0b-905b-379ab13cfa4d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "83afd8af-ff41-4a5e-97ea-13a659c2f674"
        },
        "item": {
          "id": "2dcbd33f-6ec9-4239-87a9-6f9aa457a494",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "259a9b9a-380b-45c5-b037-2731f629cfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c175bf-80ed-4ce8-b6a7-232424e175b4",
        "cursor": {
          "ref": "6771d946-8cdd-4c37-8b08-5222b80888a5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "652ac0a0-a26e-4717-8210-6c199614d762"
        },
        "item": {
          "id": "08c175bf-80ed-4ce8-b6a7-232424e175b4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "edaf3be7-cea5-4552-891b-87f8c2f4a41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa76f48e-5547-40e7-a01a-c9094618e1b8",
        "cursor": {
          "ref": "4213392a-7c9d-4931-ada2-2335ef4285de",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bfa3472d-a7a7-4755-a584-ad8ec18a2f3d"
        },
        "item": {
          "id": "fa76f48e-5547-40e7-a01a-c9094618e1b8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5673015d-656d-4856-9172-f466b28ce459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ae13e5-8107-4ca8-ae61-363221bcf231",
        "cursor": {
          "ref": "bd2aac2b-2e59-442a-9419-970ac86a8598",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c52e1fd0-7d44-40ba-9bb8-d405f1a72815"
        },
        "item": {
          "id": "72ae13e5-8107-4ca8-ae61-363221bcf231",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "16d31a12-5439-4407-b9f9-f0cf18641349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8006ec2b-9096-41f4-9324-4adb686aaac7",
        "cursor": {
          "ref": "336ec3e1-62dc-4f89-b816-0fe658987778",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6da89603-91c8-4d3b-9033-b8f5c246ff40"
        },
        "item": {
          "id": "8006ec2b-9096-41f4-9324-4adb686aaac7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "14bea79d-459c-409c-9a64-acc409fef8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2608e6-cf8e-405d-8315-57c1afbd897d",
        "cursor": {
          "ref": "beaf8ff2-8e61-430a-bb80-574fb29a77f2",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "75ce08b9-ce93-4eb2-b982-8d10ddfa7a12"
        },
        "item": {
          "id": "5f2608e6-cf8e-405d-8315-57c1afbd897d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c0c205b6-19b0-46ef-8575-39da97a0032b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0f2431-0c1e-44cb-85be-52dd1b89da7d",
        "cursor": {
          "ref": "8d21ff27-966e-4f65-9b84-bc1eb20ac1df",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aab69385-7f9f-4966-9c77-ddb9e51cf567"
        },
        "item": {
          "id": "8c0f2431-0c1e-44cb-85be-52dd1b89da7d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "90a66514-955b-4779-8462-f61dae2f5730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8cc244-a40e-4350-ba8d-f253c92ecb32",
        "cursor": {
          "ref": "16d1bef8-4a52-4de0-95aa-877dc96962ec",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e1f1dea8-2ba3-4fa6-9b9d-1ae60f418a16"
        },
        "item": {
          "id": "5b8cc244-a40e-4350-ba8d-f253c92ecb32",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7380c100-0204-498c-8f2f-48971b954ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c166381-46e5-43be-8cbd-21ab9070d00f",
        "cursor": {
          "ref": "470a8f86-db87-4646-9619-3e43b86ddbef",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "92ed5644-8486-4fcc-a912-91cb77ee77ec"
        },
        "item": {
          "id": "9c166381-46e5-43be-8cbd-21ab9070d00f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ec50db4e-2a53-451b-83c9-4a554c4d4062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c062a6cb-543c-4d4a-9792-093b206f6291",
        "cursor": {
          "ref": "601c58c9-6c0d-4098-b5fc-cf10a0c4afbf",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b28295f9-8880-4124-95aa-d502a5ad9391"
        },
        "item": {
          "id": "c062a6cb-543c-4d4a-9792-093b206f6291",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e30dc56b-dd2a-4835-8b2f-0632b5b1dfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696f487e-a546-447d-a48f-27f7db0d71b4",
        "cursor": {
          "ref": "9c7f79f8-ed18-42eb-891c-32455f72dbab",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "54f01496-6628-4570-b20c-47d271cc7062"
        },
        "item": {
          "id": "696f487e-a546-447d-a48f-27f7db0d71b4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "713fda86-0a9b-4484-87a9-363f5e53a443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efb1e4b-741c-48e5-911f-9f77eaf3be45",
        "cursor": {
          "ref": "dba78b0e-da9c-4574-9adb-c5f218886b19",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cefd65a1-e92d-47d5-bb6b-42d8c9d34a2b"
        },
        "item": {
          "id": "6efb1e4b-741c-48e5-911f-9f77eaf3be45",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a370a070-81ca-4d69-9ed8-c68465802a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a589e5-b7de-4beb-a9b5-12bc8caa097d",
        "cursor": {
          "ref": "f9ae5c3e-415d-4045-8930-1ef6e625347f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6aea9f5e-92c7-4592-bae0-b981c64756f2"
        },
        "item": {
          "id": "e1a589e5-b7de-4beb-a9b5-12bc8caa097d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7d7f731e-97bb-403e-9648-f092619509bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109e6896-a666-4137-8e7f-4ed0eabae3b1",
        "cursor": {
          "ref": "f2c9218a-d7aa-48cb-9a3f-141480318e05",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e94e6ca7-dc37-4681-9eac-2e8365c9bd5c"
        },
        "item": {
          "id": "109e6896-a666-4137-8e7f-4ed0eabae3b1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "07d8a419-f8d6-420a-a961-43cecfb5adf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a6659e-ba52-4956-a1fd-ccf14ff99d51",
        "cursor": {
          "ref": "51e12a2f-eb54-417a-a3d4-9a00adfb8177",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fb1266a4-3c3d-4312-897e-a7688dadefbe"
        },
        "item": {
          "id": "c9a6659e-ba52-4956-a1fd-ccf14ff99d51",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c5b6405e-1564-41bb-99c8-373ca0acc5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc15b9a-b535-466b-9bf8-9b7e0daef398",
        "cursor": {
          "ref": "1171569f-f8a9-4387-847b-26e0a661bafa",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3f8d8174-a873-4ec5-9e33-9b9fc7275e76"
        },
        "item": {
          "id": "bdc15b9a-b535-466b-9bf8-9b7e0daef398",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1430f814-ebcb-48da-9ae1-53fe25b393a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab11af4-a448-4120-b815-246539ebeaf3",
        "cursor": {
          "ref": "8a4ed9c7-a0fb-429f-a4db-0f80f10e066f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f9cbe910-9f13-4c0f-aafb-f47a8d7e0b30"
        },
        "item": {
          "id": "9ab11af4-a448-4120-b815-246539ebeaf3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a0cf3c1f-4483-4b07-ac85-7ddc1754549b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2450f19-dcca-47e4-9558-412159ea67dc",
        "cursor": {
          "ref": "6d66ec5d-09ae-41a2-bb4f-384da8ef6165",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d75315d7-faaa-4f84-aa57-da666c2b80de"
        },
        "item": {
          "id": "b2450f19-dcca-47e4-9558-412159ea67dc",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a241679e-55ae-487a-81ee-f9bc400b0ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "994d9645-2602-4654-b1f3-7f80a0ae4e24",
        "cursor": {
          "ref": "5624d7d5-40aa-4e98-80af-bbe615bc2f55",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "411dd5f9-9b6a-408e-bfda-4a09f3914934"
        },
        "item": {
          "id": "994d9645-2602-4654-b1f3-7f80a0ae4e24",
          "name": "credentials_issue"
        },
        "response": {
          "id": "13fb98cf-d86a-4e28-beaf-aadcb6a2f47a",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e984ada3-f1c4-454a-b896-4503e42e52cf",
        "cursor": {
          "ref": "28b5ce7f-373a-4569-93c1-a86dca08f9e2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "17c949db-d72e-4053-b687-e030c3ae950a"
        },
        "item": {
          "id": "e984ada3-f1c4-454a-b896-4503e42e52cf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "98f15979-6ab1-4b78-a67b-88b4d1dabb7f",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cce4ccc-7b28-40c7-b2fe-945dde7413ea",
        "cursor": {
          "ref": "99d3a0af-f267-438d-8d03-c9c56791a2bb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "79a21218-d9c9-4b1d-bb93-b7eb67507d99"
        },
        "item": {
          "id": "3cce4ccc-7b28-40c7-b2fe-945dde7413ea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8ac1b83c-ad06-40b8-a5c3-cd5b06d74227",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4589d46e-8b96-4ec8-9fe2-3ba4bdb4d8b9",
        "cursor": {
          "ref": "aaad3e36-5c4f-4c9d-9850-3f2a37189a2e",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ad829843-ed69-461a-a681-f6f1a7e8b28d"
        },
        "item": {
          "id": "4589d46e-8b96-4ec8-9fe2-3ba4bdb4d8b9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "83820e4b-b719-49a2-bc9f-0075a33f3502",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f021cfb-60fa-4e2d-ac54-d3effb26c90f",
        "cursor": {
          "ref": "2ea9b3e1-f7bb-479d-b02b-34952af4314b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f710f17a-4be9-49cd-b2d3-52ffd05e9558"
        },
        "item": {
          "id": "6f021cfb-60fa-4e2d-ac54-d3effb26c90f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f0c5ce01-6335-4010-bc4d-945c8bbac143",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-22T00:38:41.154Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-22T00:38:41.154Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a31516ea-8b1b-4e64-a6e0-f78361013c30",
        "cursor": {
          "ref": "339ebb8a-6e79-487e-a052-bfb9deada7c6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e813daf7-6aeb-4550-9a07-d78e9e7bdbb1"
        },
        "item": {
          "id": "a31516ea-8b1b-4e64-a6e0-f78361013c30",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4e91540c-ae8e-44b3-9035-fe06c94af4be",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9d7313-61dc-4402-a266-30d5fbbe1a1b",
        "cursor": {
          "ref": "c585069e-2bee-4047-9a0b-78b2072fcf96",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f56d540-3a40-4f63-8050-603a58575ab8"
        },
        "item": {
          "id": "0a9d7313-61dc-4402-a266-30d5fbbe1a1b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "51938140-513a-46d9-91f0-d49bbe5396a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b51d45c-3a30-4857-a20e-4a2133a120e7",
        "cursor": {
          "ref": "b4d4c2a0-150c-4028-aa67-288b837b0dbd",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aefd8e6d-87dc-4d2e-869f-ca2e57caca18"
        },
        "item": {
          "id": "1b51d45c-3a30-4857-a20e-4a2133a120e7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f6cb9316-3017-4482-b661-f56458e0aaeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f874e6ac-af87-4e7e-ab77-7d9db1da0083",
        "cursor": {
          "ref": "5f91760b-a406-4761-bdbd-e89a4e3bf967",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "356d96de-b21a-4783-b136-382dfed29347"
        },
        "item": {
          "id": "f874e6ac-af87-4e7e-ab77-7d9db1da0083",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "99887c85-c7a4-4992-9805-33759d33edcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a650a0e5-e4c2-459f-9002-85855e6a7b80",
        "cursor": {
          "ref": "1bc06ffc-57a4-47c1-9f31-49fe5c33b25b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ec96c2ff-04c3-4e24-81f3-5f7a8295a683"
        },
        "item": {
          "id": "a650a0e5-e4c2-459f-9002-85855e6a7b80",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "53600d65-2356-4639-9e68-28db2c95a7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1cfa31-6946-4d53-b908-000b8f8f97cc",
        "cursor": {
          "ref": "afab6302-4331-460d-8deb-6217c01d3698",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5b6c4047-102d-4798-bcd4-d45541f730ba"
        },
        "item": {
          "id": "ab1cfa31-6946-4d53-b908-000b8f8f97cc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bdd5eb90-1ffa-481d-b3f0-50820176d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eabe9eb-b6fe-4845-a8ba-1dcd766cea7b",
        "cursor": {
          "ref": "dccc89d9-a40a-4122-af2a-c785f8187fa4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6092839e-b4bf-4b5b-a427-edbf04773388"
        },
        "item": {
          "id": "7eabe9eb-b6fe-4845-a8ba-1dcd766cea7b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6fc0d747-f723-409a-8d7d-d01eb2037a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d96ff8-8bfe-473f-bbe2-04e6da052bd1",
        "cursor": {
          "ref": "21f1e0ca-4f70-4979-a2c1-55ec811f263f",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f0fc419f-81d5-4fae-b57c-de60de8298f7"
        },
        "item": {
          "id": "64d96ff8-8bfe-473f-bbe2-04e6da052bd1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0ffe8843-3045-4db3-a9e3-3d6c9183cf60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf2f06a-838b-4634-a2a3-8b008f47b004",
        "cursor": {
          "ref": "2d01cc50-df05-4361-8732-5600898ddd94",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "55dcd45c-f249-4cb5-a721-6e1e4c89e54c"
        },
        "item": {
          "id": "9bf2f06a-838b-4634-a2a3-8b008f47b004",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fb250ab2-2150-4bd1-bdfe-6b4ba9fabecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4480e0e0-bad0-40c4-be4b-e5454976e0d8",
        "cursor": {
          "ref": "d16eb4bf-6070-4e5e-b088-7c829107045f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e46e6ca0-8b70-4247-a317-b55da8e10c97"
        },
        "item": {
          "id": "4480e0e0-bad0-40c4-be4b-e5454976e0d8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ed68d6f8-09d4-4a45-a147-dd6b4df85c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a68587b-cbf4-42cc-a591-733945d88a2c",
        "cursor": {
          "ref": "948090b5-c793-4364-969e-546d5fbc20a8",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c0b043c4-3b98-446f-a05a-a4e8dc87a5b3"
        },
        "item": {
          "id": "7a68587b-cbf4-42cc-a591-733945d88a2c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "69089a86-9be3-44e8-8aac-5ed5342c710e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5372b02-1fbf-4964-b690-8ed7edf37494",
        "cursor": {
          "ref": "5f137c0b-90fb-457a-b041-54cc697f7827",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8dd551b3-98eb-4f60-8267-46a88ab2c2a4"
        },
        "item": {
          "id": "e5372b02-1fbf-4964-b690-8ed7edf37494",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "45b776c1-3328-4341-917e-42f817d9a1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55f5e33-369d-4712-ae1c-31a1d4c66ea2",
        "cursor": {
          "ref": "9e4d3c82-80b9-4c41-b1bc-ca01e91f2ac9",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "08388b76-9400-4dc2-ac2b-4321811bcce7"
        },
        "item": {
          "id": "a55f5e33-369d-4712-ae1c-31a1d4c66ea2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "38c10c48-24ad-410d-990b-61f8866ef283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3653da-d782-40b8-a794-7d166396686f",
        "cursor": {
          "ref": "cf066a7f-0786-421d-af58-fc6a7fcb49c3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "de6e42f4-b59e-4a4c-96ab-09e30cecace2"
        },
        "item": {
          "id": "4e3653da-d782-40b8-a794-7d166396686f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "316024bc-a9c6-4620-a36d-c397ea82f9cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 145,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9d269c59-3e58-4274-8603-887ec6d712c4",
        "cursor": {
          "ref": "5a724fe6-2a1d-4ac0-86b3-67a551842142",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f12b43cd-5c59-4bac-93cb-73349db8379b"
        },
        "item": {
          "id": "9d269c59-3e58-4274-8603-887ec6d712c4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fd318488-58b6-4e2e-a202-c298ca11bd63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "55caaf97-dbe7-407e-ad94-3ee30740d369",
        "cursor": {
          "ref": "047dd9cf-e459-4ea3-80b7-85adeb785e63",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0b9b1d30-3c81-4a3b-80e9-0d3481c93880"
        },
        "item": {
          "id": "55caaf97-dbe7-407e-ad94-3ee30740d369",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ea755042-f1bc-4ede-a29d-df7a8de8888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4dfcd9-d497-4b2b-853a-55da7a82bda2",
        "cursor": {
          "ref": "326145ca-6e59-4777-b1a5-d5f7c4b1bd4a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "21b785b9-08b6-4746-a468-fd9756154ab0"
        },
        "item": {
          "id": "ec4dfcd9-d497-4b2b-853a-55da7a82bda2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "22c556aa-e239-48d4-81f1-0fb2e44c0931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc31b57-3940-476d-8046-49b04eb5807d",
        "cursor": {
          "ref": "233e2cf9-62dc-417e-817c-2cff4bb74e78",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3eab2f45-7a30-4312-ac70-3361e81686c8"
        },
        "item": {
          "id": "0bc31b57-3940-476d-8046-49b04eb5807d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dca8b2ee-303e-4230-91c5-40b6556ccd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df095f0-f033-46ae-aa37-fc929fda4ad9",
        "cursor": {
          "ref": "0ad04168-3df5-417e-8098-357bf8b1aa49",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e3666408-bdb4-40dc-82de-025c5d3a2dea"
        },
        "item": {
          "id": "4df095f0-f033-46ae-aa37-fc929fda4ad9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "953f5131-2dc1-4a90-b551-37327f669684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32fae84-5bb9-41e6-8f59-31b81d5e0442",
        "cursor": {
          "ref": "b6075ff0-9f85-401a-b15d-3c340bc46f5c",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1f106fe3-1b29-46ed-afea-cd1f6c9926e1"
        },
        "item": {
          "id": "c32fae84-5bb9-41e6-8f59-31b81d5e0442",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "682ba517-0a39-42ca-9dd1-5805dafc0299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdfc0c4-9a63-4431-b7a8-73c6e0a96868",
        "cursor": {
          "ref": "3e227ca4-7785-4c5c-978a-8802a5fe5bd6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "aa37fd42-0ba3-4b26-9a14-fc022858db2c"
        },
        "item": {
          "id": "0bdfc0c4-9a63-4431-b7a8-73c6e0a96868",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "079b747b-d1a5-4a49-ad51-9c6493354ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2858761a-d71f-492c-9e76-937a89321a5c",
        "cursor": {
          "ref": "aef0343d-b5fc-4306-b037-03e5f5960cea",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "43d9badb-08aa-40fe-8c9e-4f4031ec95d3"
        },
        "item": {
          "id": "2858761a-d71f-492c-9e76-937a89321a5c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8108be96-4d34-4179-a3eb-b4971a3c7dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e98e3c-d9d3-4c00-ade7-69e20a1acbfa",
        "cursor": {
          "ref": "1a9a318e-e8bb-450b-8ee5-04cf1924ad1c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e19cd0a4-65bf-4dab-b7ab-b9dab2d9077b"
        },
        "item": {
          "id": "78e98e3c-d9d3-4c00-ade7-69e20a1acbfa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3e926487-cbbd-4d27-9cd9-d4713a65d010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663ff756-d336-4dca-9b3c-cb09e0b62f5b",
        "cursor": {
          "ref": "b38cab5d-8570-4e6d-8c36-3036853ddf4f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "49990e9c-1a4d-44aa-a55e-c36a2e80173f"
        },
        "item": {
          "id": "663ff756-d336-4dca-9b3c-cb09e0b62f5b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d9bb80f8-a912-4e8a-8048-b30fd8f8cdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0e5fbd-b648-4f41-a523-16c9efe7e326",
        "cursor": {
          "ref": "7a91e303-b163-4676-af08-6e322a20ae65",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d7284c60-6922-407d-ba94-86752c671838"
        },
        "item": {
          "id": "3a0e5fbd-b648-4f41-a523-16c9efe7e326",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eac46682-cf4f-45ab-a480-dd28ce8ae3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5554e4c-6b9d-4170-b17d-5d0f9fabf114",
        "cursor": {
          "ref": "9d15a30d-8308-4310-8d8b-b63dbe5807e1",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "189ee4c8-d4f9-4998-904f-ccfefce607e7"
        },
        "item": {
          "id": "c5554e4c-6b9d-4170-b17d-5d0f9fabf114",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c3b30063-8542-4e2d-9a39-47ff4ba1a753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2212507-4448-4f07-9489-f3bec968b926",
        "cursor": {
          "ref": "bdf59ce9-8525-48e8-9fc8-8317340cfb08",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8ab2a82f-b560-48b1-b95c-5cbc5af16ae0"
        },
        "item": {
          "id": "a2212507-4448-4f07-9489-f3bec968b926",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5302b33e-0f3e-41c7-8acf-327597ba51c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6f5df7-2b10-4974-9072-c102c8238d54",
        "cursor": {
          "ref": "9ac8b9c5-6245-40e8-8ad5-7f1bc9d43653",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "05e06613-106c-4142-a629-7cd1f41bb863"
        },
        "item": {
          "id": "ce6f5df7-2b10-4974-9072-c102c8238d54",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0de5783d-d9d3-4dcd-8a0e-9b0e0f83db90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc57a278-fa78-4ea0-8654-f43351734648",
        "cursor": {
          "ref": "79e12836-da6e-42dc-a4f1-edfe88e9b5f9",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f0a9e942-f99f-4c71-81c3-3544be3e73fc"
        },
        "item": {
          "id": "cc57a278-fa78-4ea0-8654-f43351734648",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "23cceb7e-de19-485a-8868-bbc91a623668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc37824-0077-41e1-9ca3-6ba309081d0e",
        "cursor": {
          "ref": "8b766adc-8b56-48aa-b87e-a5cd5558f2cf",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d96215d-2c5d-42f2-99d1-e72e94527510"
        },
        "item": {
          "id": "0bc37824-0077-41e1-9ca3-6ba309081d0e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f48ef37b-58eb-4ddc-92d9-0e2cbc42c1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12637f41-30a0-406e-8cc6-308142ef2714",
        "cursor": {
          "ref": "ccfd172d-ffc1-47f5-8a62-cd031c5e6d63",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ea30b2d2-4a3e-43c8-a132-c16fad15a0fb"
        },
        "item": {
          "id": "12637f41-30a0-406e-8cc6-308142ef2714",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7685bfb1-c044-4fcb-9729-025fee489836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860b05bf-986f-4c12-8022-f606c9f1e981",
        "cursor": {
          "ref": "932d27fe-b4ce-4caa-a82f-f545cb93d83c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "656d29fb-1a8f-4304-bd1d-10b35d1bd265"
        },
        "item": {
          "id": "860b05bf-986f-4c12-8022-f606c9f1e981",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "083cca1c-7749-47f0-9f45-55ca09d26936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d541c0f-9d3e-4826-8beb-d7cc8e2719bb",
        "cursor": {
          "ref": "c41ac145-58c0-4752-af7e-6d142c09647e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3053c50d-f828-49f4-aa1c-1f0a7bccbeeb"
        },
        "item": {
          "id": "8d541c0f-9d3e-4826-8beb-d7cc8e2719bb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "275ec9e6-30c3-474e-aca5-3179f1ac36c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 149,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a84c59c6-5a77-479d-9a43-424f7fd081af",
        "cursor": {
          "ref": "44292198-a8f8-4ab0-b25f-5127044245d0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e4c9906b-ad8b-440f-815b-0464ea95c3f7"
        },
        "item": {
          "id": "a84c59c6-5a77-479d-9a43-424f7fd081af",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ea34409f-b766-4c64-a2f0-d5f931f5e625",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd48196-d1b4-4806-88a6-a0bb1d258c0c",
        "cursor": {
          "ref": "154bc330-74c0-433c-88ed-1d3cbb8bbf1b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "99eb905b-d3b2-429e-b1eb-a38a2294889b"
        },
        "item": {
          "id": "0bd48196-d1b4-4806-88a6-a0bb1d258c0c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "65046ec3-b179-43eb-a42f-03a94ddf00fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948dd79c-f5d4-4b14-8a06-abe5b6124b37",
        "cursor": {
          "ref": "4984fe7d-deb5-4133-be6b-1764f778f02b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f1d2ed0e-7e6f-4f8c-b718-7100b8ca8505"
        },
        "item": {
          "id": "948dd79c-f5d4-4b14-8a06-abe5b6124b37",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9224eef4-53fe-4bd1-992d-5c5a831d3368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6e9ee7-eb96-4ff6-ad5f-280c53a734eb",
        "cursor": {
          "ref": "81539d85-bb6f-4467-9c4d-31283f388843",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "56f8f22f-3498-4fac-bc86-acc165b7b0b7"
        },
        "item": {
          "id": "0f6e9ee7-eb96-4ff6-ad5f-280c53a734eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "efedb10f-d568-4fa3-8966-1d40ad2d2661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f116b8b4-cf7e-4cd1-b92a-358b52d60fad",
        "cursor": {
          "ref": "0192082f-9e73-4ece-8114-09e2804c20de",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "176da6ac-7102-4eb7-bd01-9baaf22f8030"
        },
        "item": {
          "id": "f116b8b4-cf7e-4cd1-b92a-358b52d60fad",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b7fe2d8a-1309-4028-94e3-d0992cca593b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b865c7-7c14-4966-8a40-ee7159e92d30",
        "cursor": {
          "ref": "72d75660-2e7a-4aeb-91ad-cec8c200c26e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d37a9f84-2ccd-4bc0-92b3-28456b896a5e"
        },
        "item": {
          "id": "f7b865c7-7c14-4966-8a40-ee7159e92d30",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a926f2c4-efe9-481a-96b0-996e153cceb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287fe766-463a-44ca-a227-849823596060",
        "cursor": {
          "ref": "ad3eb3ff-7895-4685-8beb-ac99b1e12450",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1aeda976-f0e8-4b46-b52b-014f859a3691"
        },
        "item": {
          "id": "287fe766-463a-44ca-a227-849823596060",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "08ca3df7-2c33-439f-88e5-9cc9d87e68f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619a7193-f70a-408a-ae14-5fbdb7d75f14",
        "cursor": {
          "ref": "12680dc8-592a-41ea-a60b-22e0cdea6ef5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ada57f7c-4c35-46e7-890e-2d0773f09bc8"
        },
        "item": {
          "id": "619a7193-f70a-408a-ae14-5fbdb7d75f14",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9e2148f4-4e9e-4baa-a4e1-7713cc1d5ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e19198c-8510-4a02-b869-44b9bed98d7e",
        "cursor": {
          "ref": "e8c85c99-3f42-4799-9fb9-7f0355b9322a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f9542392-ec1c-4f0d-8ff1-b2ef1b435876"
        },
        "item": {
          "id": "8e19198c-8510-4a02-b869-44b9bed98d7e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fac975b3-2521-4784-bf92-5952146c2a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea5d507-30fc-4d5e-a5ad-52135439e2cc",
        "cursor": {
          "ref": "87b84155-ef29-49f4-b885-ea376e381313",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d8b555ad-5f79-48ae-a1dd-dcfccb6db6a2"
        },
        "item": {
          "id": "6ea5d507-30fc-4d5e-a5ad-52135439e2cc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "47b25362-42d5-40b7-815a-a45a2d74095e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a17c73-cc74-488a-a68e-4c30bfb786ad",
        "cursor": {
          "ref": "5eacda3b-8438-441f-b664-915ebf5924a6",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "20cea326-14c2-40d9-8958-40d415be31d3"
        },
        "item": {
          "id": "c4a17c73-cc74-488a-a68e-4c30bfb786ad",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e6e79e32-80e5-4f55-bf39-6072afe4a969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f74a291-019d-4e33-a81d-006f1c72d403",
        "cursor": {
          "ref": "eabc3174-a9b6-46a8-9bc2-7ee36648d1a9",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a294c8ab-6af3-4167-a588-9d6ffa55b544"
        },
        "item": {
          "id": "0f74a291-019d-4e33-a81d-006f1c72d403",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e3d159d9-4a2e-4156-899f-a8ce29fe1a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8085a10c-9833-432d-93e5-d9bc42104e83",
        "cursor": {
          "ref": "8eb82543-d8ef-4ab2-8201-a5c9a8c7bfb5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5bf32981-db7b-4ffa-aff1-f35afbbe3146"
        },
        "item": {
          "id": "8085a10c-9833-432d-93e5-d9bc42104e83",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2d2d5502-5fe8-4d2b-816b-317de592b424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b4d9ab-5e04-4c33-9fc0-d1a35721cf86",
        "cursor": {
          "ref": "f69c62cb-74c7-4b0a-bdde-9fda01d20e1b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ac830853-fe17-4a0a-8629-c9e7cc1dda01"
        },
        "item": {
          "id": "22b4d9ab-5e04-4c33-9fc0-d1a35721cf86",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b99472e2-f70c-4dd0-934b-30b946684565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7df8f2-0873-4547-84d9-c94db69e3bb8",
        "cursor": {
          "ref": "ee4151f1-4200-4c5a-ae79-03dcb615170c",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fc815796-8e53-435f-900e-e9570454d721"
        },
        "item": {
          "id": "8f7df8f2-0873-4547-84d9-c94db69e3bb8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "08dbe8c5-8cae-4c10-8660-6a0b7061729b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 141,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b2f49fb6-8546-439e-b0e2-08e0e7b98377",
        "cursor": {
          "ref": "ecf3a136-603d-4feb-89c6-b87aec15ece0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c6b56c42-4781-4c5b-a9e8-dd471d223361"
        },
        "item": {
          "id": "b2f49fb6-8546-439e-b0e2-08e0e7b98377",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1bc42e33-2193-43af-ad94-26b48bb88d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e0e434-66d7-4096-898a-aa2c70cdf457",
        "cursor": {
          "ref": "3a22bb7c-50a8-43dd-accd-74f22d4292bc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ec57a6f3-0d28-4b47-9fa6-55d640eae010"
        },
        "item": {
          "id": "07e0e434-66d7-4096-898a-aa2c70cdf457",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1a2443b0-857f-4edd-9e73-d0f09b068973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ca3642-1b10-4221-bca7-52d0c90db57a",
        "cursor": {
          "ref": "875619b8-ebea-4b96-80e6-7b84c6d6f0e3",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cfa8451c-4adc-4184-84b6-97ab9d185700"
        },
        "item": {
          "id": "d2ca3642-1b10-4221-bca7-52d0c90db57a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7c48a158-8b7e-4d9b-b3d8-60fe40b85b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17caea45-04a3-4910-ab3b-ab37dfa30d76",
        "cursor": {
          "ref": "56f99db5-25dd-4e66-bea1-7a93228ffb54",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c5730be2-a8ef-4d27-ae0d-6e4b0a4c7034"
        },
        "item": {
          "id": "17caea45-04a3-4910-ab3b-ab37dfa30d76",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "824c7f4d-d24c-4f48-9387-6be82a3a2b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa457673-a655-4678-a547-b7d9ab4f49fd",
        "cursor": {
          "ref": "edeaa9bf-fbfa-4d40-9e41-4bec8e9955ba",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "85c46961-77c3-4e3d-a742-e740ebf3b57b"
        },
        "item": {
          "id": "fa457673-a655-4678-a547-b7d9ab4f49fd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "aa0f3b49-d6fb-4217-85c8-3b8a726bdb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a74ca2-2b58-4bde-9f3e-21d6521bb8e8",
        "cursor": {
          "ref": "f1aea295-ce03-4cee-8064-8216382dd1d1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f07b6aae-d45c-4d4a-8990-d5e41cee28c3"
        },
        "item": {
          "id": "b5a74ca2-2b58-4bde-9f3e-21d6521bb8e8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e757d1d8-5b51-4764-bbd9-89d6d9f26890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0e07e8-6446-4940-819d-f83081528cc6",
        "cursor": {
          "ref": "7623eb12-b2b7-4a67-a2b8-bf4481bad1ae",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "78b98d8b-1f5d-4d6f-b907-3068dae0fe9f"
        },
        "item": {
          "id": "6a0e07e8-6446-4940-819d-f83081528cc6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "087728fc-4f68-44d2-946a-3b3c892da68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae1d434-683b-4db5-a0b5-9544032e9de8",
        "cursor": {
          "ref": "218b37e7-f46d-47ca-8cfe-027ed652194e",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9ae7d3ca-d2e8-47d7-89e4-6efa8a883d59"
        },
        "item": {
          "id": "1ae1d434-683b-4db5-a0b5-9544032e9de8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b6347a62-9b09-4fe7-8e91-5b57b8c823d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb33b781-0135-4a70-818c-52724cf5aaec",
        "cursor": {
          "ref": "79d7971a-4800-4a7c-880f-af869616aa2c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f331f085-5824-439f-bb0e-20d032722488"
        },
        "item": {
          "id": "bb33b781-0135-4a70-818c-52724cf5aaec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f66fefb9-f4df-4db0-9731-224dc4e5eb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c921da67-76b9-47eb-b227-7d32f6113253",
        "cursor": {
          "ref": "660602bb-51e2-4eba-9b88-a55592d940af",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8965e429-57f1-43ba-963b-00bb142fbd71"
        },
        "item": {
          "id": "c921da67-76b9-47eb-b227-7d32f6113253",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "14979d6b-dcde-48b6-8e14-36814080f8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0c8261-c999-4427-b551-45a35cc66e92",
        "cursor": {
          "ref": "a19ad225-2b18-4eb2-bb6c-d10b046117f9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "28bb4ec0-5bf8-4102-b42e-07e9cf7b6c15"
        },
        "item": {
          "id": "9a0c8261-c999-4427-b551-45a35cc66e92",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "caa6cf33-118e-4df7-9f6b-c0a36ec535cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4beefbed-3db1-4f9a-be75-ef7ccb4bba2c",
        "cursor": {
          "ref": "24f444bf-2707-47f4-b262-0aa0db893f2e",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5875339d-2d4c-40f6-92e9-0979086ca697"
        },
        "item": {
          "id": "4beefbed-3db1-4f9a-be75-ef7ccb4bba2c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "683a1e83-2644-4dd3-ac62-3fcdc30feedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407c667c-c1fa-4aa1-b3c4-fe6fa2fac848",
        "cursor": {
          "ref": "18251ad2-7fa9-4db9-ac3b-38db3bb215aa",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e3c03fa1-cf82-4837-b921-0c141ef58e78"
        },
        "item": {
          "id": "407c667c-c1fa-4aa1-b3c4-fe6fa2fac848",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a275c902-e8b4-40b4-b654-b02f9606837b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42239666-9234-4ce4-af95-e7d52d878f2d",
        "cursor": {
          "ref": "ca1d4f8d-b1fc-4f03-b397-1c5eca94e8b0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "62b4941f-affa-436b-8a6c-d84d5468b11b"
        },
        "item": {
          "id": "42239666-9234-4ce4-af95-e7d52d878f2d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a392850b-9f02-4c7a-b590-0d111d5215ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbf2df9-2e89-4f87-a528-d96e223feb08",
        "cursor": {
          "ref": "76b40dd0-32ac-47b3-8741-a5881005b48c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cd4c1c96-1116-434f-9024-ebdca588b255"
        },
        "item": {
          "id": "ecbf2df9-2e89-4f87-a528-d96e223feb08",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "925ee944-c86d-4a4b-80de-79d0f5cf4ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f97b40f-5bf2-4b08-8980-0722256ff34d",
        "cursor": {
          "ref": "a256d57f-451a-4816-a675-c11876711b34",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cbfe01e0-4a43-4867-931a-46399be15016"
        },
        "item": {
          "id": "8f97b40f-5bf2-4b08-8980-0722256ff34d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dfa3b34e-6797-4d71-b8fe-6b40373b04a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa189c8-33d1-49bd-9dee-e0a4b8d3e58b",
        "cursor": {
          "ref": "f76eedd3-64d6-438c-9f11-cf6e9eb152e6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bb528c53-29a4-4bd4-9c48-809a40c3e8b7"
        },
        "item": {
          "id": "cfa189c8-33d1-49bd-9dee-e0a4b8d3e58b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b703b225-e1fb-4750-a935-5a6c1873c8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64193fa2-12f6-448b-94e1-b29920c2df9e",
        "cursor": {
          "ref": "af47e77a-a4d3-4995-90d6-35c3e9bf1425",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1a75be79-c0a6-4473-ab90-c5b14b888590"
        },
        "item": {
          "id": "64193fa2-12f6-448b-94e1-b29920c2df9e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9acf5501-76ab-48d8-ad9e-9c8b26c562a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e56feb-158d-4bc1-a8da-95c40c9a5d0b",
        "cursor": {
          "ref": "757f7e4f-6124-49ec-aafe-25a860f2d82e",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7710b4ff-2790-459a-b2a3-d4c9b6987001"
        },
        "item": {
          "id": "25e56feb-158d-4bc1-a8da-95c40c9a5d0b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "fa8829ae-297f-4164-abb8-09853766abdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30162fdf-1a76-496b-864e-7e92407cdc93",
        "cursor": {
          "ref": "455ec0ca-a6b7-4be6-a921-39c065a0f16f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bdb01231-4269-4259-ab24-1bc7251ee45d"
        },
        "item": {
          "id": "30162fdf-1a76-496b-864e-7e92407cdc93",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "97acd08a-06e1-4bf2-9e30-08a00bfebbee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25648c8-054e-4f2f-a1ed-3427fe8ea860",
        "cursor": {
          "ref": "59ca98f6-9e54-48f1-88be-1c2c18cd6654",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e2bcdb8c-0daa-407b-9bf5-c32aa18854dd"
        },
        "item": {
          "id": "f25648c8-054e-4f2f-a1ed-3427fe8ea860",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "22124ffa-9387-4269-929f-1c5ecd05ec24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e664a16-e7ea-4c1b-bd40-357e48707bd3",
        "cursor": {
          "ref": "c73bc08a-0fa8-41d8-ae8f-298d208a596d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2ac0196e-1cc3-4569-abc2-869605d3e2df"
        },
        "item": {
          "id": "9e664a16-e7ea-4c1b-bd40-357e48707bd3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "717347ab-6885-417f-8edf-4ca012438258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6248c4-9ec2-4a45-84af-979327a93280",
        "cursor": {
          "ref": "e7418a37-d895-4a6f-b22f-c8986ecb9de2",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1e0ab12c-b82c-42cf-8679-64701b8c8058"
        },
        "item": {
          "id": "9e6248c4-9ec2-4a45-84af-979327a93280",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "26b6530b-b2de-4035-a629-1b5a96698db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9165232b-0a55-4eb2-bcb4-3a434cdab7cf",
        "cursor": {
          "ref": "da04142c-3817-4c45-aedd-50af304e85e2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8fb23a4d-6e36-4ccb-983f-737d69f2c26a"
        },
        "item": {
          "id": "9165232b-0a55-4eb2-bcb4-3a434cdab7cf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "44a3188b-36dc-4768-8367-a4b7471e17db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12326ff3-13de-4416-a368-a5fbf008272b",
        "cursor": {
          "ref": "fe6f4245-e503-44c9-9795-b157d67c5cc7",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "71d7ea12-1339-4b28-81b4-0cc885c2beb1"
        },
        "item": {
          "id": "12326ff3-13de-4416-a368-a5fbf008272b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0ceef48c-ad0e-47bc-9327-723b0df903ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfc7c93-19b8-473e-8f8c-0f5f8370af4f",
        "cursor": {
          "ref": "87ab029a-9247-41fd-b1d6-4f832e98c9d2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e06817fe-38af-4e68-92e1-3cc852e5fe42"
        },
        "item": {
          "id": "5dfc7c93-19b8-473e-8f8c-0f5f8370af4f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9c09040e-7717-4453-84b7-b1202315b63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7052935-9782-4fbf-b54b-0b70cb76bb0f",
        "cursor": {
          "ref": "65c85f0f-5641-4839-98e1-2f66727e2fd9",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b85d3b70-a461-48e9-8b03-7201c84f0f2c"
        },
        "item": {
          "id": "b7052935-9782-4fbf-b54b-0b70cb76bb0f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6593589b-a2ea-49a5-8a44-d2878b339c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac7309d-3ad1-46a4-be89-7f2f9bdbb695",
        "cursor": {
          "ref": "9ec003b9-21f4-4e52-b4fc-b4a84f9bee02",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4ef7dd15-eebe-4b7f-a277-7832934d1b53"
        },
        "item": {
          "id": "6ac7309d-3ad1-46a4-be89-7f2f9bdbb695",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "809c7bea-ece2-4f9f-b14b-31ccb4a64ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2b552a-50db-40d3-8f50-8398d4c691c3",
        "cursor": {
          "ref": "34f93234-49c6-4b77-be31-7aa59402f8ac",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4c129122-39cf-46ea-a967-15ccfdeda432"
        },
        "item": {
          "id": "fd2b552a-50db-40d3-8f50-8398d4c691c3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ea45a3ce-9d6a-4a0f-8d3b-6c02bcf49c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f974364-0956-416e-b03c-f5489db76988",
        "cursor": {
          "ref": "ac2fa198-f8ed-4b1d-ba59-43cc6512a97c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "055b1b10-5b81-4810-a129-4c086bcdc69d"
        },
        "item": {
          "id": "1f974364-0956-416e-b03c-f5489db76988",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2d4a3a8d-5ecd-416c-97d7-af4d73fc3001",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "25d343c0-aa0c-4474-9b8f-540df2a28f96",
        "cursor": {
          "ref": "2df5260a-cab9-4aae-baad-e0f98d951eb4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8525547d-29d8-480d-94b1-becc59200150"
        },
        "item": {
          "id": "25d343c0-aa0c-4474-9b8f-540df2a28f96",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b6e3b843-dc4e-47d7-94d8-83869a57ca9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cf6d0c-fae7-4a8a-ba36-8c287e231750",
        "cursor": {
          "ref": "884cd9b5-98c4-4976-a1d7-015d256391fd",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ff73c54e-7a7f-4f2c-8833-9ee7f3ce1d31"
        },
        "item": {
          "id": "32cf6d0c-fae7-4a8a-ba36-8c287e231750",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b8fc72b3-e18d-4f0f-9c46-39a15873a1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac11136f-b627-4b45-9cd9-9fc4cd1fa055",
        "cursor": {
          "ref": "4973f72a-7302-4cfa-b4ce-7905f1187e51",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b886b4fb-5789-4403-9be0-3a26e70fabfd"
        },
        "item": {
          "id": "ac11136f-b627-4b45-9cd9-9fc4cd1fa055",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b953e58a-fe8a-4544-849b-dbe0120f1b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ebde01-bb37-4ab4-bd89-99d69b254dc4",
        "cursor": {
          "ref": "1bf48eb8-1e2c-4ff5-b327-053a85bc7a42",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6bf3a8d1-dd9f-42b6-a731-bae13f8888c2"
        },
        "item": {
          "id": "75ebde01-bb37-4ab4-bd89-99d69b254dc4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fb7ed7ce-e87b-4669-bf8f-8b92b34ce645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d52541d-a5b2-410e-8b6d-408ffaf33a11",
        "cursor": {
          "ref": "cf2b33c4-f872-4035-825f-64f6eeeaa336",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5647d131-22de-4b45-9d63-37b3b17cb177"
        },
        "item": {
          "id": "6d52541d-a5b2-410e-8b6d-408ffaf33a11",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3f952f2f-90f3-4b32-8b0f-aef2f57f4048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3bf374-e275-4bf5-aa80-602e57ed0bc6",
        "cursor": {
          "ref": "fd3a8445-8e46-49fc-9c60-5825728d98f2",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cb07ea07-b136-41a3-aa2f-415136db2ba5"
        },
        "item": {
          "id": "9e3bf374-e275-4bf5-aa80-602e57ed0bc6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "259a502b-0cc3-4cfd-a5ef-c0a5d4ce1170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad1416f-7e56-4e7c-b4ae-fad558b6dfb9",
        "cursor": {
          "ref": "8e294512-44af-4b3c-9b39-afc5a670cdc2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6749f1f0-1bed-4ddb-94c7-14223da4d7d0"
        },
        "item": {
          "id": "cad1416f-7e56-4e7c-b4ae-fad558b6dfb9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cafff514-e9ac-4181-9410-7d8fe78b1740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55a7236-734a-44d8-9c1e-818117479baf",
        "cursor": {
          "ref": "fbb3420c-0c31-409c-9c5d-e8b7e956eeaa",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c139e6b8-4d6b-4802-a6ec-6bd48d956086"
        },
        "item": {
          "id": "e55a7236-734a-44d8-9c1e-818117479baf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0829ad71-3662-475a-9ab4-a11e4eacaecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e9b096-708d-48f7-b6e6-6abbbf93e6b5",
        "cursor": {
          "ref": "2713a714-1096-40ef-a92d-2a6310221e80",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "16d56016-6a99-466d-a2ac-fcfaa3fffb87"
        },
        "item": {
          "id": "a2e9b096-708d-48f7-b6e6-6abbbf93e6b5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "961f555b-b9f4-4379-8b70-1534e902853d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f463621e-7f29-4ca2-98de-17f76cc0a35a",
        "cursor": {
          "ref": "f9355a90-4826-4861-8768-38a6f4eafb42",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "230ff125-dded-4217-9cb3-11cd52e99b96"
        },
        "item": {
          "id": "f463621e-7f29-4ca2-98de-17f76cc0a35a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0edf334f-bb1e-46a9-b71d-2a0533788774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246cba9-bd27-451e-a6d2-b3b2fe944ab2",
        "cursor": {
          "ref": "97d117fc-5f1a-47c5-a307-4dfce8194cb0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "21f11df2-95a9-4a5b-a0f7-231cb2180249"
        },
        "item": {
          "id": "f246cba9-bd27-451e-a6d2-b3b2fe944ab2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "592f9c8f-ab16-4e6b-a3ce-b87de0c48661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0936f28e-c25a-4af2-9350-a2811d3d2039",
        "cursor": {
          "ref": "6246e2ca-d818-4655-a8dd-3beda23d93cd",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5ac33fde-9c76-4d0f-84bb-16bffd9000a1"
        },
        "item": {
          "id": "0936f28e-c25a-4af2-9350-a2811d3d2039",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "513d6276-f9c3-4bd0-8646-ecd220c4de79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c047bfbd-7c84-4a6e-9cbd-86360c6ba5a2",
        "cursor": {
          "ref": "ad693677-e8ba-4e1a-b504-852f25aee510",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fb12752d-d91b-4fef-9080-30e3f6d12244"
        },
        "item": {
          "id": "c047bfbd-7c84-4a6e-9cbd-86360c6ba5a2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "353ad857-ba23-4055-af9f-ba794fe903c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35f77b2-5f3e-4d54-8c90-9d6aaff3c22a",
        "cursor": {
          "ref": "c2641b4a-75ce-465c-866d-b66124566f89",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "31b5f0d3-e010-4c5e-8b89-7a77ea9b0e7f"
        },
        "item": {
          "id": "b35f77b2-5f3e-4d54-8c90-9d6aaff3c22a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9af5b7ec-6970-4bc2-9605-5e8f805a432a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dbaa92-3d13-4623-bf6b-254e24bbd928",
        "cursor": {
          "ref": "f57162f0-3b47-4db5-b1b4-03a052ca8dd7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "90c935fa-3ea4-46d1-a95a-cc596847f3d4"
        },
        "item": {
          "id": "06dbaa92-3d13-4623-bf6b-254e24bbd928",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "171f440d-8f71-4646-b6fa-b72ab1e31f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e306893-12ae-4840-9179-cbdb6422e44e",
        "cursor": {
          "ref": "e9165853-7eca-4ae5-afef-40b2543369b9",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "29aa382a-9b8c-452e-8395-6c2ae21c4eaa"
        },
        "item": {
          "id": "1e306893-12ae-4840-9179-cbdb6422e44e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6dd14ebe-f771-4dfc-bc41-efff7b69a5c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced7270f-5c1d-4ffb-8b8d-e7dc3c3a6170",
        "cursor": {
          "ref": "2adf1e1f-1280-4761-a352-2e7796e8dc0e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1010f5b5-96f8-4207-a48e-4eba3a24db65"
        },
        "item": {
          "id": "ced7270f-5c1d-4ffb-8b8d-e7dc3c3a6170",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7265da46-87ee-43af-be33-beccbe9ed4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0f3802-cc99-47a8-8e16-0b3f5fb62caf",
        "cursor": {
          "ref": "95b89a8f-aa33-42d0-a648-aadc78e9436e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7980a539-e547-41ab-8cc3-74bcf2ca53a2"
        },
        "item": {
          "id": "ad0f3802-cc99-47a8-8e16-0b3f5fb62caf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b608ad8a-171a-4688-95af-021a1ba13e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bda102-c3d7-4958-adc2-db2266aac8b0",
        "cursor": {
          "ref": "55b7c696-05a1-4812-b653-c0daed313615",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7596b13c-22e1-4490-80fc-105f3fbb8aeb"
        },
        "item": {
          "id": "b7bda102-c3d7-4958-adc2-db2266aac8b0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2de8ea3d-d5e7-41bb-a824-27949f31ab39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41b9e2-ccbc-4eff-b88c-06ef03b7672e",
        "cursor": {
          "ref": "08345877-d3fd-4d62-929f-46558e824f88",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9d94e94b-aea9-4fc6-b49f-d8a8877cad0f"
        },
        "item": {
          "id": "db41b9e2-ccbc-4eff-b88c-06ef03b7672e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e6ecd0ea-b995-4bda-b20e-c4e29ce16851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec3d755-72e6-46da-bf1a-f39a50a3a02e",
        "cursor": {
          "ref": "06b62b9d-f0cb-42fe-ae43-83d5d825c73d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7d6a35b9-a51c-46d0-921b-d69c5ea55d8d"
        },
        "item": {
          "id": "1ec3d755-72e6-46da-bf1a-f39a50a3a02e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9ece7030-5e0b-4b14-97e2-88b59346b293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5973a50-a7f9-47a1-8602-a0c6bde29926",
        "cursor": {
          "ref": "e0debf03-2325-4cb4-a83b-4600aba05f95",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "23a80a6d-b88f-436c-9f0c-f7421ed1dc92"
        },
        "item": {
          "id": "b5973a50-a7f9-47a1-8602-a0c6bde29926",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cd8f162d-58c7-4f95-a2a9-bbe75ce576be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eae140-b0d3-4d91-91a6-1f46002167f9",
        "cursor": {
          "ref": "93b888b5-efba-4655-a1d7-884451e350e4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ad5fafe1-55bb-463c-b932-5a06d2a4ba0c"
        },
        "item": {
          "id": "13eae140-b0d3-4d91-91a6-1f46002167f9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "10a2c63b-f55f-4463-927f-ae8a6b60824d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b119269-b9cf-431e-95b8-80adc0c74d6d",
        "cursor": {
          "ref": "20a9343e-57b2-4e23-80c2-9431c4644ee3",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e4d74aeb-057c-449b-9e9f-120f7bf48074"
        },
        "item": {
          "id": "5b119269-b9cf-431e-95b8-80adc0c74d6d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5e3d9ecb-6ca4-4f6c-a98f-b8fb80c2d738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8ded2a-7559-43b0-9c9a-406a531cbedd",
        "cursor": {
          "ref": "6370e083-55c0-430d-824b-402cec40224a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cd447af9-2478-4fde-ac6f-d72fbce62a4e"
        },
        "item": {
          "id": "6a8ded2a-7559-43b0-9c9a-406a531cbedd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7459af72-9937-4faa-8428-03a2bf918b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9538f5-64e2-413b-b47c-aaaacfb74d82",
        "cursor": {
          "ref": "4ccb78e5-b7cb-4f43-a7ec-8a2095f57310",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9e40169e-62ca-4d00-b9ff-09d4f335b143"
        },
        "item": {
          "id": "2f9538f5-64e2-413b-b47c-aaaacfb74d82",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "796b93e6-c79c-4646-a6de-b1f6e638cc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd6c38b-6d10-4b88-99f6-05d5853b075a",
        "cursor": {
          "ref": "09c41582-e20f-4180-a760-575ce8659843",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "86d1622a-06e5-4a7f-ab94-2388d0cfa820"
        },
        "item": {
          "id": "ebd6c38b-6d10-4b88-99f6-05d5853b075a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d2fc8179-63eb-41b9-81d3-d7f2bc19d048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f239f8-dc44-49bb-a1b9-07852dd88fbd",
        "cursor": {
          "ref": "2a8ec848-2fa4-4eb3-8a64-193c7f3d268d",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "11abcbb7-5608-4e99-906f-0df0b9507677"
        },
        "item": {
          "id": "72f239f8-dc44-49bb-a1b9-07852dd88fbd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7baadf05-3cdd-4bd1-87fb-ee3b369c795c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8452a2f-0d3e-44e8-a6ae-931bc4d90a89",
        "cursor": {
          "ref": "9788bd82-d0e2-47c9-a7d2-f5f6488403ef",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5505dfa2-80e4-4395-973b-6d8293b11e4d"
        },
        "item": {
          "id": "c8452a2f-0d3e-44e8-a6ae-931bc4d90a89",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "07b75596-4d27-475a-b000-7922eef774f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a6f9b9-96dd-4465-aadb-5a5fd3b07ee2",
        "cursor": {
          "ref": "766fda51-abe3-49dd-aa65-6fd2091659f1",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ef054bcf-e8c2-4965-b4a9-b7e536d12a8d"
        },
        "item": {
          "id": "97a6f9b9-96dd-4465-aadb-5a5fd3b07ee2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d128938c-9885-4717-aafc-eedd40befe5a",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d3da429f-585a-42e7-a86d-444cf06c9c70",
        "cursor": {
          "ref": "d0ca5c3c-3c41-438d-9bd2-582d5b81ef17",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f1b0f7ff-d12b-4b71-894d-b728c3043616"
        },
        "item": {
          "id": "d3da429f-585a-42e7-a86d-444cf06c9c70",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a28deaad-053b-43ae-98f5-56dff60820e4",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ad5cdebd-72b9-4e9b-9e41-725dbf81b6ee",
        "cursor": {
          "ref": "0bae6909-df0f-4ac4-b8bf-2cee8815f62c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "785aacae-01da-4228-bb31-10bffa4f7c9f"
        },
        "item": {
          "id": "ad5cdebd-72b9-4e9b-9e41-725dbf81b6ee",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7829eadb-38ba-417e-828e-19da6f42b913",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "47439ab5-62c6-4db5-ab0c-3a7528f17086",
        "cursor": {
          "ref": "6303ab60-b744-4560-8571-2ee1432a7b0a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c3aa85de-8604-4a7d-afc6-acc0e360ccd3"
        },
        "item": {
          "id": "47439ab5-62c6-4db5-ab0c-3a7528f17086",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a66f51c8-0f14-4842-850e-6a63cc8f71c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a38978-3e60-467d-9e34-be7e220fae2e",
        "cursor": {
          "ref": "aca709c6-60f6-45c9-bf0e-977e82c3117d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1903b9c8-3e07-4a21-b87f-4abf601b8452"
        },
        "item": {
          "id": "94a38978-3e60-467d-9e34-be7e220fae2e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d46a6ee7-b8fc-4798-8c6a-2b446e203dfd",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c7ef6f09-2197-48f7-bd51-ac0e5363b32b",
        "cursor": {
          "ref": "83c5e5da-3a45-4f85-9536-d86d645875e0",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "49e2ee52-2253-4ba6-aad1-fae07fe881a2"
        },
        "item": {
          "id": "c7ef6f09-2197-48f7-bd51-ac0e5363b32b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c415fe1-c0fc-4a78-9efb-27e784cc45b3",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c4b96507-8b9d-4253-8587-7830bad746d4",
        "cursor": {
          "ref": "2a34131c-7b22-470b-92c1-b09281e74a65",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5c2045ff-2041-44d1-9770-80a71df5c8f0"
        },
        "item": {
          "id": "c4b96507-8b9d-4253-8587-7830bad746d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2b094656-5e01-4193-9b4f-9684f0e315ca",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5d6461d3-23e6-4eaf-b771-cf4e8ed0db27",
        "cursor": {
          "ref": "c73e4040-9986-4654-a4b7-3edfefc90bc9",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "84728d05-092a-4532-beea-90f0130a53c3"
        },
        "item": {
          "id": "5d6461d3-23e6-4eaf-b771-cf4e8ed0db27",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bd213b63-3a32-4522-8812-bfe0188f50c0",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "38307038-3f12-4006-9fb9-1fbae6e87271",
        "cursor": {
          "ref": "65772c80-a358-4b8a-98c3-f41f53a4c546",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4c07c512-f904-4ec2-92cf-4ea78dbdfe82"
        },
        "item": {
          "id": "38307038-3f12-4006-9fb9-1fbae6e87271",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "23600dc0-0053-4d8f-a802-13091d946fc7",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3d54f21a-9ef5-4e7b-8839-28ed2a70c02f",
        "cursor": {
          "ref": "bee50360-a0ec-4ac6-9f38-feb014d8d83b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "107d521e-d3e0-420b-ac71-8914adb63cd0"
        },
        "item": {
          "id": "3d54f21a-9ef5-4e7b-8839-28ed2a70c02f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c6d86fdc-0e52-4d21-ac2a-af48cbbc8419",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6882bd80-aafe-433e-92aa-b7388b95c876",
        "cursor": {
          "ref": "b13cf46f-8c81-4e53-a101-3f0a2a499185",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "37a081ae-bb7a-4628-9e85-e24bc2080d64"
        },
        "item": {
          "id": "6882bd80-aafe-433e-92aa-b7388b95c876",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "074527d6-163f-4136-bf66-0cb92f2efc01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da5bad1-39ba-4a0d-9b7a-18605c79bd94",
        "cursor": {
          "ref": "f0fb7700-0dd1-425d-81e6-20da7fd8b6c3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "76bbd83b-25d8-427b-b6f7-152e6b6ee3b9"
        },
        "item": {
          "id": "8da5bad1-39ba-4a0d-9b7a-18605c79bd94",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9362848b-605e-4475-acaf-68501a9bee52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d23a67e-c6d4-49e8-8175-23fdd810d10c",
        "cursor": {
          "ref": "48938153-ac69-40d3-b28d-98ed1a025f1f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8dfab2ec-1e34-40b3-8619-210dcfd34003"
        },
        "item": {
          "id": "5d23a67e-c6d4-49e8-8175-23fdd810d10c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "da39037c-e13b-495b-b317-4b4409005b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f9be5f-4246-4717-8755-e7c83efefef3",
        "cursor": {
          "ref": "7303fa83-566d-4345-adf1-bec13494de24",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "25c50e05-fb95-4505-9069-2ffd062eadb6"
        },
        "item": {
          "id": "c5f9be5f-4246-4717-8755-e7c83efefef3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "19a73998-3e16-4427-b731-e442d9a6f048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a6684a-5ad2-4a24-8d87-ed66a58b26e3",
        "cursor": {
          "ref": "c67267dd-4617-49f1-84bf-59765b8642e0",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a9f78b35-e68b-48d4-b12a-7f4c00f9fb9c"
        },
        "item": {
          "id": "b2a6684a-5ad2-4a24-8d87-ed66a58b26e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dacd94f9-e087-4dbe-9b96-b4600b6d76b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1064fc18-88ff-45c7-8307-00b040a9727b",
        "cursor": {
          "ref": "07e011d8-5066-4f30-9976-e3062d779459",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "17cd1c1b-74cc-446e-bdd0-2ab6bb4d0bfd"
        },
        "item": {
          "id": "1064fc18-88ff-45c7-8307-00b040a9727b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2a077856-9527-4fbe-bd9a-7804c5624c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c93e01-a39a-4a39-b5c4-a4bd57a279eb",
        "cursor": {
          "ref": "0d259863-221b-4fb2-acc4-e2617bc11355",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "612c33c2-ce57-4ed5-912a-df1ff995af15"
        },
        "item": {
          "id": "83c93e01-a39a-4a39-b5c4-a4bd57a279eb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dfb8f5c3-a5f2-4f8f-a364-a3b728d71477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c25f38-964c-4644-a2e4-a1a6cb42f7e1",
        "cursor": {
          "ref": "53df6cab-d714-40e3-9e7c-515fbd09e248",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f99bc2ca-103f-403a-a8ec-51633c077c79"
        },
        "item": {
          "id": "79c25f38-964c-4644-a2e4-a1a6cb42f7e1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "96d9aa46-a48d-4fa0-8a54-a9d6792e4fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bede840-32ef-48ba-b21e-9c3d05eae4eb",
        "cursor": {
          "ref": "97030913-6eaf-44b3-b46d-eac88e30dae1",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "303a2bdc-97e0-4a36-8a2c-f8b55e7e94a4"
        },
        "item": {
          "id": "5bede840-32ef-48ba-b21e-9c3d05eae4eb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "28876e65-a3d8-46c9-8b96-cbd5aa75fae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec98d1d-9c03-4ae9-bb28-92bc7c72ecab",
        "cursor": {
          "ref": "75e5f8a2-0c2a-4ab4-bf77-c2cf69eacfed",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7a3c8bf3-0e3c-46cd-8f15-ecf0eb1a0d16"
        },
        "item": {
          "id": "dec98d1d-9c03-4ae9-bb28-92bc7c72ecab",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5bc26db1-1212-4ba7-a6a8-01e46a913dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91047748-c459-40c5-ae0e-cfb29dc978a0",
        "cursor": {
          "ref": "f972917e-fd67-47dd-8b45-de63028bfde9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5d86a3cc-15c8-4d01-87d7-eaf8a553177b"
        },
        "item": {
          "id": "91047748-c459-40c5-ae0e-cfb29dc978a0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c532fbf2-47f2-42ec-9293-a025027764f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98a1a1e-1895-4a90-9e6d-aeb72c4a05d3",
        "cursor": {
          "ref": "1335ae3e-94ca-4807-86ed-2524eab93e3f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4d1eeac9-25aa-476e-93fc-967c02eea767"
        },
        "item": {
          "id": "d98a1a1e-1895-4a90-9e6d-aeb72c4a05d3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "85733457-3b16-43f5-b682-acdf7fdd1b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e3abc8-dc6e-435b-9584-e4bdd80579a1",
        "cursor": {
          "ref": "5dac6f4c-921c-49db-a08e-708e60461382",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "42c45da6-5369-40d3-93ea-cf50ebbd64fd"
        },
        "item": {
          "id": "95e3abc8-dc6e-435b-9584-e4bdd80579a1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "04da3b95-f27d-4422-b3d9-14db27d14d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a942e407-7a87-48e1-8c73-f4957a7744d0",
        "cursor": {
          "ref": "0710efea-e9d5-49bd-aa7d-3e0817e52a3d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "13ce71e1-c6bd-4e24-beb7-ce90dbe6107a"
        },
        "item": {
          "id": "a942e407-7a87-48e1-8c73-f4957a7744d0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3119f3c5-331a-453e-b03f-b5b6212c176b",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f19203f9-b82e-4981-99d9-11c2ef549da1",
        "cursor": {
          "ref": "dcd44440-0c7f-4922-aa54-8fd1d6777abb",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "974c15fa-8092-4c31-ad8f-768fb39ab478"
        },
        "item": {
          "id": "f19203f9-b82e-4981-99d9-11c2ef549da1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "39bce063-0c27-4c3f-b0f6-8be1f5677a2f",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "848009c3-7ba8-4fed-8d54-a03f52ac2c57",
        "cursor": {
          "ref": "299b0c41-a0f6-4fb0-b17b-1e58d21d83da",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7c3a20e0-f321-45b9-a02e-7c8d2abe68d0"
        },
        "item": {
          "id": "848009c3-7ba8-4fed-8d54-a03f52ac2c57",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fbbefa55-7ce1-48da-9faf-4f77214fe349",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "125e3375-e11b-4c01-83bb-cb209ea9eb1f",
        "cursor": {
          "ref": "ec558fd2-7655-488f-bfc9-41b07f75fd99",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86bab591-e039-4d27-9f88-af2111611743"
        },
        "item": {
          "id": "125e3375-e11b-4c01-83bb-cb209ea9eb1f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0585f588-fe27-41be-acdb-97388d3a4477",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "bb2deaaf-aeeb-4e42-b209-c505eb37fe08",
        "cursor": {
          "ref": "adc8ab04-f54d-4010-9c93-f9005b206a14",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "26dbf03d-ce01-40b1-8717-4c73157c51cd"
        },
        "item": {
          "id": "bb2deaaf-aeeb-4e42-b209-c505eb37fe08",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "75e3cdf9-e184-4c54-a29c-276669de9abd",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "cd57ba60-7d65-4c5e-a22b-0b341f637173",
        "cursor": {
          "ref": "cdbc617e-9546-4403-856d-a22cd557cb72",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a98dc00b-f2cc-4786-979a-724276f9f8b6"
        },
        "item": {
          "id": "cd57ba60-7d65-4c5e-a22b-0b341f637173",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fd595725-93f9-4b29-9364-9e822b9cd190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc5593a-de27-4ae9-bdec-56577fea2f26",
        "cursor": {
          "ref": "afdbd4fd-9844-41ef-b0a0-16ce4481f429",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a291be6-7c43-4b9b-af5b-d00db46a6a61"
        },
        "item": {
          "id": "adc5593a-de27-4ae9-bdec-56577fea2f26",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9de12fec-db2b-4eaa-9ba3-971a958520d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8ccadc-23f1-42d3-9664-4e2366b8cdb3",
        "cursor": {
          "ref": "cdc754da-d23a-4944-b078-29944c70b8fa",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3864918c-b4e1-4623-9807-27c3ac72d951"
        },
        "item": {
          "id": "de8ccadc-23f1-42d3-9664-4e2366b8cdb3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8f9f68d2-4c23-4333-8858-c1b3b814df94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45773f7f-ca31-42aa-b036-a517f813968a",
        "cursor": {
          "ref": "90ef9f31-200f-45d7-b4e5-49a1f623922e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f9e76d69-aa1f-4495-8b1e-d1c06bda86e4"
        },
        "item": {
          "id": "45773f7f-ca31-42aa-b036-a517f813968a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f68fc343-f8d6-4757-96cf-92e9a144c6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e32c73-22bc-4cd8-a3fb-ed2c5588d2b2",
        "cursor": {
          "ref": "8cffa08d-6226-4e83-9cb5-93fd20844c5d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5e26a75d-d977-401a-bf6e-bfe66c7c6b64"
        },
        "item": {
          "id": "01e32c73-22bc-4cd8-a3fb-ed2c5588d2b2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d970f03b-7361-4c80-bae1-6a52f01560b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a95f7e-2c4c-42bf-a6b2-c88cb0e3230c",
        "cursor": {
          "ref": "2ad8880f-19b2-460b-a7a9-435f48f8ebda",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "924924f8-33ea-404f-a5a7-9e3d6be62416"
        },
        "item": {
          "id": "57a95f7e-2c4c-42bf-a6b2-c88cb0e3230c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "759dfed5-3c3d-403c-9fed-4603b9e7f037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feaa528d-0173-42d1-a11d-dc6aea10ce99",
        "cursor": {
          "ref": "7ea7fc18-665b-4038-8b86-9219087f5573",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "acfbf672-73e4-438f-9b8d-5759d1ae2fd7"
        },
        "item": {
          "id": "feaa528d-0173-42d1-a11d-dc6aea10ce99",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fb0dab28-6462-40bd-a297-85ffe85657a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf90cb9-9b2e-47ee-9f45-49df67da5e6d",
        "cursor": {
          "ref": "7e86858d-b1a9-4f28-af7c-246a59765b54",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ac2dcc1a-f513-4039-b957-c6e0e67a635a"
        },
        "item": {
          "id": "acf90cb9-9b2e-47ee-9f45-49df67da5e6d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c5546cff-f3fe-4925-bea9-049c0cd5c0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46a1ab6-872b-4e62-bd0d-62eff538b58a",
        "cursor": {
          "ref": "3dbe9f9c-3013-4295-9c0f-99c2220bb77c",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ff5dc761-6a96-454b-91eb-d78b284c866d"
        },
        "item": {
          "id": "b46a1ab6-872b-4e62-bd0d-62eff538b58a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ae988a2d-d1a3-447f-b8d5-cf032c0f5490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf9d803-da9e-4f03-99e7-e17d6c8fd5cc",
        "cursor": {
          "ref": "7e4be277-b69e-4eb4-ad9b-da338290c24c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f2478981-d00e-43d7-ae36-027e51a3e157"
        },
        "item": {
          "id": "9cf9d803-da9e-4f03-99e7-e17d6c8fd5cc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5d4eb39-0f83-438d-961b-112dfb02b54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb7651c-ef29-47ab-b6b1-d9127863d96b",
        "cursor": {
          "ref": "f684b440-cd50-4092-a11a-225c987de6b4",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5e7e6687-3ca5-41ae-86e7-cb900da13957"
        },
        "item": {
          "id": "9eb7651c-ef29-47ab-b6b1-d9127863d96b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7c8080c0-de9c-46ca-9d6c-78a3a9dc4153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4ba071-8c3a-4e3e-8c8d-94c9aa0ad89e",
        "cursor": {
          "ref": "df940d7d-409d-4352-ab0c-8556e9a539c0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "25004a19-4c18-449a-9334-048738103419"
        },
        "item": {
          "id": "5c4ba071-8c3a-4e3e-8c8d-94c9aa0ad89e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "564f7205-1d3b-4d3d-b942-c5dd7927dc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9939815-e838-4bdb-8221-fbd2cf13765b",
        "cursor": {
          "ref": "134aee27-c8eb-4faa-9ff9-97cba09e81f2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ea1f7902-6849-4e3f-bee1-73e5b0e4de33"
        },
        "item": {
          "id": "b9939815-e838-4bdb-8221-fbd2cf13765b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "19c15b57-b0bc-4dcc-9b03-725b20c4b2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cb6c53-a9fe-49ec-a052-99d186870cec",
        "cursor": {
          "ref": "e8ec6488-8f7e-49a7-beea-e6d2ca734719",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0e603fa9-dde3-457d-a881-39f6452d3671"
        },
        "item": {
          "id": "35cb6c53-a9fe-49ec-a052-99d186870cec",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "da8d32b2-1e2e-4fcf-8e6f-e2084255be92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f654c9c7-017b-4269-b7ed-a688190a5983",
        "cursor": {
          "ref": "8b03d816-e017-45d4-a69f-d18669b71ea2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "643dbce0-e35f-4955-b4f0-0ad44c55fda9"
        },
        "item": {
          "id": "f654c9c7-017b-4269-b7ed-a688190a5983",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b0a1b5af-6e59-4047-83ab-4772aaad9aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab4939f-477d-4e8f-9a16-8665b4fd4ce1",
        "cursor": {
          "ref": "24312670-1fd9-4159-a3ab-da6704cdd5c9",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "10d64e2d-ba7c-4252-a4ad-60a032550c9b"
        },
        "item": {
          "id": "fab4939f-477d-4e8f-9a16-8665b4fd4ce1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5405d975-5884-4436-959e-c1c9b9068981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d68ee-592c-4847-b4f9-ad97057bb114",
        "cursor": {
          "ref": "0877dfbc-87d6-4e12-b35d-f1e35772e67e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "32570e1c-3823-47d4-9c37-83af77fac4ab"
        },
        "item": {
          "id": "589d68ee-592c-4847-b4f9-ad97057bb114",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2385cf85-ffe4-47f1-8b6c-c5bf71bc330d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5345003f-2904-457c-b1e7-f017087835a5",
        "cursor": {
          "ref": "9e747caf-fe7e-44bd-8dd1-6c9901ec9176",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "4c23d7b0-df2e-4b6d-a328-6a6bcfd377a5"
        },
        "item": {
          "id": "5345003f-2904-457c-b1e7-f017087835a5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "13556f78-92ca-4f6b-8fff-a59e7627b272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81484e5-72c8-4a91-b01a-26162f345907",
        "cursor": {
          "ref": "d698880d-02af-4f73-a11c-c6e730a6167c",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cceab782-ebac-49fc-839c-7d214cf2facf"
        },
        "item": {
          "id": "e81484e5-72c8-4a91-b01a-26162f345907",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "11d4fb54-f9ab-4b19-97ad-e74400b71c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d00be2-57ac-4e87-96fd-dbfdf57d9675",
        "cursor": {
          "ref": "1219be89-3c03-4de6-9615-2670f4fc7cbb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "50e126c5-52ee-454d-a1e8-2433a47eb093"
        },
        "item": {
          "id": "39d00be2-57ac-4e87-96fd-dbfdf57d9675",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e43dc832-386d-4453-8c87-560acbd083c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d88df3-83f2-4565-9303-6241f7a486e3",
        "cursor": {
          "ref": "22764e12-83c0-40df-950b-7cadcca0d1c1",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "04448d5e-485a-4f84-9d6a-32addd303f94"
        },
        "item": {
          "id": "d0d88df3-83f2-4565-9303-6241f7a486e3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "668b3814-2c9a-4ff9-b30f-414fdcb5c12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0628864-89af-4ad2-bd60-f2abfda269cf",
        "cursor": {
          "ref": "5908004d-483c-4d8a-9223-8244062992b8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "69d77305-66f7-4b6e-8ec8-d849997ccfef"
        },
        "item": {
          "id": "b0628864-89af-4ad2-bd60-f2abfda269cf",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "00cda98b-9716-4ce9-a903-8aa9542b1b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fb665d-cb18-4e14-b5fc-20d5d299a6d4",
        "cursor": {
          "ref": "7d7f7d95-308f-478e-a57d-acaf06126aa8",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "79c4817e-49ef-456e-9377-014526a8f8c5"
        },
        "item": {
          "id": "51fb665d-cb18-4e14-b5fc-20d5d299a6d4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e71857d4-bd8c-46da-afaf-df0160b22d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77568c81-2f61-44a9-8f1a-1e6b18ef15ca",
        "cursor": {
          "ref": "7abb14ac-4f59-44d3-ad61-47d1f032459c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3589f765-afd5-40b2-909a-b5de25be9f00"
        },
        "item": {
          "id": "77568c81-2f61-44a9-8f1a-1e6b18ef15ca",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1b2cb81b-05e2-456a-810b-983c877e4daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634a9e47-f771-4e20-a537-45e2389045ee",
        "cursor": {
          "ref": "12a5e847-d713-4e64-b3db-ec0f6ccebfe4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e3ae982b-b197-4cec-8078-513e83b2f216"
        },
        "item": {
          "id": "634a9e47-f771-4e20-a537-45e2389045ee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2c7ee007-fec0-4193-bd96-cdedfaebc687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7c0e20-3041-4127-84a8-7d0f6a2b13c1",
        "cursor": {
          "ref": "353f1f9f-2f78-404b-a735-d852d9c6062e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "db379225-dec3-4d9b-875e-8e49c9787347"
        },
        "item": {
          "id": "aa7c0e20-3041-4127-84a8-7d0f6a2b13c1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6cdc72b1-89b6-41b3-aa00-38229bf4def0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1856de50-0852-4a81-87be-15e825552e6c",
        "cursor": {
          "ref": "9c577274-6225-41df-99e2-7ad2b59b8dee",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b74b336f-f75a-47f2-b2ec-085dafd78cf9"
        },
        "item": {
          "id": "1856de50-0852-4a81-87be-15e825552e6c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c50b006d-e865-41ea-9e31-c14477f478ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14f0b41-d5a5-42d5-9a24-6bc603df17d5",
        "cursor": {
          "ref": "b88cd5c3-c9ee-4266-bcb3-766a64db1922",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fa4c2928-9398-4b60-a856-a7282deb6bdd"
        },
        "item": {
          "id": "a14f0b41-d5a5-42d5-9a24-6bc603df17d5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "be5d9f6c-9b91-4ec8-8153-2a23580403b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27872865-bfb3-48da-9cc7-a05390ca3a94",
        "cursor": {
          "ref": "de198695-89dc-4712-9f21-de18fd09c93f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6f847388-612f-4dfa-97c9-b11009d391b1"
        },
        "item": {
          "id": "27872865-bfb3-48da-9cc7-a05390ca3a94",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "038a7703-7a41-4cbc-9860-809cfcfeff4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564dce7f-f2f2-4ade-86b2-49d3335a8538",
        "cursor": {
          "ref": "f47cd38e-9258-4012-9ca8-7141aaac1baf",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d8bde25d-b587-41e7-8424-8334682f539c"
        },
        "item": {
          "id": "564dce7f-f2f2-4ade-86b2-49d3335a8538",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "60ea9ada-dab0-4be7-9118-6426f159a1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60090009-e252-49da-a511-7cb14a485025",
        "cursor": {
          "ref": "c4486735-211e-4092-8b11-dd439c19f20d",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1800048d-c8a8-41f8-a9f5-fb8c4e3612bf"
        },
        "item": {
          "id": "60090009-e252-49da-a511-7cb14a485025",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "355c14d5-519c-453f-abbe-57a535b06ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cbf994-d5e5-4ea5-9de3-113f64a23579",
        "cursor": {
          "ref": "c37e3054-d078-465b-9dbf-c4f1dd9de85d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "69190626-ad87-438b-809b-cdf8ffa2f74c"
        },
        "item": {
          "id": "21cbf994-d5e5-4ea5-9de3-113f64a23579",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1dc23efe-8d73-425a-b6bb-17e78c35a01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b4a262-a779-49b3-a9d7-98b69de9205f",
        "cursor": {
          "ref": "b81d2f00-887f-4913-bef9-fa40008e46db",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "5557b1ac-0d2e-42e7-9c16-ca8c1de335cc"
        },
        "item": {
          "id": "a4b4a262-a779-49b3-a9d7-98b69de9205f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6cc0d302-c346-49dc-836b-6c7668c9923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ad0a52-fdb7-4576-94b3-5862cc62eb89",
        "cursor": {
          "ref": "f7f1d0b8-43e1-4b95-ad05-629092523993",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "2ee9b09f-ce0e-4fe4-b3e5-393cc1ccc83c"
        },
        "item": {
          "id": "16ad0a52-fdb7-4576-94b3-5862cc62eb89",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0fe0403e-3d10-44d0-b5f6-05c43c1c65a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d48247b-4619-4905-b72f-e7ee1febdf58",
        "cursor": {
          "ref": "8ba3f8bf-fdae-4e87-82b6-b8217f42a37f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1c9c9d3f-d411-45ce-b1dd-f02fc116dcaa"
        },
        "item": {
          "id": "4d48247b-4619-4905-b72f-e7ee1febdf58",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dee33daa-f4d1-4fcb-a65f-7642861cd839",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd69d8c-a5fe-42c9-b3c4-ae22c3e80738",
        "cursor": {
          "ref": "993a8bab-8c18-499c-bda9-509c843dfd1a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "fd4494a4-412e-410e-bf21-bf0d297b81bc"
        },
        "item": {
          "id": "4bd69d8c-a5fe-42c9-b3c4-ae22c3e80738",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1ace665e-7a21-42e6-9bd3-650ad44c215f",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a1f66b49-c240-4dec-8e1f-5679c0da2e85",
        "cursor": {
          "ref": "ade850df-7a05-4d59-95de-541c4737997e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2f70567f-c0bb-4b31-ac14-47cc4f499d63"
        },
        "item": {
          "id": "a1f66b49-c240-4dec-8e1f-5679c0da2e85",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bb9b12d8-f663-41dc-93f2-6a6f31fc4424",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bde0240-fd5f-4ecf-82c6-b2d7bc0cfef5",
        "cursor": {
          "ref": "0d534df9-9d53-4da0-bbe4-53be3eeda14d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "68ece970-3411-49ae-8dc9-11be26f9c08b"
        },
        "item": {
          "id": "2bde0240-fd5f-4ecf-82c6-b2d7bc0cfef5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "44299472-9505-415d-bda6-bb636c71bba2",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "437226ee-bc8a-450d-ac84-b8c55637eb38",
        "cursor": {
          "ref": "5952e471-3270-4981-9336-e9c780d70c1d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a146eab1-aece-46a9-a713-a98426225f36"
        },
        "item": {
          "id": "437226ee-bc8a-450d-ac84-b8c55637eb38",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5bd1cb48-a761-4000-a2e5-d257cc4a6b52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437226ee-bc8a-450d-ac84-b8c55637eb38",
        "cursor": {
          "ref": "5952e471-3270-4981-9336-e9c780d70c1d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a146eab1-aece-46a9-a713-a98426225f36"
        },
        "item": {
          "id": "437226ee-bc8a-450d-ac84-b8c55637eb38",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5bd1cb48-a761-4000-a2e5-d257cc4a6b52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24ea9a-155f-442d-a7ad-7a83e71fcfb2",
        "cursor": {
          "ref": "897f1b62-39aa-4127-8aa3-40cec72882b0",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7d553c78-83a1-4dae-91f4-e5d8f5bec94c"
        },
        "item": {
          "id": "be24ea9a-155f-442d-a7ad-7a83e71fcfb2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5b99dd4c-1d80-4ed4-8a92-eb8859d4a581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c1a4b9-7ede-4b94-a9b9-2f2dfc335df8",
        "cursor": {
          "ref": "2eca163e-c717-4c5e-a8ab-89f753e4f70f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "60609c3f-1132-4c69-86e6-971eadfd8e2e"
        },
        "item": {
          "id": "50c1a4b9-7ede-4b94-a9b9-2f2dfc335df8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e6697491-e275-4c73-bfdd-27d3fd11501b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}