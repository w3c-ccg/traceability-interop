{
  "collection": {
    "info": {
      "_postman_id": "8ce11389-4715-4913-ac8a-339aceeb0d65",
      "name": "Credentials Revocation Tutorial",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e79384b6-3f6d-41e6-9237-411ab9e571e0",
        "name": "Get Access Token",
        "request": {
          "url": {
            "host": [
              "{{TOKEN_ENDPOINT}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "audience",
                "value": "{{TOKEN_AUDIENCE}}"
              },
              {
                "key": "client_id",
                "value": "{{CLIENT_ID}}"
              },
              {
                "key": "client_secret",
                "value": "{{CLIENT_SECRET}}"
              },
              {
                "key": "grant_type",
                "value": "client_credentials"
              },
              {
                "key": "scope",
                "value": "{{CLIENT_SCOPE}}"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "73d4fa03-1379-451b-9f9c-fce2d6ac999b",
              "type": "text/javascript",
              "exec": [
                "// Token requests are expected to return a `200 Success` response code. Any",
                "// other response code should trigger a failure.",
                "pm.test(\"must return `200 Success` status\", function() {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The response should include an `access_token` value - this will be presented",
                "// to authenticated API endpoints in the `Authentication` header (see the last",
                "// testing code block for details on how this is persisted).",
                "pm.test(\"response body must include non-empty access_token\", function () {",
                "    const { access_token } = pm.response.json()",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The type of `access_token` returned by the token request is expected to be",
                "// `Bearer`.",
                "pm.test(\"response body must represent `Bearer` token\", function() {",
                "    const { token_type } = pm.response.json()",
                "    pm.expect(token_type).to.equal(\"Bearer\");",
                "});",
                "",
                "// The returned data includes an `expires_in` field that indicates time until",
                "// token expiration. Validate that this value is a whole number greater than",
                "// zero, as anything less than or equal to zero means that the `access_token`",
                "// is already expired.",
                "pm.test(\"returned token must expire in the future\", function() {",
                "    const { expires_in } = pm.response.json()",
                "    pm.expect(expires_in).to.be.above(0);",
                "});",
                "",
                "// The returned `access_token` value is persisted as a Postman collection",
                "// variable that can be accessed by other requests in the collection by calling",
                "// `pm.collectionVariables.get(\"access_token\")`.",
                "pm.test(\"`access_token` persisted to collectionVariables\", function() {",
                "    const { access_token } = pm.response.json()",
                "    pm.collectionVariables.set(\"access_token\", access_token);",
                "});"
              ],
              "_lastExecutionId": "5413d887-a73d-4df3-b52a-2ad3a44278de"
            }
          }
        ]
      },
      {
        "id": "214b69bf-6919-4333-bffa-ff868e36c4fa",
        "name": "Get Organization DIDs",
        "request": {
          "url": {
            "path": [
              "identifiers",
              "{{ORGANIZATION_DID_WEB}}"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "adb1cdb9-d752-4f3e-8e12-369a3026cb75",
              "type": "text/javascript",
              "exec": [
                "// This endpoint is authenticated. This test will not prevent the request from",
                "// running when the `access_token` collection variable is missing, but it will",
                "// give an indication of why the request failed in that scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    const access_token = pm.collectionVariables.get(\"access_token\");",
                "    pm.expect(access_token).to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"must include valid JSON response body\", function() {",
                "    pm.response.json(); // will throw on parse failure",
                "});",
                "",
                "// The response JSON must include a didDocument property that contains the",
                "// resolved DID document.",
                "pm.test(\"didDocument must be present in response body\", function() {",
                "    const jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.have.property('didDocument');",
                "});",
                "",
                "// If a verificationMethod property is present, the controller property must",
                "// match the didDocument.id property.",
                "pm.test(\"verification method controller must match did subject\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    const vm = didDocument.verificationMethod || [];",
                "    vm.forEach((m) => pm.expect(m.controller).to.equal(didDocument.id));",
                "});",
                "",
                "// The value of didDocument.id is persisted as a Postman collection variable",
                "// that can be accessed by other requests in the collection by calling",
                "// pm.collectionVariables.get(\"credential_issuer_id\").",
                "pm.test(\"`credential_issuer_id` persisted to collectionVariables\", function() {",
                "    const { didDocument } = pm.response.json();",
                "    pm.collectionVariables.set(\"credential_issuer_id\", didDocument.id);",
                "});"
              ],
              "_lastExecutionId": "a3a95fdd-6c8d-4ac9-892f-68680bcb10a0"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disabledSystemHeaders": {}
        }
      },
      {
        "id": "f5e68151-8afc-4e16-b013-15e5a8fc04ef",
        "name": "Issue Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "issue"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/vc+ld+json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/vc-revocation-list-2020/v1\"\n        ],\n        \"id\": \"urn:uuid:{{$randomUUID}}\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{credential_issuer_id}}\",\n        \"issuanceDate\": \"{{$isoTimestamp}}\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        }\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\",\n        \"created\": \"{{$isoTimestamp}}\",\n        \"credentialStatus\": {\n            \"type\": \"RevocationList2020Status\"\n        }\n    }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "22bb5c2c-bbe4-4966-9f1d-2bb4a67f78ac",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"`credential_issuer_id` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"credential_issuer_id\")).to.not.be.undefined;",
                "});",
                "",
                "pm.test(\"must return `201 Created` status\", function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "// Verifiable credential must be made available to later requests",
                "pm.test(\"`verifiable_credential` persisted to collectionVariables\", function() {",
                "    const {verifiableCredential} = pm.response.json();",
                "    pm.collectionVariables.set(\"verifiable_credential\", JSON.stringify(verifiableCredential));",
                "});"
              ],
              "_lastExecutionId": "45dbabb7-0799-43ed-934b-66cfb8dd8f97"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "16cba952-2780-47c1-8a63-2228385fc4b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92cbbc13-bd8e-45b6-867d-a7ff9bbe85a9"
            }
          }
        ]
      },
      {
        "id": "61122927-e0d1-4124-b21a-c95732453bf6",
        "name": "Verify Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b553cf43-55e2-404b-8fae-7d4da605389b",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// The verification should succeed.",
                "pm.test(\"verification should be successful\", function() {",
                "    const { verified } = pm.response.json()",
                "    pm.expect(verified).to.be.true;",
                "});"
              ],
              "_lastExecutionId": "06fa1e94-193b-4791-ab57-b77308f3fd8c"
            }
          }
        ]
      },
      {
        "id": "32c3eef6-f7d9-4a25-a36c-cd0c93319c8f",
        "name": "Revoke Credential",
        "request": {
          "url": {
            "path": [
              "credentials",
              "status"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"credentialId\": \"{{verifiable_credential_id}}\",\n    \"credentialStatus\": [\n        {\n            \"type\": \"RevocationList2020Status\",\n            \"status\": \"1\"\n        }\n    ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "803a32d0-7916-4928-97e2-40b18b86d4bd",
              "type": "text/javascript",
              "exec": [
                "// Extract credential ID from verifiable credential",
                "let verifiable_credential_id;",
                "try {",
                "    const { id } = JSON.parse(pm.collectionVariables.get(\"verifiable_credential\"));",
                "    pm.collectionVariables.set('verifiable_credential_id', id)",
                "} catch {}",
                ""
              ],
              "_lastExecutionId": "f4660eed-f133-457c-9594-05749c3e8e50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc787894-176a-43b5-907f-664ecdcdcea9",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/status` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// Verifiable credential ID is a required element item used in the request body",
                "pm.test(\"`verifiable_credential_id` local variable must be set\", function () {",
                "    pm.expect(\"verifiable_credential\").to.be.a('string').that.is.not.empty;",
                "});",
                "",
                "// The expected response code for a \"Revoke Credentials\" request is `200 Success`",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});"
              ],
              "_lastExecutionId": "8135e481-c22a-4477-8a03-a8cb2c0f2fcc"
            }
          }
        ]
      },
      {
        "id": "8656c07b-de1d-47d3-b7c1-d3fa3810a211",
        "name": "Verify Revocation",
        "request": {
          "url": {
            "path": [
              "credentials",
              "verify"
            ],
            "host": [
              "{{API_BASE_URL}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"verifiableCredential\": {{verifiable_credential}}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{access_token}}",
                "key": "token"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b6d2c8a3-eb15-49c2-bb7a-53dcb48ce247",
              "type": "text/javascript",
              "exec": [
                "// The `/credentials/verify` endpoint is authenticated. This test will not",
                "// prevent the request from running when the `access_token` collection variable",
                "// is missing, but it will give an indication of why the request failed in that",
                "// scenario.",
                "pm.test(\"`access_token` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"access_token\")).to.not.be.undefined;",
                "});",
                "",
                "// The `verifiable_credential` from the \"Credentials Issue\" request is used to",
                "// populate part of the request body. If this collection variable is missing,",
                "// the request will not be prevented, but this test will raise an error that",
                "// will help to identify the problem.",
                "pm.test(\"`verifiable_credential` collection variable must be set\", function () {",
                "    pm.expect(pm.collectionVariables.get(\"verifiable_credential\")).to.not.be.undefined;",
                "});",
                "",
                "// The expected response code for a \"Credentials Verify\" request is",
                "// `200 Success`.",
                "pm.test(\"must return `200 Success` status\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "// Checks should have errors",
                "//pm.test(\"Checks should have credentialStatus errors\", function() {",
                "//    const { errors } = pm.response.json();",
                "//    pm.expect(errors).to.include(\"credentialStatus\");",
                "//});",
                "",
                "// Confirm error",
                "pm.test(\"Checks should have credentialStatus errors\", function() {",
                "    let obj = pm.response.json().verifications.find(e => e.title === \"Revocation\");",
                "    pm.expect(obj.status).to.eql(\"bad\");",
                "});",
                "",
                "",
                ""
              ],
              "_lastExecutionId": "ad984789-72d4-465d-950e-6cfbd6ff14d7"
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 246.5,
      "responseMin": 79,
      "responseMax": 547,
      "responseSd": 190.60932995702666,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703465894188,
      "completed": 1703465895861
    },
    "executions": [
      {
        "id": "e79384b6-3f6d-41e6-9237-411ab9e571e0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ea14ee9f-fd7d-429e-8e7d-d83fe7b94241",
          "httpRequestId": "faadd034-6333-4eb1-b92c-6dd8a8b8f422"
        },
        "item": {
          "id": "e79384b6-3f6d-41e6-9237-411ab9e571e0",
          "name": "Get Access Token"
        },
        "response": {
          "id": "835844f8-6e98-4cc3-9d75-17e6f56b5ba4",
          "status": "OK",
          "code": 200,
          "responseTime": 547,
          "responseSize": 957
        },
        "assertions": [
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "response body must include non-empty access_token",
            "skipped": false
          },
          {
            "assertion": "response body must represent `Bearer` token",
            "skipped": false
          },
          {
            "assertion": "returned token must expire in the future",
            "skipped": false
          },
          {
            "assertion": "`access_token` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "214b69bf-6919-4333-bffa-ff868e36c4fa",
        "cursor": {
          "ref": "ceccc0b7-8934-4e05-babd-4ccde89316e8",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d897f7cb-a600-4690-b7ff-5c57dda3a677"
        },
        "item": {
          "id": "214b69bf-6919-4333-bffa-ff868e36c4fa",
          "name": "Get Organization DIDs"
        },
        "response": {
          "id": "a5e8c7c8-2a33-4119-bab7-74cc3ae5159f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "must include valid JSON response body",
            "skipped": false
          },
          {
            "assertion": "didDocument must be present in response body",
            "skipped": false
          },
          {
            "assertion": "verification method controller must match did subject",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e68151-8afc-4e16-b013-15e5a8fc04ef",
        "cursor": {
          "ref": "887e8dff-38c9-474f-90cb-75388054222e",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "79327e55-f54b-424f-896e-4e2997d2800c"
        },
        "item": {
          "id": "f5e68151-8afc-4e16-b013-15e5a8fc04ef",
          "name": "Issue Credential"
        },
        "response": {
          "id": "8a1744cc-f40b-44fe-8d34-b8801fa4d606",
          "status": "Created",
          "code": 201,
          "responseTime": 461,
          "responseSize": 669
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`credential_issuer_id` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `201 Created` status",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` persisted to collectionVariables",
            "skipped": false
          }
        ]
      },
      {
        "id": "61122927-e0d1-4124-b21a-c95732453bf6",
        "cursor": {
          "ref": "33db3fb2-70d9-4d47-ad98-1beb9eeac2bf",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1a529b54-bd14-4c24-ac2b-94299e14c15c"
        },
        "item": {
          "id": "61122927-e0d1-4124-b21a-c95732453bf6",
          "name": "Verify Credential"
        },
        "response": {
          "id": "fab0b2da-4342-4d8f-9b8a-01e91a15d72f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "verification should be successful",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c3eef6-f7d9-4a25-a36c-cd0c93319c8f",
        "cursor": {
          "ref": "cfe732f6-4929-4138-9068-0dcd5b31ff5c",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f4a17086-7038-4be5-99d9-4bbd7aeca57d"
        },
        "item": {
          "id": "32c3eef6-f7d9-4a25-a36c-cd0c93319c8f",
          "name": "Revoke Credential"
        },
        "response": {
          "id": "1bf2c1ed-9130-423c-be4e-db70960fb542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential_id` local variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "must return `200 Success` status",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "id": "8656c07b-de1d-47d3-b7c1-d3fa3810a211",
        "cursor": {
          "ref": "5aa2f03c-8016-41e3-8c0f-656c8af86fcd",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2f2fc98d-c795-4ff7-921f-71bdbac2566f"
        },
        "item": {
          "id": "8656c07b-de1d-47d3-b7c1-d3fa3810a211",
          "name": "Verify Revocation"
        },
        "response": {
          "id": "2382136e-26cb-440d-ac21-15e20c66e7ac",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "`access_token` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "`verifiable_credential` collection variable must be set",
            "skipped": false
          },
          {
            "assertion": "must return `200 Success` status",
            "skipped": false
          },
          {
            "assertion": "Checks should have credentialStatus errors",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "Checks should have credentialStatus errors",
              "message": "Cannot read properties of undefined (reading 'find')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'find')\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      }
    ]
  }
}