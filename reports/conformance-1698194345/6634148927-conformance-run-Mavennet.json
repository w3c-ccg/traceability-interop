{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e7e2cf55-5fd1-4789-95aa-9627a7fad57a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fc9d8ac2-0a6d-410b-a4ef-1c49047fc9c4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83bd8080-14f2-4aad-8692-1cb311887a1b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b5b3f50e-2438-4c39-9829-59e45b98524d"
                }
              }
            ]
          },
          {
            "id": "e2e606c3-c683-48d9-87e9-8b62e1de4731",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d616899-d3d3-43c8-b3ab-789d9092d1bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec757f95-f15e-4ed1-886c-210c6e0df1c6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9298cd3d-d0fd-41b2-a39c-9c32a10f5314",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ae605d68-08e9-4ed7-97f8-3af9bdac1dbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02686152-3912-4ff4-8b9f-b52e208651de",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d251f72-19fd-47e1-8261-6173c74bcdd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ee0773e-1cc6-44fb-8e9e-a0428a08b0d1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e18a0fd7-afe1-43e9-9400-be8f3671c6d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c868ee95-25dd-4e8b-83c8-ba084ac40c1c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95e857e9-c02b-4ff8-bbd9-d812d3f22d22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cbaa4ea9-f43f-4077-9624-fb51619d72d5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a27d4cbc-2ef6-4a7a-87bd-3e3514d8dce8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2bd28f3e-1108-4b6b-95a9-8da0520c80c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41cdc4ef-5893-4625-ae61-b3dc13c11101",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0f83895-298d-4c49-97af-3a2153ee3738"
            }
          }
        ]
      },
      {
        "id": "398d1c93-ab52-42a1-8211-324183e9c67b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d1b985e0-21f5-45ea-9a98-725f421f0662",
            "name": "Negative Testing",
            "item": [
              {
                "id": "993af81f-257e-43f0-abc2-17e0c17b8b1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "45bd6a5a-d8f4-4fa5-b4ec-98b524e51b91",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afde465-43f7-45aa-a1e7-c982d699bda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4b9bed1-6e28-445b-9ef9-b5a79bff522b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ae75e3-611b-4487-ad5b-eb12041b3282",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a809be-48a1-4f25-85fd-d2a6e70ee08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00392d1b-3442-458f-875c-79ab57e1ba44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a488a7-c426-49e3-8584-917d7ea53cd6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12560254-1807-4f5f-baab-19758b5765b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a445a1cb-61c6-47e7-afa6-c61ca36a51d5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6a413048-828c-4fb4-a1fa-284173b64821",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acaefe2d-1c5d-41da-91c3-9127638dd38f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3db0773-c6a4-448f-ab38-9da4049b42d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e39b7a7-c1b8-4dd1-8ce0-ee7a9c5a5b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138cd288-5f14-4c6e-8f18-dd4e16714f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cba5a01-e5bc-4d77-868d-0a2b834fb058"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "371edd72-0609-465b-ac82-67220e264c5d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "346d1516-a963-4721-80b9-e839554ce912",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f1c1698-0e9d-4835-83ef-e6e63e67a7c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "79cf998d-a00e-4d70-8312-14fde8083c4d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc12beeb-8873-4984-857a-dc9bdfb56b05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b18e82a2-8236-4f03-a28c-deb52e75a5fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30b4d0d2-d96e-4290-98d3-6e0926a21028",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8072fd1c-2c54-46d0-bbcb-de2da336577f"
            }
          }
        ]
      },
      {
        "id": "7d0b891c-705b-4447-9b63-b98dbb215feb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "18a91890-20f0-4f7d-8b1e-063d386cbfde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2b69fdf-ecce-4541-bdac-cc29d4534042",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e8b1d170-14d2-4e10-b25b-9657609952d2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abf1daa-48b3-43ab-8bda-b742af318ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18c48ed-ca84-4235-b570-e63ece6f3f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f840f4-62e3-4f14-9bdf-4b04da1428c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eb8702f-6b4a-466f-b9f1-43486defba29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aaba51-f775-4aec-a2d3-6cc14e855bfa",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe74997-c236-4a55-952e-d89a2271866a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1779549-717e-45fb-b8af-24b4f6a54956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37c3e24-6374-4983-81d2-1f9f62b5b64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3a514d3-e645-4146-a6f5-1a8a57abec55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931d2308-d143-47a8-9278-005c1e941e21",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b653d2c6-5d89-4b02-98d5-367e71eaf22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6cedfe-a2e5-4418-893d-caa7720c57b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8f6356-a5e1-44c4-86ef-85c84f473a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "473e982d-9da6-4264-a3a4-cf3aa5c27419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c809e55-b1d0-4520-a340-d886ba381952",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc13888-f130-4fce-b5e5-0b80d4a7439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024acc41-b508-4ec6-b45a-491efd48ea90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a90b838-3e2e-4781-ac4a-e1a9fdda5147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "013a6584-383d-4ede-be83-2d32071de3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e464b3aa-df2d-43a0-a0b1-302e8b7d2b21",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d06f133-af83-43c7-b65b-70d407936e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e544f700-d9e5-4afa-85a1-ae89718da9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ec05fe-7c53-44c7-bf77-8f19cabca733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4795f8b9-6bfa-4ebb-9cfb-cc4e222a0a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0162c453-b231-472f-a989-80f416734181",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84276ea9-c442-48f6-91b2-c4dc54e6fa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3da3e3c-8682-4c9f-9bc9-1c2d93a0ae13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a653a6-172c-498f-9b42-853a091bbac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d714825a-045e-43de-a21f-467f3b531aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d45e6cb-03de-4f11-9db7-479527657561",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4498e7c-100c-4e58-9cd2-5f0a745aa7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d1f525-f3f6-4c07-98ec-f0ee2f9f1f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6f8467-4378-4778-b2f1-2e12fbb96005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18fe5f5a-5741-40d7-ab3a-af147ca35937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890f5f6d-a65d-4027-9f1d-3fa19bdc1748",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c180048-af75-4e7f-b186-6f9d711f5e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624ebfd8-7e89-4cf8-9412-010a49dd3154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eb7406-64a6-479c-b891-a36014e4df09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3008825-f898-4043-91d3-2d8ac245ceed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02198b3-70ee-444c-b68c-e7e059ac091a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52ccee8-9cc4-4844-be9b-6af4844a065e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41dc95c-4e53-41a4-b381-9e647b291663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88df0a0-ea3e-49d6-b690-28ca21fdab4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "282fa0f5-e8c0-482c-b7e4-e2c33d062374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1085ce8-7514-4044-8632-7c8177f281ba",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2c8412-7de8-40eb-b74c-400988e41bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7f7352-84dd-422e-a887-ba1f59f22809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a85cd6-7ef9-4668-825a-de2ba861b767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffb55fd3-803f-4670-b58f-ee38627bf1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb8a92-f690-46d8-ae29-d89e7564d187",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b0f266-712a-4633-b31d-adb857a2599d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1ae13d-7685-4f2b-9474-b0e802274109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a171b8-75d5-46d1-88f4-2b46fbc24259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1bcae11-8ba9-4b5a-811c-c633743fe90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacd8a4e-d7b4-43aa-bef4-420d45ffaf47",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b444d41-efc3-42d7-8fb4-e6497030bb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "089a0442-de76-4cc7-9445-cc4d08e7ec9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdb0dce-3e75-4f36-a0fd-0e12fdb65b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6379b08d-245e-41af-b91c-7c6bdba92b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bdc0b8-18db-4e00-ac7c-9b7616dfb597",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b242c1-bf76-42a7-a098-ebf511d363b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c66004-d553-40f3-a263-f6debf299a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c048520d-f1b9-43fa-a02d-c26b0c84b494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "081f4e9f-0c1a-41f5-99b5-3cc53ded7aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb77d07-cc37-4e0f-b725-30e57595c16e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145a0866-f644-4cb8-a373-d7387b26cc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738f34b7-aeef-405f-a6f0-7a3b884e48b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1153e2-adaf-4c29-8f2e-1aec7adc8ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "def045b2-00cf-4bd3-910b-d559e5dc17e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba1ac2a-e6c3-4b50-939b-21e7ca2b8a14",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7d92a5-5f32-4296-8a93-1b67189c5b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d787fc86-04de-4c8c-a600-ab0fc76d2a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6849a7-f9c6-4173-9c4e-5a26263bb31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8972f45-f061-4b23-8e90-29d1a7981e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7206e6f8-f26d-4f22-ae79-4097b5af2329",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5850193b-d0e1-4c08-b880-5638a4061dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c1d1f2-05a0-4df3-9365-de5a44751608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db1f38d-a9ff-4591-98d0-c72d65449b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcba76e6-b635-4c7e-9e93-c0824ad7f60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53bfeb-749e-4b30-aba6-ddd524d25640",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea77a325-f724-4290-9775-1cf642b844b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9db8da3-129a-4cfb-a5ca-87f2fb5f5a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f20d38-71ee-4a08-b3db-92cbb676b7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ff0295c-2ee3-4b79-818e-8cfbc929f0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e0feeb-3596-4236-b82a-f4e2f457a2cb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d987db7-696f-49ae-9922-014ccf40d0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad29dd6-e181-4314-8a6e-26e7c9674f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293d834-4ad0-4b17-802c-93ce4f9a0bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "386035e0-d2c6-41af-9065-929ee447da57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc55719-2dea-4c10-8cd5-10cd70b9b320",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4baa1d4-aee0-4d8c-b981-ee0cbb931cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa736e6-db15-407d-bda6-a58cbca9ac8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c025ec60-280c-4755-81cf-e1afd363a124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b843368f-ce30-435a-bc24-61720afba12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f9b0c1-c68d-46fa-a63e-895e127203f5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91af7c6a-3d04-496b-baeb-61746198a2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7256a7f1-d696-4f5a-96e9-933bc27cc2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a0d06d-d20a-4170-b321-04a8739b28e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96cea24f-f1e1-4ca4-85e7-dd5e91fb772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ef812f-cd72-4fb1-9557-f1611df5235d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef23705-03c9-45c9-ba52-f7ea7afc5ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51dbe22a-0899-47ff-addd-c3a73cdc8db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dffb90-22aa-4cbb-8b9e-e0164d5601e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4130f908-8a3d-4116-ba48-8a14f9b79957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbda3bcb-2519-4581-884d-ec1d34fd5b42",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f5ff2f-678e-4dbb-91fa-efb0d937e510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d941a67-7f0b-4f53-8f58-e63722ff27e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999a2b88-ac97-43c1-9782-6b90b802f555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9def56-1a74-4320-ba6b-03ece0d91086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84c6486-1b31-49a3-9c22-63a312e42a11",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c425525-4a94-4ef5-94f0-45e9f9b259c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725c554e-44de-4f0c-a201-79ff627c742d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5714d4-53fb-4fe7-a8f9-6b359ca2fe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42774aae-a7c4-477d-ab18-3978e13c038f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fc47fc-9d3b-4813-b8c2-98bdeb248efd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969ea6c8-5afc-486d-9bf1-c662f6a84926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09409349-423e-4904-a485-7c3634ca6a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4799f8d5-e4a9-48ef-bd44-903e6e3c350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f546a694-a563-48c6-ad4e-533a55ce33f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d83b335-fc45-48c7-a082-e8ed7d61556b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641885c6-2c7f-4b5b-b098-ed5f98942d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940220d4-c67a-4018-91f4-907c92c44fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b20069-bf4a-4aba-8afc-d1db37c20035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f36ec14f-c007-47ec-995c-c7777a140b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4246749a-364a-4d31-93de-d136dd3ffde1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55080ddd-f4ee-4ca9-a940-3fb047c8b6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b0baf5-1064-49e6-a1b5-4783294222f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e9aaba-e42c-49bc-b900-363332e3d5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "158202c2-2df0-4b05-b883-f92a1d072b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c180e6e2-9608-41fb-9320-76f31f0b6272",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729d0e6e-c7ee-4d30-82a8-54f11e47db70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e01eba2-da36-4504-9fec-68d0ac732378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539a9665-f9dd-4f08-aa27-6ff3130982a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d537b33d-e001-48cb-8ed5-c1b0ac263331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b569262-3cea-432c-a5ee-de66347efe6e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91aa6c8b-ee7a-4897-bc8f-2bdc626a9497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e87c35-29c3-41e4-b107-3a103a796f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69abb525-9c76-4999-91f8-36fcc3466f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1f9fa5-e466-4138-94b3-f2eb579ef504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241803ea-bb2a-4a59-851b-ebe1cafdf9f8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50c5670-bbb1-48e8-a1c2-ca57c330a610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ca8ee6-29bb-42ea-b680-b53c91c12497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36654b4b-f907-45da-ae05-d853957c6db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6894462d-8129-4b06-b943-64fc7c96efec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da177eee-6811-4457-a90e-06c9ec2204db",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ace6f31-7f2d-4a53-b1ee-77928d4f72bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb18f7fc-9541-4624-9232-fc39cd3eee48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c7c91b-fb01-4a40-ab02-39916d327da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e65516e-e67a-4e00-b376-ecfa88fd23c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b3a987-d65a-4b9d-b223-d5e4bb80ba30",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "591a670b-e427-41f5-89be-c7686feab013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a8d0e9-151c-4967-87a5-4f27d80b8417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aee50e2-8930-4ba6-9da7-ea8dba4cc177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb9725b-e45c-4686-a951-d4da40749674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b147d0-3789-4c67-9d54-8d7f9503f0b8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733deb38-2b18-4af6-92e7-5db238879a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c27247-a136-4c6b-bb29-15b26b61294b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2697f97-9f4f-4dcb-9ed0-fd1ea02e38bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "980cb2e8-32ef-44e8-981a-f214786f256a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1e087b-8ddd-4d0f-9f7a-5ade658306c2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f36b96-1b6c-4232-a03e-c6d2a0901539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222bf6d6-1663-45e5-af2c-5dfa096ec34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6198e073-0bb7-48e6-b1e0-23d4d13c561e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2687a94f-dda1-4fdb-9efc-1ac82929270d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a9d9b8-5206-4d28-b2de-55bb4d6c1c5c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ef75df-b3bb-4841-b7cf-56ce3ecf51b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c820558-8139-4548-b691-b8294bb4b692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd3c42f-2c28-4a0e-b837-80aa39c09745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ad894a6-32a4-4812-a3d2-262c1d2efb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3385450-2cf2-4222-a636-8eccef3d8973",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14913546-0930-4740-8a2f-1cf921d1ce0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3e1de1-645f-4f2d-a629-942299894dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc96ff0-be36-45d5-84cd-dbe2d3a849af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c2885479-289e-4198-b0a8-031aa2c05fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2a5856-7a69-4ef0-9572-25399b2cb54d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141c6f54-c31e-449b-af05-a17860b820cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5aa1573d-209b-4fdf-afc4-7414f11668f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258938d-3840-4714-838f-aada24b5af1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a444099b-8c97-4eb5-a2df-fb9df2bb8514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4334bf7-adf5-4186-a5b3-d936a37be02f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3fc00b-4d8c-4e9d-aada-f4330cbf9734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5550516a-f411-453b-a56c-dff3480d2e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efbd188-28a3-4a7d-8df7-a3e87020783d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53d62d92-1dd6-41fe-9fff-9cf619eb380c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbbe6ef-e126-4fbf-83fd-e0f3590bccda",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d5c771-ceb0-4f04-9359-e5119c97694a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c99f890-6b4a-4c05-8d4c-fc0739a5669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf7bc93-d1ea-4682-adf2-369cd3de6e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d7c1dc-b983-42f4-bb68-c85147a778da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf808c4-33c6-48cc-937d-c23c447e856f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e122dd45-c02a-474e-bf5a-5ed017ab80d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65914c53-6b20-4567-80d3-9e08f6e09f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d3ea5d-afd9-46cb-8904-5ce37dcc4457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe8438a-c456-4d26-b3a4-b58d7702a3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4614276a-390f-463e-b09d-76fb597b6d3d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0041f903-f646-4590-b000-4affaab945ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc95d6a7-0fe4-4754-91de-d75130a05821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238d58b0-082d-48ac-aca5-5a710a737c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba73693-e025-4797-aee6-daf3e8338826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f64d24a-9e67-41bd-a413-cf8d7a4b2dbd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe6cf46-7641-4190-ad6b-4ac0d698e01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0d7643-966a-43c6-a382-65ba7494ecb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eef9d8d-7225-45e1-bf7f-d5ceb6b92ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb0502b-f1a2-4e82-86b4-19923c1de697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07acdb5c-296c-4bfd-ad14-c4b20ffff29e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8252d0-0fd8-4ef5-9781-94773f4d0947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947f064b-8c20-4780-8aa1-ec51f7841095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7791298d-afe4-4c54-86bd-eac6ec72a516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8952b0-20c4-4dfe-a7de-d3e8f412e0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecf29be-abc1-4461-be97-ddae2105afb3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0759c7e-78da-4c17-86c5-2e4463a8f815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122a2940-73c1-4a89-ac52-16ca00274ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efea322-b227-4941-ab53-62a058565136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "86f22d29-e2b8-4165-8be2-32cf184f3e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2c66da-44d8-46a0-843c-aa4e05a815f2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fbb360-446d-4836-b8ff-8a907140741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afcdbff-993f-4678-a19f-0d8809ff0b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d9400b-e9d1-447a-8281-b5aa997b972d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1025500-8c4c-4491-a047-65a21e703fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fb2511-0734-4ef1-a070-ae1db66926be",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab9fbab-4206-4c8e-a5a2-b896a8718c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca61235-07cd-4779-af83-84aa50a102ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb91b8b-b96c-47d2-9d93-89aff486f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87ac13b6-a29e-4293-a3b1-1a1d8dd9ecc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeb86ca-a5d8-4766-8ffa-eb0f186e6d4b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec05530-84e1-42b7-a08f-0faaeaaf046e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa23a27-efec-4fea-9f3e-97490c681dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b53bab9-d0f4-40f5-bae4-e1c20bada7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce1ea4a-95ca-478f-a106-b913791dcac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8317ab02-6d52-40c2-93a5-63b560e1bf4c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d67f73e-ae60-4a3f-be44-82a134b240f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d1e85e-2ce9-437a-a631-03f010a10850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07768479-0fca-472b-804a-08131e5801ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30bac872-6bc5-4756-b0bc-5fd2f0440feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1beac98d-cb71-453f-a021-88844e94a013",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bad453e-ede2-4fab-9f1a-0f213e63608b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44902d15-e256-4abb-8db7-91f017d2a1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94df8b21-9dfa-4344-8aa7-572e9c1067ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1615988d-0d6e-47e2-ad54-45bb020a9fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad166cd5-bb75-47ff-ab34-aa561b86c5b1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3664313-e13c-435d-92d0-c804924d9953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ed2e7a-1943-479e-bf47-1f33b2fe55e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fce86d3-d50e-4ebb-8c09-de9f5b0cc472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5ceff5-9230-4f9c-9259-e83b9c18230b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7360ade1-438f-4eca-84e4-bb99a682201e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab81f18-8698-4147-b703-2d656da487f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fe1c9f-fb53-4b6c-be49-4f24f327c16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fb07e3-bb7d-4c66-92cd-36ffaac680b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60ec998f-0e48-410b-90b7-f6eebfda2385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da92d65-17b9-423c-9f87-9ace3c45c732",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e183c128-c9a5-484a-9f34-ec52d56c03e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eccbcc1-c14d-49b9-ab63-0677d1cfe922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e33ffe-9833-4067-845e-0ff2e2dc8cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8011e3b4-9ac9-4679-8ef2-6cd1a9f288ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae56f50-3edb-4dc3-8847-8310cd864347",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5208169-979d-454c-b076-0ce2d28e6911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f8bbfc-3ec5-4d46-b7b0-4055fd42cabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f59e7e-d6b9-45fe-948c-f92d7eb0c11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "846f9407-dc71-4f1c-8b00-3f74f35ac7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd79480-cc94-4469-8534-ee34567337c3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ca6d7-d0bd-4918-9f19-064b32666473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ca9579-1454-4e32-8728-8acd2e0fded3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f13a7c9-d0d3-4783-8160-42dafaee547c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f020cff-d9e8-46a3-8b35-f445fd8cbca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe408df3-929b-4cbe-b05f-674a744d1497",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c55601-b792-4855-9f15-ebf84ee2ddc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967f4e6f-cb6d-495b-89c3-1e557aadc103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30beecf9-34d1-4a48-a2a7-851850365603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49dcce48-8a0a-4416-b8b3-d18773bae034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c44a5e-951f-4323-b402-7835ac563f34",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba72db9-c48d-4b2a-9163-237830d93ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48cdb20-82a0-4492-8cf1-2e9ccd357c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63defa9-8391-4b3a-a9b1-3fe21b84fa6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "859446b3-ac5f-46bf-80b5-6f07ac5b93f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e4f4f5-0dc0-4f89-9d28-d049f9351bca",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec4a9bf-8305-49bd-aeb5-757777fc1caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5f9773-261d-4672-9dae-62a0ac41e9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b76836-d211-418e-9979-bd277ba26482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3fdc16ce-4989-49a2-88aa-484d7648d1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d1200a-1bb8-4a7f-a39a-896a74bd6746",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a205df6b-d188-4940-a9de-d87421d6ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62cefc10-1e42-4f3c-b36a-a4e29e065ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e825ab-a412-4ca5-b0a7-9dd86bfbf6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "daacd03e-0c86-4f38-a124-fecaf66b623c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847312b6-693f-4d0a-b151-63b47728eeec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a062e42-cecc-4304-a3e4-1810a09960c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1333ca55-cc71-4d51-a440-8cd7c04f5d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a93c49-363d-4f86-bbd8-93038d69e563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3af0a56b-5dcd-4e2b-a22e-b318ee5a27d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d1f3f7-1596-4ebf-9ae3-2fb0c9e64984",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668bc227-87fe-467e-9943-90bc909d7f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25e18b18-0ecd-4af2-a621-0cb36f16b2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada36ab6-fb2a-495b-b162-b850126cd31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85fe8755-f84f-4a63-9555-936c00bfb02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbfaaec-d7e7-4ace-a22d-0e5ed1db69a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eef881-c0f3-44dd-8366-de1256829284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb5fe3a-7ce2-4748-bef1-2c80c8c7597b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d26b2e3-d8c5-4c27-bfea-9f39f6eef60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "76f10560-e6d3-4c09-8b4a-7f5105bf1123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c080c17-9dd7-4ddf-b9d1-80c0e6a2d753",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d9c7dc-8831-4804-86ff-236f2710d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f872ea-b33b-48ff-9f1e-d4d35bd8f82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e3df82-6405-4707-a752-00f2e98c617d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f184e41f-c2ea-404a-8312-a8454e7159bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df29d313-e55a-4e3b-8f6b-41f8f52bba37",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80069f4a-2bfd-4ac1-808f-260104e399a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa02f3ef-9dc9-41a8-bda4-97f94239033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e9f680-0e17-4740-b58d-d0680ef4304a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2142cca-dd11-4033-95a3-a4c18083c876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2409aa7-8fbf-4ffd-8f62-071c2b2fb67e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ba436c-ae9b-403f-81c4-f7d592992b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992ed069-6a6e-483d-8683-88cd18b14bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221743c6-61df-4d10-8ffb-18dce8f3c2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e84e889e-c0d0-42d1-ad38-47d0d69fbeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192ccd63-1b59-4f64-add6-19d763eec8cb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1277b5-3cb3-4945-87e7-1109a587bd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c0ac12-b773-42eb-983f-9b297ab52333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66dd7843-d60d-4052-a302-d3d0ebc9069c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "935be498-034e-4cf3-9d7e-19fae6e38ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c834d8b6-645c-4fee-b709-03a04f6d3abe",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c256f0-cc3f-40c5-a8d6-a44c963ef588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b56df6-93f5-4e5b-930e-19277fcf6fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bbc293-f2e8-401d-ae9c-f104912fab51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8b262a1-c3db-481c-9340-e457d0888537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f74be1-1224-41ae-bf0a-0c3f080b750d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbf73c3-f8e6-4913-ab49-f57627de5a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed828c6-f9ba-4d1f-9b8f-01d47f0d2c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799ea2eb-07b8-4e53-bfc2-e45441243964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3340459a-216a-46a6-a6c6-3bde5ecd322c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2789888d-703d-4251-894e-6b9e72529dd7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2716e5-cee5-4c60-bc92-0b4a7178ecc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2869a8af-2a5a-4c86-839a-a7f075cc5668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68c37d8-f52d-47e9-9cd4-38a73ba362c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec077902-defb-4fb7-b4d6-f7552e1eec17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83490123-daeb-40e9-9a1b-73058c53cf98",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec02a27-3adc-4c14-8887-4d40351fa311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefcb90a-4b51-4a81-9006-b2674369b61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40debedb-59b4-4464-a7b7-5d89599af679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e43c39b1-b87e-4b2d-9759-0441d5fd9301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c0a7d2-8925-4cf6-926e-16c25700a853",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18551c2-11c2-463b-88a3-5fdeff13cfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3353e2-ba2c-409a-b26e-94955651b412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cae7b4-61a1-40ff-8696-489ea835a97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d163c5b0-1136-4434-95e1-fc158711f1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55358a0-d7df-40c6-a074-01ff21c8b023",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89905e7-7260-41e1-a02c-e64f2971f1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7db7c9-8be8-46fd-8dd3-8bd63054cd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac9663f-c45e-4c7a-aa20-c36193a37912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f86a1da-e4ac-4999-a0a3-692e3fceaec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab90b103-c677-44c9-83b7-7296894f9d91",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e64c6ad-5375-4d35-80f1-9cc2c1c30916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174050d6-1086-44eb-aecb-559d6e6a2b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fcf870-19bf-49ca-9b9d-5ab5f6e8f50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66c2d6d8-7c1a-4f75-8dff-2791211b7923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b26c71-62b9-4d04-a1b9-2718795897ad",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424b8379-c5eb-46cc-bf77-b958fe1ee65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d9f7a3-596f-4633-9cb0-9adbd7a84591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95029fdd-8c14-490c-995f-87779179ea51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4314dc50-4608-4133-9537-5a083438a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cbf3d7e-b022-4697-a5ee-a0ce1d39ed14",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6ede97-4d9c-4c93-8820-9516f1552907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2f54b0-5595-493d-86fa-b58bc34912d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1162337d-97a8-4c5c-b783-6b1294756511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f7f43c-dfd5-49a6-b7d9-6efdd2614e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4943cb2c-c6e5-4125-ae24-a370895f95de",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf38949-8af2-4455-b5c7-2ec801c7572d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c4d417-ab4d-4c4b-96ba-02c636d300ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98fda98f-12d3-484f-96c8-db1784efafcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6af4c6d9-76dc-4d31-8a9f-debcc43bf5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f117b25-7ab9-4159-a7ad-2a7c18235eba",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7180a287-38d2-45e9-85b0-88d45a949222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fd1805-37be-4800-b79c-b940e53f1470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b566fa61-a356-404d-a477-057f96008420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb22b56-1827-4f1f-82c3-f554049e3a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8a56dc-77b7-46d6-a783-fc3e0c4839da",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ef62b5-1dea-4880-ae1b-91b2d2fd3e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f8da2c-b0a5-4e1f-8177-6f3986b8a827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b64606c-4b81-4f76-9c01-8c8422cef688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "221d6ff6-3ddd-4415-ae1e-64b9e7810acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e64a9ef-a5b3-48ca-9751-b399d7fb360d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d2e0ed-b554-4e6f-ae12-e16219684771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18399168-6e54-40c1-a975-8472a20ef929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b777a5-65a6-4259-b739-167df4d98e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff601503-44b2-400c-857b-ee22ba9673bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b302373-0d6d-41c5-b9b7-5e34756b2c1a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbc6617-1f32-4904-a26e-be36d6c8ebd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8cedc2-d175-457c-b135-6113f0a568d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832c361b-1aa2-4ccf-b662-f9fac58322fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1af0dee5-1776-4452-88ba-926bcb3dbd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b798726-a769-4650-836c-96751d1477e7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aa773b-c752-47d8-ac0d-5084d06bc343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd64a90-1a35-42a7-a8dc-636d4785e98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa73b29-f679-4a47-a670-b46a5d91667b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a19308-6c5f-4078-8954-14231e27357d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debbe306-6bea-4a3b-9561-8e384963b3a1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1d12d1-3e12-4497-89a1-6d6008698aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f255fbb-ced0-4132-8ff4-be04acaff45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca85b0c-1817-43d1-b58f-ac9c00877b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69fa57d5-b302-48d4-b0aa-306017e74ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef460f5-2af8-40e3-848b-4347df4b7d60",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41460cdd-2083-4061-b179-73390d00942b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53188a9c-4415-48c2-9a22-7f81406ff235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd7bdef-4406-4ad8-be9f-271bb39dffb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd37635f-404c-448e-8eb6-e8ca6a6706be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746b4878-b6a1-41a5-925c-4027d0abe89c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f16b88-8d7c-4d54-b347-6751ecd98522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b760482c-540d-4a89-82cb-5cc9b5b94e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0339da5-5bcb-4c99-b51d-3354e6ad636e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46500e34-ea13-4260-a454-c9ebebc574b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac92625-62f9-423e-a651-e95300fe6e2d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548964fa-0d83-44a7-be10-1f150abe217f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20312612-9aec-42e5-ae4c-73b11213fbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79a7b72-72f8-43e4-bdb2-c1d86e17e6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "445e5ade-04a2-46e5-87bf-5d058c2656b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc278c2-6d3a-4de9-b9d9-68ced7362353",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba84d891-3cf3-4d9a-b412-00b00aeab63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6689599-6dc3-4011-87e0-1a4e65cf05fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462e02b1-a912-4adf-8eea-1476d2852031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4738f32-d4a7-412c-9f06-ef7ab437671a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ba21c2-df71-4e6d-8ccc-16b7f137b8a0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939614fe-e9dd-4dc3-a4d1-67625997bbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5200ccc3-998b-4e94-82c0-2851c324a29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b30985e-6076-4534-b84b-7806f27d7353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7c7d86-6bfe-4226-b506-1918c5319344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5f01dd-f4bf-4f4f-856c-99f9cf961ad7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df842fb1-4c5b-4671-99cf-abdeaeeb550e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b55e85-0149-4eb0-ade8-db01ba36039d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ae7b8e-9e20-4cbf-8321-b4cdacc82550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59bc4971-6a3a-4ced-84e3-aa4bdea14b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f476ad1e-5eb4-46bb-b413-d789163a29ea",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fa16d8-bf51-4c35-807f-961cdf186a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f723b727-e14c-41ae-8f7a-4906e708be21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415b25b8-6ad5-4b13-a267-5f4b370a6afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa873951-0921-47ab-aa80-7233e79da276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97132192-5041-4d92-bdb4-2c031c6a426e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffa65fe-34e8-4ae2-85a2-d1020225e94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d15adf5e-5fd0-4af5-a029-118b9dbf3b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8689a8ab-bf95-4ecc-ba31-549fac90fcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "19530f43-568b-4574-8271-2a8dfe8c458a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6ed506-fe08-4546-828d-876aa8396f1a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958384b8-0a77-4bb7-a6e8-7b7b27e0f83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee185cf-6a80-4149-bed4-5edd27d52010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2789add-919e-43ef-ae87-6372eeb9b4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d38644f-ee0c-440a-85b5-dd4e1153a152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a383c17a-a2bb-4d3a-a5b4-a9993c158dc0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf81bf20-2b6c-4fb1-9511-a2e0b0b88175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aae4eec-db92-4d81-b07f-c617affba533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37eb4b57-7017-475a-851f-f0a792f4ce63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5409af5-f411-4a6f-825b-ec8475b57a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4dbef0-a193-46dd-af07-2451b9cf708e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78f1c08-d510-4338-b85d-ecbe53f2a0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8280f30b-3de0-4787-8354-283d03737c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60415fcd-d3ae-4879-8bdc-f46540722976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1227eaf4-cfe0-4b57-9342-93388fe191c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465a6752-e2a0-44f4-839c-5f7bc71f9808",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cee656-d47b-429c-a1d9-9e769ee3118e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48cbcec9-c628-467e-b85b-ab703f948763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d787f6d-5cb0-43a8-a81d-e316a6c58fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "681e7382-9016-436a-8754-3639d30b381b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e24886c5-69c1-413b-bd52-5f1648eaf98a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b37a2fdc-9341-49ee-8e5e-13eb4b43710e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b79bf1b-e93f-4d30-8e16-af6a3662f4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea9b2acc-a35b-43d8-ad42-5732f7303390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31656ae7-6b7f-47b6-aec3-6eff04af85de",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "283fd067-8b90-4ef2-82d6-a3497c564d35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd96b0db-3923-4e97-bb36-9649af0ac6f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "461d3f9a-b0ce-4914-a199-1f1129e5ca33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65891530-8bab-4a45-a231-7a232962196c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fae0b23-d6d4-463b-b53a-1835b4254e85"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59d82e15-271c-4e39-a736-d511d86e66a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b463397-4498-4d41-aef2-85596f1ce2ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f6f47f44-3cae-48e6-a0ad-1747cce92a64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31aa070f-85f9-402d-b296-6023c37b8e28"
                }
              }
            ]
          },
          {
            "id": "7ae0831a-9d38-4f78-91b0-9052887370de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b408e40d-2360-499f-a0e3-9d89d0a5ba74",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "92388822-e1e0-42ca-9213-d347533fdc14",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cb44ca-6e33-467f-9eb6-0f0d7bb6b873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2a258f3f-0ff8-45c0-93be-c46c88ef835d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05d2b1d-c998-4006-bb1d-22a9eefc583f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757c7f0b-233d-4dcd-89e3-0744f6c9a5a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c9e549b1-5edb-40c5-b240-61b52186e223",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab71874c-42fe-4bc4-8eb1-ad4491cda4cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "470e0237-9315-4032-80ef-13e9a723701c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56100902-e0e6-4ed5-a96c-8900997d54f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f164c67-0123-46e4-a44c-b7e6023b5101"
                    }
                  }
                ]
              },
              {
                "id": "237e9f34-6a7e-4a00-8e24-f3daccbf338f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deffc2be-4967-433a-b82a-11fe2a55d0c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98429c1e-2052-4086-9fe8-527e362e105f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0507200b-21e0-43a4-9969-169577c7dd6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bc21968-0c61-44c7-a56f-b2499fb551ea"
                    }
                  }
                ]
              },
              {
                "id": "580dacc8-ac02-450e-bd80-afe5df1575c3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91356823-8539-477b-80f7-bdd8e1517cb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7984917c-ca33-4690-a4fa-a430e4f82895"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fce81aa0-de48-42f9-8d85-182a532eeccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1038932f-769f-4e57-b441-2ed43dc3017e"
                    }
                  }
                ]
              },
              {
                "id": "1ad280f8-358e-49c0-8402-511019522b90",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5558b9bc-e4e3-4135-9c96-4b4f956b7459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aac217e8-286e-4e19-83eb-0b776a1c804e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fa52f4a-d810-4c24-96e4-93cf94290e8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "85f24afe-2a00-424c-8f35-3d602bdeff4d"
                    }
                  }
                ]
              },
              {
                "id": "6b23b0cc-9909-42d3-9551-b93dbd0c5d5f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a64b20c0-1093-4416-a48c-ee1a1510d081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c54880b3-a171-4e64-b7e7-c1fb3cccb081"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dba2b399-643c-4065-b9d7-d6fba143dfe2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1317c62f-af1e-4d94-9475-cfa4d04ea0a6"
                    }
                  }
                ]
              },
              {
                "id": "fb650fcf-8801-464a-b535-2cae8f6c44a2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9361e3e7-368e-4dde-97c5-8d1206930d0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9054e29d-6d6f-45d7-ad27-1c2c7b1f79b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47b82fd5-3280-49ed-b88b-9eafbba7b63c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a6efd83c-92b4-4c8a-ab69-6fa72a8e703b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "829890ae-c5dc-4390-a518-a14d904a3ed1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cba5d57a-8213-4c8d-86c1-acad9d8b6b6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3fd3374-85b3-4863-bb15-39a51579afd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dcd619d6-61ac-4ef1-b522-5efaa794a554"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fd32238-7cf8-4828-9743-0df32c08b6ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6967e6d7-118e-4d1b-8414-558725cefb28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c26bc58-be5d-46db-b5db-9b2975f6f42f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04bf8bf6-d4e1-4b75-b383-781beccf17d1"
            }
          }
        ]
      },
      {
        "id": "f42e3b3d-e733-4caa-b418-cd901774a868",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "af0c82d7-8bae-453d-91a0-c091eacc6317",
            "name": "Negative Testing",
            "item": [
              {
                "id": "614d23e9-7976-4ed0-8804-7837162daf9c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c40e8bbe-a418-4cdd-b08e-b9f1652167bf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d84fc7-8eb0-4a4c-8627-b26ef4620e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab91683-d781-45b6-99b0-02adb034879a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5dbebb-c7d3-489e-9484-cbfbee252f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ca0b1e-415a-4d69-a1ed-3750ee122253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627e925b-2c73-483b-901a-6f161c2486a3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26a324b-09ee-40b5-9734-45c8f4ebb08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16a89f1-9dc1-4cba-9fb3-e726d13c2450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d3d0d-be24-4049-9035-33ae767b2ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e0551d-d5d9-4dba-a22e-72f1028b25f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa5480e-b5d5-464a-951a-323830b5883c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9761fb2-d351-4cd1-9d62-c1781614517f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e247aa-64eb-4f9a-b0b2-ae63c47a7946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d15148a-2d89-4631-a406-89a31615d5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b90bdb-2008-40f6-a7e7-9110171545e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736b5f47-e0a7-4fbf-a2ed-ede5b314e6af",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfa948f-9ee6-40cb-a27c-f5cf7bea1bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1930d9-81a8-4411-9f60-c2af98e3fc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adb61ef-1194-43a4-be88-ecd00b7d9d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff452088-59b2-4384-9122-909aff9a1cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29103203-00c7-4457-a474-db2074200fc1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33ac1f2-27bd-4919-9066-69f7f53f7628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4a73e7-dca6-4f85-a599-f882238794af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786743cd-5682-4a32-b80c-cd64c6da311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39333a30-b740-456c-b831-218ce1d29fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cd04a3-d63f-42a0-95d2-dabf4bfe6cda",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab7f26a-a348-435d-974f-9ef4b40e1e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe29248-8c04-4044-ba4a-2c7eee438d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147c2460-3aaf-4444-9283-0f4b1cacc1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af3f6dc9-cf98-4630-9af8-2d546d312291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae206443-d1c7-43eb-954b-8ef5444ee5e3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d386d4c3-3b3e-4b75-86ff-f8d8de8b25ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9d5ade-94ea-40e1-a40f-b724e31aa6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ac3031-02c6-4c93-a6b5-c2a9d37c3bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "444d6ec1-aa24-4c9c-8d7a-6085930a763c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ffc293-72cd-4e32-b3d6-dbf4b355aba7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a128b783-b2e4-4e07-a032-7c01ef8bf4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001d3b79-e8ee-4e7a-bccb-fed27f1ab217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211b3ddd-ce86-4669-9617-51f3811533c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f93d2fcc-9340-4dba-b9f4-5e118aedd1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67833ed6-5e99-42c2-8406-917d51f50408",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f14e32-2f0e-4528-8f6e-e983e863fc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd66406-a876-4308-a88c-7f667e98fd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289ef6d7-82be-4e7b-9d8d-d581d42ac49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec027269-0990-412d-9536-e7e4e51948e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebd4db6-627a-42b1-ab36-a911ce8230fd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de510c28-a4b5-46e1-8b73-51fb8e4ebac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c21e9d-4bcb-4d80-9631-5f5f06ea488a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b60d31a-ea99-410d-997b-2f2173644de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0b6b8f-d182-4120-b13a-ed795d941299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bfff58-a990-47f0-8f20-c0873c51aef5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d911462-8e20-4967-b8d9-c90d27fb3582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc0616d-28d7-495a-bde9-cb16611ea777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa37c67-6607-4540-bb44-e18e72880b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d0278afe-0297-4c65-8bf6-bdffda4d84b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5467976-8f35-4557-8c55-def0844d6964",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bbd164-86c0-492c-a666-ee3d71c05548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ceabbd-450e-4120-a7bb-b210e0749205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a4876f-ec70-445c-a48f-c4b8dd32bfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb304d2-7838-4fbc-bf1a-747539321b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab248d1-970d-458a-bc6c-81bd9742c603",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dfa926-20f6-4398-bf10-637abfd24984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38ed377-dda6-4c51-8996-5f9e92a9c87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490ceec0-403b-4677-9e67-233efa97b64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f186cc3c-2713-41c8-993c-2c87ff7fe3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24052c0e-1e96-4748-b3cd-4ebaf040e87d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be80eec8-bb67-4df9-814c-64082ad6e896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2dd7020-8a6a-4bf9-9e6d-29966bbfc7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54de5c9f-86e2-456c-9eb3-adad67558c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ea45df-29b7-49e0-b932-dbdf89fb530e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4e445e-84de-4a2b-8093-920b3cad3e90",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546b172e-5655-46c7-94d9-82a22edeb7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdab803-6925-4a51-89a7-0b02594c4e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14f944c-0841-4269-9f99-b08f95a7bd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "417c7c90-5050-4c34-b2cd-a1e41df7a7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfa635e-8b55-4d4d-add0-e542e59fc18a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ec33cf-58fe-44ea-b0f9-f5647eab1a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef69c723-a405-4df4-8d8a-a2a71cca7132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8065c08f-5561-4a97-95f5-8c6bb034fb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d264e488-40a7-488e-a21e-c40770ecb253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975fc303-e59b-4f62-a83c-8824f2c99ba3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6541e0-752c-4f89-b0ba-b3bdc15add0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349f9ebc-a316-40be-9862-a08d48aeff16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e464a2c-b6e4-44d0-90fd-ce51bd0582e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed6bc91-ff33-48dc-b6a1-1bba580b2298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc3ac18-2052-47ac-a81f-a5675b0c3b42",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86e2293-bf9b-4f90-9fa4-7ad57c96626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b59dc1f-1418-4018-a3a5-62908a75fc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6f3275-2d36-48a6-8deb-c7408f0ca483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "efbf8d64-bc6b-4181-bc0a-bc44b7682168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa06ab02-5243-4af9-a8fb-ec8b7cdaafe1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ac1542-0b02-43aa-97d6-f8869ad539ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d39340-a9c7-4d01-b9f2-d31fc350c709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79473904-b672-452f-b96d-03ecc51f6655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78109b9e-a800-483c-bbe1-c522720fe295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd476a1-f329-45ce-8a47-85571ba749f8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc29f748-42c4-49b3-af95-db2e2ec047f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa80ec30-2cad-488d-9a9b-42caa434d5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e25996-5e71-4a69-963a-8a5ac03c7f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4aee560-dd10-4d10-92bd-e8075ea95359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1fb75e-c3a4-4681-82ee-924af774c16a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09066770-21f9-4fb4-9574-7da156002eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b6678b-2186-43a6-b2b9-4015c9a6b7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397fa5bd-5cfb-467f-bcbb-5eb3c2bf85ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1157384c-e2a5-4f81-b5d0-95461683a77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2286f8fd-8b00-4b33-ae41-78b264412d64",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b0749b-ce51-4290-9bac-129e51d0b040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943b102b-7224-44d7-bbae-9643734a1594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a0a5bf-31e2-4cdb-b734-626b45d0a16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e5c33ef-7e45-4eae-9598-801fa909b901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c909bfb-e70b-440d-871b-01bba2eb1ecd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a3aedb-7fc1-44cd-a9a6-a799a44f3ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff5ef7c-b13c-4d74-bf22-5c062d3c8160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ca4e17-593f-4cb6-af6c-be26aa0ff53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f1f58a-ddfe-4d85-8ea3-779f2633d199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8915065-65ab-4220-8e8c-5e00be143612",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07d1360-6b41-4229-ac72-35b38c1c9586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15466b56-db32-4eca-92e1-6e832dadc9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9499ab-d3aa-4c29-8674-6bcc0612aabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87909607-11f0-4d7a-a579-43b4333824c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c023b45-d714-40c7-acda-f173b19c6df6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c970b476-01e9-47b9-8711-cec2d38283f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea2b681-f855-4de4-9d44-271cb20368fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9078bc4-6f8e-4e01-a61c-789ee090f0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9037adc6-7e5b-4d31-a0fc-59c07b450a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57966bb1-bb6c-4f51-ae7d-eb49ea9c5b60",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c717c2-cce2-4d10-b004-74f420c5bd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0cb0f6-d5b8-41bb-8e61-ad60ee1a3805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee8fedc-96d4-4b69-b8d7-b8864977484b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af925211-a3ce-4fe0-9a54-310c2a2b9b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb4fcda-1169-4d29-8ac5-58afe261b3b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece1e9c3-7c87-40ad-bb9c-292d92371d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912291d6-df14-41b6-9771-f58c2f054ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22870e4-fda6-4094-a4b8-3523e138fa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9c1b97-d030-4654-a291-1a561f711012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978c8258-28cb-44be-a136-f58fa3420f75",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0276d40-0ca9-48a6-a8b1-a367c9ac487c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ec1656-dc1d-4866-8181-a3c11b8e8f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220100b1-653c-48e4-b76a-e3c7623ff39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7017dc-28d6-4754-b985-54d8c8e93ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3453fb07-7a07-4302-88ac-1b9ccbf1299b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f578a67d-f355-40d1-98a6-82b0c5cf05c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbcd673-10f7-4b81-ad89-dc0f6f926804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f49511-064e-4774-a7b8-f2b375e7a3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52c6826e-f0b3-47bd-bab5-95411dfac60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4258fba4-f4c7-4582-851f-0a088a026c6f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863f85b1-db03-4a0b-a79f-b2c8654596a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b825ad8-af35-4684-8c00-ef1ccdb5eadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0b5682-188b-4d6e-ae3b-e05983a10c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb9a3e9-b41f-49fe-b7de-8a9fa344eb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f289c954-bd10-4ae8-9ada-40054ba27fcf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64513a80-d6b5-4b83-a347-3f6b18e91499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8174b0da-62b7-4f24-b922-cbf95c966fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "514d3b11-378d-4a4e-94b9-858b7aa3d727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d23a8e-ecaa-484c-a9f4-4e7fc57f74f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb364bd-0326-47a2-b206-b7f08bc6d703",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0481876f-bad8-444d-98bb-3c33d5d17c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4982560e-8dbb-49cc-87db-4e2e3db35c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b3a157-3dd7-4129-a926-270a8340c85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed269d1-02c8-4862-92e9-00671549cd79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ee3f9fb-23f9-4e4f-8ef5-4b194c2522ff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08eaa4bb-7464-42da-b043-8564714983d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e19e844-f8ab-4618-b52e-7eaf804b7c86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9295ed-b6dd-44f2-97ed-592853c74571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4932a4-2760-433d-9abe-c45ac1f5c05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91eb7a11-67e9-4f2b-8b34-f954cdc7860f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4e54a06-9414-473d-b2e6-1dfbc41a352c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9e6145b-3551-45c1-b39b-2e9337595bd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a709557b-bde4-4475-b1f0-41d660f9795f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f51b2a49-f8dd-4d17-a863-9c7fa5030e8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d82a128-bb00-4cda-acf7-ee0a0b33dbfa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "924026b9-20c8-4b19-ab2b-92d43f439124"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1d62f98-c089-4c46-bf45-b78df32c662a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d0d7600-22b4-4bff-b38a-c81b2889d716"
            }
          }
        ]
      },
      {
        "id": "dfb8e642-5ac5-4f8c-b7bf-89cff021410b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a9945fa5-ba3d-4bb9-a94f-0b2b08563909",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c2a42e2-9467-43ef-b1fe-afeceb836152",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7034b280-87ce-4f6e-9170-ef5c70b48d77",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed45358-d771-41ec-a950-4be4e549d2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b635d2-b9aa-403d-bdab-9463b50b72d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96211471-4777-4158-98b3-4a3dbb38fe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "003d209b-1ae0-4b8c-8b15-a0eb683edda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bfb9f9-f1a6-4922-a43f-f4e12d6524dc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855187ae-bfd7-44a0-b04a-9d4f37c23a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b5f074-5081-43f9-a729-dc32f9d4d69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44204976-dd5c-4c99-8e53-11e0e7408e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0482f8e-142f-4f0a-948b-3b8e1ee02b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65227222-f926-48ff-9cad-9bca88ab32bb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5c3a01-f365-4759-9957-36cb2785c38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ededdbb-8b2c-400d-bff0-57ce2d1baac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9b70e9-01c1-4655-8e57-cdd76d087e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c03627f5-a238-4c4d-8444-9e9a860dad7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c621f4-8071-431e-acbc-0eeb9629007b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c87310-c272-4a61-9027-881e19ab1290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ffd200-3d2d-4fc4-8592-3434c79ec3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6549246e-1c59-41d4-a715-576663260000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edacb7f4-21c2-490f-b58a-04f1d595bf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f9193a-0f92-44dd-953a-0a2668c2b08b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22724e18-79a5-4f71-8466-c8141325b530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e97db7-4ceb-4705-81ec-6b26499ef4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146cf396-9193-45e5-8bfe-59c9c276dc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce37e57-2b99-4524-b957-b3e425c7cabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a41a21b-1b30-46f0-a909-6a77602cb494",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a844ca47-3503-445b-87b1-fd6e6fa58ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b0f07c-a620-40be-b986-d5a9ac78f32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f7843e-282f-489b-9374-261029d2be32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8f280a-7223-4d43-ad04-3250c1874c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39215b96-3df7-498f-b3fe-9991f17cc324",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b670570-0bf4-4c4d-af6e-40999ad7d270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82538ad4-475d-4e28-a64f-57e8d6376cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f735f0-ad21-4fd7-8135-7c934f531f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cecf8c19-2df8-494e-a050-5618db06eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897e499c-627c-49b6-9496-53848817512f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e17760-945c-4038-9524-ab79a7af0191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0e5d02-44eb-48c2-9858-076cddcab606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcdca64-5472-4ba5-9914-3ba7ce0c3df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c26b634-36e6-4658-91a4-d993ed3e775f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5742b93a-b0e6-4253-932e-da28577e8954",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef5541c-aa55-4123-b263-f2d173346355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b979ca9-4fbd-4859-911b-6b9bc03bf72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52da67da-e612-4987-8f7d-07f572970997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6862189-9a5a-4a8a-9014-0f81aa817772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb5cb3b-8ea8-4bdc-a1c8-7933d2723f17",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29f82ee-0734-4219-8dc9-664a1b9fd0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0522856-5f6a-4603-8b79-46f4156d19a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1853db-741e-4d38-a6fb-c0a8a85a9292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c81aaac6-1a04-4fee-bdbf-32f4c1fb5083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d53083-0761-4311-b948-1f6fb784a87b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5f3a2c-e946-4944-9bcf-bd4599a30b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca68fcdd-8787-44fc-a21c-73dfb00647dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb64f13-0e51-4ba7-ba44-cc6f88aacf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "13e5887d-a1c7-4d60-8ed7-279d230fde69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcd471-2b67-4821-8071-247697d51014",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99686e20-19e5-4647-9ccb-0ba6a740d294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a1efd6-3f7a-4d81-b434-85e6b12e0a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23c6bad-083e-4d0e-86ff-771c0c042254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e40488c8-69ef-4967-bf97-daa4443f4983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767b524f-5911-4b1e-bfca-c2d79b667250",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96eb4d2f-9e27-4467-81bf-1f6e601094f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552aff78-16c0-487c-9a72-0e581d268111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7b730e-f3c3-4516-873a-c66dab8f0771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22616867-6920-48ac-b738-a19ad352b98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158aa8d7-800c-4108-b0a1-b513f7cc7870",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88c748f-3fb3-493b-8708-a674d9066ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57be9f5d-26fa-46cd-ae98-46b2115851ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192f6a74-d734-4d5a-a9ce-84ea4376dee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72c4bf96-6356-4968-97c0-41d29d62b74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9408b25b-3f68-49d6-bd56-357526f1a6b2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1689fa2d-0934-433a-9ca4-ad12927e142f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb6249c-c374-4ee4-8fa0-7871b11d5f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470d5643-ee6b-477f-8dfe-906cd2ab9adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b932228a-d5f4-4c74-b898-e94241aa0b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eec4de-0822-457f-a38a-6bdae050c6a1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789e4f8e-c3f8-405f-a409-4ffb00f8db06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8303d9c0-b6f4-48ef-81d8-f9b75c505f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2a7cd4-9703-4ebd-958c-5e3df7e91e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3418e291-194a-48a9-b163-a86dfbbd955c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bef2c92-118a-4e16-8d16-37dccf2c64f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b80b219-a795-4523-9223-e040d682f477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b3e0de-6cee-4973-8b1e-79a5da113e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35c00df-ba5c-4e8b-9ff5-f8d04b9cf791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e99de6a-ae9d-4b74-b402-5307ef495c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d0ab35-7a3c-46e4-93b0-3a640fe5c0a1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e669b2-11f4-4e7c-9f8b-da8cd7945591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d875e56c-8a81-4b24-a474-0c7ba2dee74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662a02bb-2809-4fec-8484-ce3870ccb8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a4c4c1-7fc2-4698-bd9e-f16324ef91d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9140fbe6-6e8d-4700-99dd-e7d6d99c817c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cee4058-2597-4cd1-8586-5b7fe5f456c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0497b406-ea8b-45d0-a29b-9495254b33c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9909738-0f01-476d-8935-fabffb9e24d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e894dd6d-fe94-48c8-b925-7fd24e7f2094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad6f32c-c9b5-40f2-94ab-0b565e5948ac",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7ccb53-56ef-4eac-b38d-192d64f6b1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1a44b1-930a-4f3b-92c9-95272e31fa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efabe37-8dbe-4810-80d0-16eb937bfd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2131e3b-1053-4c1e-bfa4-66dda536173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522b1001-8c15-4f17-80db-8d8b684bec9e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141a92e3-3181-46aa-b361-fec0c81167d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b69fa4-a514-425a-b88e-cfd75b6b918e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3940174b-bca4-4d13-b626-a02e5db91df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f74742-5a1f-43fb-8f19-b276b6891072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303aff5a-3379-4944-bcbf-71b2f43d9cf6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0e6196-1b58-4052-b38c-579e4a85c69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec335a30-4a0e-4e74-9363-bece5e9de54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be4ec5e-58bd-4489-aa13-7b91884b3b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a5e623-e3ac-401a-9431-b7e099aad0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c75759-260b-415b-9be7-8ad1dd8ae73b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9a0ecb-f45f-4db2-8a36-8699f494f14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303d673a-dfe8-4a2e-b002-fd2e6cf061f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc34f3b4-9a6a-473c-8d0a-2f9768dc7ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14bcdb90-13af-458f-be1e-f2417f73c0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26293641-7e9e-4721-affe-d4bab404c36b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc42ea7a-3929-40ab-beb5-a50946f67939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e8182f-d575-4833-87d3-8148bc09acb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56e7f90-48ab-4069-a8ce-a537d848467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96d95da-eea4-4483-a14a-212f9899ddf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded64c0a-b168-457e-8a64-7c15283507b0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff7971e-d970-4007-81fb-c976198c297d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dd56bc-3c0e-46d4-ab45-3f73e129f3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a50722-c5d5-4316-93bf-bcefcbf58bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a4187c-c514-4568-b819-39ce77ed2508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9455967a-bda7-4c82-8c01-da85a5e07b08",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0403737d-c587-49f9-a7a3-9829e61d06e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e210167-9005-41e8-a209-22a6aa3234c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8243835-3627-411f-a1b4-ef22ed9c7300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b41d18c-4b3a-4dd1-b519-e5396e9a48f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e53b11-324d-4a19-b072-817e62fad522",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e4d0cd-c8be-48e8-b1e0-360d1fd32d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d447155-c7d7-4b3f-8a10-3cbde0cecc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008eecb7-2fbf-4260-b4b8-6380ea0e577b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e63174a-dace-4729-a194-54f4905e8c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0d629a-7b84-4fbe-87c0-c9dae093aa22",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae90efc0-27d0-47b9-ba23-65ae4c186cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c889fd5-27a2-4a53-bd51-608b10b7273d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f975ab5-a219-4950-86d4-ccd3da692b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "811f1107-889e-4869-b362-2cf4c98d78e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddb12a9-bbe0-45e8-b2fd-8a420d7142da",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec337f4-0727-4529-beb7-c14b4427ebf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c46e1b-1ac8-47b4-b4c3-ea8ced070dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c092f9fe-51ad-4bfb-b846-4f7ec42b31a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37e181ba-7039-4ffc-a368-efb408e248ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74e3eb5-84a4-4102-ac96-81c3c96804ad",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8581f093-122c-41f5-a053-cf07ba8fab4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcd8f85-77fa-4fa0-8f42-c20ac4031d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815efefc-07bf-48f8-b582-311554aed47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace63039-9ed0-498c-91ed-cf9ea863e3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cf9c53-2ba4-4a3c-8d2c-473bcf9acc9f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed30172-af67-4abb-86f9-58d37fd215e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ad10ef-78ea-4fd5-84b1-fa59f464b7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8ca318-7c9f-4733-ac17-26eee3c6f6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74d65b59-0193-4f82-af30-c87a2c77e2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bc1194-c9ec-4cfa-86a6-2c60f3d17203",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f2300c-157c-4857-b6e4-7e8b7cec73bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3643807a-b514-4ec7-967b-620a99ab7cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9773ca2f-b506-47d5-8728-381d310116ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0c064b-a01d-4e51-ab58-020fe82cd258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8265de56-f9ed-4956-8965-f66a79220713",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e1eaeb-f443-4069-9f8d-c8d964f3fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "359ae4af-5b18-4bb1-a827-a19165497fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6b080f-b24e-4bfa-84b3-6746847a96c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90700a6f-21cc-4bcc-80ce-966cbbb85de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbf9fb7-42a2-4caf-aedb-34ab91fa4cb9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c213f9-5941-44d2-8f76-79712b85b63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02301abd-fb58-4fc1-89d3-08ce12ee178f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36de763a-dba5-4ef2-a486-e1d9e77f3577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a41f4be-a200-47c3-83e3-23168bdf2236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeea01f8-3a37-448c-ab9f-7001f51ef68c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467c5f59-8e26-4d13-9e87-a5b85f3e3553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72baf0e-0c0a-4f9a-9688-5b207cee0d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08966cb-1f69-424f-b636-bbaaf03aed77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bce009-3b8a-4aaf-a270-48f6e17d0816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a383fde7-0b67-49bd-8d5a-7b22d22a83ae",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e20b2d2-d1e9-4a7a-83fb-05d5b3259aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060902ad-8876-4345-8391-97aff60d6238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfde28e-c407-46ab-81da-12a814220b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cae1d427-c632-4489-811d-576c169c4a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937bc28a-9b5b-4102-9957-c9859457e1d6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b527c16b-e904-4a55-9aba-810bbcc516df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c05280-085e-4c88-8103-7a1ebdab5505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfde5736-d846-484f-9328-05637f6b1a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f086d5b1-f72a-499d-ab26-17a1b164ffb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62bb6bf2-963c-4ddb-9c05-08a9c41268e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47432315-e633-4afc-abf3-2313cf2e6e09",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7689e0b9-d5e5-44bb-9e80-6dc0863753a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1831f8c9-158d-40ef-aef0-3c90509e7fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848bc7fa-2c34-4962-834b-bb1c34c7e617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18e32fed-5104-4725-a28e-78c4855a5639"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "369a64d8-c930-4c4c-b171-b2af3ce5aedf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fdd5b75-aa78-4e0d-8022-d942de3b635e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f41c23da-a163-4ff2-a2b0-3c3135bbe762",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c51c942-c666-4832-a22b-34d76d72f6af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e89fef43-737f-49c2-afdd-9f2878efccd0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7660a290-71fa-4948-8007-54e53fb20e2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe525e6b-8ef7-4654-bf9a-3bc35772014d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cc61ef9-8428-43fd-9099-8abc7fbbaf77"
            }
          }
        ]
      },
      {
        "id": "010db4e8-44f7-4f5d-8d5a-82614b901a6f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "36edfbd2-f696-4711-a0e0-a3a2b0c8e0f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0aea2045-e4e6-4b6c-8e1d-fd1b344b4f8e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "783f4878-2c46-45c1-91ae-00801e61d518",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b549d98c-a1ea-4a41-8f98-e084b5e910f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad00a78-9c0f-46a7-8701-326487e907a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70db233e-c157-4f82-91bd-ff64549e1322",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a53009-c3e8-4c83-8e31-240bb1af8bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18716444-8c40-40e5-8335-4981820fff74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72fedd0-786b-40a0-9e02-43ddf8f91262",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ca45c2-b1c4-4e3e-920c-3666a66123a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6294756b-5c3b-40ad-8c21-7c3ee50c356b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3d7c25-69e9-46af-b54a-3f41a2c621d7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb0ff2d-fdee-46be-bf98-47811a9d2ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4b35ac-569a-4548-8125-9f0eec694804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5540fe4-19b9-488c-94c6-eb35b8dfbf08",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259c0d33-5a54-4e33-8c85-ca1e7c6c719e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c551fff-1a88-4e19-acda-3af83b730587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2715a2-0f45-47a7-b33c-fe06cb137089",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91028397-9bd0-4cc8-8ce4-2bb30663ce2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8add4a06-053e-49fe-b0a0-2866051f87a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f86f461-383c-4eaf-9b35-e9b164548091",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c64a61d-f403-4046-a602-5f2064dc2a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055bfb6c-afb1-4bd7-bb4c-d20ba475856d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d619ebb-ee1a-47b1-bb0f-d756b178ab65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681a65a4-063b-470f-a472-dbf0d159ff8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718e51a3-c75b-41a4-abc2-3a5a01b53baf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c8a419-13a2-4a96-86e7-422a8772d6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff5e1f5c-eae7-42b5-8837-c9f4d34fd682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7442ead6-dccf-4a7a-9adb-78d0df941118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fbc92b-9061-402e-99e5-a07992b76384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c9ee80-7f6d-429b-8ed7-28f438988104",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d48118-fb49-4b42-841c-392181ab478b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89eb48b-e8f1-45a8-964d-257ff08d7dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919c6948-1806-4681-8139-a94cb554b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2d9160-0bc7-4976-8acb-10c038ebd2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e355e8de-71f9-4bc9-a663-e73973347820",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17916d24-39e6-4910-86cd-dd2216049890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d7ce0a-f4c8-49a9-9625-10b5aa65d986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7868489f-8516-43ad-9081-1ab635c22833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d387e9b2-1982-4a39-83ae-f815f512f6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36b88b6-e720-43cf-a9c3-ca8a80002eda",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea704e74-f125-410a-ae8d-c6f64533e798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "424ffb9b-8b24-43c9-a98c-f972a2f1211f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9bbbc9-79df-49cb-b95c-a8daace3368f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787e3bc9-2a70-444f-af2d-ce3d573dec81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db466e4-043d-45bc-87a6-918c5de661cf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98114095-df2c-4092-9394-bedf3edad05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99498cf-1b3c-4cb4-962c-35f355a7e08f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b5cbfd-37ef-4f09-b026-b7ff5eb01013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594ee0bf-53d2-44a5-b73c-3b4891d2cb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f746c1e6-d2ff-4065-9e13-444f224f156a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7a8c4b-7dd2-482b-bb23-8b93dd42bc1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0cb02e4-4cd3-45db-a4cf-7f5916d16fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b67341-4a48-48e4-93fc-a94bdd55cba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8550266e-1dc2-4fde-b5aa-b2017d55c52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430a3251-343e-4b73-ba22-9dc1ee2f3677",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7452f84b-8bf6-4617-bdd6-35eeae809da2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef917b70-b8b2-43b9-8cc8-ae11669fce71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761e440f-84c5-49f9-9b3e-e34c5eddd069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15e0c54-c8fc-4c36-8380-7efa0023c418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d34a58d-462d-47d7-bfd4-b63f3875c673",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363e2ec-50cf-45c7-b38f-0f0aa661ea72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d29b24-98dd-462f-8477-bb2319693a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59275e05-9065-4c91-8283-48366b03b0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93827f2e-7e98-412c-ab84-4bd655012831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2170b2f-970c-4497-9a6f-741bb9382083",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7416168-7854-4e5f-8c3a-98ac31b6aa52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c575565-f029-4098-9b59-42e0158c2964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16df58c3-5257-40be-8711-004a87a81dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9283e0-172d-4872-8f01-821163deba8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730e96ab-3e2d-4ace-9208-7a723c83d51b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3f416a-88ca-49b0-b7c8-84c867183de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b82d75-e46d-4957-bbb0-c9c15a767842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07005ff-768e-4d29-985e-e02fb9b78931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822b2fd5-6ef9-4346-83a7-79866c9ec8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51156db5-6554-45de-bfc4-84d43f28a0cd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c7f105-cfb1-4fee-bc99-bac4bb2a20b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be9f4d5-845c-44b2-a6ab-a26aca2b5eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf4dcc5-a271-4dd3-972d-28ddfb4d89a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6234846-95aa-46af-8402-f5b2abba0b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4da691-a5c8-4972-9595-687ef90c1299",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac01e891-a524-45e2-be9c-117101629482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac651d2a-f7a1-4d29-b167-5e96295d6165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ca339-b16d-48bb-b420-c307782e4a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45057299-2e52-4104-bc05-25deef31388d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b2a5ae-de6a-481f-a21f-d0945be9efe9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a1eedb-d56c-48cc-9cb7-bf72d280cb9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af0cc8b-bae8-417c-9ff1-f195a776415c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f277b3-29b0-472f-b23b-01025727fe47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed4e057-5cbf-47b1-8321-be46c475c723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4c04d9-f12f-497f-8ba7-c452ec166121",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc4c27a-b43e-4c94-bd1a-9199d79812f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "912a16b1-b6a3-4e4f-b1e2-e06c7d8b5054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b94179-6185-4e16-883b-9f4dd9299672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e982274c-55e0-451a-b775-7638d938c21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b80e33e-bca4-4413-aeb1-d7e62373b8bb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c416e7-396b-45fd-be25-dea9dd2fbbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2221fad9-e012-463a-b2da-f10bc1f8c9b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b53ece-68d3-4ef4-a18a-cb1bf07a1d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9022fd-22ef-472f-99a1-945a71a8b929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933455ae-a55d-4fe6-90fa-a660b734b231",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58462860-12c7-4e01-8267-2272972571a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f58dd88-0179-470f-84c2-1aece70727a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d904c306-2496-4123-a77a-7e2e17f0bfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244f04d4-8aa7-4c54-812b-d81c99d7cc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229b5452-450a-4e93-b398-39dc97961edd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75ea718-519d-4ca1-b446-9435bd057785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "900aaa85-6dd5-4a61-ad2d-cfa0b9497489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d490cda-676a-4de9-b412-c4557ed90f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61ec7f0-8f72-4d3b-8946-55f8ef460f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcb2b3c-2c13-41f4-ba51-a44963566b63",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c9607d-a0d9-415a-bf76-0f734397b411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb0b55d5-eab0-4a49-8b45-cd9d02b4b024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cb8268-8a21-4c7e-bb50-fd98661ffdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a167af-13cf-4136-b33b-4e44358d5c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60566cb0-8a53-45fe-be76-82e7d0251c24",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1021390e-ed82-4ec9-8a49-db1c4d999ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad419b87-b0f3-4603-b7ba-ab525fda7a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f178d3-834b-4ab1-bf4b-cd1ae6c4059a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631260d0-4887-4451-b730-ce0e5c02977c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e49859f-b780-427f-b863-93f758d893fd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8173859b-26ee-441c-b86f-f4fdc32cf3ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87873580-16f8-4b83-8c6d-5a4034885372"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a580c1e-65f5-4f42-a309-1b4373c86268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0abea9-01ad-4bdd-8a5b-28aae1d42ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a2413e-98f0-4e05-8ba9-1732f7c47f25",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2874a520-2f10-4daf-9866-f2febe61c0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac175905-4c6a-429f-95ff-1a52e7ae2ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c508a4a-06ac-44df-912a-89c552bb6fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7ad871-58c9-4a57-a615-33ba859911ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeca48e-d26b-4e26-8b07-cfe2a8168f7d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45914efb-d9c5-4b0e-9fe7-821e84f1667c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08cf4e8f-2de3-43af-bffb-0870a4c28d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee6e4ac-79d9-4d5c-b16a-dcdb25e77d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d0f14c-d8c7-4414-9f9d-0a040640cdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25123dd1-f27e-4ae2-92eb-5d13693049ae",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35f91c4-d956-4d42-b58b-bc6e7eea0a1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b610ee-da2b-472f-8eef-24d6454a55f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "927f0528-69a2-4c62-8230-820eccb25bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96037c09-c695-4046-b647-218acb6367d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bbee6d-7df7-4344-89f0-7ebb69ad884e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f253a0-d42c-4eb1-935c-cbe3e7d0b656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a733f4f-9b72-406c-b137-389e5185898a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bba324-ea3b-4744-aa1b-8c4237ed5493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fff7b60-8685-499c-8703-9e5a2f33d1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb67b1b6-2b09-4b12-ba88-c0825cba0336",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2324eb8-c2f9-4aa8-aed4-58db3adc2fba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ea9853-965d-4d3f-b8a9-854e4a3990e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca06a65-8d37-4c1b-a1c9-fa6a556f4faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e926ee-8e74-4d75-980d-ef7dbeae36fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a456c2-3ee7-4daa-b042-f873440469c5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11155d3-1c2a-495c-8404-27f7c94ec541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d892238-0068-4da8-81cf-2fe2a8ef2f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e08ffea-756e-4f07-abf1-ccf0a902db0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0eecd8-d02b-46ee-90a0-5af00bf6ae93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae20e9d-1e1d-4144-b82a-08dcd3b5157b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2e6250-9720-4e1f-9d9e-0703793753a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6530c2c-e05d-41bb-9eb7-53fe0c6a51b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "754e3818-8ea8-42bf-9a7c-94290e9d148b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fb76a9-3c6a-42eb-8b27-e7cf5b99141c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a4e29f-654e-49f5-9b31-47bef20608b2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabc6853-54fd-4fbe-88d2-df778ab63559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80832f01-3196-4893-962e-e66448675295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346064eb-8106-4252-b9f4-c4742c2d6bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c466eb08-9cfc-46e9-84e5-dc47b17003af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75385da6-5399-486f-ab63-0462ed7d4203",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58106c99-5adc-452d-893e-ea1e7c132f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11efa422-a008-4200-a190-d6311a593a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e65ec0-2e58-42e2-bb78-361bfdb661fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56fafcc-ca52-4d86-8e1b-bdcf21bc2148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9001cd39-9c29-441c-9fc7-df3d3525ac2d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cb4b34-59e0-40a1-9f10-941e7bdec0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e40582-cf73-4005-a84a-d37e357a1e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ecd734-5fba-4ddb-86e5-8a99f81aa2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd5f416-e816-4e13-8184-4098c4a93432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b61f7e-f129-41ce-92b9-c6816a0c5aab",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85e8438-7d76-4281-ad24-eea955d87f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab990ef-a34c-42ba-8491-dec05d0de094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5a85d1-8f48-4161-886d-5a068d0f7c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fabd8f-f7fa-4f2c-9da1-1ce3cd843ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ffa092-60ed-46f7-bf5e-21b027ddbc42",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b0ceb5-bf5d-4d73-a6ba-6cb94a2607db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fef7b9a-37b2-428a-8d84-e6d134ad45ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e057c04-4b09-4f24-9921-2831abe16e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7bd2e9-db97-4e4b-8b67-177596c38c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e55be97-2193-4895-a179-08bf8108f127",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab528a79-e9fb-42c5-a096-23923f309ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552a6f13-3e4b-4ef9-94fb-0322c5ab7a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3f4542-5234-4108-9481-bc6db6d8613c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54096dd-acc3-4bae-83b9-e6ecb9ae9bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6895b7-0c72-4408-84d2-92ce1f07df21",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6638c6-3434-4e33-8c48-9282e28d46d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4ee774-938e-4ec0-9956-3070c30bdd9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c623a15-0e93-4d50-a565-aac9c2dd5488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee569781-0ecd-4c70-9581-8dd4a9b81a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af14056-0878-4be0-a4ad-4b56b1299f68",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc58a49-4eff-44d5-9aa1-f631a70be295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9bc4d1-2da9-4378-b584-825936fcab5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db7f251-9f3e-4f39-8c9f-cc586095a271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ac4e51-0363-4d41-9eb6-cfaf2039d19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876b8b6b-07ec-4370-912b-a8d9e2a97a1e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38206330-caca-48db-a126-0b1b35f7fe6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f855b062-0af3-42a5-a102-38c936ab5a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b718304-4d59-441b-a850-5cd5a91f7807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a1983a-db64-4b43-a8af-c41c7382d873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09375dab-3ef1-476a-b073-f28876dd90c8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0324f9fb-a331-4065-8c15-9b7f5072233f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c68396-0d4a-43fe-8aab-210d224268a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d30bb2-1ca2-45ff-acf8-290ec8e8ec47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8dd4416-3f18-4692-be12-cae274721035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b78af48-8c27-4fd5-a574-6b93e4a65ea7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3068cf59-4208-4968-903b-46c8b7e4b92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ce0945-db3c-47cb-9c6d-e2b0a569eda8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025e2e13-1cba-409a-b616-e4b43de5eef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2bad56-d462-4449-b280-9971b762493f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20ad80d-349e-4c0d-bbfa-bdc115e47e1b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39ed4c6-4ac6-4e36-bafa-b2219ff9d501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565c6ba5-48e4-49aa-ad9c-08ebb783840f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fb7b71-f4a5-4101-bdf1-0fb8791bbf05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ea7777c-62b1-4927-8c2d-8fdaf544ffd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f55eeed-eaf1-49e6-9da2-63d687b288b8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89269c45-f1fd-487c-b009-57a80c070365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37694d0-2f95-468f-86c5-1e60fec7d7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e50db5-4ee5-42d7-aefa-22364bce127d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef842eb8-7356-465f-a5b7-86465ddb2b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7365e7aa-e777-4395-acaa-a6ce6d641d2e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b243e246-8eba-4521-ade6-018277c84bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ba7e29-f574-4886-b2f4-0dc8bdce5233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd45a69-6bac-45bf-894d-5f5ff3fb1df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb721b5-4195-44b2-9454-9639361d551e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f8b053-6424-4262-8d07-b79431b34f4d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e3b3d4-f5d6-49a1-9eec-bc428f597c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f522393c-5f89-4831-bbcc-16858d7fb002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a94832-67e6-4865-8077-492af0215135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c4a8602-83ef-4af3-80c6-0f6ea7eee9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3251fe6c-6d3d-4411-bd58-d2d4f2cdaf29",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a518ac-c6f6-49d5-bb53-729ce5e0393f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f33da71-89c5-487c-92a3-3ab4efaa6f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a580402-2732-4c10-b3ec-a9cbdb0c9b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33945bb1-3c44-4484-a25c-698f96e656e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3042d596-1f21-4771-8db3-6893c0328641",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466c84b6-fbcf-47aa-b2fb-a52190056c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a10c3a8-c07b-48c3-8b7e-1a0de6aa7b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137b642c-24cf-4148-9370-ae5b68ad540e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0539b317-0474-4019-af9f-d3957c967e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba60bc4f-4d20-4e14-8f6c-6490e0021fd0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb34662a-d4bc-4623-a1f1-ed680449ed29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79e3697-9c41-47cd-84d8-8a38321893a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba3b8e3-a4a5-4303-ba3b-bc064c185e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5777a7bb-f114-4a6d-853c-ba5fd0992697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e7898c-ae0e-4e9b-a6a6-e5585120982e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ad4e69-3ea3-4844-95c1-d4ee61876867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df36cb5-9bc9-417f-bff3-6c9fcbcb1f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0e6b1a-4211-4ba9-8a3b-507b35690843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94b1fec-3c16-46d3-abef-65d2cd71e897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf67929-ae41-4aa3-b87a-b154e5ff581e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f827c737-deed-4bce-8a27-55433177fa83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db51573-d603-41ef-b39f-532d1f6159f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59df483-6018-484d-b44d-75627c5a6fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592d7873-bbdd-4892-a2f3-13d7a49b0941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8858220-f685-4a57-8c8f-710a0912029c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2735e7c-b42a-4afb-8f63-0d50e8a1ffd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7aca3f5-74b5-4226-8136-ea8e86cb1bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d71085-8366-4c97-821d-42a6c0aa37e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c234929-fc25-419e-bdcf-9231ce588916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25e2621-447b-460a-8a87-5ac42bef0d7e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9221c893-9649-44a3-88c2-c67c8ecbb5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1178ea-2218-46fa-ae90-1d822d44fa88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83f6a3-fde8-493b-824c-73a9ab1fd131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad466ba1-4839-4a66-ab20-102cf5c28778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b296712-5e4c-411c-91f0-d2034fc2ed07",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc066036-a0a9-44af-b7e1-a1212d0dddfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f629cdb7-bf19-40f9-9b4c-50ce41777bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9012614a-6b8b-4df0-b0fb-772ce42467ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fdcf76-94d9-4e01-946b-bc71c34070be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc51b0a-fca3-466b-ad03-b54bfad5439b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1da956-730f-46bd-bf15-c0889b76df0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09bb817-7f77-4407-badd-127468c3d0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b50110-2189-48c3-bc3f-751852a549f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a9be4f-6574-4b74-a61c-016383922966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269ea57b-3290-4a7c-9f7d-b7093e6a097b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f879058-0550-41e9-8faa-bbf702c5740d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c628d6-3394-403d-a169-ab801cb71acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6021f27-fd64-4020-b759-6c897855d71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77bdc6f-8a03-4438-bd78-db715c65cf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bda3bb8-fb4f-4b31-bc17-4fe78b458084",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263eab01-ef1d-4b87-82a8-9d87d5e165ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087fb523-792e-4ac0-9247-1fc56b59c5d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b647e19-8c08-46e3-bb8e-7bd162c59134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4580641d-6630-475a-b9ad-667ddfece8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800cde8c-d942-4e0d-be3b-66f4dfb76f89",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87551f2f-f149-415f-8119-6f0e2340faff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e687cc6-4492-4e5c-8ac7-53a929afa430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b13ba3-367c-4e2c-853b-381b0151568e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed30ba9-e771-4bcd-86e3-02e388f7dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74f1e31-e9b3-4d83-bd05-eba1a203f63b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8713f7-253d-43e7-815f-ff40f3190d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faecb5c3-e331-48fd-bd83-6d97cd2eb7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255e833e-7e4b-4185-b896-a82eadae88f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b39ac9-10cb-4181-9b39-85560b8a81fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5677fa-ffd0-4bc5-ad64-11b9bc2821f0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25f2d0e-6fc7-47e9-b371-c8dba936f22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd40f700-dda5-4717-85b5-26a043cf6142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3118dbc3-00fd-4547-9ad2-3791130b9af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd611e96-a1f1-4cca-a430-33b4a5617128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615eac99-800f-40b3-8b6a-e671920fe787",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847112bb-f7d8-4e57-a30e-8298cec657b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "940732c3-791c-4e09-b2e7-8e16cbbdb9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea53f9c-c673-456c-9dd6-9c426b134a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e260fd9-413a-4a2e-a6be-8f400a74b239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c1b4f9-186e-4ccf-a593-c36eceb0edc3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84e3c7f-4450-4058-bb02-22c87c53669f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23a062ce-6514-4251-9a73-f2754f6ab8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beb1abf-1fd3-4ea2-8b37-fcc7495ae274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0678039-68a3-424c-9605-08b77a002969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abb11cc-c2a3-45c4-929c-8ad9fc1327f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9407054e-4ce2-4835-a1cc-57491ce9eccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18203d5-502b-421a-ba02-7d15081f8323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed63cfa8-5158-41d3-858b-8d025d5317eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e0beeb-a2b6-46dc-8bc0-fcd77ca61b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503092e0-ef89-4fe2-a8d9-90b36c774a6b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0233c2fe-5198-4c46-85fc-3c0cedd2942f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "704759db-0d7b-431e-8a59-0d5c24d78ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c42c0b-83db-4083-b41c-212693c95d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048e40ff-b5d8-4a51-8ba7-d5955c57f7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9090dafd-a207-4c04-acdc-067e71e90c5d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19294cd7-44a9-4617-a429-87668ebc49ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71624bc0-07da-44f7-af75-6560c490139a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56812835-1c59-4043-bc5b-26ed04ae7f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930181cd-f5d5-4136-91cc-9e67c8189dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154a5183-3190-49ba-bd9c-63deb221eda0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cb5c64-f29a-4f41-877f-4beb0b454bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a9239c-d0ba-4e92-9fe5-0b9587903783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae57a2bf-e1e7-4b12-8f79-fb3733bf9c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac23e6c-7d6d-411b-b6de-10cdc8ee7264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b11ad1-6926-4c86-8b64-ad7f16571595",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042caa69-df4a-4d34-a933-07bc9fd4de11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "866ece2e-2886-421f-8f00-81b851fe974c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9eea658-9332-4e5c-b068-70ef0bfd8dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8f1fdd-20eb-4951-8a1e-50c47b231664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377afe6f-62a3-467a-9877-1232b48bed3d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bfb08d-8dfa-4738-8846-56f40ed6dcf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd626c9-8b60-42a7-9a3c-91902b4c09fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa3632b-2176-4a0d-8baa-f19f6d11f7fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dca358-d898-44f5-863d-9cdc207c8db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df50f35-b0d5-4024-bd37-cb63f42672b7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2dd4c3-af7c-4e0e-bce6-435ef73c50d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd60fbf8-9fe5-4756-b5db-5864f4c6cd1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19141362-3a30-4334-9fdb-dc900c9b6309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d22bd4-db85-4eab-8c2d-6f366aed27ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9358e56-ca61-410d-9a9c-6ca076f1bdd7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85f3b34-2020-4f5a-b411-83195cf14e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650e6f55-1ff7-416a-b020-0b0a993489eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93b3ae7-9c7e-40f9-bc84-96c5c8a29d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d15611-3702-4a6d-b293-150b70a8fe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366b8494-e650-4639-ae65-304ca5d4d11b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42318355-2109-40e5-b5b2-e917be30d3ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca70556-cab4-4688-b0d3-110d486d5e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f853098-da7b-4ae4-a39a-541794aef4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2567f6c-cc94-4301-a560-54c76ea54ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f03c742-61af-44fd-ab51-423bbe50b8c1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e6de7e-67d2-4d74-aa26-3140ac61ed9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8291982-a694-4214-b070-e4deb435fa74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774d9f8a-35f9-4184-a95e-19b3596b4e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be7bf6e-0b8f-46c8-a7ed-b207ce6ec57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6555108c-dfbc-4021-9e1f-a8dc721c59e0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f74f731-37c0-4298-bffb-3a37f130d977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07fc189e-2db4-4daa-b76d-73891d478abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630751a2-c7bf-4067-b728-a3c21da4b6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd610cea-eccf-468f-ba99-3bbf80b22580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b650aed9-902b-4090-bdf6-ed368e9d0bfe",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d5a8e8-e3b6-4876-9961-5a0309e3eff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef5dbb2-51b7-4b74-bdf2-6431738b0bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45325a3d-a70e-4c74-ba9d-f2bacac3ff4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51d2cf4-a7ea-41b8-9dac-99bf6f2b2f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82b395f-bda4-43f6-a16e-23cd0b7e8a65",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf58d8e7-bebe-4b2d-a83f-01395a4be04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dadca787-11a1-49bc-88aa-969ac8d6cd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb926d1d-86bb-471e-a93d-5fa92f49048f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00928148-274f-4c2d-955b-40a19e9d1cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065940be-b0e3-4044-84b5-de1eaaff7af2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865c6f0b-6ee6-4af1-80fb-96728fd7a04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd826b5-cf76-4834-a75c-f726935a753c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed21cbd-8658-4697-9f8a-fc9ffcec86b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae91d9d-3a43-4919-8c95-0033d431cc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bce4ca-a7c3-4576-b09d-965333eaea79",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f8f881-56ae-42a8-8b38-99f19904f9a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9acde02f-17a6-4ce0-8e4f-1bae2d7eaa16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174354e5-3409-4f30-86cb-846a731fb781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95dde01-0802-4b90-81b0-05a3c8c3f067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ba08dc-2c96-41c9-a7f2-d29b5063226b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5cf44b-d6a0-451b-8f08-872e3880ee66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae7f213-a4a9-490c-91eb-5280881c06c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6160d95b-63f6-407c-97c6-dfa0dfa8c56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2ab68f-1e22-4e8c-a964-f54aded75d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c3a5e8-f03f-40aa-8b91-d76723ee5641",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4c2b8f-37b2-45f9-86fc-478d6531d8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17f13700-22c7-4f0e-ad62-dc3bd69b0b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "422e3ab7-3328-40c5-ae10-93fba6351c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d626b29-2f9a-46fa-b2f3-fe24dcdee497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174d2280-1e7b-4b71-b342-ada687bfd9e7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3183631d-4f91-4d34-8453-653a6c297114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d835aac7-4f3e-4f76-91b4-e715a46cc3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b04519-d14f-47ff-a528-6b8f23e6c2f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092e2e89-f113-4af7-a1f0-ae6d5d66b922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d33bd8f-3c40-49f2-9c6a-f5ad1676ce1a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b060e4-ce1b-4953-9009-e871b6af3d99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d91520c-0098-4f60-a435-6a28b22d5837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99436c45-b45f-4b78-8ada-b2f83dfb70c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497d497f-07ec-48d5-8250-8da7516802ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d57c0f9-d51c-4bed-b4f1-b91988abdffb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989dc7a7-a40f-4343-a333-95ebfdc73a29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ee532dc-0754-472d-b458-79ea6e6a0839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8555c74f-5921-41cf-b2ac-f938bc52beb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14e1287-8448-4eb5-af64-e7e10bbeb9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918a133d-ba0f-4da3-b838-14635ff09064",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9e3294-7047-46ee-a3c4-bf005a60972c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9af6d7b-6f3e-4f39-8527-2df902517a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4ed134-ec1e-410b-9481-e5e745fedbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd5ca6c-8025-4b9d-98db-94502475b5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8ffd7c-9646-431f-8788-0765ddda931c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f1f938-0373-4d68-80f5-59b7e884ec95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa97f13-a0ae-426c-bd72-daef0a1331a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b8481f-a48a-4c28-874f-ae696c9d26f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db5104c0-27d2-4f14-812d-2be72889ee8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a509b5-e0b6-4ac9-b31d-82b096d6233f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fb36bc-a364-4b81-a182-70ad73261c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c8a164-37c5-4d3b-8d7f-11db4cd76474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141432e9-d482-4da9-b21a-c2d107e98689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4454d2c2-bfd9-48eb-921e-71f6b7c8c5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc181c1-02ff-4111-9a02-6549d77e3404",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7c89ac-80e6-4fa1-8906-f74989d6e183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a50fea7-0964-4f2a-bf62-01189773cf68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f4a67a-61c7-4604-bc1d-a5ff2c9dd17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3dd28be-bd8b-47c4-a35d-18538fd0aa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0005ae87-4b46-4b01-8c50-c7e52762c5ee",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ccde4d-0262-4b4f-9870-422674b1607a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c3fb9c9-22c7-4c03-97f8-cb1ada3dafba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2384894f-355f-46cd-887d-f786e525b8ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6d7eb4-b0f2-41df-b9f5-0635c47d5f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041d4d67-52a9-408c-818d-0fb4e424d5a6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d38a55-fac9-4ac1-b3c5-c4ed6018073e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc3169b7-f231-4c9e-80a2-7cd65cb0dfa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c47635-39a5-4d82-b993-35e2d1f00951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab4eae9-14ad-477b-919f-029ef12549d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa341317-cbdf-4016-bb5f-f22214530284",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e19af7-f54a-4132-97e7-92d08ec27b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5ce464-e9c0-4ddc-ad13-fdecc8db8d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d9743d-4755-47ce-8dcd-3e9dc3f0f45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d3421a-5180-4407-9376-89bdc72372af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39196742-f35b-4476-9446-14e0735ab2b0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a89a19-5b8e-43a6-9ffd-ed67e346617e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "accdece4-f5c2-40d2-bd84-70502e90f225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b01c8bd-d1ce-4558-940f-df5f035ab6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120691e2-2e82-44c1-a357-ebd1ea1ba807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120e4df7-bc9a-4845-900e-25aeab34957e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c95b831-775a-4669-aa78-4af77749a1e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "224578ee-7dd5-4808-a451-982640156378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aea4e5-5829-4e08-8894-98622bc2f1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0d17e3-09e9-4b1b-9329-87a9c2a4f5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd8010d-0371-4d89-8ec9-348667af8e5e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cd76d0-cb31-48d8-b605-d0bdf19027ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4cb5050-4080-4fda-a4e9-d2e9328edde7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a8e8a0-dcb1-4f0c-a246-031f9243d267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cc871d-ae9f-45c4-bfd9-895dfd778a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f87877a-7a93-4e5b-a469-fc38749e625f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f19d967-0a3c-419b-b0f6-fcf6e3b26871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e791c1-d1b7-4349-9d1d-a5d0b3a233d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74639321-5f08-458c-9a7e-1edf1d2f4558",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d187d5-2978-4fb6-a85c-3cb7582b33cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024064d1-777c-4158-8384-31486715c126",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258e595f-954b-4287-8a6e-bafa1e239cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9764d8-6ef7-443d-ac87-45e1b6e964ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96ba7f0-dcfb-4ba5-a407-18b72081fa23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557a6263-9c2f-4bfc-b4d4-aaf965598075"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a56ec5e-cc3c-4835-87b0-65ae6f52654d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3189ccbc-4ae2-4a72-8044-49c70363de50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7815ff6c-b561-49cb-87bb-f44dd281de2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5e32b51-11f7-403f-8b92-30dc91c647f3"
                    }
                  }
                ]
              },
              {
                "id": "0a5faa6d-3882-47fb-b544-f489b4f82f5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d9b709e-ba25-4d35-9c40-d9890175e077",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36189015-9340-45d3-a3e9-115a87de6fa0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0b991f15-5b67-4750-8df8-cbc922282190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c1b664-a1d7-4fc6-86dc-02c076d8514f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cba4d74-f90f-47d8-a35d-86461a687dc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "551e4c52-b95d-4db4-923a-957e6f9edde1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d2a6e5f-731a-490e-875a-58f59edf3db3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3092ebda-1948-4e59-b51f-1258c85d6908",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5802114c-ffaa-4b6c-802b-76389b807aae"
                    }
                  }
                ]
              },
              {
                "id": "9bf6aca3-eee2-416b-89e0-663b5e8edcbc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "bbb40706-9277-431c-b132-fc0796409e6b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cef610-1aad-4ff2-bdc0-b6135adaaf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "87da644e-349f-43c9-8182-0a8d786a9895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a90383f-03a4-45b8-a026-74de00944337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8d816c-5809-4996-8a0a-687e03ac1b0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1034576d-105a-4c07-8264-724db2e0e7e4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d40b6a5b-4e34-4104-b54c-abf4018516b8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df297f19-96a6-4e28-aa1e-92391c347a81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ba5f7269-87ec-4726-8d25-f8fb611b2283"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03713619-ac44-427f-a40f-f81446a95445",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1977c26-76a7-4142-8e77-5c9b2c44c111"
                    }
                  }
                ]
              },
              {
                "id": "b89de8fb-c1c4-4607-aca7-2b725c81d5ec",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8469e538-49a2-4e5a-8f3b-182d5ec2c4b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f8ccd063-92e6-4a69-b4de-552b5e65aa58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82d317a1-bc2c-4b51-b9d4-7afbc171387d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aad67c7b-2ce7-4cf6-8032-aad9efd6e22a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc788d51-5562-489c-bd6e-736ed12f6c66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0f6c09bf-5308-4f8c-b8ea-e1132a4d4435"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89400d94-f434-4085-8a1d-492ca352ff57",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0b13393-25c9-45c4-b9fe-c9595d969c28"
            }
          }
        ]
      },
      {
        "id": "81dc57ff-c88a-4e39-94dd-d38cf1d0f0c9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1e3da10a-30a9-4fa6-bcd8-7b52656b228e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2d619ad-f98a-4ac8-9271-a4d49436f332",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25649d26-9307-460c-ab2f-8ef3007e3599",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acebdd42-790e-4094-aedc-01f304c97a7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7fe4397c-a5f0-49b5-90c4-de4748ae287c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e3e314-1593-4f84-a825-c0377839942d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49972c22-9841-4239-b52f-05bb682059cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9be0480d-9d25-41ec-a223-e721b163a7e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3985a8c1-3040-4cb6-a106-ad645df2e1af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5b3ec7b-e6b1-462e-9449-40213f8d05f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9058a3aa-9248-4341-8415-9b1a3d11d266"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3dbfd7e-f2ef-4ccb-941b-74e41c1ec58d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "43b1048d-192f-456c-9f05-711c0385fa74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b15d4412-d748-4142-bf47-bb1ddab17ee4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ceb0eb2f-17a4-4b91-a3d5-4b7f18ef1a08"
            }
          }
        ]
      },
      {
        "id": "d1f0e715-7cb0-4969-b794-75b35b685763",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fc10f423-477d-4e18-8de0-1697608b97b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94bbd67d-7e93-4ef6-861b-70f1fa9e6cee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33dd051f-5a54-4884-bf65-b4eed16a82cd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649bc635-e520-4095-9e65-2a96a145a3d5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9399fd4-1a28-4c9d-8a5d-fea34a016b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74d7984-58b5-458f-a343-c2b0d4da0d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a92db187-3ff5-41ef-8bb4-ee214bd85e0d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "136adccf-4f3a-4d69-a647-b46a84957335",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e25fc58-9942-4e25-9673-04a721fd3695"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aab1e46-7ee0-4819-ad66-75b4eb77df21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c235e363-3be6-416d-a7e3-8e6181a14ba8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ccdfa76-cf7d-44ab-a39d-cba6bb6281bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "71eaa4af-6f5a-4d33-971d-fed24188cef9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "153f9547-ae01-40a4-8212-b6a965927e9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "221a10a5-3aec-44ac-9aa7-9eda492efb03"
            }
          }
        ]
      },
      {
        "id": "fcd012bd-5d0a-42a7-a934-bdf4a931de9f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "762ea768-ab68-410a-93de-91e477c3a721",
            "name": "Negative Testing",
            "item": [
              {
                "id": "673445cc-80d6-489f-9f95-1e2513ead173",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec67d692-a547-43ab-ab11-f3cb110cb5ad",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1589ae10-0b52-4d64-9822-a7bc65d9cb78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ce4c4eb-7d5d-4b64-ad4b-111fdb396c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3621c8d-8a2b-4136-a8ed-fd24f7f03155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6279760-90d1-4444-9040-32eb29503070"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd21762a-45e1-4d9f-99ff-cabf3be5be79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "187a14d7-948c-4ecf-b7de-2a54816d10c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe40b116-7a90-4ba0-9692-edb3975f3a7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb0dfb29-4b17-40f6-9e10-d97715651888"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f50ece4d-df2c-4fb6-bd9f-35a0380dce41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8bce7b71-ff4b-48e1-ae10-9ac00b5e633c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fe149cd-458c-41ca-b724-e15b179dce16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e24ea94-a39f-4460-b897-669167fc1a22"
            }
          }
        ]
      },
      {
        "id": "aabd4be4-10df-4e35-a701-ab42c87d2fe0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bc54348-691b-4595-95e7-ecb2edbb8744",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dee87ef9-047a-4d97-9701-ea82e14bc962",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b0eed107-42ba-4b5d-ae4d-f376bdc0613d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f9dc147-f2ed-4439-b7c6-16b1b598bf7b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49813ee0-1266-4dae-bf14-ba8a5339b394",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.87017543859649,
      "responseMin": 11,
      "responseMax": 468,
      "responseSd": 59.21765373606335,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698194010230,
      "completed": 1698194040881
    },
    "executions": [
      {
        "id": "fc9d8ac2-0a6d-410b-a4ef-1c49047fc9c4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "630377a6-e69e-49e7-a874-6fd95aeba619",
          "httpRequestId": "2850d13f-d894-4b06-ae94-c77c3990f63c"
        },
        "item": {
          "id": "fc9d8ac2-0a6d-410b-a4ef-1c49047fc9c4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "294d58d8-3740-468c-bc0c-7be09fd37a0f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "e2e606c3-c683-48d9-87e9-8b62e1de4731",
        "cursor": {
          "ref": "e3d35391-3fb4-4068-a1c5-bfef770202a1",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d1548396-7a96-4a66-ad01-abd7051aab4c"
        },
        "item": {
          "id": "e2e606c3-c683-48d9-87e9-8b62e1de4731",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "99857e3e-6c6d-4567-80c3-ecf4b8d4dbae",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "02686152-3912-4ff4-8b9f-b52e208651de",
        "cursor": {
          "ref": "6987be93-b0b8-405a-867a-33da007d2fcf",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c38cb21f-e22e-44f9-b01a-8aab5e110467"
        },
        "item": {
          "id": "02686152-3912-4ff4-8b9f-b52e208651de",
          "name": "did_json"
        },
        "response": {
          "id": "dcb42702-73f1-4db1-835d-eccc2f355e3a",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bd6a5a-d8f4-4fa5-b4ec-98b524e51b91",
        "cursor": {
          "ref": "46480b37-f403-48e5-adf7-1dc22a54a1ae",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e59f32c-34c8-4814-b036-8fefc70c8161"
        },
        "item": {
          "id": "45bd6a5a-d8f4-4fa5-b4ec-98b524e51b91",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ddab1bc-2240-4f72-92fe-327fda60165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bd6a5a-d8f4-4fa5-b4ec-98b524e51b91",
        "cursor": {
          "ref": "46480b37-f403-48e5-adf7-1dc22a54a1ae",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9e59f32c-34c8-4814-b036-8fefc70c8161"
        },
        "item": {
          "id": "45bd6a5a-d8f4-4fa5-b4ec-98b524e51b91",
          "name": "did:invalid"
        },
        "response": {
          "id": "9ddab1bc-2240-4f72-92fe-327fda60165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ae75e3-611b-4487-ad5b-eb12041b3282",
        "cursor": {
          "ref": "1eb9cb0c-3066-41a5-b5f6-12b148814075",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b6e355ce-aa3c-4975-9c41-6d8af11f822d"
        },
        "item": {
          "id": "87ae75e3-611b-4487-ad5b-eb12041b3282",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9d019b91-fda2-4268-a408-fbe6b4b3f06c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a488a7-c426-49e3-8584-917d7ea53cd6",
        "cursor": {
          "ref": "96f1d51a-38a0-422f-a78b-36653f0c4702",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6963e673-3161-4795-ac14-8a564817c47c"
        },
        "item": {
          "id": "11a488a7-c426-49e3-8584-917d7ea53cd6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d5cf35f9-f5b7-4c8b-8d8a-d62e0856272c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acaefe2d-1c5d-41da-91c3-9127638dd38f",
        "cursor": {
          "ref": "99f8fb59-14d8-4bac-9a2f-71ce6a9735e3",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "84d64070-48be-4400-ba3e-7111cc1ca129"
        },
        "item": {
          "id": "acaefe2d-1c5d-41da-91c3-9127638dd38f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c30c6c81-48ae-43b5-a623-19b81b665917",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346d1516-a963-4721-80b9-e839554ce912",
        "cursor": {
          "ref": "97522212-64c9-453e-93f3-33bc2f7b06c3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c93eac06-5e00-4a5b-982f-5db35dead19a"
        },
        "item": {
          "id": "346d1516-a963-4721-80b9-e839554ce912",
          "name": "identifiers"
        },
        "response": {
          "id": "9246151d-0049-47c5-b83d-092c8da84db9",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b1d170-14d2-4e10-b25b-9657609952d2",
        "cursor": {
          "ref": "617f7b15-3f49-4ebb-a44c-608cbce4460c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9888f000-7800-4e70-9bca-2ae3eb73f137"
        },
        "item": {
          "id": "e8b1d170-14d2-4e10-b25b-9657609952d2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a4758799-56e4-4a6f-8f54-fe447eaf159d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24aaba51-f775-4aec-a2d3-6cc14e855bfa",
        "cursor": {
          "ref": "0abf1a70-8740-45a0-a0e3-255d2352b176",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f77a0a51-524d-4a9e-b66d-83f3a32b384d"
        },
        "item": {
          "id": "24aaba51-f775-4aec-a2d3-6cc14e855bfa",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "09017dab-5074-4e19-ac5e-f717e72d7247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931d2308-d143-47a8-9278-005c1e941e21",
        "cursor": {
          "ref": "84fe9215-319c-4b4a-8a72-2338977e51b0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9ef5609a-7781-4d4e-b0ba-be7744b026d4"
        },
        "item": {
          "id": "931d2308-d143-47a8-9278-005c1e941e21",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "61e4a724-5796-4e5d-975e-1b7749788e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c809e55-b1d0-4520-a340-d886ba381952",
        "cursor": {
          "ref": "742e6401-322e-4a1a-93b7-bcce0fa8bf7c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7b85857b-5b73-416a-9af8-f1e01ea94f8f"
        },
        "item": {
          "id": "1c809e55-b1d0-4520-a340-d886ba381952",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "615381a9-16ae-4d3e-b5ed-8e1229ad75b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e464b3aa-df2d-43a0-a0b1-302e8b7d2b21",
        "cursor": {
          "ref": "8f48b0fc-f538-4e8e-a82a-746864ae5c9e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5ef82fcd-c32b-4f95-9f12-9adc9f18fd88"
        },
        "item": {
          "id": "e464b3aa-df2d-43a0-a0b1-302e8b7d2b21",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "da2d29bf-ebbf-4be5-a8ea-d35d72e2f9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0162c453-b231-472f-a989-80f416734181",
        "cursor": {
          "ref": "a8358c97-be5c-4aea-91e3-cfeb8bd24900",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "75910ab8-9ee5-4406-aeaa-05f3c3d66798"
        },
        "item": {
          "id": "0162c453-b231-472f-a989-80f416734181",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9ca22378-fecb-458e-b9f4-dd71c98bcbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d45e6cb-03de-4f11-9db7-479527657561",
        "cursor": {
          "ref": "4c353d1a-a5c1-4094-8d57-537107404bdb",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a8436d63-95d4-4e93-beb9-0eea06df0cc0"
        },
        "item": {
          "id": "0d45e6cb-03de-4f11-9db7-479527657561",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a9c44307-7421-4043-972f-e2101fc8446c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890f5f6d-a65d-4027-9f1d-3fa19bdc1748",
        "cursor": {
          "ref": "6b61d88f-3296-4ffe-9638-6de7f424ebbd",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6c9b118b-4299-4e20-86a6-acc7909943c5"
        },
        "item": {
          "id": "890f5f6d-a65d-4027-9f1d-3fa19bdc1748",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0137adce-1742-48c3-bee0-17ab5b7ded28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02198b3-70ee-444c-b68c-e7e059ac091a",
        "cursor": {
          "ref": "e5d5bfcf-4667-4280-a0c9-e74b635370af",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ece0e3e-07a3-4e99-8d9b-27fe69a11fbc"
        },
        "item": {
          "id": "c02198b3-70ee-444c-b68c-e7e059ac091a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "da04b92d-b4f3-434a-b9b2-b193cc04fc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1085ce8-7514-4044-8632-7c8177f281ba",
        "cursor": {
          "ref": "532192c4-99fd-447a-b63c-1b3d2ae1d4b0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f9a1b2a4-5089-4c0d-b4c0-55ac1fc7b8d0"
        },
        "item": {
          "id": "b1085ce8-7514-4044-8632-7c8177f281ba",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "32eeeb48-8267-40bb-bec3-7f3f1b39396f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbb8a92-f690-46d8-ae29-d89e7564d187",
        "cursor": {
          "ref": "e720f7dc-6b6f-448d-9cf1-cbc8170b19d3",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2d2e0ee5-ba22-4003-a6f1-800ece25e811"
        },
        "item": {
          "id": "3fbb8a92-f690-46d8-ae29-d89e7564d187",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4a9bf72c-8858-4685-a56c-71afe694f151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacd8a4e-d7b4-43aa-bef4-420d45ffaf47",
        "cursor": {
          "ref": "9af363c7-c9e2-46ff-9b73-50706b8c2231",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8d162064-c16f-4141-a6a5-b58ebd627fc9"
        },
        "item": {
          "id": "dacd8a4e-d7b4-43aa-bef4-420d45ffaf47",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c81170a8-eb35-4f81-980b-865a0c4d86a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bdc0b8-18db-4e00-ac7c-9b7616dfb597",
        "cursor": {
          "ref": "681a7ac3-e8e2-4d92-8f81-9ac911fa7408",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "70cdc3b3-2222-4d54-9882-bd728619fbd2"
        },
        "item": {
          "id": "b5bdc0b8-18db-4e00-ac7c-9b7616dfb597",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9cb19a0e-345a-424a-99db-f0c80bb820d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb77d07-cc37-4e0f-b725-30e57595c16e",
        "cursor": {
          "ref": "dc01ec19-619a-4c69-861b-e1e492c9bb97",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1a7cd6b6-2381-4945-9e24-e91d956fb824"
        },
        "item": {
          "id": "7bb77d07-cc37-4e0f-b725-30e57595c16e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "473ad8a9-c482-4261-a567-5449bcd7d3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1ac2a-e6c3-4b50-939b-21e7ca2b8a14",
        "cursor": {
          "ref": "23308a6e-70e5-48c5-af71-0b6ed2c06678",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6d390820-1875-4b89-8289-0ee7f315dee3"
        },
        "item": {
          "id": "0ba1ac2a-e6c3-4b50-939b-21e7ca2b8a14",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6ccc2f28-abe1-4427-9538-8bc13ab88687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7206e6f8-f26d-4f22-ae79-4097b5af2329",
        "cursor": {
          "ref": "bc174f00-3491-40b1-b77b-9165f49a5c9e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5159d319-3833-4184-85de-23f0f253b56d"
        },
        "item": {
          "id": "7206e6f8-f26d-4f22-ae79-4097b5af2329",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "baf86d39-7fe6-490a-9e88-5a3180455e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53bfeb-749e-4b30-aba6-ddd524d25640",
        "cursor": {
          "ref": "320266a3-b210-4f5d-abb7-a9769aa39ef6",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "064e621f-75a3-49db-be79-d7a31f8717c4"
        },
        "item": {
          "id": "9a53bfeb-749e-4b30-aba6-ddd524d25640",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "39739bf2-2dfc-4379-a639-c9ac5dcb63d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e0feeb-3596-4236-b82a-f4e2f457a2cb",
        "cursor": {
          "ref": "7ac75989-65ce-4956-afde-9077006c6237",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5c725e27-6c77-4e08-8959-5b56ade363da"
        },
        "item": {
          "id": "32e0feeb-3596-4236-b82a-f4e2f457a2cb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9045a31e-5963-41c3-85f9-54620595e826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc55719-2dea-4c10-8cd5-10cd70b9b320",
        "cursor": {
          "ref": "4de482da-942e-44d0-9133-d605d3a6c5e0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b08491be-65e6-418f-8831-836b0d7665ac"
        },
        "item": {
          "id": "7fc55719-2dea-4c10-8cd5-10cd70b9b320",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "35bbd25c-6715-4a0d-8741-3836e2af5321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f9b0c1-c68d-46fa-a63e-895e127203f5",
        "cursor": {
          "ref": "40c97b4c-344e-4a47-82b1-918872f599cc",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "34b04f8a-58a7-49e1-9e61-d0b4f4f4aa1c"
        },
        "item": {
          "id": "d6f9b0c1-c68d-46fa-a63e-895e127203f5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0806b384-59cb-41f1-bc7f-d54df79d25fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ef812f-cd72-4fb1-9557-f1611df5235d",
        "cursor": {
          "ref": "df69dacc-a957-47bc-b467-68dfcd4f8605",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "83596dbe-e04f-40e4-b6c8-581f624a381a"
        },
        "item": {
          "id": "07ef812f-cd72-4fb1-9557-f1611df5235d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "72e27d31-e2e3-4b60-9370-5b953b38d0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbda3bcb-2519-4581-884d-ec1d34fd5b42",
        "cursor": {
          "ref": "cefdf68a-3103-47ef-ae34-3721501d65d3",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "22b2e808-e1bb-4d3e-b487-9337c65eb926"
        },
        "item": {
          "id": "bbda3bcb-2519-4581-884d-ec1d34fd5b42",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3abc927f-6938-4ef3-aab3-f60e4bb1e4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84c6486-1b31-49a3-9c22-63a312e42a11",
        "cursor": {
          "ref": "9f9b9e33-73db-4ec1-b403-e063fa5fb881",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "40690341-fd93-406a-acbf-6957784b4a5b"
        },
        "item": {
          "id": "e84c6486-1b31-49a3-9c22-63a312e42a11",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e072e2fd-0e9f-4625-b2f1-f061cef0fc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fc47fc-9d3b-4813-b8c2-98bdeb248efd",
        "cursor": {
          "ref": "fda76ecc-b340-4798-ad08-189e4e76b3a3",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5a39cad4-32b4-42fd-b4dd-8eefd3754c5f"
        },
        "item": {
          "id": "66fc47fc-9d3b-4813-b8c2-98bdeb248efd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a2b54eb-0f5e-48d1-9857-d6a6dd5c5aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d83b335-fc45-48c7-a082-e8ed7d61556b",
        "cursor": {
          "ref": "5e6a8559-ab6c-47ff-9b8b-96912544a4b7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d73f203c-f8f2-4421-9add-ce0b0b5eedeb"
        },
        "item": {
          "id": "4d83b335-fc45-48c7-a082-e8ed7d61556b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9ddf3b38-fc82-400f-8491-105343d5a4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4246749a-364a-4d31-93de-d136dd3ffde1",
        "cursor": {
          "ref": "baadf299-c2b9-4b22-8a90-da2623579746",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "808421df-a324-4c6c-8a8a-3a41ad981430"
        },
        "item": {
          "id": "4246749a-364a-4d31-93de-d136dd3ffde1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d24a3cf6-bdf0-4d47-8df9-f94ba1d4892b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c180e6e2-9608-41fb-9320-76f31f0b6272",
        "cursor": {
          "ref": "3c2702e1-cf40-48b6-bde1-5e7067e4faf9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "debff18f-933c-4342-a2c6-26e189704d29"
        },
        "item": {
          "id": "c180e6e2-9608-41fb-9320-76f31f0b6272",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ff79f053-fafd-4d15-8681-467f0b8e8929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b569262-3cea-432c-a5ee-de66347efe6e",
        "cursor": {
          "ref": "50480641-8606-43ba-bca1-befcc242e2d2",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7c524c90-682e-4e35-89eb-c921f0863c05"
        },
        "item": {
          "id": "1b569262-3cea-432c-a5ee-de66347efe6e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "75d501a7-e720-4b03-b0ee-78ecb775c171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241803ea-bb2a-4a59-851b-ebe1cafdf9f8",
        "cursor": {
          "ref": "c5accb52-fa11-4bac-a016-93235ca3cb3b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f3c33974-c18c-455e-9ddf-28b009cb1699"
        },
        "item": {
          "id": "241803ea-bb2a-4a59-851b-ebe1cafdf9f8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5b9fdbbb-3b04-4dc2-a680-b107a3cf0e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da177eee-6811-4457-a90e-06c9ec2204db",
        "cursor": {
          "ref": "302f6bb2-5796-429b-97b4-0915eea642b0",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2876a169-a9e1-4a29-910e-750331079d1d"
        },
        "item": {
          "id": "da177eee-6811-4457-a90e-06c9ec2204db",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7203006a-e31f-4485-b809-ac28de04f2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b3a987-d65a-4b9d-b223-d5e4bb80ba30",
        "cursor": {
          "ref": "af8b8cc9-2763-4393-b605-4326aa3015b7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a75d069f-bdcb-4809-843d-4759cf9bd1b8"
        },
        "item": {
          "id": "24b3a987-d65a-4b9d-b223-d5e4bb80ba30",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e812c89a-c0ed-41c1-9289-a63e38f17491",
          "status": "Created",
          "code": 201,
          "responseTime": 468,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "94b147d0-3789-4c67-9d54-8d7f9503f0b8",
        "cursor": {
          "ref": "f5aeaaaa-03be-4fd9-8727-f04997c5c52f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4fc39326-4966-493c-b4da-75905ac90d3f"
        },
        "item": {
          "id": "94b147d0-3789-4c67-9d54-8d7f9503f0b8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "50ac48f1-f9bc-4f9e-b330-1bcb697d22dd",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4f1e087b-8ddd-4d0f-9f7a-5ade658306c2",
        "cursor": {
          "ref": "67003597-468b-4448-83fb-4303bf5145d3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cb456637-f9c2-49ad-968c-f9275fdad1a9"
        },
        "item": {
          "id": "4f1e087b-8ddd-4d0f-9f7a-5ade658306c2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "82c21186-abc5-4e36-bdb4-052dd787ed8c",
          "status": "Created",
          "code": 201,
          "responseTime": 209,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b6a9d9b8-5206-4d28-b2de-55bb4d6c1c5c",
        "cursor": {
          "ref": "da6ce0c4-af25-4e78-884f-b3a61e062617",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cc631456-3ced-4acf-b188-f6b1d288d840"
        },
        "item": {
          "id": "b6a9d9b8-5206-4d28-b2de-55bb4d6c1c5c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "086a3af3-f672-4eab-8050-7b08bd2a4155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3385450-2cf2-4222-a636-8eccef3d8973",
        "cursor": {
          "ref": "74bf45d2-7d8a-442d-b348-b17ff8d47461",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d1330483-ddef-434b-8cf5-e187b57f9336"
        },
        "item": {
          "id": "d3385450-2cf2-4222-a636-8eccef3d8973",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d8c45363-3e3f-4b27-a437-a0d77f435719",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dc2a5856-7a69-4ef0-9572-25399b2cb54d",
        "cursor": {
          "ref": "241e841d-439e-4933-9b06-5b3f21a668cd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "92f229e1-3d65-43a8-92dd-48c2adffabd6"
        },
        "item": {
          "id": "dc2a5856-7a69-4ef0-9572-25399b2cb54d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dc23e436-5750-4089-a1d8-6f5067016bb2",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f4334bf7-adf5-4186-a5b3-d936a37be02f",
        "cursor": {
          "ref": "3bb29e5d-dd0d-4ba2-997a-6a6924de1135",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1862dd1f-18bc-4350-afc6-9a89120b6753"
        },
        "item": {
          "id": "f4334bf7-adf5-4186-a5b3-d936a37be02f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c75f28f5-22c7-43a9-9c75-d80ac579d01d",
          "status": "Created",
          "code": 201,
          "responseTime": 207,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "afbbe6ef-e126-4fbf-83fd-e0f3590bccda",
        "cursor": {
          "ref": "0b7bcb29-70f2-4ceb-877e-41ccd476c26f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4ce84f47-37b3-45b6-a037-1aea7098747b"
        },
        "item": {
          "id": "afbbe6ef-e126-4fbf-83fd-e0f3590bccda",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ecc8763c-23fa-4a56-b9bd-49cda94b3bcf",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cbf808c4-33c6-48cc-937d-c23c447e856f",
        "cursor": {
          "ref": "fafe0afa-c04b-4a74-a1a4-391b71f2ccba",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "691ca4ae-a993-40af-ab8b-582600c559cd"
        },
        "item": {
          "id": "cbf808c4-33c6-48cc-937d-c23c447e856f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9b516bff-9dd2-445a-bf2d-e8d732b4b97a",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4614276a-390f-463e-b09d-76fb597b6d3d",
        "cursor": {
          "ref": "6f2949a3-804d-4627-802a-88a2915e7acd",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "327ea354-d008-43d2-8420-5c6725932aa3"
        },
        "item": {
          "id": "4614276a-390f-463e-b09d-76fb597b6d3d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "958db177-d491-4263-a83a-71b3c46d3099",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0f64d24a-9e67-41bd-a413-cf8d7a4b2dbd",
        "cursor": {
          "ref": "0812f5b9-3b82-43ab-9535-324bbd5d54b4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "78dc5a31-8bc2-4212-8a20-e48c7d4572fd"
        },
        "item": {
          "id": "0f64d24a-9e67-41bd-a413-cf8d7a4b2dbd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b7bb5756-d92d-4001-8cb0-02376f66518e",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "07acdb5c-296c-4bfd-ad14-c4b20ffff29e",
        "cursor": {
          "ref": "6148dbb3-d1b6-48fd-99b6-80e133b96ffe",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bee4ebd2-b8dc-441b-b089-9dc04afc5235"
        },
        "item": {
          "id": "07acdb5c-296c-4bfd-ad14-c4b20ffff29e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2a74ca4b-dc40-4bb9-ab69-e5240cffc859",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "aecf29be-abc1-4461-be97-ddae2105afb3",
        "cursor": {
          "ref": "f2fce1d6-cadd-4e8e-b14f-245bb22f5499",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1e3ee182-cbce-4ea5-a5de-ffd12e8e1455"
        },
        "item": {
          "id": "aecf29be-abc1-4461-be97-ddae2105afb3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b913713c-229d-4a97-93f2-affe3ab4fe0b",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2f2c66da-44d8-46a0-843c-aa4e05a815f2",
        "cursor": {
          "ref": "9026dad7-71bd-4d0d-84b7-4e9c620ff5ec",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "54c69f06-4de0-41b3-bb37-b594f2ad1c42"
        },
        "item": {
          "id": "2f2c66da-44d8-46a0-843c-aa4e05a815f2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8ee95f4a-e6a2-49b7-9ecf-8f2658a4a9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fb2511-0734-4ef1-a070-ae1db66926be",
        "cursor": {
          "ref": "9da93dd3-8159-4ada-abdd-e611299c35a9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "803e626b-8938-4ad8-93ce-9dfe6ff5f2af"
        },
        "item": {
          "id": "b3fb2511-0734-4ef1-a070-ae1db66926be",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "663cd596-78db-4418-8ee0-d1dd464015cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeb86ca-a5d8-4766-8ffa-eb0f186e6d4b",
        "cursor": {
          "ref": "29d7f7d7-a402-4417-83dc-ad837b35314a",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "faa68b49-234c-4913-ad99-20b620f8f4d5"
        },
        "item": {
          "id": "0eeb86ca-a5d8-4766-8ffa-eb0f186e6d4b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62344021-da1a-4c56-9254-f7c2ac38ca57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8317ab02-6d52-40c2-93a5-63b560e1bf4c",
        "cursor": {
          "ref": "e7dfde11-e5c5-495c-917a-c56f1383691c",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7c74f45f-15a6-4666-a50d-852d2003becc"
        },
        "item": {
          "id": "8317ab02-6d52-40c2-93a5-63b560e1bf4c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ea186a18-e69d-4830-9152-d109d0b60cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1beac98d-cb71-453f-a021-88844e94a013",
        "cursor": {
          "ref": "0bd0778a-3293-4a44-bb2f-acca862a7ed7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b586b2e8-07e2-4662-bc46-9eb8c78f10c2"
        },
        "item": {
          "id": "1beac98d-cb71-453f-a021-88844e94a013",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "803833bb-33ec-4960-9907-a7fa0c9484b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad166cd5-bb75-47ff-ab34-aa561b86c5b1",
        "cursor": {
          "ref": "a452a1b5-73e2-4996-8824-eb21200be013",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4fa6b478-ff32-43ba-b47f-c8849d0f37f9"
        },
        "item": {
          "id": "ad166cd5-bb75-47ff-ab34-aa561b86c5b1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c277965e-5dcd-4ff8-bff0-c9a539a31cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7360ade1-438f-4eca-84e4-bb99a682201e",
        "cursor": {
          "ref": "acee0544-c41f-470f-8974-ea0730860b66",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "05b44035-b963-432e-b94e-628ebbaaa2d6"
        },
        "item": {
          "id": "7360ade1-438f-4eca-84e4-bb99a682201e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4e968912-5c2a-4f24-a0a1-baed5365da03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da92d65-17b9-423c-9f87-9ace3c45c732",
        "cursor": {
          "ref": "4a01e4c0-dc4f-4f64-9c43-845ee6c6c575",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "25c2ccfa-040d-4636-a381-0d0112028b03"
        },
        "item": {
          "id": "0da92d65-17b9-423c-9f87-9ace3c45c732",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "45a86461-e3ba-4b71-a7ec-b79adf261cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae56f50-3edb-4dc3-8847-8310cd864347",
        "cursor": {
          "ref": "5cccea59-172e-416f-a9c4-159343d146d2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "42a52daa-6f9c-4b7e-bf52-7392b136e136"
        },
        "item": {
          "id": "aae56f50-3edb-4dc3-8847-8310cd864347",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cf165010-4414-4ea9-898a-b303b167c80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd79480-cc94-4469-8534-ee34567337c3",
        "cursor": {
          "ref": "8176313f-cc74-4fc4-af28-2d7e829309ee",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "661579f3-b806-4ef9-8a3a-6bcd24d62cb1"
        },
        "item": {
          "id": "6bd79480-cc94-4469-8534-ee34567337c3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d7c1291a-bc74-47d6-923b-4168f5b505b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe408df3-929b-4cbe-b05f-674a744d1497",
        "cursor": {
          "ref": "b826ff54-d459-432c-a423-97e7edd38010",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4f33f368-1eff-4b9b-9b09-39fe50cb1e8b"
        },
        "item": {
          "id": "fe408df3-929b-4cbe-b05f-674a744d1497",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0ef38603-f9e8-44a7-9366-8510a70e7e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c44a5e-951f-4323-b402-7835ac563f34",
        "cursor": {
          "ref": "dfd7235c-a03a-4019-a6b6-9b219daf03e3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c8794a76-abd0-4be6-8516-0623ebdcbbc4"
        },
        "item": {
          "id": "e3c44a5e-951f-4323-b402-7835ac563f34",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5c0c2ddb-6947-4fe2-8d5c-8a89e3a49007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e4f4f5-0dc0-4f89-9d28-d049f9351bca",
        "cursor": {
          "ref": "ef00d480-0aa1-42c8-a9ab-81e149ed3797",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cf9e3bf8-6265-42c1-8250-68852f72aa21"
        },
        "item": {
          "id": "01e4f4f5-0dc0-4f89-9d28-d049f9351bca",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fa61cea4-d1e6-440c-b38d-b9e713d9207d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d1200a-1bb8-4a7f-a39a-896a74bd6746",
        "cursor": {
          "ref": "e3849ca5-7f86-4613-ba91-72c80c3ddde0",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9e1e2b30-089f-483b-95c5-8aed6c5bc842"
        },
        "item": {
          "id": "94d1200a-1bb8-4a7f-a39a-896a74bd6746",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4e72b845-5def-4fda-99c5-b7327097f5b3",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "847312b6-693f-4d0a-b151-63b47728eeec",
        "cursor": {
          "ref": "4cc7c865-f83b-4c21-b872-ddd2f7eef02b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "33663ecf-78a5-4d7b-ad1a-6a959e73b593"
        },
        "item": {
          "id": "847312b6-693f-4d0a-b151-63b47728eeec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4b8b3d95-efc6-4ac5-a904-c4ee7ac87339",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a4d1f3f7-1596-4ebf-9ae3-2fb0c9e64984",
        "cursor": {
          "ref": "386a7a08-09f8-47ee-8222-05bcb22eadef",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e9409659-b43e-4495-9c81-cdbc09802573"
        },
        "item": {
          "id": "a4d1f3f7-1596-4ebf-9ae3-2fb0c9e64984",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d4d14d04-ad4b-4e1a-afa5-5c1f5d35b6bd",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bdbfaaec-d7e7-4ace-a22d-0e5ed1db69a8",
        "cursor": {
          "ref": "aafbfadf-640d-4f41-ba5d-46ce1576de17",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6638eac1-21a2-4b1b-987d-e10e626c0df5"
        },
        "item": {
          "id": "bdbfaaec-d7e7-4ace-a22d-0e5ed1db69a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1a97b5b7-eb83-4099-9553-da11397df5db",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6c080c17-9dd7-4ddf-b9d1-80c0e6a2d753",
        "cursor": {
          "ref": "408ed8e2-865e-4597-a914-8fae8ef5c017",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6e33711d-0c66-42ca-aa89-6414a13d34a2"
        },
        "item": {
          "id": "6c080c17-9dd7-4ddf-b9d1-80c0e6a2d753",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "af2a06ec-8ab5-4c71-ad8f-f6c47f25c953",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "df29d313-e55a-4e3b-8f6b-41f8f52bba37",
        "cursor": {
          "ref": "8d37119b-4708-4a34-8b84-7f95e860e9d3",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2f0b24ea-c589-4316-95a8-1f827981fc8f"
        },
        "item": {
          "id": "df29d313-e55a-4e3b-8f6b-41f8f52bba37",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ae804d38-5598-4842-85af-5d9a906d2114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2409aa7-8fbf-4ffd-8f62-071c2b2fb67e",
        "cursor": {
          "ref": "b3b80fcd-7aac-406b-bce1-4ac8aa26d442",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b1a74d8d-a53c-4b9e-b036-58f1d5149a9c"
        },
        "item": {
          "id": "d2409aa7-8fbf-4ffd-8f62-071c2b2fb67e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "37dbfbd4-c63d-4744-8a92-1ac0b2b835ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192ccd63-1b59-4f64-add6-19d763eec8cb",
        "cursor": {
          "ref": "f55e5f8f-c487-4ea3-a315-9e64dacca942",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "99c430a1-b064-4358-9117-aca7f1c071f2"
        },
        "item": {
          "id": "192ccd63-1b59-4f64-add6-19d763eec8cb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a7b04952-92ff-4a7f-a04f-6ec2da377414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c834d8b6-645c-4fee-b709-03a04f6d3abe",
        "cursor": {
          "ref": "ed92acb1-e51f-4379-ba37-33c0810a1ec8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cf4dec11-6326-439a-b634-858b9daa154a"
        },
        "item": {
          "id": "c834d8b6-645c-4fee-b709-03a04f6d3abe",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ad939a66-1411-458c-8246-f9f976d096af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f74be1-1224-41ae-bf0a-0c3f080b750d",
        "cursor": {
          "ref": "e311752a-b009-4066-94d0-9e6d19dc18cf",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6e7bf440-dab2-43b0-b2bb-7d691c05acf6"
        },
        "item": {
          "id": "c6f74be1-1224-41ae-bf0a-0c3f080b750d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0c4c79cf-2204-4544-bc7e-d0247e93adc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2789888d-703d-4251-894e-6b9e72529dd7",
        "cursor": {
          "ref": "c5279c05-cf4d-4ca9-8783-8c3219c80bce",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e757c09f-8d49-4f96-ad90-8a3471855002"
        },
        "item": {
          "id": "2789888d-703d-4251-894e-6b9e72529dd7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "602b0a56-5a59-4ea0-9ebe-cb880ff903a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83490123-daeb-40e9-9a1b-73058c53cf98",
        "cursor": {
          "ref": "62d13a8b-a106-4523-bd7b-d337151ba46c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cb71c654-fc49-40e2-abf0-5a0841ceb23e"
        },
        "item": {
          "id": "83490123-daeb-40e9-9a1b-73058c53cf98",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b0bb2b17-2c40-4813-b48d-186f9304bc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c0a7d2-8925-4cf6-926e-16c25700a853",
        "cursor": {
          "ref": "d882db6d-a4b3-4d0c-ab66-8b4c71df78bd",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3810b07c-eab5-47b0-87cb-0b02a49370ca"
        },
        "item": {
          "id": "d6c0a7d2-8925-4cf6-926e-16c25700a853",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9ebe0a5b-baab-4d7f-9b93-bbce1578b675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55358a0-d7df-40c6-a074-01ff21c8b023",
        "cursor": {
          "ref": "ec649837-9f67-4b0e-9c30-f5818b60fc72",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "54005d06-ff40-45b7-8043-55308787f636"
        },
        "item": {
          "id": "c55358a0-d7df-40c6-a074-01ff21c8b023",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1634458-1962-414f-93be-b55aa4f48394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab90b103-c677-44c9-83b7-7296894f9d91",
        "cursor": {
          "ref": "dad58c79-0943-4236-bd0f-da7cf8912ebb",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "129ec211-edb1-4f49-805a-f025a0533891"
        },
        "item": {
          "id": "ab90b103-c677-44c9-83b7-7296894f9d91",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "62466903-fae3-4263-8d8b-ffa5a844d3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b26c71-62b9-4d04-a1b9-2718795897ad",
        "cursor": {
          "ref": "fde39ecc-f8c3-41e4-bf21-a1ba04104f59",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7dc8d3b7-009c-4161-9797-826edc481886"
        },
        "item": {
          "id": "b6b26c71-62b9-4d04-a1b9-2718795897ad",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "198f2655-ce73-4841-86df-f493bb0a435b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cbf3d7e-b022-4697-a5ee-a0ce1d39ed14",
        "cursor": {
          "ref": "28f62ab2-9b46-484f-8b71-dabcadb41b4e",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "79b3f244-4120-472f-9b97-9f24394a52b4"
        },
        "item": {
          "id": "2cbf3d7e-b022-4697-a5ee-a0ce1d39ed14",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "68447cf8-c4b6-4049-9416-2acec3a2dd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4943cb2c-c6e5-4125-ae24-a370895f95de",
        "cursor": {
          "ref": "e53c1968-139d-4e8b-981b-3bad28882e64",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "abd4db23-fba0-42ab-adae-d21dc6fcf894"
        },
        "item": {
          "id": "4943cb2c-c6e5-4125-ae24-a370895f95de",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "06495ed0-d020-4fd9-99ea-b89f4731ce69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f117b25-7ab9-4159-a7ad-2a7c18235eba",
        "cursor": {
          "ref": "bcdf1c38-f27d-4961-98c0-48c8037f1021",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8543aab4-46ad-41eb-a8ad-a6e3cd4011b2"
        },
        "item": {
          "id": "1f117b25-7ab9-4159-a7ad-2a7c18235eba",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ff03748c-eae1-4187-bff9-5a2fec6fb999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8a56dc-77b7-46d6-a783-fc3e0c4839da",
        "cursor": {
          "ref": "76255e93-2d48-4217-b9a4-4d39b6c73388",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f5029c8a-3070-4535-b64b-02648a154916"
        },
        "item": {
          "id": "0a8a56dc-77b7-46d6-a783-fc3e0c4839da",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d34a2cc2-41ef-41f4-91a2-02298a06e944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e64a9ef-a5b3-48ca-9751-b399d7fb360d",
        "cursor": {
          "ref": "67339549-8adc-413e-9ccf-a0a520306f14",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "936abf4b-3aab-4739-8831-a7f2f4037e04"
        },
        "item": {
          "id": "4e64a9ef-a5b3-48ca-9751-b399d7fb360d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e89f6d23-814a-4d96-a595-8ebe58df3dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b302373-0d6d-41c5-b9b7-5e34756b2c1a",
        "cursor": {
          "ref": "4c103508-321f-4640-b52b-6b7cbe51d041",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8138d7c5-b038-4ad2-b4df-422ade27aa36"
        },
        "item": {
          "id": "2b302373-0d6d-41c5-b9b7-5e34756b2c1a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e3ad0324-8d6d-479c-9575-5bfacdf42cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b798726-a769-4650-836c-96751d1477e7",
        "cursor": {
          "ref": "5447749b-d977-4b5c-ba1a-60d4813fe5ff",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "95d0dd34-a99b-436d-ac90-0c4a5f3309fc"
        },
        "item": {
          "id": "0b798726-a769-4650-836c-96751d1477e7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "72be8672-55bf-436f-b2c8-370137420911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debbe306-6bea-4a3b-9561-8e384963b3a1",
        "cursor": {
          "ref": "17ea253a-f2c6-4bbc-8d82-0873fd39d54b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4b61c88d-ce91-40f0-b6f4-a899886048d7"
        },
        "item": {
          "id": "debbe306-6bea-4a3b-9561-8e384963b3a1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f26afd64-9878-4f83-a670-6c323f4b55d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef460f5-2af8-40e3-848b-4347df4b7d60",
        "cursor": {
          "ref": "0868c14e-223b-4a2a-bf43-854151488974",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "38ae4a39-162b-482a-b775-15d821a73bef"
        },
        "item": {
          "id": "8ef460f5-2af8-40e3-848b-4347df4b7d60",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "90b60b69-5f5d-4c1b-b889-7a9ae77ce66c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746b4878-b6a1-41a5-925c-4027d0abe89c",
        "cursor": {
          "ref": "3508a65a-5906-4e62-9029-2adee58ed40a",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "17eaf7a1-475a-48c2-9ec8-0952628d3f52"
        },
        "item": {
          "id": "746b4878-b6a1-41a5-925c-4027d0abe89c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ed792424-3e5f-44a1-8113-30abe253ecba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac92625-62f9-423e-a651-e95300fe6e2d",
        "cursor": {
          "ref": "f5f8246d-06f1-4759-9ef7-ad4191bba56d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ad699e14-6966-4762-8e4b-5a22cd6294a2"
        },
        "item": {
          "id": "bac92625-62f9-423e-a651-e95300fe6e2d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4c3491fa-c307-46e1-a3b7-46d4384aa463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc278c2-6d3a-4de9-b9d9-68ced7362353",
        "cursor": {
          "ref": "c6746e42-f816-4cef-b336-ecc91af502bc",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "98aa6343-5467-4aa3-906c-63b1a449d464"
        },
        "item": {
          "id": "5bc278c2-6d3a-4de9-b9d9-68ced7362353",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7edbeb77-0e60-4ed2-8c83-e8bca3cb7ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ba21c2-df71-4e6d-8ccc-16b7f137b8a0",
        "cursor": {
          "ref": "996019e9-ca01-45f4-836f-2346bd4ba37d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "59d5a4b6-b352-4500-859d-cfdb7f1f1f8f"
        },
        "item": {
          "id": "a5ba21c2-df71-4e6d-8ccc-16b7f137b8a0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c300ed89-f429-4261-b142-d77497ee828d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5f01dd-f4bf-4f4f-856c-99f9cf961ad7",
        "cursor": {
          "ref": "a9b06ade-f90a-46ee-8a65-909eb195c640",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a9ba6884-973b-4e0c-bfb4-2774059f437a"
        },
        "item": {
          "id": "aa5f01dd-f4bf-4f4f-856c-99f9cf961ad7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f0843875-6389-498c-858f-d3b23a893e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f476ad1e-5eb4-46bb-b413-d789163a29ea",
        "cursor": {
          "ref": "4d8c17a6-cc46-4856-a51f-9e71615fd2f2",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eaef16b1-0d26-42f8-b588-b619f1700053"
        },
        "item": {
          "id": "f476ad1e-5eb4-46bb-b413-d789163a29ea",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "25686550-2759-4dd4-80ea-2f124f7ec695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97132192-5041-4d92-bdb4-2c031c6a426e",
        "cursor": {
          "ref": "7250cfd9-c4df-4317-8513-48b3e2948e45",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a77aab3d-b855-4f99-95c3-abe926f43e55"
        },
        "item": {
          "id": "97132192-5041-4d92-bdb4-2c031c6a426e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "45f4fa17-6902-409f-bdd4-a1693afd8fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6ed506-fe08-4546-828d-876aa8396f1a",
        "cursor": {
          "ref": "d4c7bf61-4770-40c9-9ac3-f94d231947af",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7c3d1522-3c0c-4b04-99d4-60a8b0005ea7"
        },
        "item": {
          "id": "8d6ed506-fe08-4546-828d-876aa8396f1a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d0f6d4a3-a8c4-4f9c-925c-d08be5c83a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a383c17a-a2bb-4d3a-a5b4-a9993c158dc0",
        "cursor": {
          "ref": "d5565432-45e1-4365-bdd3-b5a78b475898",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a418835b-b8d7-49f6-b5f7-a75f39d5678b"
        },
        "item": {
          "id": "a383c17a-a2bb-4d3a-a5b4-a9993c158dc0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bc0ab92f-6eef-432b-bf63-4764e632d881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4dbef0-a193-46dd-af07-2451b9cf708e",
        "cursor": {
          "ref": "6c44a78f-762f-47e5-81a4-6b3a02086f9a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8ad273b7-0295-479f-995b-93c84e8e695a"
        },
        "item": {
          "id": "1d4dbef0-a193-46dd-af07-2451b9cf708e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f91c4b5d-7146-4121-b1a1-4a6387757fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465a6752-e2a0-44f4-839c-5f7bc71f9808",
        "cursor": {
          "ref": "8851126b-8b8f-4ec6-bab7-43c53680fa78",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a01479b8-f982-4647-b30c-299dffebb44a"
        },
        "item": {
          "id": "465a6752-e2a0-44f4-839c-5f7bc71f9808",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f9491e44-f6c8-4569-b67a-6cfcac515aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37a2fdc-9341-49ee-8e5e-13eb4b43710e",
        "cursor": {
          "ref": "1015a93e-75c7-4565-978d-2499a2deb433",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3389c75f-8c0a-4d98-a956-b398f80d3153"
        },
        "item": {
          "id": "b37a2fdc-9341-49ee-8e5e-13eb4b43710e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd9b5119-a842-425d-958d-02f4727813a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92388822-e1e0-42ca-9213-d347533fdc14",
        "cursor": {
          "ref": "ff04ae70-ca8c-4cad-9191-a5f28c2026e8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1998a72d-caba-43b0-bbd5-b63089df639a"
        },
        "item": {
          "id": "92388822-e1e0-42ca-9213-d347533fdc14",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b2f2013c-49f0-496a-9aa6-22a2d5149fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c9e549b1-5edb-40c5-b240-61b52186e223",
        "cursor": {
          "ref": "5a5dda57-0415-485c-aa47-cb739d623c3d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cac634d1-adb1-44d2-abac-9cee9c8d6ffc"
        },
        "item": {
          "id": "c9e549b1-5edb-40c5-b240-61b52186e223",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9e7ca34f-b320-46f3-85e4-c24fa8540178",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e9f34-6a7e-4a00-8e24-f3daccbf338f",
        "cursor": {
          "ref": "f031edb1-880a-4020-8992-8f8db7b3cdcc",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f8578490-ffc4-440a-94c0-a8ef866851e9"
        },
        "item": {
          "id": "237e9f34-6a7e-4a00-8e24-f3daccbf338f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "565d2325-a4de-4000-951f-b8bbe1fae58c",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "580dacc8-ac02-450e-bd80-afe5df1575c3",
        "cursor": {
          "ref": "87a05edb-7cf5-4b3a-b181-d706b4eed498",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3319f925-9a2b-46a1-a340-a8dd3ac07c68"
        },
        "item": {
          "id": "580dacc8-ac02-450e-bd80-afe5df1575c3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bec5feab-f6e5-48f4-bc06-30af67681658",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad280f8-358e-49c0-8402-511019522b90",
        "cursor": {
          "ref": "248339cc-d0ad-4287-99f5-97fca161fa98",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c7ae4fba-6d51-4f9a-8f89-b49723665447"
        },
        "item": {
          "id": "1ad280f8-358e-49c0-8402-511019522b90",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bd80b760-fd56-47a6-a12d-7c8cffb72a86",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b23b0cc-9909-42d3-9551-b93dbd0c5d5f",
        "cursor": {
          "ref": "e61b6dd4-855e-48f2-94c8-4470e914ed81",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "191d6e96-882b-4440-989e-95407418ba8d"
        },
        "item": {
          "id": "6b23b0cc-9909-42d3-9551-b93dbd0c5d5f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6421fed4-b261-4d40-8a38-69cb7616f5a5",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-25T00:33:44.493Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-25T00:33:44.493Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fb650fcf-8801-464a-b535-2cae8f6c44a2",
        "cursor": {
          "ref": "b4b24544-56ef-4b28-b6e1-d4a0aeeeaf10",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3db3206f-172b-4088-8d1c-e95f3251fd89"
        },
        "item": {
          "id": "fb650fcf-8801-464a-b535-2cae8f6c44a2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e6d29f74-9e68-41ff-a7d1-ed1b3e49a323",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40e8bbe-a418-4cdd-b08e-b9f1652167bf",
        "cursor": {
          "ref": "5e96927f-1dc1-4549-adae-baf3bded205c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d821789e-7f71-49b6-8d05-fdba2576a9ef"
        },
        "item": {
          "id": "c40e8bbe-a418-4cdd-b08e-b9f1652167bf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f2d2faa1-4d0f-4e59-a4bd-52f458e1c955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627e925b-2c73-483b-901a-6f161c2486a3",
        "cursor": {
          "ref": "a87de34a-679f-4a85-8669-1f2d0564c13b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5f0edd77-b6e1-4299-98d7-03724c68acc7"
        },
        "item": {
          "id": "627e925b-2c73-483b-901a-6f161c2486a3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "69ca07a5-5d13-4cd7-8755-9e45bf526178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa5480e-b5d5-464a-951a-323830b5883c",
        "cursor": {
          "ref": "bf5879fb-2402-4edf-84fd-8c27f2d363f2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0b01f19e-f288-4f61-8ffd-e4e9643ecc94"
        },
        "item": {
          "id": "ffa5480e-b5d5-464a-951a-323830b5883c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4204047e-b1f9-4a4e-9367-d53fc8169c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736b5f47-e0a7-4fbf-a2ed-ede5b314e6af",
        "cursor": {
          "ref": "701f7c9e-d9ce-4226-b0fa-a7982020a3b6",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c6bca257-d0c5-465e-9963-5b846d9891da"
        },
        "item": {
          "id": "736b5f47-e0a7-4fbf-a2ed-ede5b314e6af",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8ac1b505-a383-4e54-8ed6-6b6d38c4c09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29103203-00c7-4457-a474-db2074200fc1",
        "cursor": {
          "ref": "dff1dc92-a0cf-4ed7-8c87-9f20a67daf43",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c372f4e7-cc39-45ab-8b42-61bbbdceabb9"
        },
        "item": {
          "id": "29103203-00c7-4457-a474-db2074200fc1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6a2d8e5d-6a1f-4a84-9809-f85cd263a83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cd04a3-d63f-42a0-95d2-dabf4bfe6cda",
        "cursor": {
          "ref": "f6c22035-6b3c-4688-802d-40018cdc55c6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "67becf6f-ab3d-44cb-a294-0a50353208a3"
        },
        "item": {
          "id": "d4cd04a3-d63f-42a0-95d2-dabf4bfe6cda",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9d2d1c81-d37c-4ec3-af22-90edbfa001f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae206443-d1c7-43eb-954b-8ef5444ee5e3",
        "cursor": {
          "ref": "67193f25-4da2-4d3a-b4b9-b962fb1a3922",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5855855b-44d1-418b-a5dd-e80965f7b734"
        },
        "item": {
          "id": "ae206443-d1c7-43eb-954b-8ef5444ee5e3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a712ff53-5ef5-4b3b-9181-7e0fed7ceb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ffc293-72cd-4e32-b3d6-dbf4b355aba7",
        "cursor": {
          "ref": "49b8b7a5-6146-4a51-bc18-192e94b71a9a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "172755a3-0c4f-481f-a09f-6c731e1ecd12"
        },
        "item": {
          "id": "78ffc293-72cd-4e32-b3d6-dbf4b355aba7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "17b21338-376e-4e5e-9ddf-b9bf4a177db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67833ed6-5e99-42c2-8406-917d51f50408",
        "cursor": {
          "ref": "1094de5e-49a8-44bb-97cd-c527dd188873",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "393ddfc0-9ef7-42de-ae5d-be74cc558c67"
        },
        "item": {
          "id": "67833ed6-5e99-42c2-8406-917d51f50408",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b2d9f318-1f98-4207-b6e0-9de220efba82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebd4db6-627a-42b1-ab36-a911ce8230fd",
        "cursor": {
          "ref": "fde36b0b-c588-47f9-95f2-4c490c573c8e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2db873ff-72e1-4fdc-b840-00d637ea68f6"
        },
        "item": {
          "id": "8ebd4db6-627a-42b1-ab36-a911ce8230fd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "15da8375-8b7a-4d8c-adf5-0d6a9c7cf4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bfff58-a990-47f0-8f20-c0873c51aef5",
        "cursor": {
          "ref": "1d83e80c-ab7f-4c93-b25a-97cbf58c318f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6aa2d3ab-4334-4e89-9c93-8365a11fa83f"
        },
        "item": {
          "id": "a5bfff58-a990-47f0-8f20-c0873c51aef5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7e9bd0aa-f2cc-4ece-8631-b4fae76aabfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5467976-8f35-4557-8c55-def0844d6964",
        "cursor": {
          "ref": "9c190d26-b087-4944-9c4c-9eeda6a455f7",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0eb2ecdd-17dc-45c5-9a89-42acc13dafd8"
        },
        "item": {
          "id": "b5467976-8f35-4557-8c55-def0844d6964",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3809ec3a-e797-4408-a4ca-e470ffedf0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab248d1-970d-458a-bc6c-81bd9742c603",
        "cursor": {
          "ref": "786fd43e-2597-44a9-a2df-c0fa630ef03e",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "54562196-4c67-4bb1-a6bf-d9166d021b09"
        },
        "item": {
          "id": "bab248d1-970d-458a-bc6c-81bd9742c603",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b97daff1-f74b-4953-9a72-29035e1c38df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24052c0e-1e96-4748-b3cd-4ebaf040e87d",
        "cursor": {
          "ref": "fa3220d0-c9c9-49a3-87a3-d71347ff5402",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d1f42423-42b0-4a24-962e-711758634fc8"
        },
        "item": {
          "id": "24052c0e-1e96-4748-b3cd-4ebaf040e87d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "55439289-9ba4-49f6-94bf-90e9b91ebe53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4e445e-84de-4a2b-8093-920b3cad3e90",
        "cursor": {
          "ref": "5983d828-4a35-4053-86cf-6dd1a094b93f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9ef68ec4-7afc-492a-9a10-54ab6eeb0f89"
        },
        "item": {
          "id": "3e4e445e-84de-4a2b-8093-920b3cad3e90",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9b226ee3-24cc-4fb5-8351-b5d8b0e30533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfa635e-8b55-4d4d-add0-e542e59fc18a",
        "cursor": {
          "ref": "b8cd98e6-ec4b-48d4-8940-603e2baefa56",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "63ea91c7-b370-4fd3-b577-8b951bebd2ca"
        },
        "item": {
          "id": "1cfa635e-8b55-4d4d-add0-e542e59fc18a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "14c82137-781d-4913-ba88-19b73dedaab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975fc303-e59b-4f62-a83c-8824f2c99ba3",
        "cursor": {
          "ref": "b06fd41c-d98b-4a17-82fa-2572be0b5896",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ccae7f10-1865-4d6b-a7be-fbb1cc1e3e22"
        },
        "item": {
          "id": "975fc303-e59b-4f62-a83c-8824f2c99ba3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9558dcf-7d1f-498a-a00f-7aa01f6a0303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc3ac18-2052-47ac-a81f-a5675b0c3b42",
        "cursor": {
          "ref": "0b146d84-8baa-49fc-b96f-0cdcf8b47ba6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5400687f-900c-4f37-af23-a92bfac18dc4"
        },
        "item": {
          "id": "8dc3ac18-2052-47ac-a81f-a5675b0c3b42",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7332cd54-78ea-419e-9c81-05f228bcdf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa06ab02-5243-4af9-a8fb-ec8b7cdaafe1",
        "cursor": {
          "ref": "8ffd36bd-d807-4020-b8fd-aa7f11764a70",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6184da09-1b34-45d6-8cb4-317515dac97d"
        },
        "item": {
          "id": "aa06ab02-5243-4af9-a8fb-ec8b7cdaafe1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee0c503f-1124-4a87-ac64-1dd4b57dee8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd476a1-f329-45ce-8a47-85571ba749f8",
        "cursor": {
          "ref": "dcefe6d9-700c-486c-bca8-9c69a1433b7d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd3b6159-60d0-4f1d-80ce-74484e01fd90"
        },
        "item": {
          "id": "edd476a1-f329-45ce-8a47-85571ba749f8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "553d9d5a-0a5e-4db8-9c0f-2ebe363281e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1fb75e-c3a4-4681-82ee-924af774c16a",
        "cursor": {
          "ref": "bf011beb-a618-460b-9653-ca34b93ba66f",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e8df458-6ca3-4fbf-be7d-86c00b2aa873"
        },
        "item": {
          "id": "6c1fb75e-c3a4-4681-82ee-924af774c16a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2849982c-052e-4949-81b9-f499ac9871b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2286f8fd-8b00-4b33-ae41-78b264412d64",
        "cursor": {
          "ref": "67392403-daee-4360-aa59-f717a5c44705",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "29a54b5f-ce10-4163-a690-ac03b4c3b9ad"
        },
        "item": {
          "id": "2286f8fd-8b00-4b33-ae41-78b264412d64",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "00352d10-81b4-40fc-ad04-ed51dd8eef2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c909bfb-e70b-440d-871b-01bba2eb1ecd",
        "cursor": {
          "ref": "bd83d040-5924-4ad9-b368-f0dfc9e246d9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8d0bcdb6-b9da-4f80-840b-270fec1e4556"
        },
        "item": {
          "id": "3c909bfb-e70b-440d-871b-01bba2eb1ecd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9fb2ecd8-699e-4ac7-97b2-67043434965a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8915065-65ab-4220-8e8c-5e00be143612",
        "cursor": {
          "ref": "95e3e7ff-c90b-44f7-bdee-17023a0b5607",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "efe05ffb-9e92-4fc2-96a9-dcc34c676469"
        },
        "item": {
          "id": "d8915065-65ab-4220-8e8c-5e00be143612",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "abc207b3-e234-46dd-bcce-fe0b7d783051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c023b45-d714-40c7-acda-f173b19c6df6",
        "cursor": {
          "ref": "27ded22b-f306-4dc9-acc7-cb9b8985ae51",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "94d4c067-c833-4c88-b0e7-eb6ca0fab224"
        },
        "item": {
          "id": "8c023b45-d714-40c7-acda-f173b19c6df6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5e8689d6-ab4e-41ed-98e9-47bc3f8c9e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57966bb1-bb6c-4f51-ae7d-eb49ea9c5b60",
        "cursor": {
          "ref": "73e1e7e8-68cd-4c0d-9cd1-d14eb76d5a92",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "31bd0983-5f27-43a9-9220-6c06f1095cca"
        },
        "item": {
          "id": "57966bb1-bb6c-4f51-ae7d-eb49ea9c5b60",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "272ca1d2-ec9f-44a9-90a6-1a26e61604b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb4fcda-1169-4d29-8ac5-58afe261b3b4",
        "cursor": {
          "ref": "4fdd4e5a-1b3f-4aa5-be83-83d0a46abc99",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6fae5195-4299-4f64-9091-d50b531dfe54"
        },
        "item": {
          "id": "5eb4fcda-1169-4d29-8ac5-58afe261b3b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fbaf5f31-cfde-402f-91ed-f9da2702ba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978c8258-28cb-44be-a136-f58fa3420f75",
        "cursor": {
          "ref": "8230c94d-7dee-476f-9c18-849c9f864bea",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "97ef476e-2e28-4716-b4f9-ce272bd946b2"
        },
        "item": {
          "id": "978c8258-28cb-44be-a136-f58fa3420f75",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6a4d5a97-796c-4c9b-9991-2fbb7c19bc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3453fb07-7a07-4302-88ac-1b9ccbf1299b",
        "cursor": {
          "ref": "17a830f5-d1ba-4568-8d83-c32d27287f9f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "736b4d26-6606-460c-99c7-6f02350eaf6e"
        },
        "item": {
          "id": "3453fb07-7a07-4302-88ac-1b9ccbf1299b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "69c42315-aaf8-461c-9356-b18c9cbac501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4258fba4-f4c7-4582-851f-0a088a026c6f",
        "cursor": {
          "ref": "5a0625a0-dc49-45e4-8fcf-22c6c73b739b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1180ba5d-bf7d-4eef-bb03-9762c8e92bc8"
        },
        "item": {
          "id": "4258fba4-f4c7-4582-851f-0a088a026c6f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3f6ed952-5519-4d78-95f7-5ac5f5ef12ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f289c954-bd10-4ae8-9ada-40054ba27fcf",
        "cursor": {
          "ref": "e6dac7ef-c728-4075-b1d3-3f158ad854f3",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "73b4cb45-37a3-4622-bf9e-6bf249c619dc"
        },
        "item": {
          "id": "f289c954-bd10-4ae8-9ada-40054ba27fcf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2ae33a9d-25a8-4934-a5e1-e85bf64e1357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb364bd-0326-47a2-b206-b7f08bc6d703",
        "cursor": {
          "ref": "f166ef32-450f-4043-a5de-39ef8670a468",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "23c04ffe-4154-4cc7-9b0a-16f4b403da61"
        },
        "item": {
          "id": "0fb364bd-0326-47a2-b206-b7f08bc6d703",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e31abcbc-f6c2-4a21-8723-5abb9d17a1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08eaa4bb-7464-42da-b043-8564714983d3",
        "cursor": {
          "ref": "54103cbd-e8a5-45af-9177-d1832aeab66d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ddb9ac9b-b846-4523-afe8-c6f947983aa0"
        },
        "item": {
          "id": "08eaa4bb-7464-42da-b043-8564714983d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8da6d6b9-9273-47ff-affb-f96de13a523b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7034b280-87ce-4f6e-9170-ef5c70b48d77",
        "cursor": {
          "ref": "e5bbcaa1-3e3a-42d4-b997-51248f72af5c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "45a0acdc-4060-4f10-941d-1e4cd475c8e5"
        },
        "item": {
          "id": "7034b280-87ce-4f6e-9170-ef5c70b48d77",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "597d55b8-e274-490b-a6c0-96144e99a846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bfb9f9-f1a6-4922-a43f-f4e12d6524dc",
        "cursor": {
          "ref": "3b7f4d8e-81a5-4418-bd80-deda728aa30e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e0230355-4c83-4da0-b2cf-bf627ea7d5dd"
        },
        "item": {
          "id": "09bfb9f9-f1a6-4922-a43f-f4e12d6524dc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8e6edd9a-a8f8-4ed1-9f65-42d8a4b0583a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65227222-f926-48ff-9cad-9bca88ab32bb",
        "cursor": {
          "ref": "bd3b6d15-5d83-4d98-9368-06e9240fa5ae",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bf7848a8-0a21-496d-a75a-417d14067014"
        },
        "item": {
          "id": "65227222-f926-48ff-9cad-9bca88ab32bb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aea58c86-ef40-4243-b7af-1c0c04605f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c621f4-8071-431e-acbc-0eeb9629007b",
        "cursor": {
          "ref": "fff701e7-8a20-4927-90a7-09aad674a1d6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "759a7c2a-2906-4446-801a-9c27eeddbf1a"
        },
        "item": {
          "id": "b5c621f4-8071-431e-acbc-0eeb9629007b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "afcaaac9-829d-4f02-aa51-cc2a00b114bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f9193a-0f92-44dd-953a-0a2668c2b08b",
        "cursor": {
          "ref": "bc27fc65-80a7-4ec2-b24b-45f72e9624d9",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aac7a4e9-0305-490f-9d7f-af270fea6da0"
        },
        "item": {
          "id": "b4f9193a-0f92-44dd-953a-0a2668c2b08b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c845766b-024d-4cad-af3e-08c3ad98ec8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a41a21b-1b30-46f0-a909-6a77602cb494",
        "cursor": {
          "ref": "5903904c-3820-4ad5-9582-baaf613af3b8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "979012f8-2552-4bbc-be51-c45925b72cc5"
        },
        "item": {
          "id": "6a41a21b-1b30-46f0-a909-6a77602cb494",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e720f544-9984-4b27-83f3-796af7dc2140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39215b96-3df7-498f-b3fe-9991f17cc324",
        "cursor": {
          "ref": "4fee0533-4964-43bb-aeeb-8f5258a7c053",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0b2a025d-d275-4712-9ba3-159fbb16a23f"
        },
        "item": {
          "id": "39215b96-3df7-498f-b3fe-9991f17cc324",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "714742f5-aa20-4e84-b9c0-167beba1c115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897e499c-627c-49b6-9496-53848817512f",
        "cursor": {
          "ref": "4c27412f-b848-4971-8d5f-6ba1a591426d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6a29c119-6cee-42e1-9268-fc2016d6818a"
        },
        "item": {
          "id": "897e499c-627c-49b6-9496-53848817512f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1a8cb541-2edd-4b48-9e5e-dda866b2d9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5742b93a-b0e6-4253-932e-da28577e8954",
        "cursor": {
          "ref": "d9398f7a-8f31-4863-a6c3-86ac98ff35c0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "29cc9141-6487-44f0-98cd-0430fe73947a"
        },
        "item": {
          "id": "5742b93a-b0e6-4253-932e-da28577e8954",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "557643a4-f775-498f-b631-6def0059821e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb5cb3b-8ea8-4bdc-a1c8-7933d2723f17",
        "cursor": {
          "ref": "29f6c1f9-f144-4e33-a6f3-1563ae57070b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "94c28139-f91c-424c-9a76-773f14a081dc"
        },
        "item": {
          "id": "1fb5cb3b-8ea8-4bdc-a1c8-7933d2723f17",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4e78b12b-025d-42ed-87df-b7fb789e634b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d53083-0761-4311-b948-1f6fb784a87b",
        "cursor": {
          "ref": "3ff43602-2e50-42e2-9cb3-f5ad93de7217",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6c1cd67-12a7-44d1-8efb-35a3bca90c0e"
        },
        "item": {
          "id": "a6d53083-0761-4311-b948-1f6fb784a87b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dbf3b66c-7890-4c2a-b7e8-19d0bf197804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfcd471-2b67-4821-8071-247697d51014",
        "cursor": {
          "ref": "7ce8653c-d4d6-4816-9612-608705b37be6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9cf978cc-17de-4e40-88d8-5505fd8a96e1"
        },
        "item": {
          "id": "4dfcd471-2b67-4821-8071-247697d51014",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "beaf6b35-ca7b-4859-a8e6-6cdeb8bba60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767b524f-5911-4b1e-bfca-c2d79b667250",
        "cursor": {
          "ref": "220ccf32-c152-414a-95f1-88efd9d51798",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "57ab66a7-4031-4ab4-a62d-74714c218b18"
        },
        "item": {
          "id": "767b524f-5911-4b1e-bfca-c2d79b667250",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2c1b65c1-0599-41c3-8fb2-a209f8f05a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158aa8d7-800c-4108-b0a1-b513f7cc7870",
        "cursor": {
          "ref": "908d9319-72b7-4c27-bcc8-a17c2fe4cc2e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "06181770-2203-44f1-be8b-6d87b42ae78b"
        },
        "item": {
          "id": "158aa8d7-800c-4108-b0a1-b513f7cc7870",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a87902bd-d1a6-4672-af31-269ca47db435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9408b25b-3f68-49d6-bd56-357526f1a6b2",
        "cursor": {
          "ref": "b8705fae-a6b3-47f1-a5d7-9b45081d7c3b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cee19139-655e-46e7-8926-c983dc9d74be"
        },
        "item": {
          "id": "9408b25b-3f68-49d6-bd56-357526f1a6b2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "25697005-07d7-4b02-93f4-9a530ec20719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eec4de-0822-457f-a38a-6bdae050c6a1",
        "cursor": {
          "ref": "4795ae55-8df3-4346-9572-a9e7379866fe",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "43e83a2a-b5f0-41ce-9dc5-02e3aeae2b38"
        },
        "item": {
          "id": "35eec4de-0822-457f-a38a-6bdae050c6a1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2daa2fbd-8017-4702-8b7e-b1c4182e3d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bef2c92-118a-4e16-8d16-37dccf2c64f9",
        "cursor": {
          "ref": "4334f8b3-1ecc-412b-ac70-c433d92b5fdd",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "75f8b4d3-a4aa-46be-9208-6156a42a65c8"
        },
        "item": {
          "id": "9bef2c92-118a-4e16-8d16-37dccf2c64f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d18a9184-6ec7-4d83-8312-00f1c0ac03cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d0ab35-7a3c-46e4-93b0-3a640fe5c0a1",
        "cursor": {
          "ref": "d92b0116-1ed2-4346-979c-2351f4526818",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "18a53bb1-a520-49f3-8a90-eea66752cf04"
        },
        "item": {
          "id": "28d0ab35-7a3c-46e4-93b0-3a640fe5c0a1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "797bec56-70ea-49c8-81e5-1dbdc81c33b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9140fbe6-6e8d-4700-99dd-e7d6d99c817c",
        "cursor": {
          "ref": "ae729ea9-eedd-4510-987e-f72517e957dc",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "031f4f1f-d113-43e6-a61c-2993a12b13bc"
        },
        "item": {
          "id": "9140fbe6-6e8d-4700-99dd-e7d6d99c817c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb39335e-a5d2-4f92-9fd4-7c3215e20e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad6f32c-c9b5-40f2-94ab-0b565e5948ac",
        "cursor": {
          "ref": "6d54fd48-998b-4171-9121-1638ff0da0eb",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6d383074-640e-415c-b847-f85f100e2366"
        },
        "item": {
          "id": "6ad6f32c-c9b5-40f2-94ab-0b565e5948ac",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "821b60bd-2cdf-4960-85b2-03550c18553d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522b1001-8c15-4f17-80db-8d8b684bec9e",
        "cursor": {
          "ref": "b35bcfb7-e709-4340-979e-870eeeee5eff",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7447de94-f851-4d4f-a36d-911527ead379"
        },
        "item": {
          "id": "522b1001-8c15-4f17-80db-8d8b684bec9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4be1efef-a5af-46cc-ba6e-a858c0fd011a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303aff5a-3379-4944-bcbf-71b2f43d9cf6",
        "cursor": {
          "ref": "1ce78991-b4ec-4e4c-b474-3c82b9e4c9a9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "837b1c08-bc71-456d-8673-26221402055c"
        },
        "item": {
          "id": "303aff5a-3379-4944-bcbf-71b2f43d9cf6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "476de52d-d5b0-4098-b88b-764bebdddaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c75759-260b-415b-9be7-8ad1dd8ae73b",
        "cursor": {
          "ref": "da370f07-9c04-4f70-bc6c-0e8bd4ece733",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "66906418-7d13-4b9d-841d-8c8fc5ec2562"
        },
        "item": {
          "id": "d9c75759-260b-415b-9be7-8ad1dd8ae73b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "69e4c456-f394-41f9-b810-a0e6f3744954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26293641-7e9e-4721-affe-d4bab404c36b",
        "cursor": {
          "ref": "b230f960-e443-4386-9b18-0b92bd989e42",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "32d9295d-934b-4366-8ed3-b7827fe63833"
        },
        "item": {
          "id": "26293641-7e9e-4721-affe-d4bab404c36b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9781f801-012f-4526-8160-6541a7566d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded64c0a-b168-457e-8a64-7c15283507b0",
        "cursor": {
          "ref": "1463fceb-c3a2-440a-992e-eda69e2400ad",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1e901fbc-8f35-4f80-903a-5a2cb8718135"
        },
        "item": {
          "id": "ded64c0a-b168-457e-8a64-7c15283507b0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b6be7fa0-3e04-4cd1-86a8-de0bfb298251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9455967a-bda7-4c82-8c01-da85a5e07b08",
        "cursor": {
          "ref": "0148e087-0e09-4f17-b3ad-f8c9c0adb355",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a1f9dcb4-30ad-4001-b3e7-54fa73d3ea38"
        },
        "item": {
          "id": "9455967a-bda7-4c82-8c01-da85a5e07b08",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e38a5809-afb8-442d-86fd-4cd2d2fe18fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e53b11-324d-4a19-b072-817e62fad522",
        "cursor": {
          "ref": "fd1d413f-60c3-4a11-91bd-c732f3fcacfa",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a1fadfa7-9735-487e-980e-1808472d6788"
        },
        "item": {
          "id": "b0e53b11-324d-4a19-b072-817e62fad522",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6319fab6-4496-4307-a170-333a68ecc7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0d629a-7b84-4fbe-87c0-c9dae093aa22",
        "cursor": {
          "ref": "fef93955-ef64-41b8-902c-28757d6305e0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a04a821-4ef9-4e18-bc3b-a285f93a63bf"
        },
        "item": {
          "id": "7d0d629a-7b84-4fbe-87c0-c9dae093aa22",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "af1d46af-f517-4742-a7f2-87b371af64d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddb12a9-bbe0-45e8-b2fd-8a420d7142da",
        "cursor": {
          "ref": "3d92b38b-4714-4ed1-8ca1-7fee40d81686",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1a82b1fb-496f-4cc5-ab0d-ef3f5c07cf88"
        },
        "item": {
          "id": "1ddb12a9-bbe0-45e8-b2fd-8a420d7142da",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "40ef8ebc-52c6-4e5b-8e38-cb12f1721b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74e3eb5-84a4-4102-ac96-81c3c96804ad",
        "cursor": {
          "ref": "18e032dc-1568-45a3-b34c-112e26d0b3e6",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "16db9597-da52-4988-96a7-5794195dd7cf"
        },
        "item": {
          "id": "f74e3eb5-84a4-4102-ac96-81c3c96804ad",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c917122e-fc1e-4c3c-9c9e-f5e11c5cdffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cf9c53-2ba4-4a3c-8d2c-473bcf9acc9f",
        "cursor": {
          "ref": "f1fbb7a6-6355-4c95-b79d-ea42e7c66616",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f52f9d85-2883-4cf9-a588-c718df29581e"
        },
        "item": {
          "id": "81cf9c53-2ba4-4a3c-8d2c-473bcf9acc9f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "73c22a02-7cf2-4014-b02f-06b193f33781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bc1194-c9ec-4cfa-86a6-2c60f3d17203",
        "cursor": {
          "ref": "364bf7fe-9fb7-4349-bebd-a999e3dd9b1f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b8240a4b-acf6-4ca0-ae03-bed49c8d188e"
        },
        "item": {
          "id": "12bc1194-c9ec-4cfa-86a6-2c60f3d17203",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "96a25bfa-b6df-4bb6-844f-da2e8226be7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8265de56-f9ed-4956-8965-f66a79220713",
        "cursor": {
          "ref": "b0253764-ce2e-4f52-84d5-341500c54713",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6cccc559-60b8-4c73-ba7a-44cbb42bb3ce"
        },
        "item": {
          "id": "8265de56-f9ed-4956-8965-f66a79220713",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "88b1ebfa-011f-4d36-8b82-1e46610cb836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbf9fb7-42a2-4caf-aedb-34ab91fa4cb9",
        "cursor": {
          "ref": "22af6fb8-7fc9-4c83-bec6-c7c07e1486a0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0d6a15db-11db-4dba-8746-19643eeab996"
        },
        "item": {
          "id": "8cbf9fb7-42a2-4caf-aedb-34ab91fa4cb9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "92abd779-eb22-4ca3-aacb-20af849fb601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeea01f8-3a37-448c-ab9f-7001f51ef68c",
        "cursor": {
          "ref": "beeb658b-b943-40a7-9822-ba29aba5df2f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "13bd3d95-618b-4cac-b08c-8cfb7f79ec01"
        },
        "item": {
          "id": "aeea01f8-3a37-448c-ab9f-7001f51ef68c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7676c072-07ef-4f04-a0e0-b23ad114b23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a383fde7-0b67-49bd-8d5a-7b22d22a83ae",
        "cursor": {
          "ref": "3bc127ad-cff7-45b5-95f3-095d13098cb1",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b33a0b8e-b90e-4115-9ca7-79952ea353a5"
        },
        "item": {
          "id": "a383fde7-0b67-49bd-8d5a-7b22d22a83ae",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "85245d7d-8f12-4629-9f36-33a2fdb40e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937bc28a-9b5b-4102-9957-c9859457e1d6",
        "cursor": {
          "ref": "a67bbd00-f1cf-4448-9082-ce2105fc8502",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "96eb6b24-a446-486f-9fc1-73fb727a97a7"
        },
        "item": {
          "id": "937bc28a-9b5b-4102-9957-c9859457e1d6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "29327e4b-5d1e-4dae-8cf6-ce0df403f387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47432315-e633-4afc-abf3-2313cf2e6e09",
        "cursor": {
          "ref": "9b91e63d-c13f-4b16-99af-a434d2c31300",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ece290fe-8887-4b8d-806b-aaaf51377254"
        },
        "item": {
          "id": "47432315-e633-4afc-abf3-2313cf2e6e09",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45fa6296-2ec7-4e11-96fa-570f73536691",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783f4878-2c46-45c1-91ae-00801e61d518",
        "cursor": {
          "ref": "84f981b3-6e3e-4def-9781-3f39d22766ba",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e4f2e559-64f1-4411-bb75-0a43f64603c7"
        },
        "item": {
          "id": "783f4878-2c46-45c1-91ae-00801e61d518",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "609e841c-5344-4e23-ac83-1f8423740091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70db233e-c157-4f82-91bd-ff64549e1322",
        "cursor": {
          "ref": "6fc12e04-116f-4e6e-9669-6ee8a723688b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "867cc6aa-7f34-413a-a31f-458fd4774e23"
        },
        "item": {
          "id": "70db233e-c157-4f82-91bd-ff64549e1322",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7e37b399-e9bd-4252-b1fc-4469de066e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72fedd0-786b-40a0-9e02-43ddf8f91262",
        "cursor": {
          "ref": "896ef6e7-79eb-492a-ad38-0f17491217fb",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "17095652-4fd7-4e42-977f-14037d76cc30"
        },
        "item": {
          "id": "d72fedd0-786b-40a0-9e02-43ddf8f91262",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4f329455-7a28-41e1-bd1a-85a5375bc2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3d7c25-69e9-46af-b54a-3f41a2c621d7",
        "cursor": {
          "ref": "df986f12-04ce-4724-874d-d5868d686a5d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "83ee803f-55a8-449d-afaa-1cbe893fce83"
        },
        "item": {
          "id": "5d3d7c25-69e9-46af-b54a-3f41a2c621d7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4e0ef4c8-4745-45be-82b3-5ea69ee8d825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5540fe4-19b9-488c-94c6-eb35b8dfbf08",
        "cursor": {
          "ref": "7c2f3a2e-a40c-4972-bae1-5a525177db85",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "34a0026c-4147-4d95-99d1-d815e8c14329"
        },
        "item": {
          "id": "e5540fe4-19b9-488c-94c6-eb35b8dfbf08",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ef64ff11-1142-4886-b9ce-d5ed3dd455a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2715a2-0f45-47a7-b33c-fe06cb137089",
        "cursor": {
          "ref": "e4fdb15b-3ecc-4e04-962c-9fb25e004d28",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "209db62b-6518-4f6e-b00d-80109c5ce3de"
        },
        "item": {
          "id": "0b2715a2-0f45-47a7-b33c-fe06cb137089",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "49159fa4-d39e-4bef-a25b-7cb23a0fd7ec",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5f86f461-383c-4eaf-9b35-e9b164548091",
        "cursor": {
          "ref": "eb973d01-2e60-4c1f-9408-590996600944",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a5198a9f-3f7a-4a02-9c11-57e21ebe85ec"
        },
        "item": {
          "id": "5f86f461-383c-4eaf-9b35-e9b164548091",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "75dcde0d-f6d2-4faa-bd54-70958b8e08d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718e51a3-c75b-41a4-abc2-3a5a01b53baf",
        "cursor": {
          "ref": "4406834e-96c9-4948-93c6-2635a230aa83",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a2c5922a-c8ef-4bb1-bce3-ee9b43f68b7b"
        },
        "item": {
          "id": "718e51a3-c75b-41a4-abc2-3a5a01b53baf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4c65ed82-d462-4d0b-a6da-f1c04de7cabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c9ee80-7f6d-429b-8ed7-28f438988104",
        "cursor": {
          "ref": "4af74805-6c9e-4d9d-8f62-62680fd474aa",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3b8f2f9f-8801-491d-a914-b4346283c330"
        },
        "item": {
          "id": "a8c9ee80-7f6d-429b-8ed7-28f438988104",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5c4cbed1-07b2-414d-bf59-a625acaf78c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e355e8de-71f9-4bc9-a663-e73973347820",
        "cursor": {
          "ref": "958cc905-ff3c-4ec4-bcd1-45f70e50b92c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "78449cc4-d8ae-4002-a451-121ac5831ea8"
        },
        "item": {
          "id": "e355e8de-71f9-4bc9-a663-e73973347820",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b6326e0d-8a5f-4da7-94de-1839c274640f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36b88b6-e720-43cf-a9c3-ca8a80002eda",
        "cursor": {
          "ref": "d348591c-2d73-41c4-8a7c-62679795a1ee",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b1a63b7c-9cd9-4175-bfba-535cc0315156"
        },
        "item": {
          "id": "d36b88b6-e720-43cf-a9c3-ca8a80002eda",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "56237177-a72c-44d5-839b-83cc31256831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db466e4-043d-45bc-87a6-918c5de661cf",
        "cursor": {
          "ref": "e16a30c4-b90b-4ba8-89a5-3798fccca9be",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "25e4e100-ef29-4fdd-835d-1bdf4a43f51a"
        },
        "item": {
          "id": "9db466e4-043d-45bc-87a6-918c5de661cf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "019db787-8cf6-45a1-88fb-eabe2103db6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f746c1e6-d2ff-4065-9e13-444f224f156a",
        "cursor": {
          "ref": "9b40873e-9c95-4cc2-8e89-de001b7dde00",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "650d2798-4c30-4a24-ba3f-3bd930cd3910"
        },
        "item": {
          "id": "f746c1e6-d2ff-4065-9e13-444f224f156a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8e48101a-f977-43c9-9206-0cd9eec0798a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430a3251-343e-4b73-ba22-9dc1ee2f3677",
        "cursor": {
          "ref": "2aacf5a2-340a-4c49-9c57-15197ab53534",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "188a0315-3abb-4b75-ace6-583b5eff3416"
        },
        "item": {
          "id": "430a3251-343e-4b73-ba22-9dc1ee2f3677",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ced4c9be-72bd-48cc-bf1f-4e5446e0b8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d34a58d-462d-47d7-bfd4-b63f3875c673",
        "cursor": {
          "ref": "545e2e5b-bf9e-479f-81f9-e85f8b40cf1e",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9d430fe3-b549-4c15-aa50-ccdad22b687f"
        },
        "item": {
          "id": "3d34a58d-462d-47d7-bfd4-b63f3875c673",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "78bdd122-b241-4d61-a1a8-3a9b871df214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2170b2f-970c-4497-9a6f-741bb9382083",
        "cursor": {
          "ref": "fbb94f58-71e9-4226-81e9-f69713ba79bf",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a5b7dc94-ba4d-40e0-9965-afb523dfb702"
        },
        "item": {
          "id": "b2170b2f-970c-4497-9a6f-741bb9382083",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1c5255cd-4b30-4139-a015-08b347f60a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730e96ab-3e2d-4ace-9208-7a723c83d51b",
        "cursor": {
          "ref": "0ab1123e-d830-4a56-bd59-3902604668b3",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "498f6f07-948b-43a2-a27c-6865788723db"
        },
        "item": {
          "id": "730e96ab-3e2d-4ace-9208-7a723c83d51b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f8b1e1ed-de5d-4f82-9909-c555a49a068b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51156db5-6554-45de-bfc4-84d43f28a0cd",
        "cursor": {
          "ref": "9622333e-eebe-4703-941a-e951a95147f4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "68257878-6da7-4c57-853d-6058d698a474"
        },
        "item": {
          "id": "51156db5-6554-45de-bfc4-84d43f28a0cd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5f04d13d-4bdd-480a-9787-ea955cf449bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4da691-a5c8-4972-9595-687ef90c1299",
        "cursor": {
          "ref": "6d4f0b4f-4e17-4bb2-960e-7c2937be6736",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c86d8095-ad7e-4635-b806-9646619f91d7"
        },
        "item": {
          "id": "cb4da691-a5c8-4972-9595-687ef90c1299",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8698ed69-d1e2-4b88-83ee-a7b25a4b2196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b2a5ae-de6a-481f-a21f-d0945be9efe9",
        "cursor": {
          "ref": "4e2bef97-6e1c-467b-bf8d-a80c03177ec8",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dbbbf890-5b09-416f-84e9-2c48396c9458"
        },
        "item": {
          "id": "78b2a5ae-de6a-481f-a21f-d0945be9efe9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0fd64b87-5b7c-4104-94de-ee5d709d50ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4c04d9-f12f-497f-8ba7-c452ec166121",
        "cursor": {
          "ref": "33208b07-7a9b-4ae7-a887-6ad839bc6f63",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7057b55f-4c62-4b01-8728-c0e8977e6f78"
        },
        "item": {
          "id": "7c4c04d9-f12f-497f-8ba7-c452ec166121",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "04d1c4e6-c9bd-4427-9d5e-42bc5c7fb834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b80e33e-bca4-4413-aeb1-d7e62373b8bb",
        "cursor": {
          "ref": "c64835b9-308a-4e2a-b693-25bc1b512d28",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6e905049-c0e8-4b46-b1fc-da32295fd9cf"
        },
        "item": {
          "id": "8b80e33e-bca4-4413-aeb1-d7e62373b8bb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3ee9a193-72d3-40e4-9042-245b11274333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933455ae-a55d-4fe6-90fa-a660b734b231",
        "cursor": {
          "ref": "ed0e5f41-1474-43d6-9146-a066691b2c80",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d9b529d2-2484-4d1c-af3d-387bf673025f"
        },
        "item": {
          "id": "933455ae-a55d-4fe6-90fa-a660b734b231",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6e4d1060-b726-4df9-ac81-cae591d481e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229b5452-450a-4e93-b398-39dc97961edd",
        "cursor": {
          "ref": "e6e699c8-17d9-4b32-ae35-e671a9bb00cb",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f3259709-32a9-410f-9396-15f41c7eb7bd"
        },
        "item": {
          "id": "229b5452-450a-4e93-b398-39dc97961edd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "08180613-7c0f-4aaa-a49c-afb21287c0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcb2b3c-2c13-41f4-ba51-a44963566b63",
        "cursor": {
          "ref": "cc70b401-2341-4d72-8029-c8bc50afe526",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "60d853b5-886d-4b5c-bd7d-b75a24bbf677"
        },
        "item": {
          "id": "4bcb2b3c-2c13-41f4-ba51-a44963566b63",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1eb0b7e3-4e59-40a1-82ab-4b134bcbc196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60566cb0-8a53-45fe-be76-82e7d0251c24",
        "cursor": {
          "ref": "16f354f3-c8af-418f-a7f2-c1fe541c0550",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "06c123c4-3134-4541-a857-4739b3c3a30f"
        },
        "item": {
          "id": "60566cb0-8a53-45fe-be76-82e7d0251c24",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b32e228a-3e61-4727-8828-b06f1c32750d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e49859f-b780-427f-b863-93f758d893fd",
        "cursor": {
          "ref": "98225187-b640-4cc8-92e2-dfb88512a042",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c9ea2a0f-8dce-4c4c-a808-c84bfdc9b27b"
        },
        "item": {
          "id": "3e49859f-b780-427f-b863-93f758d893fd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2ec7f9db-774b-484e-a794-b667bbfadc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a2413e-98f0-4e05-8ba9-1732f7c47f25",
        "cursor": {
          "ref": "1df42583-ffa0-4777-8747-fc08d90d3db8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9316e45d-8f24-46c9-9580-b00b9f70cb8d"
        },
        "item": {
          "id": "60a2413e-98f0-4e05-8ba9-1732f7c47f25",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e5cbe4ea-73ea-4aba-b37a-ee0f374a44cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeca48e-d26b-4e26-8b07-cfe2a8168f7d",
        "cursor": {
          "ref": "cb65a0b9-3f5a-4e34-9220-49237cb5012d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f593b227-acec-4aea-aac5-029265ad058d"
        },
        "item": {
          "id": "6aeca48e-d26b-4e26-8b07-cfe2a8168f7d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fd5687d9-e996-49fe-8200-e62d0667941d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25123dd1-f27e-4ae2-92eb-5d13693049ae",
        "cursor": {
          "ref": "6c799723-d4fe-46ae-8dc7-941ae3e3f78e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fa93934a-fc3d-4935-b58b-f250e6cacfd3"
        },
        "item": {
          "id": "25123dd1-f27e-4ae2-92eb-5d13693049ae",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bce28164-7c5b-4e73-bdb9-c47e70ee4fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bbee6d-7df7-4344-89f0-7ebb69ad884e",
        "cursor": {
          "ref": "2d1a45ff-1dce-4445-8827-471e02448742",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9d203ac6-d1b0-4237-aa10-cc892cae6e2f"
        },
        "item": {
          "id": "a8bbee6d-7df7-4344-89f0-7ebb69ad884e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a96b57e2-d8a5-464c-abc7-1d7ce95631c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb67b1b6-2b09-4b12-ba88-c0825cba0336",
        "cursor": {
          "ref": "dadeb982-e258-461a-996d-6a0dda82addb",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "67b023ef-ff2c-4f28-b04b-287ca7dce802"
        },
        "item": {
          "id": "eb67b1b6-2b09-4b12-ba88-c0825cba0336",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "01acf1fd-11fe-4315-8211-282b6e38959f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a456c2-3ee7-4daa-b042-f873440469c5",
        "cursor": {
          "ref": "47cb5ac9-e06b-4cee-b657-2722636e7f48",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e1e11240-f37b-4e66-8841-471eba396abb"
        },
        "item": {
          "id": "a3a456c2-3ee7-4daa-b042-f873440469c5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "80670209-eda9-4e88-8e12-671d2d426f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae20e9d-1e1d-4144-b82a-08dcd3b5157b",
        "cursor": {
          "ref": "833bb82a-10a5-48e6-b80d-669dd54a9ec8",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6819cf0e-5e0b-4092-9a50-5b6e54f6ef0d"
        },
        "item": {
          "id": "cae20e9d-1e1d-4144-b82a-08dcd3b5157b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b9789da5-f570-41b6-abb6-ae6f1958d1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a4e29f-654e-49f5-9b31-47bef20608b2",
        "cursor": {
          "ref": "b298f60c-91d8-4747-b87b-3c0306d9c238",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "63ed0c3d-ed9a-4dec-953c-0ae996ab8036"
        },
        "item": {
          "id": "25a4e29f-654e-49f5-9b31-47bef20608b2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "78ca6477-23a5-438a-8df6-eab0d276e814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75385da6-5399-486f-ab63-0462ed7d4203",
        "cursor": {
          "ref": "d7253620-72c9-4249-a5ca-de6993c3c4c0",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4949d44b-8622-42f3-96f9-cdae041e2a8a"
        },
        "item": {
          "id": "75385da6-5399-486f-ab63-0462ed7d4203",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ca4d2ce7-4471-467b-a865-3dcc415f1587",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9001cd39-9c29-441c-9fc7-df3d3525ac2d",
        "cursor": {
          "ref": "f74722ca-5290-42ad-acf6-f1666d5b2a5a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "04813b7d-0b76-4206-8a41-b9d4cfe25c74"
        },
        "item": {
          "id": "9001cd39-9c29-441c-9fc7-df3d3525ac2d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "43132caa-6fd4-4f5d-9e06-9ab00e0ed664",
          "status": "OK",
          "code": 200,
          "responseTime": 387,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "50b61f7e-f129-41ce-92b9-c6816a0c5aab",
        "cursor": {
          "ref": "fef5896e-cb68-495c-a850-101ea2509219",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "99e6c931-1717-4d89-8352-522db39bac66"
        },
        "item": {
          "id": "50b61f7e-f129-41ce-92b9-c6816a0c5aab",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "60738534-b0d7-4001-a81f-678431639344",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "68ffa092-60ed-46f7-bf5e-21b027ddbc42",
        "cursor": {
          "ref": "cdb91179-6fb5-4e0e-98a2-56756aa2403e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "08d39ab2-7971-497a-bbf4-0a5aa5047eaf"
        },
        "item": {
          "id": "68ffa092-60ed-46f7-bf5e-21b027ddbc42",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "694b925a-27b1-4146-8a89-594ac6acac45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e55be97-2193-4895-a179-08bf8108f127",
        "cursor": {
          "ref": "4ca5d0cd-2d1e-4135-9e4f-e8596b5403d2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "34ec31c5-2278-40ee-a6c8-a075282d08bd"
        },
        "item": {
          "id": "7e55be97-2193-4895-a179-08bf8108f127",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5eca28a7-33db-40d3-bf24-44c15e70bee8",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9f6895b7-0c72-4408-84d2-92ce1f07df21",
        "cursor": {
          "ref": "07dae5c8-316c-4cc4-9810-ec4e05388e9a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "35234a29-7f1c-4c00-a0a2-4490e6f8178e"
        },
        "item": {
          "id": "9f6895b7-0c72-4408-84d2-92ce1f07df21",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7b485050-17bb-4380-9daf-6db1fcb348b8",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1af14056-0878-4be0-a4ad-4b56b1299f68",
        "cursor": {
          "ref": "c145d7f5-917c-43ea-b3c9-b6c7f5aeffd6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3600941c-0142-4313-984c-ae14f13875a3"
        },
        "item": {
          "id": "1af14056-0878-4be0-a4ad-4b56b1299f68",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9376df27-10bc-4e48-b51b-803176701160",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "876b8b6b-07ec-4370-912b-a8d9e2a97a1e",
        "cursor": {
          "ref": "28f13e7b-cb8b-44a0-bfd9-c06f75230ddb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8272f3fd-b44f-4c64-b759-c53e8f0e4679"
        },
        "item": {
          "id": "876b8b6b-07ec-4370-912b-a8d9e2a97a1e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2bf5ff34-b550-4c40-9bd6-74a0cc16ed89",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "09375dab-3ef1-476a-b073-f28876dd90c8",
        "cursor": {
          "ref": "be0f71a5-7e4e-4be8-8100-28802abf5528",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c7e4d35f-1a58-46ee-864f-b656c454f3de"
        },
        "item": {
          "id": "09375dab-3ef1-476a-b073-f28876dd90c8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3798d22e-7da3-4058-8ea4-b42f20a0e0b4",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8b78af48-8c27-4fd5-a574-6b93e4a65ea7",
        "cursor": {
          "ref": "193bc521-c58f-4a3f-9e8d-853d09237cfb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "91fb9774-fcf0-4b16-ae9c-0f627d447b35"
        },
        "item": {
          "id": "8b78af48-8c27-4fd5-a574-6b93e4a65ea7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9d99fe42-7d92-4a8b-8acb-6d8c71bbf610",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c20ad80d-349e-4c0d-bbfa-bdc115e47e1b",
        "cursor": {
          "ref": "4f7c1c38-65a9-4d0b-9974-88db44b643e6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "09a907eb-1f2d-45d2-a4e9-8c1d8b0df327"
        },
        "item": {
          "id": "c20ad80d-349e-4c0d-bbfa-bdc115e47e1b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "86f3614a-caa9-4dd5-9b6a-561b1e94bb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f55eeed-eaf1-49e6-9da2-63d687b288b8",
        "cursor": {
          "ref": "008d50c6-5bb1-4269-b8f6-d707ea86514e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2f414f22-62cd-4abe-a328-588e55fd45e6"
        },
        "item": {
          "id": "6f55eeed-eaf1-49e6-9da2-63d687b288b8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f2b517b6-6672-4271-bc1e-f4bfe3b4c39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7365e7aa-e777-4395-acaa-a6ce6d641d2e",
        "cursor": {
          "ref": "34a8291d-a77d-40de-a70c-90893af39015",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9e14809f-153d-45c3-b386-b1a3f4508642"
        },
        "item": {
          "id": "7365e7aa-e777-4395-acaa-a6ce6d641d2e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6d0e839c-2f04-456a-a485-1531e0a7d767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f8b053-6424-4262-8d07-b79431b34f4d",
        "cursor": {
          "ref": "1ad2c746-a33b-44de-ae3e-1ecf4c342750",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "dd5a7d8f-db05-4258-8489-9b2daaa30eeb"
        },
        "item": {
          "id": "14f8b053-6424-4262-8d07-b79431b34f4d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8cf3eca8-6813-4b72-8451-86e8768a0009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3251fe6c-6d3d-4411-bd58-d2d4f2cdaf29",
        "cursor": {
          "ref": "26ed06c2-c2de-4d05-9ec9-3464f15da15b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e296c06-86b1-4a2e-969e-a3ec321cd46e"
        },
        "item": {
          "id": "3251fe6c-6d3d-4411-bd58-d2d4f2cdaf29",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "78add356-8d73-424d-bb5b-e1fd881a476b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3042d596-1f21-4771-8db3-6893c0328641",
        "cursor": {
          "ref": "fae4eb2c-6112-4779-8e66-6ed48a3bed73",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e391966c-2e03-4d09-afaa-628545bfa80e"
        },
        "item": {
          "id": "3042d596-1f21-4771-8db3-6893c0328641",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c53f8e90-0f46-4c17-846d-a948b8a6c46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba60bc4f-4d20-4e14-8f6c-6490e0021fd0",
        "cursor": {
          "ref": "510c82ef-b125-4bc4-b4e2-dcce51385174",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "12c821ad-c981-4866-be51-de36c306316a"
        },
        "item": {
          "id": "ba60bc4f-4d20-4e14-8f6c-6490e0021fd0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f968cdf8-72f2-4032-95ef-e5d54a32d1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e7898c-ae0e-4e9b-a6a6-e5585120982e",
        "cursor": {
          "ref": "87fe685e-2623-42e4-9c3f-c455368a1123",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1503428a-bf3e-44b3-9532-1cf4fb2001f1"
        },
        "item": {
          "id": "17e7898c-ae0e-4e9b-a6a6-e5585120982e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a03e24b7-9c9f-4791-bf98-2c38effe20ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf67929-ae41-4aa3-b87a-b154e5ff581e",
        "cursor": {
          "ref": "aa6473a0-e61c-4610-8cbc-094e1bd8d0e5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d1a241f7-acc0-461c-84d8-781ec772db8a"
        },
        "item": {
          "id": "8cf67929-ae41-4aa3-b87a-b154e5ff581e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7491e2e1-6a09-4e18-b8bd-61d278dea73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8858220-f685-4a57-8c8f-710a0912029c",
        "cursor": {
          "ref": "d3631493-a87b-41b4-9490-9ff2d5a04701",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "26e32fb7-b1a1-4a1c-8c83-d9570d2aa1fb"
        },
        "item": {
          "id": "d8858220-f685-4a57-8c8f-710a0912029c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1f749420-420d-4f7e-a9c6-25213d85d815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25e2621-447b-460a-8a87-5ac42bef0d7e",
        "cursor": {
          "ref": "dfe0aa06-b91a-4fdc-9458-f192bb07e2df",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c00322e2-8496-4656-b752-d04507284202"
        },
        "item": {
          "id": "c25e2621-447b-460a-8a87-5ac42bef0d7e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65e539d7-73f4-48bd-a290-1ba87d873095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b296712-5e4c-411c-91f0-d2034fc2ed07",
        "cursor": {
          "ref": "4f43952d-9a1a-4052-98e2-b8a22f6dff93",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6d3aa5f8-6ad1-42e5-9d94-04664bdb1179"
        },
        "item": {
          "id": "5b296712-5e4c-411c-91f0-d2034fc2ed07",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ab65f154-e9fb-4c81-89f6-7db8210568a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc51b0a-fca3-466b-ad03-b54bfad5439b",
        "cursor": {
          "ref": "2e1e0e39-a0ce-4220-bac0-63f1f7562911",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d4ebfa0-4433-4a06-9734-e7e470ca73d4"
        },
        "item": {
          "id": "adc51b0a-fca3-466b-ad03-b54bfad5439b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "defc5c65-d33b-475f-8d48-87438456b413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269ea57b-3290-4a7c-9f7d-b7093e6a097b",
        "cursor": {
          "ref": "d6d8d62c-a81b-428f-b648-6724150f0874",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8904c3e7-c72d-4e1e-902e-5e73020a2411"
        },
        "item": {
          "id": "269ea57b-3290-4a7c-9f7d-b7093e6a097b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "557e091e-3088-4c24-b408-36616b433fc5",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6bda3bb8-fb4f-4b31-bc17-4fe78b458084",
        "cursor": {
          "ref": "373ffa6c-e9aa-41e4-9bb7-cce8f83db5f6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5bf78593-112b-4fd3-b6f5-5d00f305ac1d"
        },
        "item": {
          "id": "6bda3bb8-fb4f-4b31-bc17-4fe78b458084",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8b3018a4-bd4d-4099-877e-4d479757718e",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "800cde8c-d942-4e0d-be3b-66f4dfb76f89",
        "cursor": {
          "ref": "85994f20-f33b-43b9-a74e-7c7f856873c5",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "86b7c922-3740-4d9a-b769-f4f24a9736ea"
        },
        "item": {
          "id": "800cde8c-d942-4e0d-be3b-66f4dfb76f89",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7f2429cb-0933-46e8-825d-27b9f4f3449c",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a74f1e31-e9b3-4d83-bd05-eba1a203f63b",
        "cursor": {
          "ref": "a422a7f3-8f1e-4f0e-9b79-798bb183fa6a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8254d66a-3914-4607-812f-c600344b6dd2"
        },
        "item": {
          "id": "a74f1e31-e9b3-4d83-bd05-eba1a203f63b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8adf3d37-ed8c-4690-a528-5721b1d1ba35",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cf5677fa-ffd0-4bc5-ad64-11b9bc2821f0",
        "cursor": {
          "ref": "09b39a87-9dbf-47c4-b463-dcf698083ddc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "659783d4-498e-4ccb-a478-13a793628ead"
        },
        "item": {
          "id": "cf5677fa-ffd0-4bc5-ad64-11b9bc2821f0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "14f31644-5f88-4aca-8323-e8e998363aca",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "615eac99-800f-40b3-8b6a-e671920fe787",
        "cursor": {
          "ref": "3dce0963-179f-4903-88b6-b55f1be83b17",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "55fd272a-e209-476f-af4f-957c983f4e2d"
        },
        "item": {
          "id": "615eac99-800f-40b3-8b6a-e671920fe787",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2009231a-ace7-4951-b2b0-f702fbe0d63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c1b4f9-186e-4ccf-a593-c36eceb0edc3",
        "cursor": {
          "ref": "25937871-4db7-41c9-b289-d363232ca555",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "822c953f-4506-49b2-a9b1-5885c4d1a43d"
        },
        "item": {
          "id": "b2c1b4f9-186e-4ccf-a593-c36eceb0edc3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b5af6e5c-0de0-44be-9555-c598ca19d212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abb11cc-c2a3-45c4-929c-8ad9fc1327f7",
        "cursor": {
          "ref": "a1b002fd-11ec-47df-8f78-7be4ee692db0",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "20acc02d-259c-41b1-8142-58d55712a3f6"
        },
        "item": {
          "id": "2abb11cc-c2a3-45c4-929c-8ad9fc1327f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d41c3301-0d81-424b-be06-ddeeb07998bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503092e0-ef89-4fe2-a8d9-90b36c774a6b",
        "cursor": {
          "ref": "5af5bf0b-3466-40a6-b36f-bf61007bbd92",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "49d89253-14de-4e3f-abba-bd8f9abbf90e"
        },
        "item": {
          "id": "503092e0-ef89-4fe2-a8d9-90b36c774a6b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7f5bc60f-f364-4ef8-865e-41115d0516ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9090dafd-a207-4c04-acdc-067e71e90c5d",
        "cursor": {
          "ref": "91c2c4a7-98c3-4b08-b5ad-e8fc5d12097d",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f395a475-a8df-46b3-9c84-17f31adc58ad"
        },
        "item": {
          "id": "9090dafd-a207-4c04-acdc-067e71e90c5d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "39f82699-e7d6-47e9-857d-b589b8f0f6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154a5183-3190-49ba-bd9c-63deb221eda0",
        "cursor": {
          "ref": "65fc74b1-fc0b-4004-829b-6d00bf2927e3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "56c159c7-a181-49ff-86ea-71cca1aa54a0"
        },
        "item": {
          "id": "154a5183-3190-49ba-bd9c-63deb221eda0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1c50eb12-c3a7-49d0-a74b-c613040974ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b11ad1-6926-4c86-8b64-ad7f16571595",
        "cursor": {
          "ref": "b01cea3d-e218-47bf-918c-fbc945cf3a50",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "854b0275-06eb-4b0b-91e7-0fe6f7de47e4"
        },
        "item": {
          "id": "d4b11ad1-6926-4c86-8b64-ad7f16571595",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ca53a9e4-fba7-43d0-807a-b43545de1f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377afe6f-62a3-467a-9877-1232b48bed3d",
        "cursor": {
          "ref": "3809e7df-53b1-4dea-bc47-bc31ac0f62d9",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "89cf9ff3-98f8-4798-b009-6ecf9f9721db"
        },
        "item": {
          "id": "377afe6f-62a3-467a-9877-1232b48bed3d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cbc85152-a176-42fc-b76e-48714ad4daf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df50f35-b0d5-4024-bd37-cb63f42672b7",
        "cursor": {
          "ref": "93fed737-b5e9-4983-90a5-4bfd714b209f",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4be02d51-7b6d-48ac-9bd8-cdc241cf5f95"
        },
        "item": {
          "id": "8df50f35-b0d5-4024-bd37-cb63f42672b7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "46fcfab6-f67e-47b4-8f1c-d8873d54857c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9358e56-ca61-410d-9a9c-6ca076f1bdd7",
        "cursor": {
          "ref": "67a11c8e-7a2a-4a0a-bde3-73464bb5f84e",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f0dc60a8-3af1-4f3d-8e7b-220b6ee5303e"
        },
        "item": {
          "id": "b9358e56-ca61-410d-9a9c-6ca076f1bdd7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e80fb38c-4bd3-44d2-b888-748bd5ce1a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366b8494-e650-4639-ae65-304ca5d4d11b",
        "cursor": {
          "ref": "ba2d0cc5-74fe-48f5-9489-695218454ae8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "10480c0d-4d10-44a0-8b78-8ce1d7e0723f"
        },
        "item": {
          "id": "366b8494-e650-4639-ae65-304ca5d4d11b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3d175365-1d3e-404d-9d29-309a8c1d41af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f03c742-61af-44fd-ab51-423bbe50b8c1",
        "cursor": {
          "ref": "0849084d-8f75-4e36-9d7d-78ead000ddf5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a3e5a9cd-88b7-4b79-980f-e015a802a88d"
        },
        "item": {
          "id": "8f03c742-61af-44fd-ab51-423bbe50b8c1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7080b451-2e33-40d2-852c-5a41e4b9a8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6555108c-dfbc-4021-9e1f-a8dc721c59e0",
        "cursor": {
          "ref": "e986e557-1bbb-4c7e-9c9e-6f6197784122",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1fa9e34a-6e0c-4523-8293-ccc59cd7450a"
        },
        "item": {
          "id": "6555108c-dfbc-4021-9e1f-a8dc721c59e0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7d45a24a-f3a1-4dd3-bce8-19036c017cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b650aed9-902b-4090-bdf6-ed368e9d0bfe",
        "cursor": {
          "ref": "a619776f-c781-4f57-8b22-b703cd68aa78",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "25c7e0e8-6977-4a09-9427-2f76a03e2f58"
        },
        "item": {
          "id": "b650aed9-902b-4090-bdf6-ed368e9d0bfe",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b69ea48e-b935-4425-9009-ca694bed5c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82b395f-bda4-43f6-a16e-23cd0b7e8a65",
        "cursor": {
          "ref": "04852029-0d6e-40d4-8629-0e478e2d61c2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b820ae74-b06e-47ca-b22d-ca0a4a3756b6"
        },
        "item": {
          "id": "f82b395f-bda4-43f6-a16e-23cd0b7e8a65",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "80ee02e4-1c97-4594-8f42-04b73e24aad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065940be-b0e3-4044-84b5-de1eaaff7af2",
        "cursor": {
          "ref": "fc3e50f7-2454-431d-b9e9-2ff7dc739d8e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "791b43f4-3020-40e3-88f3-696c89b27405"
        },
        "item": {
          "id": "065940be-b0e3-4044-84b5-de1eaaff7af2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "baa257be-9dd7-41b4-9a6f-0961f8079677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bce4ca-a7c3-4576-b09d-965333eaea79",
        "cursor": {
          "ref": "a1fafa93-bf56-4c4e-9aaf-e594e28f6378",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ab691a8e-0e26-46c4-90e9-cd5e609f80e5"
        },
        "item": {
          "id": "c3bce4ca-a7c3-4576-b09d-965333eaea79",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dd1c3170-9306-417a-9471-fbc9b083ee2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ba08dc-2c96-41c9-a7f2-d29b5063226b",
        "cursor": {
          "ref": "f5409d9f-c9b3-4673-aa50-4721b48b6a2e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "2d6295d7-7f6a-434b-b7af-a38d33659c5a"
        },
        "item": {
          "id": "33ba08dc-2c96-41c9-a7f2-d29b5063226b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c9c1488e-2048-4def-a148-41f09b11b7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c3a5e8-f03f-40aa-8b91-d76723ee5641",
        "cursor": {
          "ref": "707bb432-68b0-483e-a75a-14c5e3a51878",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b0040deb-7748-42ab-a26c-85f8d9ffbd1f"
        },
        "item": {
          "id": "f8c3a5e8-f03f-40aa-8b91-d76723ee5641",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "196d5f23-d7e9-4757-972b-a2fd3078968d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174d2280-1e7b-4b71-b342-ada687bfd9e7",
        "cursor": {
          "ref": "6e646b09-642e-479d-8a78-f7099ab05c1c",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "811b7b71-83d3-4155-abf1-32b9c803040e"
        },
        "item": {
          "id": "174d2280-1e7b-4b71-b342-ada687bfd9e7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "21d2f8e2-3149-4824-9341-3423baca3670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d33bd8f-3c40-49f2-9c6a-f5ad1676ce1a",
        "cursor": {
          "ref": "da4fa4ee-5799-4812-9d2e-642375a5ea66",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "56205e74-19ac-499c-ba3d-6250e755a78f"
        },
        "item": {
          "id": "2d33bd8f-3c40-49f2-9c6a-f5ad1676ce1a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ba579ca5-bff8-48e1-8f06-61a7716cfed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d57c0f9-d51c-4bed-b4f1-b91988abdffb",
        "cursor": {
          "ref": "1a685669-f02c-423e-b3d8-3837401be7e2",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c83b568b-ab1a-42e7-add8-5a379d275101"
        },
        "item": {
          "id": "9d57c0f9-d51c-4bed-b4f1-b91988abdffb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7a348699-d45e-4927-bd35-6dc0d89353be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918a133d-ba0f-4da3-b838-14635ff09064",
        "cursor": {
          "ref": "46328181-fcc6-4449-b4b3-afff57381012",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e2faab18-f14b-44f9-a9ac-799135c9bee9"
        },
        "item": {
          "id": "918a133d-ba0f-4da3-b838-14635ff09064",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ffddc5b0-dd5b-478a-b671-fd80c47f741d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8ffd7c-9646-431f-8788-0765ddda931c",
        "cursor": {
          "ref": "e5869b0e-3afb-426c-9302-9f68d6035b24",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7a8a1e27-27c8-4db8-975a-e87bf4e3fb46"
        },
        "item": {
          "id": "7b8ffd7c-9646-431f-8788-0765ddda931c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cd8e5e7f-6d9a-4dc8-91f0-90987cb359b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a509b5-e0b6-4ac9-b31d-82b096d6233f",
        "cursor": {
          "ref": "53732cd4-2e4d-41c6-9019-10fee3246b8d",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "986c82e0-5bb0-4dac-b673-9f815171491f"
        },
        "item": {
          "id": "49a509b5-e0b6-4ac9-b31d-82b096d6233f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "14671def-9ac9-4e1e-b60e-18158d3ee31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc181c1-02ff-4111-9a02-6549d77e3404",
        "cursor": {
          "ref": "4edb7f76-e98a-4bc2-8ccf-82ecd327349a",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "4e27ad9d-0e0c-4b6b-ac03-73d5218e2474"
        },
        "item": {
          "id": "bcc181c1-02ff-4111-9a02-6549d77e3404",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3c893009-46b8-47db-8a37-e28457e53fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0005ae87-4b46-4b01-8c50-c7e52762c5ee",
        "cursor": {
          "ref": "d325872d-18d0-4846-a85a-b2866ddfdacf",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2e60b3e0-b9b3-4103-8d53-d9303b3bb883"
        },
        "item": {
          "id": "0005ae87-4b46-4b01-8c50-c7e52762c5ee",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0f3d4974-2922-4b61-bf8d-17c1f26d7649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041d4d67-52a9-408c-818d-0fb4e424d5a6",
        "cursor": {
          "ref": "f55a7f34-3c70-4b52-861a-02f4fd21008c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3e17f27c-2b83-4736-a655-980a6a940e2d"
        },
        "item": {
          "id": "041d4d67-52a9-408c-818d-0fb4e424d5a6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "58862236-26e6-4f8d-804a-6b370af3b145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa341317-cbdf-4016-bb5f-f22214530284",
        "cursor": {
          "ref": "e18ae39e-9a0b-4977-9793-55cb104f28d3",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "60db27af-0b81-476b-b902-bc19b8c7a01c"
        },
        "item": {
          "id": "fa341317-cbdf-4016-bb5f-f22214530284",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5a65394b-7e9a-4f3a-b1b5-5157d1cbb8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39196742-f35b-4476-9446-14e0735ab2b0",
        "cursor": {
          "ref": "a41a3440-12b7-4013-a480-fe7deceda326",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a83d320c-0ddb-4349-9070-e509b7866bfa"
        },
        "item": {
          "id": "39196742-f35b-4476-9446-14e0735ab2b0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ee9ebeeb-39ed-40d4-a3a3-205a2825e107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120e4df7-bc9a-4845-900e-25aeab34957e",
        "cursor": {
          "ref": "53074dbf-afc0-45fd-a893-118b3a55b189",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a75ddca5-d355-4bab-b9ab-6437ae3afe8a"
        },
        "item": {
          "id": "120e4df7-bc9a-4845-900e-25aeab34957e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aaf52c85-5163-4435-9118-9e2ea37f3264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd8010d-0371-4d89-8ec9-348667af8e5e",
        "cursor": {
          "ref": "887854ed-fd0b-4109-a827-96e0a8d00c05",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d3cbfff0-d3c8-41a2-8ce9-4fb98e318f5f"
        },
        "item": {
          "id": "fcd8010d-0371-4d89-8ec9-348667af8e5e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "52f7e040-50af-483f-98c5-8a58604fd5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f87877a-7a93-4e5b-a469-fc38749e625f",
        "cursor": {
          "ref": "258e3df3-ee5c-4aed-9d86-53c9a539fd4e",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "20079d62-884c-4f15-b564-880323838a4b"
        },
        "item": {
          "id": "3f87877a-7a93-4e5b-a469-fc38749e625f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "eb09aa47-3cee-4445-b881-6ea28db1195e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024064d1-777c-4158-8384-31486715c126",
        "cursor": {
          "ref": "8e9c4f98-e2b4-4bda-9deb-397b03ece4da",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "078479e4-4d52-4212-b8d7-edc02555645b"
        },
        "item": {
          "id": "024064d1-777c-4158-8384-31486715c126",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f69f87d9-6ab4-4edc-9bbc-9f6a9290ac7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9b709e-ba25-4d35-9c40-d9890175e077",
        "cursor": {
          "ref": "bf0a8ee5-4951-410b-a244-c8438c2af701",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "af14f239-de57-4f5b-bb7e-2c15b572af5e"
        },
        "item": {
          "id": "9d9b709e-ba25-4d35-9c40-d9890175e077",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a3a31503-fc69-4765-9274-514edf11c7fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb40706-9277-431c-b132-fc0796409e6b",
        "cursor": {
          "ref": "3ebda482-d870-455b-bb3b-b314826afc1b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "faba89ef-71e6-4488-a64d-9b8b7db3711b"
        },
        "item": {
          "id": "bbb40706-9277-431c-b132-fc0796409e6b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ba7f82d4-4804-4b0d-b27a-c0a14cc836b5",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d40b6a5b-4e34-4104-b54c-abf4018516b8",
        "cursor": {
          "ref": "9a66b5bd-823d-4477-8639-3a7748bb996b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6fb91877-5234-4ad7-9513-3fad24bbf59e"
        },
        "item": {
          "id": "d40b6a5b-4e34-4104-b54c-abf4018516b8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "33d8d4b7-44b6-4140-8149-c87bf1c9228d",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89de8fb-c1c4-4607-aca7-2b725c81d5ec",
        "cursor": {
          "ref": "d8d013e2-2c7c-4223-9aec-628f198172f3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "236dc4e8-02ca-49d3-bb60-3245de612443"
        },
        "item": {
          "id": "b89de8fb-c1c4-4607-aca7-2b725c81d5ec",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0493e785-82e7-4c2d-af31-841e2c64dfed",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "25649d26-9307-460c-ab2f-8ef3007e3599",
        "cursor": {
          "ref": "c9304012-d81a-4090-9382-73bea49ae5cb",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ea8ec6e1-1f9b-47d8-bba1-fcb20ac1a5d1"
        },
        "item": {
          "id": "25649d26-9307-460c-ab2f-8ef3007e3599",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e1f61ee2-3d59-4633-91e2-d4b3865845e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25649d26-9307-460c-ab2f-8ef3007e3599",
        "cursor": {
          "ref": "c9304012-d81a-4090-9382-73bea49ae5cb",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ea8ec6e1-1f9b-47d8-bba1-fcb20ac1a5d1"
        },
        "item": {
          "id": "25649d26-9307-460c-ab2f-8ef3007e3599",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e1f61ee2-3d59-4633-91e2-d4b3865845e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dd051f-5a54-4884-bf65-b4eed16a82cd",
        "cursor": {
          "ref": "4f9bb77f-7b74-4417-b6c7-738fb1d76450",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fd668d25-ca6b-4a49-b182-80ef00a4a66c"
        },
        "item": {
          "id": "33dd051f-5a54-4884-bf65-b4eed16a82cd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b9f0c9ff-9d46-4156-bc1d-8e4715e97edb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec67d692-a547-43ab-ab11-f3cb110cb5ad",
        "cursor": {
          "ref": "aef37def-93aa-43d9-8536-380aadb68b70",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3309afda-e5d3-4cdc-861c-0206995071fd"
        },
        "item": {
          "id": "ec67d692-a547-43ab-ab11-f3cb110cb5ad",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d421aaad-6c33-4f6b-b350-4286ed14139a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}