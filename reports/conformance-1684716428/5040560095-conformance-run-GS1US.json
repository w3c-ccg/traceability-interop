{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "04062939-06ac-4b20-9045-a3ac0a5ab6a7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "94e6d79b-a8ae-4a66-b8ee-fb93696471bb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f3612e5-41cd-4385-9533-b5fdf93ab139",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00dcaaee-7de5-455f-a7e8-796f6095265c"
                }
              }
            ]
          },
          {
            "id": "07cb4813-fff1-4794-ac7d-3d8a01591310",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5cef52e-3151-42d7-9197-467dbebc838d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8766d945-1628-42e6-92f5-20b3c2dc12b3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "18290e0d-65c6-4ed5-b9cf-f54d30fd2175",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cceaa462-1a5a-4837-929f-898d1788433e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91217fec-c1f5-42ae-94b6-41bca02948b3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d01072fb-77ff-402e-a94f-651cc97dd1ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bea58136-2ccf-4258-884e-0f8557edffe5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcd68471-731e-495b-93ea-c0c9e403f8c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7375205b-2cae-4b3b-b13f-1ce2729cb847"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc1244d9-d5d3-4489-91e8-336ef881f63c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e35baef-e1ad-4242-8d42-d1e99bbb83e2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa14718e-43c2-457f-999d-30ab77267930",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c504e9ac-d0a9-4348-927f-9fbe3dbe4426"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "238ddaa1-417a-4cd1-be3b-e620bd7629b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "812ef803-4927-41b9-ae44-53bb4bb39cb7"
            }
          }
        ]
      },
      {
        "id": "eb596f00-7705-4030-97df-de5b5a0de507",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c78b4906-9e41-4ace-a669-eb5489b0bf4d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d4e67a8-a132-468e-982a-4390fe2135aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "708f1ef0-2857-4546-b300-f4705b420366",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df622b62-df14-42a8-a2e9-45d81a8ccecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72c80d1d-3204-49eb-b4a7-239a125306f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46903a6b-b87a-40ac-bf7e-5409666f42ac",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844f85fd-1db5-4e3a-be65-10ebe990f174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cfcf745-6cd7-4141-9cd6-453627c990cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbf939d-b78a-4c49-8848-62344c855328",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27453577-b10f-4c33-83c2-4a15f932f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "afda7093-fb64-41d1-ac95-ee9bca411165"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9ce03ca-9eec-4f29-876f-baf7d54c4de7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "38f8afce-97da-4ab4-9f8c-0dd90a6fc11e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e933cb92-1413-4394-a49f-6409b9ebff26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a2b10e-6620-4642-97e2-54a6bc2e4ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62905c5b-98bb-4397-99e2-d8117870f90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33280b3e-36c8-4f22-942f-0abef7f56097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b574b2f-017f-4266-a962-f7555c076585",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c49236-b37c-4257-a298-6d1a2d6ed635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bd37a5b-9cee-462d-ab50-50d80b657d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874dbcc2-b94c-4b59-bbc0-41527d2a66b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a762b336-b6eb-4965-be02-50c2c3cf11b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5d487e3-2737-40d4-805e-b843215b65fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55ec9a93-2504-4d1c-9559-3de16bd546c2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7733a4c0-0d00-44a3-9ab5-007272094dc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "937eb4f1-4ac7-4e92-aa4c-d33f06639d27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "754ab519-5b64-47d5-87b8-27e79fb74b65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "dd97d877-5076-48d8-b743-1c648201d973"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "004a2271-f42a-4be2-9340-21d4ab522fb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe208e14-6bea-403f-96c6-dd4c91f7cfc4"
            }
          }
        ]
      },
      {
        "id": "b3937b4f-1f0c-43be-9eb5-de65f71178d5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "79894ebe-6e03-46eb-b1e6-4c17f69c4b2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1caaaf4-f2c2-4f67-b042-24c0c57ca781",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "019de4c4-bffd-4b8e-91e5-7c266e9d8594",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b798a49b-57c8-4725-9675-b3052735e25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1f222c-5390-42f5-bb5e-0c9cf275a8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a7db97-d568-4247-8cdb-a616b64db0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "828c512a-e666-4e51-8323-0b4bbeebdb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4987e980-00f5-43b7-9204-d74940d98a3b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0e596e-12c4-434d-9f5b-6ef72e8c4950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe2e187-2af5-4f5c-a669-10fa1bc28363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968a5c1a-fd40-49df-ab64-19615c015ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2aabea7b-622a-4364-9b4a-cad6343a0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933b8791-c6bf-49f4-b6c0-934b547b19ce",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a00bfd-6bb8-4f2e-9d03-92d50513fc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc887e15-0693-4aaa-bdd7-76c91b371ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec87b55-a953-41c6-8700-eef1b1d163fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b783bd3a-b945-40f5-a3da-8d969b0e9df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e780185-24da-4b79-bfab-e673f8e4b688",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d1a390-1d9a-4a46-9f42-0d6808f1b7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2727aae-5222-492e-bc0c-9f5b5d135017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a328551-86c8-4af4-9df6-aac3d3bf9e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ea450f3-0747-4af1-912a-a8fbed2d4a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6de0b2-e62d-44bb-8857-618901880154",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3326d0-d2d5-4efe-b31f-297293d43956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99a15f3-f69b-4adb-b9e2-460b46003043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6179f5-6829-463f-a45c-8e96759490b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e8ae034-55d5-4ee0-964b-58c7008452ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff71a2c7-a6a1-4d7a-aa29-c876bcd846f0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ae0344-5597-4bbc-8378-0f2dc28395bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d59fe2e-3e85-4c10-887f-6f98abb004b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901cddf8-283c-43f4-8072-dd06cfcd9d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e5e6f08-59d8-4978-9d9d-e3fda22fba6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7b592b-3655-4c96-8fd4-7d4543fed48a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182f1367-f985-4316-aa7b-1b1da77f4f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09571752-77a8-4730-9eb5-1aa88215dcd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6efbc7-5fbd-467f-a705-aecab1a5470d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9465e8d3-681d-4663-bab4-bf1a67627011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178589d7-2f31-42b7-b443-a88c48e773a2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860ad671-1cb4-41ef-af77-59e7031cecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91160f9-fb8c-4c3a-84cb-5d9d56d6a7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e87c6e-eca8-4426-a6a9-be6d6d5267d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc691eca-a7ed-4e0b-95a8-280fa3877430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b9c33e-7757-4e9c-91e9-e71121a85bc6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226c56c4-c2ff-4049-9d8c-f4cfc8efff8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdb57a6-f608-4f5f-898f-4b132f861ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af62087d-5972-4209-88a2-12bf8e0ddf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e76b36-0338-480e-ab9e-70db024d615b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82127bc-2017-47e3-af85-0d6552281c48",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8948665-cc6a-486d-addb-08a71421e4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f5a1f-5b1f-4543-93a7-3c7827d30e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da00505f-d9a0-4272-9418-b27a85153a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e1ed58d-d79e-4942-855e-a37643af70ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4398e5b1-a1eb-43dd-b49b-3f4c066828fb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4fbbe4-e786-498f-bfff-adb40ae72a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcc4fe2-8590-4940-a93a-3464f2dc7e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0942336-d80b-49b4-8895-b5869b0093a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a20b9397-4a05-4744-ab8c-815966104737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6ad2d2-b114-4118-8d47-3a87db574a70",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7481feda-7aac-4225-9dd2-85bef5f78628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7bfae4-b39a-4bcb-b030-e2093ea8975b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438b0ee4-610c-4234-84fa-dbbadc190b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f9b8e85-fdb1-4128-a256-7db1e543d942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c0ab69-779c-4234-8a96-31bef7cb0f36",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2da9972-c547-41bd-ad54-9a413bf34975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5974806d-af13-46c9-8536-076b2877649d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a686ab0a-2ae0-43d1-8bf1-ad93dbc087b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe8902d3-0fb5-4737-8f10-1298ecebfd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99419895-85d9-426e-ae95-8763bfcc1b0c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192873f7-ed2f-493e-bf54-ea2dbe60d3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6435302-cec9-404c-acf0-f9707573a4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561a5d39-7930-48ba-9199-a7cb5bd02eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29c26669-6455-49f0-8ee8-404c0b849c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0b3ad2-ef13-436b-93bf-18fd30dc52ba",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d021b924-fdb2-496d-9f58-713a3227a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f104e38b-e708-4478-ab2c-a18c8676f65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d274f6-b2b6-4ce3-89be-1a2892a458ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffed0514-c85f-4c30-a20c-1d2f5d036ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c354ac75-bc85-413b-8b74-5c4697fc9433",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdf7b46-02a8-4e51-b5d7-73108f4f81aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5ec846-54d4-4a3e-b5c7-db1753a51961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0267ddc6-e0e4-4bbf-a167-45ffe055f64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "814017b1-103c-4604-be4f-f0e74f928e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca9e3f7-2aae-480b-8fa9-3beb917c3ad4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14254caa-86ea-47bd-be57-45080d4a1406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1b1cac-afc4-4d99-b1e6-92ab7fc7a338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903305f1-0a95-4ebf-b9ad-c08dd546f6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d16b1b4-2780-4c3e-8eb8-32ca63215e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7049eb55-554c-4f95-83dc-2dd51bbab575",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f9bf37-4f65-454e-a1c0-a47542b631e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28a2321-d527-4436-afcd-9f6af9359030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b65fbb9-9d44-4101-bd70-b31a066d73dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ec0c59-9b3b-4d55-bd73-f2fec4155b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ff362-0820-4ca7-8753-a2f239563725",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddaeae3-776e-4ea7-86ee-fe654b46816b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9176880c-3745-4797-aae2-2fdda00c5a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411924fa-59be-4ac2-833a-9d285eef26a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "885ce2aa-b10d-4020-9e9e-60002cba5461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c50b6e-e5fa-4f60-be1a-ae109e7b3280",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b0c2c6-0ce9-4ed2-a31c-f5920cd7e644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b9484a-8bf0-4994-88a5-fa3051f8a5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c044b08a-07f5-445e-8e46-1d62601c1951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af6e624-4052-4d81-bea7-ea723c218e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93efd21f-a826-48db-94d7-6f195c5e5723",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4319139-b14a-4742-bfe2-e98b9922787f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165a963d-a370-4d42-b1fc-72e08438faa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b6342a-85c2-4b23-8871-ab8ba311c7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e59b557c-4a4f-4e50-b64c-376fc9185950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd71393-be4e-4163-aaf7-852568bbd088",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d345e1a8-cffe-45de-a384-04a34f1d13fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec78dcd-ff2d-439e-b696-0c6c55875f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0af6ba-a9a9-4fed-9245-bfabe766d6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7b27df-b6e8-4903-a0a4-181b145eac92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ca8bdd-13bb-45ba-b50c-c503c08bc911",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93703665-1a42-4bbd-a989-ec4a8a29afb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37147d39-3849-4eb0-a3b5-68b3c680f15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4490817-e358-44cf-a636-73e7aa656972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41bea07f-004a-4720-8bea-5648dbecda8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0603a83d-0149-458d-a8ec-af24cdf17e03",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b80b8e-e314-43ed-b40d-f0135210e841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f2735b-3ff1-44f2-b77a-ab1fe93b7b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a895294-d522-4b9b-82e6-af25bd8be57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "009348b3-ebe8-4981-8796-742b26dea060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e232748-ebef-4779-94ef-2bac25ff91b8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e1139-672b-40cc-ab34-0edbc64f6fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2c3d8a-76f8-4b9f-87a6-2d20e4084df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f1c584-c8f2-412e-8eb4-bda30e244676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b55c97-7437-4fca-bf85-721fac36c75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02efb93-afb5-48db-88b2-3ee3a861adf8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a71c37-a175-4235-a76d-c599ad18e496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7201d7a8-9e9d-42df-9044-0893233d6828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7ac7d0-2f06-4c2b-8819-4607eda01ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4d4d3d-2159-4b76-b2c8-642fbf535267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d619f3ca-2f0d-423e-8838-1ef2803cf08f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e027143-8483-4464-b53e-4736aa8537af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59001c44-2f09-4e23-8aac-b60bcdc0a3bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce7e117-5f9c-41ff-9560-b0dd97b445a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67142eae-d016-4d96-b12e-6e6c95e40e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c0bd71-abaf-4103-b538-9420e7e43852",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562e55ab-adcc-4205-953a-0eef315925d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ec4068-34f9-4f57-ae49-6a6b33e15abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2abc68c-efa2-4eef-bf53-a6585018588a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "deaef127-7f8e-4d56-b4e4-2e09e3a8686e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ec2699-b114-4d4d-872d-3d239fc215ff",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b12a7-7d4e-4090-8fb4-d2935a003b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfab19c-bade-42df-91fb-e4958d9a927a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226eb8ab-42cf-4d57-adc9-65f8a3128416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4818ce-5b0c-40f7-8ec3-b0b5aa3226c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a19889-7639-4f98-b653-2abedd005577",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859f9b75-b1d0-4fab-807f-b1dfd1113e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55497308-6f44-4145-b6f8-612a59910afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8172d432-f20a-4a05-87d6-f66810a70abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "742c30fb-9634-47cc-8e87-9faf84c3465e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bba5fcd-070f-4de2-9a45-a730b06862cd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a78cde-0438-412d-9f0f-c0c0a952584a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44055a39-17d0-44be-8fea-bf4df1fd019d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d1d363-2cf8-486b-b4ae-e2665f1aa8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96bb5d8b-bc1a-4a25-8ce3-a65a879e6bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152d7015-6136-4924-a4c8-1cb1bbe4484b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188003d3-25c5-4e64-81f7-08d11888e8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c945fc31-b862-4954-8d54-1f58a2c1a051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7108b37e-7b05-407f-9e59-0c34f5e7a00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a48ff3a-afb8-46e2-8c29-950ba23c98d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a345808-36df-402e-a2e7-94612bc39583",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6cbbe6-1dd8-4797-b73f-fe3745c92525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4d041d-9b01-4176-824e-2ac8eac6a785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46b99fa-bf8b-4419-86b1-7749b1e4c031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93532795-416a-49fd-ae4e-505bccb8348d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d500d6c-6f6f-4ff3-bb89-acc8bda32f9c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162aff09-e007-46ce-8545-311fc6b51589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b5865e-6732-4a81-9757-28e90bce0d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea707361-2f52-4260-98c8-d6a222544b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13d090a5-4fdc-4d80-a71e-fccf7355cb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7215a5-03de-4db2-acbc-58cea6103129",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de3b35f-429a-49d1-b6f3-df147ed56f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce743e2-8ad8-4a29-a70d-8f8072ddc68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995a176d-8851-47a0-9386-86618947c483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd9e150-4a5e-461e-a468-ca3e8ebba802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f60a4dc-f00a-4f21-9d07-ae7676f3ac23",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5d25d4-30a0-4d9a-84c9-8946026dc307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45548a49-50ee-48ca-8579-f9e427f48e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6854cb3d-8b56-4ee4-be38-188b0afbf677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19c08424-d15d-4bf6-8384-59a64a005cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc538ba-b51f-437f-8aed-f2348b4a150b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec7397b-3c93-42ad-b06d-0b378e370aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b24cd7-caa6-447a-a346-383abcae3b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5563a26-54fe-4775-9615-b05724e29702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d70ddaf9-d47f-41e6-8d5b-0e308586f319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd2ad35-8c35-40f4-bbd5-732bec90a2fc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca65067-787c-4c87-994e-f21067328006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef24d5e3-ee96-4bf1-ac4b-a2610d476deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea052c9-e4cf-4b4e-8712-b2adfd693d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54008ef3-bcd4-4100-9095-3f9c4c8f6e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d67c47-be5a-4ba8-8ee3-1c2ba545341f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0671759-9a3f-4932-89a7-241a6449ec53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867ffd66-a08b-4fac-a45f-1675269f4681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6625363b-7d16-40bb-8400-e6ea79e0fe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7653da-d27f-400d-bcd7-1efadb9290d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7d6eac-1198-42a6-82f4-63bb55fe8b98",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cedeac1-a7b6-4911-bf05-6efd845b44b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c297f8-cc7c-4c3d-ac86-67a0ebeefbcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4849ab53-c723-4562-bbd0-6488d8ffb7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb7d9bd-155a-4d40-b2ab-d614728ef666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673f7250-9167-4ca2-8cad-e4d3e247b0e2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94990d8a-d806-4972-81ef-733af544992d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71562ee2-7635-4f16-854d-f7e4f6c65d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb8aeca-cce8-4f50-a960-d909ad1c0292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1de516-a698-4e31-9b39-c9039091fffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947d6366-163c-4ed2-948e-150c182394aa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4122e4-cf15-4d94-8284-bca571af73f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab02f46-40e7-42aa-9343-98de5c4cece2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5cab74-57b9-419f-be4c-c7fceb402303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "834c1a06-6a06-4ace-9dd7-9409991f0a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d357b84-185b-4707-a3e4-9e1c20d051e0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812d4912-418b-423e-b028-4c39d392a60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdc8286-a0e4-41e3-bb39-32643aeb7b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de2d968-bd6c-427b-abbf-3cd2a5c940aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f424924-c1b6-48fe-97fc-2ca9526536f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884666a6-8144-40a0-ba36-8a2a37f30fc4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8106ab-0cf6-4d5a-8f51-ae69d8d6183d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a33c4d-92a6-4c12-a1b0-ab959af453aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d737b0e-a97a-43c8-8912-0a0b3362cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "15101313-3fd2-4fb6-9789-8a29320cb9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8dd967-8733-4138-bfcd-4bd9fd46b1a8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13eb774-95fd-4c45-9466-92eae49fff4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ff9a30-b2db-453f-9fe6-50fe587cfb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1161ce9a-f0ed-4b72-9088-04067ff4520f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dab760a-a74a-4c04-a2e0-5f39b80c1c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33c12d0-358b-47b1-9d5a-821113d92926",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c6cd24-8077-496d-a260-cfce858886d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61461d3-7b7f-4975-947d-660f599eb32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51182f83-46cf-4f9d-a3d8-d65aafadfb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c1b96b-21e0-408c-bb57-d2da90accc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0495145d-8910-4faf-a929-7b947dcc20d1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb403ec-ec59-45f2-a631-a9d22a56a32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5aa4434-4417-46ed-a6f3-f67f227d80a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271e357e-0fd8-46aa-ae89-e3d80bc91113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da398d82-534d-45ac-a40c-806e60af13ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d18c41c-3d3d-402d-b4bf-0041fc4173cf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de380af0-7128-4339-80cb-b125c406e24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ae865c-5cb2-4f43-8546-c9d06a210f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d2bf03-f4ce-4a21-b611-a240aa7f42f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83d37590-990e-4297-9ca0-bd028bbea991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc24a15-5663-4a97-86a3-61dc966bdd1c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da1605a-0459-4505-b9d0-155d0eda5844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bfb217-b0ae-4493-ac8e-1359435f1bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b2e492-fd46-46d6-82e1-deb665d4d1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "908c4819-8639-497b-acba-a837cab3795b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf06e2f-1a25-41c0-90f2-f79524142815",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9387e7b0-8796-4e37-ae35-efe927b39400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5f0682-e263-45c1-9707-f2466d1ea060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039367dd-65cf-4a5e-9182-caa15a8f4828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5473f73d-ff8a-4630-b353-07d36ff90d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72044795-31c4-4d78-a6bc-2d9b5112186d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc097c73-b8f4-49d0-bc0b-ba6c981dacb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78a20cc-d9f1-45c5-a68a-3e3131744907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cc6df5-40f5-4222-812a-fc285d4b2532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "951af9c6-3f72-4d4b-9684-9d2b88c640bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf961d9-806f-406a-a5d6-d7eaefce5ed5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c6a25a-0b36-43c4-8274-1a0131bae1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b023debb-cfa7-413f-be40-5011a7bbf10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226ccf2c-236a-4623-9225-27ea08fbcdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "315e3ce1-59b7-477f-b2d9-a7da5089390d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aead73-9297-4479-89f5-526bd51731a5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e4c4bb-1b62-44b8-8cb8-d2a7dbda2177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f809699-086f-4076-adb6-b9fe9c3df3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891f42d7-8160-434c-94c6-01c24d3be037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8f3271-00f9-4da1-9b7d-cb2b5f89d0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d89848b-bb65-4c28-9fa9-770261b79c65",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acd8e84-00e4-491a-a33f-5fd1a6e57515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefe9e59-e5ac-4fb0-8caa-ce99261d5ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b106cc5-0ad9-4c5e-8860-5bad39a54798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f571784-54b3-4623-93a2-90631d515932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23bddd01-f5ce-4e19-92ec-00a635455c31",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d802df58-07ba-4b6a-924e-67d05b89ce39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20481e3-801c-4d99-8799-067ce4386a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078d595a-358a-4377-b81e-04e9f604431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd0fd4e-5b90-4029-a6b2-737f4f328c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9cec5d-a1c9-4315-92cc-4b48a8923525",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba03474-0afe-45ce-b7a5-d4e9ae89ff4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ebf3abc-9d1b-48e4-8365-c84e79443094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a13f0c-8c16-4e0e-9a9c-86ce7fe45821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5606bd44-e8b4-469d-850c-522c9b8b9bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dda4b1-ca85-475a-ac9a-932ee93bc868",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b3552e-f7a1-4832-b2b1-eca30ea024f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfee226-f674-4022-bbcd-b94bae10b4ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a998faa1-caf5-4c55-aed4-75280253181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e3f64b-17fb-45e2-9beb-6bb1636df080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83c8efb-d70a-4c8e-858e-ef9198ab349d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4949dc66-a2a3-4741-b56c-888c84814041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0233e420-5df5-48cd-8fe9-28acbd308013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24667ad1-1c73-4549-aba8-31a7d58ecf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd721829-ecf5-465f-bbf2-f16d5f0b4363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795d182e-cff0-40c9-a6c9-d43e486bec58",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf414e28-655f-4224-9b60-fe30e88bc11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452a1cdf-1491-4d01-937b-33753f1b320e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f92c58-c120-4469-9e89-b91bd1ab76a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8626357-4f02-48f5-8a33-f49b224a0646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e996f5-4771-4bf8-9098-46bb2c257c29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7993314-11da-43fa-bbce-675f777977ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbc87cb-9784-4c67-b45a-dfd5e1eeefbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46227683-d9ef-4a2f-af19-e70a693316c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9ecc39-7ebe-4941-99d5-f1b336795bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf2a953-9f3e-4db5-92a8-a599099fb879",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f1b1b0-fd72-440e-9d95-fc6fdd6a1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b38f909-b310-44a4-82dc-5de44f571dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2a392a-8357-47af-9076-e3cfe74e8dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bacf3f0-caaa-4584-badf-9ef9d2a0d195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea6963b-35ea-459e-aebb-21c83234e92f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20734f40-e856-4560-bea3-972afaed16af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88584d21-6b3f-4ffd-86b1-3da36ac9643c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b19e3-efc8-4bda-b4bf-d63076fdea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2648d2-85f7-4bbc-8f9d-74b5a904167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a884c0-262b-4908-bc21-e82ed75534a6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a6cb88-d586-4fb5-9206-944072f41c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da70149b-0818-4302-8cc2-a72555593154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa93193-27a0-4ff1-bc3e-dcec9bfa9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0362f1bb-e8df-47c6-89d8-54ff1c987069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bd161c-c60f-460a-8e7e-3f68aa258e80",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b9001f-f59c-440a-a11b-da6afa73e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f6c108-c367-4eab-b562-8bd139b2bc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ae54d0-1e96-4a4f-92e0-f97919d0102d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2868dd9d-fa50-4a5e-8e1a-a950ed86d9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd7ce06-af2d-4cb6-ac71-84ba930d8aa4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65785e49-2545-4070-bb22-4f0c72bf002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f1b050-3096-4442-9b7b-6417c097d2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ebba2b-c129-4320-b924-07048f070822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02f85ed-c030-4955-b1dd-2cfa2951fb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20d4628-9c05-4716-985b-7d3548d6995a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82effe94-aa6e-4ff5-a2f6-526aebd0f146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9224e9-af35-48a8-8298-23cf6c4de99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0410b65-ae6a-4507-957e-9829022edd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06235dbf-b418-4338-b477-520f5683c859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d839df75-9628-4a62-9370-6f47acbc7426",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eb9500-8f40-4818-9a76-ed33c4cfb8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803bff5d-482b-418e-8740-40c7edbeb927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8143ab83-e9b2-4f2b-82d4-aed16742f34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b05d212-9b28-4b2d-8709-731f16112d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0791e4-5a09-4581-a0e5-63271b3852d3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd29b63d-ad1a-4dec-b12b-6797791f4661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc244808-5c27-49a0-aaa6-16d873242b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b21620-b366-41b2-b161-bb7515422d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e791c0-594a-4e05-ab2b-bd812f1672cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3431f205-3244-4c21-a535-e6f044a53f3c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5860fc65-8e09-4519-a0e9-990607635733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad93cf0-a6fb-42e7-8c82-0a5903e2f1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3028a648-fb83-4a87-8b77-75b98430f845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6561561c-2366-4943-b321-04c77a2ff9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80692ef-c8fc-4007-b9b0-a334abff4429",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb18eda-e637-4e3c-bcbd-6d05402f5899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a6ea7b-2627-44dc-acd2-d1328056249c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e82d3b5-1f94-4e35-8710-6a0e5d6e6600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4561f222-46ad-4432-8910-619f3768a9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead0af12-e74e-4c0e-9fdf-1dc652d1d563",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d0a85e-02f9-4344-aefd-1e3e2a1f3f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf71f3c6-7995-44aa-9162-6524a101f60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a19f2ca-0bdb-4457-8b31-785459d165f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec83f9cf-8d87-404d-a7be-f8fe847cd07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3dd553-aae1-495e-932b-a2167e2da859",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7e9d1a-45e2-4ca8-bb76-38f89e33ce11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4efb3ad-2b24-4ef4-a7fe-641c8b14eee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2bbec5-fe1c-4703-973f-6fd5ec7cbb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91daae19-a17a-4353-a507-0d34f52e0cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45756c2b-066f-4dfa-9920-4f8f24295418",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b748038-9091-4055-a3dc-b56db510fadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b26f62-4d89-4dad-be36-80d399179a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a0866c-19e8-48e9-ab77-7e5d58179588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "672435b0-5d2c-4a67-a642-96c7a003010c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177a2c79-08f6-4414-8588-0166c1d37e58",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97a9fd2-656b-461b-b4b1-0171098101c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b641203-74b6-4be9-8bed-1db37b39a8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fddd196-37d2-4914-abfe-67dc5f7d07ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58ae3a83-07df-427f-a9e8-4f38925aa0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baef411e-9e79-4b77-9166-350bdecbaf4e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f1ad40-d528-45ee-ae2e-174fd281c151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07be82a-3a8a-4a83-9461-2ffd5aa7c349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720cc049-9d3b-4986-b160-490e8b98b0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d343fae-5728-4555-b1e5-865fb1e04905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060bd542-f630-467a-a786-f6ac4bb22793",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4f969f-da2f-40e0-b2ec-f44fe9590dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d301a59d-9bc6-45d2-adc1-e7d6d371792d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222b0b7f-aa6e-4d43-85be-9b5450b9a828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a336cde7-a669-48f4-8063-e319ef086a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf5bf36-bafe-417b-b489-7efdb757c0c7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a52fc1-8475-401c-ba0c-f8addf7dea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf2db18-0242-40a2-a5c8-3318ff8327af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc03de2-c487-4c08-ab5c-29b8642fc0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d90f50-f5dd-4284-81ea-d21c788da566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b07469b-25b4-445e-9b06-73505df7a578",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5584109-1a73-4d7c-b15c-adeeefcd04fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af15a2eb-9c23-4283-acb8-0a2448fefd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa9d5ae-2bde-4796-b242-daa4c860284c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde2259f-f868-4321-8e6d-d7687a9e37ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96a5cc0-3ffa-4f68-a730-d085837e413a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c526ad96-3fa8-428d-9b5b-3870803b3ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7747f110-571c-4e2e-93d5-1fa00d30ef98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285f00fb-a277-44e4-92a2-38ea85b3b178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c65ec2eb-c157-45eb-b3bb-205f8294161e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ebf76b-ccee-4b65-aae7-a76538597ce6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ea3825-5dc6-4744-80f7-930a1f318664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0964d2f-fa73-492b-bb6d-f1ae50bd487f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefc2260-eb24-409e-a6b3-ccc3386cf3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f92571de-2f1e-47eb-8203-f6bd866ce62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f29f6f6-f5c6-4c6d-b043-9f685cc99eb0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec76e69e-74db-45b1-b6dd-4c28f86af323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6acb27b-0b25-44c0-92db-fd3f5e0cac51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6df35c3-4598-4387-aa2c-840999461b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9ffe91-9d7f-4f79-9895-f8f498b18eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8fb548-3a4f-42e1-8cf4-32a520c2c0bf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518adaa0-87f1-438a-8703-fc3678c442c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb048ca6-76a9-40a1-9a1b-04f94a1d59eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f757418-cbc1-4e51-91f0-353f45d650aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63fb23d2-9686-44f3-bba1-67e5e244efbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0334037b-2af8-46c3-8a14-fbe6ec6c621d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393bfd37-a2f8-4a47-8c86-34df24922365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b6349e-367b-4eef-9046-5cb98f6f6bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de50c94-7aab-47b5-b3d3-5b1d24b18a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac22053-d903-49a3-9448-6701019d4acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3e9bf1-7d76-4ca5-bacd-fed44869aec9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd6e8cc-7584-44f1-9abb-daed1412e919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8e6c90-00bd-48c1-93ec-2588c819d8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe46e9c8-b5ed-4a6a-8a84-143dcd1bc249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9213c8aa-ed71-4c55-b376-5ac5220fe309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22355e8-878f-4547-87dd-f5548431184a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd644bb-112e-4af5-9524-38d586be95f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955d4a06-e3de-408c-a87e-d63979e9dddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1581a29-2166-4697-b15a-3e838838b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "efcd40df-ff66-442d-8ebc-bcfc8099c4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc933d9-78cb-4895-8c92-cf21536f3959",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db45da3-ecda-48a1-9062-d3e0213288d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf1a619-9948-4172-82b3-d7d70a7625c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187d9be7-c18b-4a8e-b95a-f4caf14e80f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5fb82d-14dc-490e-ace2-f6a65d2fafc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e614f4-ff01-4d9e-8457-c1b764f837c0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c1a040-5c00-4bc8-8c48-021755500728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25de8b14-a90a-4bf3-970b-47e042ffd791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddf36ee-ad79-40a0-8b89-4d3113640ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fac5dd-eba1-4643-9728-65d3f5d92299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc86777-b1f8-402d-97da-da74cd49e738",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e58d5-590e-4433-9287-1f061fca668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a324d2-1f2e-450b-8843-6f1c015d2556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae90b8c8-41e4-40a1-a447-36db4d43e001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "453bc0f5-b38a-4b2f-8e48-c9182229f9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e141808e-2355-476d-be92-bafb10404a6e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbb6222-6d78-41bc-8030-0284de2b8008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97130e29-4406-44ac-92b8-f9b1b147163b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298e0d52-c8a9-4ec7-8e53-cae366966bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd9234b-c103-449c-83d2-1404cf791f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf11f50-56c8-4ff1-bdd9-34a2b390c302",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbd9f76-4d4b-40c0-81c2-133288c83335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06811b7e-6083-432e-a6ec-64e35ffd19ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7520d4-24cf-4545-8f8d-929e7877dfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47168590-c4fc-4ab5-9b29-55d20c27e746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646f1827-e4d3-4455-a6ea-e796e3e4715e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466770a0-54d7-45e5-ac61-d27e33e31f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd4843b-a66d-4082-99bc-beb177291a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c57e68-e54e-47ca-bfcb-082a372bffc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11a66acb-373b-47bc-93f4-02b57b6bbff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f78752a-f452-468f-8e95-4749e6fb7f1c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215980f0-a8b9-420d-9728-4b83f9b49cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2d881487-c3ae-4866-8e1b-1dee3c10c9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec874ba-56d2-499a-9bba-fb32d896176d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5246d9fa-137b-4c1f-8902-903fe1ac5329"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69183f72-6991-4754-ae25-68b9844d086f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6aebc741-1294-47a5-bd28-fd3fc4f6d737",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246cdb49-b79d-476d-93e3-bc4193c71c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35cf2fec-892e-4f89-894c-6b09a4c6e94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdf6877-2fec-4eae-90c5-cf0314d37e67",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fe30cd4-c68c-4d9f-bd40-4435c5515d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc9d98b-0b9b-4216-9e8b-3cd4837cf28f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4aaf61-c2f6-48e6-a81c-e019bd33070f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c2e01c4-ccd5-4bcc-a030-36fb1c0b6160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ae7995-d7a9-4e30-a8af-057b83eb5d1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efdc49fb-3090-4ab5-847f-b72543528d79"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33357ffe-adef-4a52-9c95-9cad5804ebaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "582eb234-c28a-4360-a8bc-4b24336a12ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36fd9a45-fcf1-4b20-a02b-a7e3ff7d3e0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd23702-cf52-4940-8c42-8ba2ac285cb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "761e3e2e-5a96-4eb9-86d9-2e8816b7aa72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2c23816-3ee0-402c-8f8e-5a4b73e92cab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1e8acf3-da5e-42f7-8c27-9bdcd4c91c93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17e93f14-76c3-4c2a-aee7-eb989879cfd0"
                }
              }
            ]
          },
          {
            "id": "917a23fb-a2a5-4bf6-9d7d-4d36d6764c31",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40e5ec65-caed-4384-8d00-1277f823f93e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfc77475-13e5-42ce-9ba0-78f51726db56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fb13c08-c400-4379-8ff9-7b29d1edd135"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58a2fd97-a71e-42a7-9563-971b8f53f2a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "adfcfb8f-a2a5-4c17-be95-69445095f748"
                    }
                  }
                ]
              },
              {
                "id": "d3631ecf-cd64-456b-b4c8-7acf0c11d276",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02093b94-961a-4c94-99b2-f2df67a0b538",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74678f9b-88ee-4a3a-8417-1d0568fc4fa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18b31de4-5ba5-43ae-80e0-e5733677862a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f707df69-9fc7-4580-a0ea-44e40bde14f0"
                    }
                  }
                ]
              },
              {
                "id": "eea3a250-b7b7-45cc-93fa-5955afc7eb55",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f436f6a1-6bc3-435b-ae56-03f079305658",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "473bf3fb-f96d-424c-b535-11e1aabeb84f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3224cb49-08fe-47b5-95f8-b942287c826b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e5b1724-274a-49b2-af30-a5a65ab48898"
                    }
                  }
                ]
              },
              {
                "id": "0183604e-a8d1-4e2e-8eb2-335b41f54ab6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "249955a1-83b6-4ed6-806f-02d4bacb0149",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79fd2750-20c0-4a10-996c-187f10902cf3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "072789e0-bba9-4505-878d-79a93e95f9b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "244e22c7-c7f8-49e7-9a70-11fc0b84f744"
                    }
                  }
                ]
              },
              {
                "id": "584f7e3a-9ba2-4d52-b6db-07fd9c42cf5a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe4fb2a7-e096-43f7-911f-f156a9676416",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea91812c-07d2-4f47-b7a7-ad9953236786"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35efb621-5e11-4020-aee0-eb185458cbd8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "68b80914-c26e-412b-a837-7282cdde2b55"
                    }
                  }
                ]
              },
              {
                "id": "5143d428-beac-468c-a152-76bf7414dab1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52f921e8-90d0-402e-a218-dedd90bc8ad1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac283a2f-0af7-47c0-a536-9080dda0b6b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e650c8ce-c687-4c7a-baed-8d03f5034aa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e4ef8bbf-58b6-45d0-a78f-43d02d57e59a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7a61c61-73c0-459a-95e1-5522fd4ce649",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1893d017-055e-44c5-8cc2-9480080ae61c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8955bc7e-f5fd-4928-a440-6c4c5f7bdec5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5aff4cd-b506-44ac-9fbb-9e2621932612"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2447e1f-1077-4803-b8a8-94b1c913699e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "af08b5dc-49e6-407a-a8ff-2fa931633f38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd24c2a1-27df-4d37-a72a-d5cb9159fd81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "673ae042-80f3-4f61-a7fa-f04d933f6ada"
            }
          }
        ]
      },
      {
        "id": "a583c045-d15f-4d3d-905a-0de2df537fc2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4c29fd1b-0e91-4aa1-9025-62aab615c946",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c590e90c-a44f-445b-bb65-e59c498e17e2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d6ba5718-f018-4d0a-a945-f1caea39dd03",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9656f6e-40de-477e-a266-19d28b34f43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7b3b4f-356b-40e0-a0d2-b26875401a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e6072-4c38-4203-a47e-b489bca74920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a2d4ef-e6c6-45c1-bc0a-bd25fd36b838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c522d3-182a-430f-a6c7-bc9103894217",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e9659-166c-498a-bfb7-85988cb9950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fed248-0949-4040-93cc-ee5c46d8e690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700ee6b7-dd01-411d-853c-99cb81ede16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af67f96a-4ff7-4f92-b84d-bc975ad97a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca255389-0472-4b63-bd0a-d8c0fe51c878",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5642e92-f9f6-4cf5-982a-9650927b5df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de13e66b-ba58-4aa3-a291-de53da3d412b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bb39af-98dc-4adb-8576-34380d4cd67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c41c307-a39c-44c8-94fd-44931d65b05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dae02f-3832-4c78-beb9-67b7d3ffbf3f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1404cc72-6479-4097-ad7e-b9344e3b6e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8742f0d-b237-4cca-9724-2ebe0e03b380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b42ef73-27ef-4232-8972-3db3c898bb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4658da7d-e4b3-4502-ad56-3b307cd08633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179a2d7e-7442-4a67-9bea-862e5a67eb36",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0306ab0-70f8-411f-a0d4-526bb66bc251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa31e1d-dc80-406d-b974-163547a7b1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde3ef74-b528-430f-91bb-84b7ee20fe70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "038f61c7-3a73-480f-972c-4fad87c8c83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7e73eb-6133-4d65-a958-2e5706e7d07f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278adab1-b182-4df4-ab9b-2d76b75d330e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2a7652-1321-45e8-b063-ef77988c11e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87419682-e6dd-4ae1-88f6-b4eae349392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b24fbb8b-a6ec-4721-910a-6f53d0796d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5655efd6-dc17-4f6a-9566-819a116127b1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebb1b20-8d6c-49b8-beb8-9b2c9c3be47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54aed16-cab8-425e-8047-9483ae884924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faa81ad-df19-4f41-a560-92e670dbe2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e0c99e-cb39-4251-8238-378017d837c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321b1ef2-207a-4a0d-b18e-169ad5b22096",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317d3dc1-b84a-49d7-be6c-800d4f117234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5baff48f-262b-4e8c-90ee-4f0aef9fe5e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eea63a-dbfb-44b9-94b1-0f658a487d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff18c1fd-7da7-4434-8f0a-723ffec8b9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac41acff-8b9a-4929-862b-7f0e2cd21a23",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255e987e-ad37-4d41-bbfc-4061e035d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da93d10-5f7d-4032-92f0-a46d0334eab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074f761e-50f0-4023-af72-2652d45ddc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6524d8-2076-4428-a486-c040c4d859db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f802f9-57c6-499f-830b-4b78dd9d9ebe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96247e5d-a2ea-42a1-8b01-9465de868555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f71722c-cdf3-4bef-a038-7a6678245822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b163f4e2-de28-4a64-ac7f-7f328e479ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d25a93-8b3d-482d-b6c9-1f0c376114de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07ba8b1-90eb-4402-8aa5-2837545f1699",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac677319-5049-422b-9e77-abcf8b2972fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d88467d-e493-4ecd-a708-bdcadd6b5ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b0a371-3f27-40ee-a73d-bb1123083691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e49f7013-691e-406b-a273-d6d117567846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa9729e-c3a8-4c29-89f4-e7ad76c42a73",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639da43b-b676-4edd-9207-1f196dd1e3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8618db27-3f59-403f-ba1c-ed9f49f551d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc764876-3786-4e21-9f9a-0608ca166b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c47840a6-9b9d-4037-9607-d75beae6cf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "798f38ad-6dc4-469f-8873-addc1f71d271",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15fb234-d410-40a3-a5ca-bdc59ec2138f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b09b079-d185-4c03-8989-85f23c47971b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2daed06-4fb5-4c01-8054-115b8a4c2ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3415544-3a2b-4a53-9b22-afa221b5ac1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be51f8b7-fe02-4949-ae25-a1cd08db6854",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5af1c7-5efc-4504-b2ce-c4cdf6797194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51990006-5f28-46e7-a94b-4496685237d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3fbee7-d85c-40de-89fb-25ddc941212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f990cd2d-8c7c-4ce2-b712-28e3882fe0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c03f10-5011-404c-b07f-17a249076e90",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabd0e86-f9a3-4d2c-9275-6a787bbe2ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febe83c4-f6a9-4942-85da-742c009f682a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614ad839-46c4-4fac-8498-0d6b3ab6ed08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f371c59-c530-4daa-810a-573d9de09966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc460a5-abfb-4855-8e0c-034c84402a76",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5a0b57-ee7b-43cc-b9d5-6e839b8ec77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2a9e7c-3dc8-4971-a280-911f20e3f27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae0fad8-48f5-45cc-921c-282306a3c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90940e9-8ad5-4ead-ab57-f59aabb1d0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb856b5f-7e0a-459f-b818-34d469be2a4d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd1edd3-1c2e-4efc-a91a-21bfedfca470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a313232-a8ca-4afc-951c-a3d8903448b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e320aec9-8215-4202-a1ba-02dd24b975dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dca11bf2-49fb-412c-92b8-2fdb87f974e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df7f8cf-dae2-4af5-80a0-4f4a4fcda20a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a82f481-2649-49fb-831e-f042710832d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06c2664-c5b3-4efd-9d43-14535039888b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e612fe-2144-4321-a7e6-b8147261c5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3166f2e3-b74d-4007-9887-f8acc326057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3914d1-4f8a-4a8e-8404-2dd32e45a114",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1fba70-c9b1-490d-bece-d9e498204638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8f1b5a-d796-4406-860f-dd7a69b4871a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a47442c-96fc-42a4-9208-8121f0175aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9397a9b-23c2-4e8d-8517-1b0062347e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85572490-3a71-4820-ab1a-de8ebfb882ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d90a440-dc31-4746-8057-c149725d07b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595f91d0-6f36-41e2-a481-2d5a475862fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7e2950-dc39-40c7-a7d2-9d8c0b1fd48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b03bdfc-6aa8-4dc9-8e36-1e0b68a51209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69258d5-6fe2-4ad1-87ca-e56565e176a1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c564ee-46b7-49f1-bf01-0a222f083902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e91ecd4-ef9f-4834-acf5-0b2061ae720b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c79f1f9-1bc1-4b2b-86bc-59e685b25c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee161b6-e7f9-4237-a9bd-00e162f1e7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11e3124-5c84-4d33-b478-87b20f0451a1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ba5693-3258-4158-9a58-47f03855e138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c58bee-513d-4891-a20c-cf1be250131b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c78492-d633-4ba9-89c1-419921f6b59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ce8330-e5aa-4a41-bae5-db78580e8f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b2eb2c-21cd-4526-987a-c3d389a4ddfc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0d6d53-94f1-4c03-b60f-3c70b1afd3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe0056a-a5e7-4537-a753-c27e9963c2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7a3ea0-94dc-428c-9290-5a3220760951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa5192a-42c0-4786-ac12-01ddeb75311e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09488caa-872d-49e7-a6fc-728b8de7c2f1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d2ce4f-8009-4018-9e6b-ce4688512713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43990f57-38cb-4549-8bc9-893d77f920e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ca1f1c-5ebf-4e12-8c44-49f094e8d5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2803531b-ccc5-4f23-995c-9b15812a5efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235e1439-0aeb-4f48-bb97-2cccc46af269",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a8a429-8342-4478-b164-875a1934d71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e922778-754b-4f4e-b53a-14b45a4b9849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0ab4cf-1fbd-4a3b-b7eb-e1e32e9d0284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f978ba9-5497-4554-b076-c07e42f37d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568f6ae5-a906-4567-b9ea-63ee099c0707",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a46329-20a1-4fc8-8db7-7d68d09075fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64974ee-93e7-4647-bc48-fc00b84116fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a3d08d-2355-4023-b8fb-b8bbf9a17341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c11cc57-b3f1-4112-a402-a72541638e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fe2095-9d7c-48f0-ba20-c65ba9051132",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92bcec2-a00c-4a76-b82b-5194b37042c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04a8863-79da-4b20-b0ed-4e0f0a0c963d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3052ff46-6a22-4b4d-9c05-3e06c9a87f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92563bf6-d15c-49df-bf45-7c872d42e01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f70861e-73e8-488d-b9d7-795f3f280f97",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912ac1a3-3838-4fa1-b0da-32364908c1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e7b2a7-18d3-481a-b3e9-49965fe2eaaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0077875-3fdc-445d-9180-9f4d93e8a14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1354a2fa-4541-495e-9b38-b19a93c569bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481d9fdb-12aa-42bc-8553-2b6fcf0c6f25",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3175a5b0-1830-418a-a9ef-2d5a53be2871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d09a6e5-3289-4bfb-9d49-545d06b21a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ada54d-abdf-4fc6-90c4-eae03446b49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18818152-5915-44c7-9b22-b387136f8a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262d0e0a-dab3-47e8-8bcb-95714137bde4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9764ff2-c93f-4753-a01f-19df848db1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9b835e-756b-46c6-bd9d-d13e179d676b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb32b66-a19f-4074-8e16-fb86e3bb0cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8253fb88-0db5-4f89-ab4e-ee5626627fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287e1279-39eb-421a-9891-8b4b75409650",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec47f2a-9ddd-423d-a7c8-9d1ec86f9e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05baec9-7800-4c6f-8acf-8b4c8cf0bea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfd21c6-78e2-43c9-b7a3-a2e5be73972b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec61f7a-965a-417f-a372-ec4b53b3bb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d3e9b5-a4cf-47e6-810f-f7bcbc0b918c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b952d63-1e32-4486-9a06-cfc3bdf6cba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0855ee-fdfa-44a0-a886-832cc46ce5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df40007-a4f7-4994-b201-bce33fff0d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9fbb48-211f-4ee0-a7a3-4faa1a2958c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87c12988-9097-4f1e-8aeb-075f325d1590",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47e73587-998f-4747-80b9-e16be0e5be8c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b3fe25-ba0a-4a3c-8439-7673213016f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7857dc-ad91-4c30-9979-74d1a4979c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bec110-c50c-47d8-b615-1c751fd22444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "252d4a7a-059e-4cfc-861e-8c5e52777389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d06f5a-12b5-4c6f-aabf-5c175cf1c12d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7c7a6e-b9a0-4f01-b014-1e987c73f4c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "41441a78-5c5f-4911-8a5b-d13940a88bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cbc69f-bcfa-4535-a7af-565508d2b3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78c47bd4-b356-4b17-9d8a-7c87e9119876"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "714160a4-476f-4520-aeb2-639ed2e76407",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b7e8377-06ff-45d9-8842-d8286ba98c75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3c79463-67b2-4709-97cd-26ba7702e5e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89604808-2965-4ea4-a69b-ba53f09181a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "004d5888-444c-460c-b045-45e5f7e9b05d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e959ecd-b2b4-42aa-a893-96d14e4f780d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9171ff3-e2d7-4f15-b2a7-16b2356ed25a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36c9e216-f4e4-4be1-8bb6-8046c2d04036"
            }
          }
        ]
      },
      {
        "id": "9c19292a-5442-408d-ac28-d72adb723b14",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1913c8e3-12a2-46b0-9762-ade3baf52d81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68897ce5-bba4-4928-8a9a-03811b897366",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7b4780a3-e20f-4254-9ecc-6766383b81bd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6adf41d3-f91d-4ba0-b7c0-811a7620ba12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae6c56b-5428-4246-b560-62cd4828497a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7183514d-3c05-418c-a3fb-ea5e5d35e666",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee597130-b770-4538-ad8d-fcedb449912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25d03744-eec3-4850-9056-8bafdf175324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cdb929-e2c2-4301-88f0-e34236eaab77",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20623a61-1129-412d-88eb-6ef054364e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881d9913-5f65-430e-a9c3-7d53f86ec68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792f5a11-c8f4-4f6d-ad4f-edc55193bbed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706464c9-d677-4001-91f1-2704bf51b3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8537c4d3-6efe-4399-8249-c6240b043307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8c1261-31a7-4504-a5ea-80ea4159d361",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db07202-1a67-49be-b70d-109df25a6243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36691de5-f8fc-45fd-816a-9bee02e17063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044a3ba2-b11d-4a88-bb07-26362f458ecb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a790fe2-86dd-4033-9885-079aee3dc044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a5df7a-7c35-46c2-aea7-ebcda44591f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df6a010-a70e-4cb6-be1d-625ce0893d6a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bcd162-801f-4758-9c09-62b7f28f8bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8931530-3050-4286-96b6-612196abc2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f15182-8f01-4b63-a26c-896334cf5e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3935280-4cdb-4c86-a289-446fd9cca24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fde6696-8052-4599-8c22-142ade748e3c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deab82fc-7446-49ad-86cf-c8ae4658db62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e778606-ed54-47c8-99e6-795a15bd04cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32ab9be-ddf6-4e26-a801-d69e9dbdd8f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef1e2de-c8fa-4daa-99f9-01f4228a26d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d24ed22-2b38-4b2f-baed-61857cecac80",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076e25cb-e229-462c-8246-fe4fd5b1179e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "625ef159-2819-400b-9612-fffb1ef87c7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a34683-6c05-4311-ba74-6adbea35d481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3776b4-42d9-4700-a589-89bc239a45e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce4097a-cd30-460c-8bb6-9e01378606a7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8564cce8-642b-4b46-b6b9-441c0e3e4f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09811034-4874-40bd-86ae-22165ad0c58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46986745-4be7-495b-8e60-88312e7b6a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1134c9-3368-46a0-b352-39f48f594650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a755b9ae-99d4-49ef-80d1-d00a41783d86",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e787a6e-af0e-4a14-be94-faad9c5d5af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e710622f-e99f-46db-b6c7-3fb2fb5fab74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d148e284-7804-4a47-9805-d0deced64654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a37477-3a67-4783-9cb6-604b854e955d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc6ae9a-aaf5-4069-9478-97e069b8071a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d690d379-a698-4c86-b3ae-a82e82ed1704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cbbb1f-6405-45a6-97d4-88b093efc17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5572f3-249d-4b22-8884-5b076eee50fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a75d64-046c-4859-9b68-c3ab968e0b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47a0b41-b055-446b-8f03-3bf3c829a78d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c169b27-0c72-4f2b-a12b-d1aa9de09b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d9781e-f12e-4708-99d8-5aa2159f769b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a473ff-2d68-4447-a9f4-e89f972ff6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35789d9-a840-4484-a33f-5ac14cd6f540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31ea9c8-db41-4a40-b70c-b6ce8d33855c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9456c4-f53e-405f-811f-d97ecbf64967",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f2fe9d-4091-4783-9a3e-744a9e2a37f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940b38f6-cf41-40c4-b00b-d940cece2c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e77633-dccb-4da3-9e06-ca5987661ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc3fe29-bb0e-417f-81c4-1c2784b0fb5b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcad7ef-f1d3-4df7-848b-af40a9839f70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b460cf-32d2-4505-b69d-4d749b104776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "543f9047-1447-4c71-9bef-772adda7631f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2117d987-3090-496b-a976-98e5855177a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35abcc51-75bc-4cb7-9cac-e4c93aa90ca8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16056088-d5e3-469e-87e1-218718d43771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f899f7-a533-4198-b4ba-0a661a4171e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f8bd24-49d4-488f-8698-6c1f15e809bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb7857f-22df-4cc2-a5d3-b823c3763b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f64ef6-4e0b-4eeb-a3e1-d8bb280a709d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426cf294-9e98-4992-95f0-378612cf4a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6597963c-330b-4b79-9a2f-52f5f0cca287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697e821f-bc1a-48fb-88b0-8a8ab64612a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05928df-e0f4-4f6a-bfb2-1616b2a18a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3174f-f1cd-4ad0-9ef6-36106395162f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33195e39-95be-48b2-83f2-c9c3c66bed7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484cc4a6-6a2f-4783-910f-89abbb7c557c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92e5b5e-d400-4840-af9d-578b3f101cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b349cc0-87b6-4bec-924e-a6dcbeedad83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8111f77-1610-4606-b15d-7a9c76aa4399",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd191d8-56f0-424a-a092-13fb2ff481fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869543bc-38be-4eaa-8a55-09ccb38ff7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3e96a5-db69-4b97-b5cd-9bff8e5161bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd5dc2e-b455-4fad-a29f-a0fa5de7841b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbc923e-3fd5-4606-9ea4-3e84c00489b7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f230dee2-a504-457d-afe4-4a47f224a6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3cbead-fe9f-4dd3-9b55-a4f6cdd242ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f352655c-485f-43e7-8e96-d0ae185ac332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a1bdde-2478-4b2b-b104-710878c4cd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4290aecc-c43e-4ca2-9964-1e1a19af44d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf33b2ba-b107-4f9e-8fe2-2f6096fdcfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb4fd0e-d9c3-466c-b0bf-e21557ca8885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bb67ff-8baf-4890-b1f4-a2ae1747bcff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaac817-3b26-44e9-90ce-7a85f56f1f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4932c4f4-8ca9-45e5-a4f5-fef9d7c735b8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8682a68-d94a-41fb-a2c4-6d833d300fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a418e3-3286-4519-9156-8e16e080d665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4383a28f-ba58-40bd-a300-b1c32991ec37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe4a78b-6273-49a0-a43a-6c70eec561eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacdbe04-4e75-4cab-b147-56fc2ed69e23",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd16aa0d-bc9a-4c3e-9074-37f9eb6672da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b945a99-1f49-4dc1-b9b7-ac9a91e46d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44561e0b-53ca-4065-a588-ebb834ece91c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd2445a-f3dd-438e-a4ef-697b75a30237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2d7bfd-d40b-4b88-8b0e-5fdbaafcf7db",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05cebe7-b7b2-4547-8873-7beba108608e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba4d17c-8696-4612-8736-37e680c9467e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aa693c-4838-40dc-b34d-ae5eb5536371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12abb95a-8c0e-464a-b5aa-437414e04b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7155d615-618a-470f-ba2b-103c5c1bf70c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9712f1d7-0ba1-40df-8d9a-1efc0dfb6100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b53b3d5d-148b-403e-8225-791ba982c4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c83fca7-ac94-4990-8a18-98eded3b6994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63214243-d780-481b-af0a-5474826be9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c32cafd-0624-45c2-9bbd-203d8fff4520",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7916b6ff-464e-487c-94dd-ba67e44b93e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd82b30-938e-4a72-82f8-450017e911d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90729a2e-6988-4fb0-b8d5-7fbbecbaaab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a306ad-5d72-4e8f-92d0-0568037420bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb10724-a13a-4b95-8500-0b4f999eafa5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac56827-a730-435d-a933-45ed51e8fa2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04e18e04-39e2-400d-bf17-1a7cce8ee116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6171582a-2369-4576-93b9-899bb7bf1d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf535e2-2585-4318-b99c-6def75990c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83613a52-cb3d-4c82-bbf1-d5f440c680ba",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0fb769-576f-4d63-92b6-fe1164da82e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1bde4f-2ad4-4458-8666-3e41b82eb109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca14e5c9-0b6f-46ec-83f6-400e9fd69941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae10f15-440e-4972-9596-171e7513676c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd17ae6e-c834-4ffd-aff0-ec2367980070",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2209ec-3dad-4316-81e8-6e8cce77cbed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c867d7-34a7-4893-9e8c-61adbd372450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a8938d-8c96-4813-a8d8-a4864da55532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420f83e0-4428-4189-98f6-b1bd60743d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4f8857-a9b8-4a4c-a7d7-e765cd4a28a3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2e9a25-837c-4fb8-b8e8-43631ac9f26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6871778-2578-475c-a876-49f56747f359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e09040a-0f3f-4475-8e74-dbf00c79ce4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a19a9890-4a40-4f26-b6b4-1d1b41d6b3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c5c17b-cf5b-436f-94e5-a33ad553fd1e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce99a0f2-0db9-4cfd-a4ad-afb221fa35c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058cb9a0-c92c-4cb2-9fc5-1d2d5fac28af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e3af0a-cb3c-49c1-a6e6-d31f3b97fe38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0a18a1-190c-49b7-b36d-0c84e974344f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e465c1e-fee2-4800-97f4-893ae3d456ac",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc92c8e-854b-473f-b978-d372e28962a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549ca8d7-45d5-4d9e-b979-0b7cc068c3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3f1a8d-0fbd-4265-9228-ebc1da854d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b941aad-57d5-489f-88a6-5417b2cf35b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2918564a-83b4-44a4-b28d-b2514ad7fbc6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b604d89-2fd2-464c-bc8b-42f8af86cdb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f839e933-5c00-4042-b95c-47b6e43f5a7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79adbc62-5074-4f21-b932-0ea7f912e814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49f7ba2-ab21-4463-99ed-ead32aa4d6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6081985-05b7-4647-9777-1bad16833e36",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fc054a-d30d-4199-b2f8-51aa15d29d17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74173b32-605a-4529-91d3-e7e5a5c1e2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31508398-6b40-4b90-8a41-9d09c4316af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ade13a2-c078-46a4-ac9c-9f98477f6d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e09cea8-8cd8-4a3e-aec7-46d66b4396a8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4b1ba3-2517-480b-a141-b2565b4d9eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c5384a-8d84-489a-bda2-e2166eaa7565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501d05ca-c058-4be8-9acf-d445e25525f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4dce62-c037-4e43-8160-aa05e3e87eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c11c0a9-ba54-477d-868a-b0f55f1ab4b1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0f96a1-cfb3-45e7-b932-fab8b3e9e9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04b59c9-6cb8-4694-a4a7-b8bd6a843cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929313f1-e162-41b8-b2f8-5eb6484cd10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6602f528-0ab5-4e42-9146-ca26f6285e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ca1c42-2ee0-4028-a3c3-21ae3cac2124",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d417c3-6918-45de-b36e-e81a7642ace6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244cb5fc-1302-458f-95d8-19565bfad460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c62d28-32b8-4d4e-9a95-edf81968e81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07787092-a4ea-4a39-9704-b72ba03de700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48f5e81-c2c9-4f38-a805-3653a2bbe67c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a6e803-bd5c-4918-956e-7324c8e6492e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7a0688-cd2e-4c1b-8639-4b29057628b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8258c7d0-bede-4a76-9318-14978fbaa595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7f9d6d-da3e-4fae-8b89-cc1029b8a5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d54fb68-0c99-4947-95e7-9e8bb9c34acb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c1d0dc-af83-442c-8d1d-bd6a25c52f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ed40d4-6f08-4084-990d-4624d7ab1862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d747da36-4bc3-4580-85c4-a4a20b8983dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eae14d4-56be-43d8-aebe-fd75d1a6f4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9092e016-7b7f-4ee8-b311-54b430513a75",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed8aee8-9af0-4d32-a876-823278b5f791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17da206d-88b2-4b73-80bb-841a2d9fdd0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3777d689-5c19-4f4f-8a90-e838e9ef667e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c33712-4279-47a0-bcea-3829b41e930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64f7c91-ee03-4b3f-a8b1-b8ff37386197",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181dee9d-2a78-42ea-9f7f-ba138b37b856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2aaacd-84c1-4066-bb20-1321348ff774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53ceefe-4de6-41f8-a160-f93e9af05c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147c92eb-4873-4e26-bb1c-b3f234543758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f37706-6760-473b-a3d0-330c4bbdb77b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d1e69d-aa83-48ca-a6cc-483a541ddfc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc83009e-93e9-45f8-9d7e-1cb7ba125057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d691794-18fd-4952-b641-3505f0e847cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3045817-9b2d-4352-9faa-6e12b950aad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb68ed3-0c46-4617-b2c3-9d8a1cc99b45",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1613d4-10a0-4abc-8cd8-1b8371cb8315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70ecb8d-86dd-4f5e-9971-ab4550fcf154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceea6c0a-7310-41a3-b331-583fe361626b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93f8b17-e886-458c-acb6-1002f3242034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db19f3c5-c45f-4e1f-b67b-8683590870a1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabc3599-cc2c-4a09-bdb6-1eeeaa8ee0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d3db4d-d770-44e5-bc37-8d4465934bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7809e449-54b1-4dc0-9370-8be3b80cb13f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9817a555-3ec6-4abe-a1fc-4223597a3249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896bc688-06da-477c-8e35-dbfde9fe753c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbaaa01-7beb-4007-9531-00a41f55adf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc9bd26-cf50-4f8e-9880-c034bda347fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea2c2f2-13d5-4695-b56c-4ec01605c7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cb2829-bd26-446d-89c6-bca76a41d605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb793e79-a2f3-4aa5-b2a7-111a2f97c825",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17301c3-4aaf-4f28-bf73-9942e8011727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccebfb8-8fcb-494c-a4e4-303e06d3c4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876a6e42-db18-4066-ade7-fda8436486f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4c64de-9054-41c1-96b8-dc24f4a96f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5d670b-aebc-42e7-9c2a-70f476d1d465",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02260a70-b075-419c-86f5-90325c4a4783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6df7d81-6f21-4bce-90d1-8223487bdce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4f725f-1c12-4efc-8355-49b86da822da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1e48f4-75bd-4a3e-b23d-54e93d2ef364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31beef9b-a410-46df-866d-e29bf483e1b1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fe7651-5efd-43c9-b47b-ea4c2ed0d7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd234e5d-4713-4300-b17c-572b205575b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5cbb74-c816-4d28-8f2a-601c6081cb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5df5262-b7cb-4076-b4b2-4b8b87884a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b896279-3e85-48b6-b3d3-5319f2e50d0f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2bd4c0-95a5-4d37-bd7e-c03ab25e86a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821186f1-b3e4-41b3-8dac-5dc78f575617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99868831-970b-47a2-b52e-a147259e01a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317eb1bf-dab7-485e-a075-4acb44ba03d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d137a6d9-a4b7-4f7b-bfb0-824caf7f7b4e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de630f3-3931-4b0e-bc06-992aa125fa05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849cea9e-077b-4c25-bd71-6ba7d4b70cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81d6ac0-76e7-4d4e-82b3-19d24db54ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41039829-40b8-43bd-adc0-e80418fd8a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71753c4c-0ab8-452d-9323-ed640bdf10e6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490d454d-dd81-4dec-87ac-c3f7e7857eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6aabff-8d83-4418-b1b7-00ff48e4c81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b72fa7-e868-4450-98bf-ffb473fc1c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd23d4a-1d60-4920-89f5-b7a42ca30b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d17ac38-8924-40e7-a707-2468e8b6deed",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f460fae-53a1-4491-bdca-c1c94328b188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc4d7f3-a2a2-47a4-a50c-38e3c71aaa81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31187d70-52bf-4bc3-ab49-eef9abc88f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30f408f-0711-42c4-8fb5-f191e15f24bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb2bc38-06b4-4159-bba2-1a90104d19a4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b1d4a7-664d-4368-a59b-530422185daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c78ff60-2aec-4603-8ef3-54de351ec249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddcc755-61a7-4c87-ab7d-0c860e836750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f154d6-fc9c-462b-be06-3c5aaf90216c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f48ee1b-c2c1-421c-b357-af237a956446",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a31c9c-2c84-4a03-96fd-0fb328dc0a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc12c38-e2b9-4e41-bb7d-35f630b08f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce82ff25-b471-4731-ad95-1d3ad0210bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d91c27-f6bc-4665-985b-7bf2f987a7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875943d6-1217-4d47-a884-4c052d5e68ac",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f29658-618a-4c5f-a5e9-fbf57b9b06a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f9fbf9-6488-4971-b6b0-12bb2a4d6cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6ac12e-cf41-44dc-9641-8f75423dbdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc65e9c-8eff-402e-b3db-093878b30ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae546e0d-ab9c-49d5-b29d-ad17ebfe6501",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d0a2e8-81c3-419b-abb6-314665c94207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41564e5-a0a3-461b-bcc6-f14901f99a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134bfe02-3856-4d7c-baab-4a5518c278b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37595ac-1f8d-4a03-8fae-8255b0a93ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fd77e7-77af-49ba-818e-c96316831a01",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b9c257-c4e5-450d-bcd6-134af542e7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e55cba9-6deb-4729-b296-e0eb7af6c0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b718a29-22b1-4500-91ad-2704072a4a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15e737c-e4e9-4b26-9f43-6c4bdd26b935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4347d7-e01d-476b-924f-4b563c0fae02",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05e2cc5-b663-4744-87ac-b621896e0bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c671527e-ade5-4c83-8387-c4520ba233d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2dd0c5-c3d9-452b-9c21-5508581e613f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddc6ce9f-384e-4a87-8298-db9864ee234a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45462fd-386b-4450-84b5-a946963fb225",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94230037-bb50-4288-bde4-f80c2d24f253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716736ea-8d55-4a1a-ad64-4c3193493d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd745ae3-e538-49b9-b9ee-a293546d928d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2be3b2-0237-46f3-a416-46ed872fdf54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d86c4c7-5950-4fa4-bde1-3e2b540f448a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a7fa83-3f2b-44a6-b3ed-cfd3ed0ac675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b608cb5a-7fcc-478b-9c77-fe3c0334df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d5e285-c27d-46f4-b382-465ba5ec3b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d1a788-afe1-4d9f-8a42-7a2ae9370830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de26a03-5a56-4d30-b5bb-06079149be24",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b75c89-b69f-457e-9be3-1aa28749de7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bee5141-fe8b-433e-8198-c4b29dcee088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e79140c-2122-4cde-86da-edc09c1b02e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb4c44d-5f93-44bf-a31a-8778268ea84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f377451-4a98-4ae9-87a0-d72f5dc04548",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcdf873-1844-428b-9177-a1a08abb5461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4282af98-a8e1-41f6-9332-d2cd2c988b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549f8468-bc04-4ab4-b4a3-b1e093a39c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01694c29-7cf8-4aa3-b4dd-64dfad1ea5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa171bd8-e974-4e2d-bfb9-1dc4b96970ed",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626f6140-de5a-468d-91ad-cc8f089a7ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d32593-f2ef-4669-ae69-9330d831645c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af784de-0ced-4abb-9f67-221c4aa2f428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945e88af-3021-4044-96dd-2474c457aaf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4942ccb-f141-44d6-8417-311670b0917b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434df5b7-db2e-4aef-817b-20440c17bdd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d8d7a3-a7c1-406b-a1f9-99e7260503b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1067f58f-7bc3-4a7f-958c-b0acc23ea980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bc11fd-d613-46fb-9c03-ec4f6e836df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6446ff8-3998-415e-8520-bb3cdf2ecbea",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e435ba67-91e4-496d-8fc9-42ea07cf55e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec07126-0e36-498f-adfa-ab16f96601c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef991f-b45a-4cec-b788-5e1ca04b7251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f588b2f-4531-45b3-86ea-75c762d5b154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27066b04-cd6c-4cca-97d7-04a3c8e69147",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29917ab4-aea1-4c67-bca0-0888a9f22341",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce32f82c-e5cc-4c09-b932-ed7c8a81c32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a45995f-feca-435c-ae94-c737feb951c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089bd0a1-d45a-4f4b-b0ef-73b0b18b4014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec900309-038d-40c4-beb6-36def789ecba",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa8072b-0f58-485b-93ed-2b062d3266d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe40f5e-1d6f-4c09-9d3f-247550c721a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3878445e-4abe-4861-8332-6d4b9e0e86bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e45a3d6e-8ba9-4651-9d61-a30f9ca4786a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377a4b35-06ac-4764-acc1-529a560d6d1a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153c701c-1e50-42ca-b2ca-f1e753d0d686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "637c7971-333f-42cb-8d17-9ee9a1b7034e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d655c0b-96ef-4b75-8648-7a7a1d5ec2ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901426fe-1fac-4af7-8b48-a3be892d548b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d518f2-566f-4d20-8144-7951c7c67dfc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de8fb0a-b73e-4647-9cfc-1ea0eaa66353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47d7c0bd-48c2-4d26-b877-13352854e836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4db344-262a-4a19-9778-9e0ea54cd06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e02756-fd14-4e23-b992-bfc774d6c95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f41e1eb-44dc-433a-9668-8288e2a0fa7c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92de13c2-5058-4b2c-8171-3a74b9bd6f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b3cb566-a929-45f1-b42c-60df19688d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa1dedc-bd97-4cd2-93d3-987e552a837b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125e8d16-d630-42ab-8486-37dd0bea75ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ea6e78-181c-47a8-8ef9-88dda97b640c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c5b8a4-9db1-4ea5-ac9b-fb77115d6364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c29822e-a329-4ab6-ba25-009d6f9d2647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b20bbf-7001-49b6-b03e-d0f46456590d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a89cb5-a6e8-4bcc-9358-132935447750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be6557d-3b8c-4ea1-8fb9-04b1e1fb9e72",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a9440d-b22c-4f6b-88e7-bb7cbe8b4b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b3ff3d-aa8e-4343-a2c1-a700bc7b2b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1a8fc8-8653-4abd-a6aa-c05f6e7ee9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b46fd8-f856-4c59-bbb5-5f56a14ca44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b731650-264e-4525-a787-5f221beac14b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba2b1ac-0008-4f67-afac-16ffe6d7480f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f42d6e97-219c-455e-8bf8-4e2618dcbc04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949c50fb-718b-4790-b0a0-39003aba5ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bed862-5d26-4ab1-8ac3-44a6a8628e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338f8149-dbdb-4539-b2c8-ac65399b3aca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3115fe6-f42f-4b0c-b912-a89af91d9e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e7f0747-79b0-42a3-98b9-9697116d7e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1955e17-5ce6-4457-b726-36d478c754d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae4fba4-daa9-4cb3-8537-2d39e5bc61e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5feba681-136b-421e-a2a2-bfb471237d27",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15e1999-ba65-4447-86fe-87e97eac3ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26eea82-2535-42a0-ba3e-5ce464e81fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0c98e3-0d3e-4724-a673-2a9033c0aa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2da4f49-e55f-4b27-a414-34ffe65a3d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e43f6bc-e2c8-4195-b070-824eb68a5a6b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6ba392-26a1-4175-af3b-8d9caa8984b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679f0536-b159-4d5c-b39d-7415d2948a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cc734d-6728-4fd9-9a06-7c5cb2878784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d21870-e9aa-43df-8aa4-301052b123da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac84b80f-63e8-4518-b559-de276eae4418",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5d89b8-af6f-446f-af6c-f2f6f2392050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b8c62c1-8d38-4057-8b0a-5fa513cc38a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47a1dbb-888f-4054-a5c9-1e0ac257f4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5e333b-440c-4e9a-9ea3-992996671d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c61953-60e7-4596-a908-33c337744e40",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b3d879-0e78-4a7f-9581-8a15794e2f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8ed1012-ff1b-46e8-b05f-eb6388b98043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59a7281-ee0a-445f-ae20-9694fd7074ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b830c791-0c20-4a2b-a99e-98dace286df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d63ad45-c1d8-43dd-91d4-4f7642237afe",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d66fd9c-2921-4fba-89ea-abecb7a1e3d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffc04a16-d4d2-468d-8048-748fda3b5761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5cec93-bde1-4464-9854-83f12c369149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cb317a-bd6b-4382-8baf-813db2afc4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf82d88-d5d6-4839-b361-385fd28ce286",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8075863f-f8d9-4f34-8f07-41688efdd86f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857b5c95-e4bc-4906-a1a1-e3a9125c2f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100e7424-0a17-4a52-972b-3b268f342e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8317fb2-39d5-48cf-aec7-4d8ff219e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6b8d8b-5ede-469f-9ce6-ccd4401edb27",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e115a3f-b50a-4eec-9c61-bdb0da4b6c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64db11a0-44eb-4b0f-92da-ac3ee3110778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b223ffb5-1ec1-41c5-a14b-eceb81ba0d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23535d2-71e7-49c0-bf7a-8ccca5dd3020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e43a4d-3b7c-4c20-a948-32eabb84201f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d441a22e-e24f-4d45-8de9-5997da650bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c4155be-9382-4525-a62a-65b29658e798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f96c210-ddf9-4651-a0ef-fbadb922a65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ea2c27-9591-41ee-bf77-9fc64d2ea2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae88d3f6-8d63-4b25-856b-90cbe39c7e60",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f36670-e4f0-4f59-b99f-9f2c43c30072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50a84b35-1426-45f5-8d6a-70f9af36d8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ffe490-6bae-4a9d-a91f-e14136367505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3945d4-fcab-44e9-a2a6-e0c5a2579ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3a45f7-1ee1-4020-9a71-1f8e7e6cae2c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28855fb4-07d0-49f3-987b-c12fc593b925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc8becba-c0f2-412a-93b2-040690d74457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef3b1a7-6ef0-4c09-8589-6a22642b08d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6855f539-ba39-4398-b269-111db8859dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b07e969-c90f-4c24-acae-3ca96ef95750",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bc76df-05e2-475f-b2b1-a7e6da64a34e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44a11d0-7a04-4e76-bee4-413b4f84fae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23607a9a-bdc4-46ff-b554-ca3ce48b99ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a135573e-1a92-4b6c-8715-0744bd75ca75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c5c5bc-7b6e-4a13-a8c2-0727716ba4e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e887c-7053-4673-a72f-b0d86d4a06f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6b99d58-010d-40af-ac6c-a85fa10c60fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b8a295-4e00-4f17-a4ef-944db243f2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed90dda-b6ec-420e-b9f2-046f6bdb6906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cb416c-7fa3-4eb8-97cf-dad5a148f169",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1f1eba-b374-4bfa-ac82-b8dc5614a144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a384107d-ce26-4281-9dd2-56f2927ebd85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8d05e7-0725-42b8-851c-ebbc5f576406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034b44d2-8164-4a7f-a14e-5d64ab1a8f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7809db73-890e-408d-a910-4f15b10f74e7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645d6993-5447-4096-8bb2-f378af3466c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a9e5b6-815e-4523-bfe2-803f854fd04a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f7ecc3-cb93-48c5-82ec-5bad069c840e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e386f8-97c7-410c-9535-9a09fcf92291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd3fba0-670d-44b2-908d-c542ab9bad13",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b1d636-5fd6-47b3-9b74-824a17a0e4e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68323f92-6d16-459c-8df0-7160856a3ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dd785b-4f6b-418e-9f70-d85e970fed92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ca3c80-a0c2-4732-9831-243c2b2535cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4823147b-9284-4580-8f77-f9e87898af0b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f568a66-93b5-4286-ab0c-2248d234f3ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae777dc-101e-4fc9-bb5a-fa81b9569142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9ddb9f-d046-41bf-9a5a-ce95c1670bf6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27329431-f4ec-416d-b7b2-332c11fbb60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064213d0-8868-4f2e-bd4e-2e3e48581bf1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744defb4-197c-490e-87bb-aea8de1c81c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df33f35-fa8e-4869-95ed-23d7f069c138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937f261a-066a-471d-9255-a00c658400bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca5749f3-4145-4664-87c0-9965556aeeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bebd09-09e8-4f21-82cb-c9c44781613c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba9f9cf-58ca-45ba-8c72-7bf7efa5e80c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830466f4-38a4-44f7-9b6a-46c94ed050ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b2a34f-bc89-47ca-91ce-459b17b50025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a54493-a5d1-4833-8dab-eff27d414bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48c90df-27f9-4c44-ab46-3a38857f3dda",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470fb7b6-63a8-42f7-9fbf-c06caa1b0140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2ee10a-145c-4252-a246-04d833069950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7810b1-1f33-4368-bda0-ef785620c1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e4926c-5dfd-4957-8922-13a8ab0a7200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa7b4cc-3c36-469c-be70-186b2f1094ca",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2564cb7f-ca2b-4a94-8723-3b86b6e5520d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f342bc3-deac-41a0-88db-78185ed6b828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38347f5e-cade-43bc-af1d-543121ef1c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0941ebc5-281a-4097-b91a-ea1fe4bb1645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fabe96-0cbe-4de4-9f91-d20b33f2a992",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788c34ca-7d20-4607-939c-c7e2f91db068",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9d921d-dfb6-421a-8bdd-8625d4fabffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937f6eb4-716e-407c-a206-99441878acea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0014dd-70d1-4334-8706-d22558dde17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f7ef9b-a700-4097-92ff-f2cc6f10d11f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fc02aa-d1c1-4ef4-b5f2-65e020a0d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "991e2446-76d4-4de4-a3c5-445416088797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa09cbb-bb0d-4d35-8a73-ed2bf498b105",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5480d-7164-44f9-953c-041baa2aa82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c73dc68-e84b-401a-9700-7be83453513d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bb6ef2-a72b-45d8-9694-9b0c86dae0ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "935c8f6a-1180-4df7-ad27-1766e4044784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae8585b-a680-4c4a-ad9b-620f5ef41991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c339c4dc-02a4-4352-b6f2-8ac3bf22961f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "664a23aa-10b1-42f6-b9df-673b7621150a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75f89c8f-e11d-466f-bc11-1746755792f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fdb1fb7-90b4-4a6b-91fa-9b3a769363c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80b8c0a7-12d6-4326-bd0f-ac2aca2f0a46"
                    }
                  }
                ]
              },
              {
                "id": "7ab4be2d-5577-4acb-909c-b1f31d2de385",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9d5723a-7866-4fca-a592-298331df4521",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ff122d-0182-47f8-ba30-14a746017de5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b7d4780d-87fd-410a-bbbd-37d2aec4390d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4628bb3-f257-4782-92c8-5a87818f1ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a13d3bd0-faff-4fa3-b84e-6b1a6e419a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ee0fe8-e959-44b1-b249-bdd84d4b5ec3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b24cb88-1399-4f5f-999d-a741c3c04537",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d273a0c0-89e2-427e-96fc-d189827acdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8030fdd5-4b20-4a78-b3ee-1dccef11e664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16e7bd40-8cbb-4bb3-bcf4-ea152b8b95c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9825ba09-932b-4533-b56a-3d0f9927330a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca83af66-0b27-4344-8142-c79ae7249d94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe5a1de8-fe0e-4fc9-a83f-930511122cc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67d92706-a513-4ea1-ad1b-0af135d444d8"
                    }
                  }
                ]
              },
              {
                "id": "0631a74a-1b13-4b6d-8c2c-f1f559cfefe6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "52f80fbf-48dc-46a1-94b2-98ef2de03c18",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedc0d1c-2929-4497-b755-91c23d3f1476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2742b81c-5334-4257-be15-9c6f7e993e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8bed1d-f935-4981-8bb7-4974ed50b651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48b2847-5cee-43bb-bb71-f07e7a445dfb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4499f6d3-0b06-49a7-a605-f96425e242aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eaeb479e-4ce7-45b0-ac1b-934d2c67d3bd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "719511af-f278-49b6-9b06-9f225fb3233c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7f681f1d-1489-4c28-996d-b9a9dc2b78b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3baee8c-6481-45e5-a369-a89669b8b15f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c28652b5-0b03-4906-be4a-8460f6ec6575"
                    }
                  }
                ]
              },
              {
                "id": "458c5476-65ce-4386-82bd-2938fa5c39ec",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d0592ad-55d7-45a1-918e-a5b7b255e3d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69c72562-2b86-437f-a837-3a2316344f76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c084418c-fb3d-47b7-8444-d21e0a9ef120",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d725d57d-949d-48a3-b04d-8cf186675487"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f2a450f-c35d-4fce-b5f2-c7ff80af7cb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "43a3956f-89ad-4850-b7e6-e31e507d9431"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb167346-0b46-4b89-ab7b-8c7f343dcfa0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fa94079-2947-4c5b-acb7-74c94c981553"
            }
          }
        ]
      },
      {
        "id": "e3ce2292-eb31-41b5-94b5-1b3ea73446cf",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1365920f-a1fe-47a1-b6a0-3537082adbd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63f1815f-2724-4387-bd6a-c944530dd2a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e670f4-db7f-482e-9e3b-8150b1d9a53f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa89e2e5-4433-4c8c-914f-1b9543ed29d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9bbf5d-f62b-46c2-80ee-3c050a85216a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29003ed5-3d19-41f5-a57d-f7a319d106c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc068a11-3a08-4a87-865b-0fd017b45187",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f487a20-fe40-4d84-b495-a47b8cedf792",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "351efbfa-69d0-49ba-a436-2ec8b82329e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff02601-eeb9-4409-a3d9-555b95cc9910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a67ed93-a4d5-4f90-a84d-d193d6426403"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44308280-0cfe-4dd1-9e49-06e29956acae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6753da2-9152-4685-b08f-f2816c5a19d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61efb3ac-6b21-455a-afb8-25140ba50a2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ed0b4a3-0ac4-4487-abed-ae0c1ededfa2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "626cf5a7-4092-44ad-9758-1ca67316d1a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "96a8430c-dc64-4548-a96d-aac7f3856bee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "851d40d2-4199-4bff-8198-6da27598bbe0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a2b9723-8236-4f0a-a8b9-23ca5930dedc"
            }
          }
        ]
      },
      {
        "id": "d29bb8b2-8b96-4e30-89a0-0cf816544781",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dd032c6f-c2df-41e7-a244-43d463691d4f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "783d32bd-1e42-441a-9d28-0ed1f30b1ec3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84d9221f-f995-40e8-9c36-52fc90eaae85",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca2b5ec-e6e3-4a5e-a3f0-642fd48f9c6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6ee87d8-43bc-4bd1-8241-7486e880dd9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20f40af-2751-41f2-9809-a1346f484cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18e96a0a-a4ae-4aa5-b94c-dbc294a3e4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499f97a5-2259-40bb-9c19-83c766c0628a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f258a237-766b-4c94-8111-74143a1f42aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "546d8754-cae1-49fe-affd-3d0e81667a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dd0de1-e25e-4f26-9f47-500e640596f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90bb1a8d-bb9a-4e66-8b21-92c6f46cd55e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02967096-1971-4b0a-8805-b1f4153754bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ee7551d-35cd-4ee0-8597-a83997ec2ddf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "672f13fe-75ce-48c5-ba9d-e93dc9b32b49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40530b58-ffa4-4893-ba61-b0cb794ef2a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6e4642d-7759-4240-8c02-fc74fb376050",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "81a432b7-b726-4de1-bc2a-8619f9079aed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9a84dbf-14c9-411a-aef5-26f48c2d367d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94cfbd1f-b5f2-4dfb-82dc-910d2986d490"
            }
          }
        ]
      },
      {
        "id": "2b487274-e52b-425c-9462-a4aaf422637e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "23c97227-666f-425b-a9ed-081c538d889b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dbcc960-b1fa-44ce-81d5-44bf476af5be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8736ced5-366b-4fd4-8365-6f06fce32639",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f966f-b0a0-4358-b6c0-475ad2c535d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d20cd320-f18d-4fd2-bc88-750d550eacdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be206f9d-adb2-43fc-b6b7-ae25fe7f88f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a66fe8a8-9604-4a1d-bd31-c56d70aea976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f057acd-1c87-458e-a270-9f8376c14488",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2606e55f-9130-4b48-b505-401d45565866",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd072fa-88e8-47dd-b724-2d79f4075288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6f0110-806f-4679-a5b0-235b4ef74f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4a1865d-feff-4db9-a096-de0742ad481f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dedb822-2814-41ff-946b-0733c32b5636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cd8548e-086b-4513-a422-e619bd82ba9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f5747a1-5aae-4811-b2f5-a9a54ffc57cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5f85c7b-a30f-438e-8980-e7ba89fb1e04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53605480-afa2-4670-81f1-fb652bb3df88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30bfafa5-1af1-4532-9274-f77e3e37113d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8574d3fc-8d1c-483f-9293-0f62f9be8cd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76df536d-9205-4242-bd58-1264bba1138e"
            }
          }
        ]
      },
      {
        "id": "a9dd593d-711c-43fe-9dc3-730ade353da8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "075215de-0e97-4b59-a97a-1cc7c70a2f5a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f356366-8312-4472-8ba2-b15d78d28f1f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "563972cf-521e-4333-a818-a5a12ebac628",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f480cca-8583-4781-a5fd-7b1b3f2cbf47",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb68771f-92ba-4c19-9af9-217ec61127bc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 365.7923076923076,
      "responseMin": 15,
      "responseMax": 21334,
      "responseSd": 1540.3679565218479,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684715944045,
      "completed": 1684716051770
    },
    "executions": [
      {
        "id": "94e6d79b-a8ae-4a66-b8ee-fb93696471bb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "750f3b5e-ad5f-4ca2-b9e4-91559c148685",
          "httpRequestId": "ccb0c572-1819-4a8b-84bd-fac3913551e8"
        },
        "item": {
          "id": "94e6d79b-a8ae-4a66-b8ee-fb93696471bb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4d82db9d-01aa-4a55-844e-e978b9042480",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 0
        }
      },
      {
        "id": "07cb4813-fff1-4794-ac7d-3d8a01591310",
        "cursor": {
          "ref": "bcc1f366-98de-4d37-8a4d-6528570f3b16",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "965c0066-ffe8-4b36-9ebe-0731534ff77f"
        },
        "item": {
          "id": "07cb4813-fff1-4794-ac7d-3d8a01591310",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5b56941e-5fb0-46e6-8a98-542accf8e7f4",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "91217fec-c1f5-42ae-94b6-41bca02948b3",
        "cursor": {
          "ref": "5308fc38-b79e-4de9-9535-55eb38daab4d",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9ae339e-14e3-4ca4-a4f2-22ecac3a4978"
        },
        "item": {
          "id": "91217fec-c1f5-42ae-94b6-41bca02948b3",
          "name": "did_json"
        },
        "response": {
          "id": "10f84986-b891-4a18-8248-0ee15210d390",
          "status": "OK",
          "code": 200,
          "responseTime": 851,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708f1ef0-2857-4546-b300-f4705b420366",
        "cursor": {
          "ref": "e75f225e-d37d-4619-9817-c35998357701",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "038d024a-d02a-4846-aa37-14540f4de403"
        },
        "item": {
          "id": "708f1ef0-2857-4546-b300-f4705b420366",
          "name": "did:invalid"
        },
        "response": {
          "id": "329feb41-06bc-4218-b58e-71bfbd7ae7c5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1450,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "708f1ef0-2857-4546-b300-f4705b420366",
        "cursor": {
          "ref": "e75f225e-d37d-4619-9817-c35998357701",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "038d024a-d02a-4846-aa37-14540f4de403"
        },
        "item": {
          "id": "708f1ef0-2857-4546-b300-f4705b420366",
          "name": "did:invalid"
        },
        "response": {
          "id": "329feb41-06bc-4218-b58e-71bfbd7ae7c5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1450,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "46903a6b-b87a-40ac-bf7e-5409666f42ac",
        "cursor": {
          "ref": "7d92dd3c-546f-465e-baab-831ae96ffb98",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "99fdf06e-d659-47db-abee-e1fc15966176"
        },
        "item": {
          "id": "46903a6b-b87a-40ac-bf7e-5409666f42ac",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bd9d6386-339d-4baf-bc1e-bcf88c05f7fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbf939d-b78a-4c49-8848-62344c855328",
        "cursor": {
          "ref": "ac30b1d0-8683-4059-bb63-fd3f4f8f3206",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ab625cbd-85f4-492c-8bb6-823ec8ceb984"
        },
        "item": {
          "id": "cbbf939d-b78a-4c49-8848-62344c855328",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6cf622c4-6a9d-47d7-9bbe-2eb09724b832",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f8afce-97da-4ab4-9f8c-0dd90a6fc11e",
        "cursor": {
          "ref": "a37f242e-89ea-47ba-af9e-bcd2c70554d8",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "767bb76c-9267-4250-b7f0-051835b5b672"
        },
        "item": {
          "id": "38f8afce-97da-4ab4-9f8c-0dd90a6fc11e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f66a143c-eecf-442f-b726-e7a50385205f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7b574b2f-017f-4266-a962-f7555c076585",
        "cursor": {
          "ref": "678cf294-3215-4032-b40f-367417fad669",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "55d95064-3989-4c35-bc3a-c9126532f12d"
        },
        "item": {
          "id": "7b574b2f-017f-4266-a962-f7555c076585",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3b9e4264-c5d6-4aec-b0de-e2dfcefddec7",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7b574b2f-017f-4266-a962-f7555c076585",
        "cursor": {
          "ref": "678cf294-3215-4032-b40f-367417fad669",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "55d95064-3989-4c35-bc3a-c9126532f12d"
        },
        "item": {
          "id": "7b574b2f-017f-4266-a962-f7555c076585",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3b9e4264-c5d6-4aec-b0de-e2dfcefddec7",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "55ec9a93-2504-4d1c-9559-3de16bd546c2",
        "cursor": {
          "ref": "1d16022f-94a9-455f-8a57-e20377f27691",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6958bc9e-7d52-4e9f-a903-51e6d8f2dc1c"
        },
        "item": {
          "id": "55ec9a93-2504-4d1c-9559-3de16bd546c2",
          "name": "identifiers"
        },
        "response": {
          "id": "65d28523-6949-42ca-ba0a-0f3afd6bdcb0",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019de4c4-bffd-4b8e-91e5-7c266e9d8594",
        "cursor": {
          "ref": "65c8dcec-65c4-4b8d-acdc-b32da9eb2962",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c672087e-7245-447c-9a49-df27225a82ed"
        },
        "item": {
          "id": "019de4c4-bffd-4b8e-91e5-7c266e9d8594",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "548e5723-8faa-405a-bca8-0ccb705181e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019de4c4-bffd-4b8e-91e5-7c266e9d8594",
        "cursor": {
          "ref": "65c8dcec-65c4-4b8d-acdc-b32da9eb2962",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c672087e-7245-447c-9a49-df27225a82ed"
        },
        "item": {
          "id": "019de4c4-bffd-4b8e-91e5-7c266e9d8594",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "548e5723-8faa-405a-bca8-0ccb705181e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4987e980-00f5-43b7-9204-d74940d98a3b",
        "cursor": {
          "ref": "9b63c701-4758-4e04-84ec-957a568cbe41",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ff1408d5-cff3-4123-8d5d-175731f819de"
        },
        "item": {
          "id": "4987e980-00f5-43b7-9204-d74940d98a3b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d87a512a-7c44-47e6-bf10-51759052d8ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933b8791-c6bf-49f4-b6c0-934b547b19ce",
        "cursor": {
          "ref": "caa538d2-ce70-4b8b-8cec-8622ac12a265",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8dca2bd5-4c46-4cd1-a4e5-0b63373adbfa"
        },
        "item": {
          "id": "933b8791-c6bf-49f4-b6c0-934b547b19ce",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "155869c0-2449-4ea7-b107-f79330afe8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e780185-24da-4b79-bfab-e673f8e4b688",
        "cursor": {
          "ref": "dfe706d4-308c-4257-8a6a-04ab0e6ce21e",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "84db8748-56ec-4082-9372-fdf15959cf9e"
        },
        "item": {
          "id": "2e780185-24da-4b79-bfab-e673f8e4b688",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7d010f80-98d3-484c-83cd-94f55a7448fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6de0b2-e62d-44bb-8857-618901880154",
        "cursor": {
          "ref": "b2ba95d8-9a0c-4c15-a921-5125d1c17366",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8046fe78-fbb9-4e9d-86d3-fbdbb2c6f946"
        },
        "item": {
          "id": "2d6de0b2-e62d-44bb-8857-618901880154",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4b5d6437-1208-492a-83a0-cdab4ef1625b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff71a2c7-a6a1-4d7a-aa29-c876bcd846f0",
        "cursor": {
          "ref": "19cacae1-a0c4-4129-a568-c0b2d0532066",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bba4a424-3fa4-4734-924f-db25220b1911"
        },
        "item": {
          "id": "ff71a2c7-a6a1-4d7a-aa29-c876bcd846f0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "65286f3a-12fa-4740-8796-185fecf25521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7b592b-3655-4c96-8fd4-7d4543fed48a",
        "cursor": {
          "ref": "bb15b498-a91f-4d8f-90e5-b220e3802499",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8321db4e-1878-4fef-b1d7-d14fc77839bf"
        },
        "item": {
          "id": "1d7b592b-3655-4c96-8fd4-7d4543fed48a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "10def1e2-de50-4b82-bc34-97835b1be09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178589d7-2f31-42b7-b443-a88c48e773a2",
        "cursor": {
          "ref": "3989438c-1267-4161-acdd-9d66c4397210",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8d3cb245-9fd3-46c8-8152-77743638f926"
        },
        "item": {
          "id": "178589d7-2f31-42b7-b443-a88c48e773a2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bc5fe1cb-fbe9-4d2c-9d8b-3d95dce95ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b9c33e-7757-4e9c-91e9-e71121a85bc6",
        "cursor": {
          "ref": "5b71499f-f96e-4168-84f6-8f7de630132a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "77c9a4ab-6368-4551-b003-fc338437e474"
        },
        "item": {
          "id": "40b9c33e-7757-4e9c-91e9-e71121a85bc6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "83299dbd-746a-4537-9ef8-c035c36bf538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82127bc-2017-47e3-af85-0d6552281c48",
        "cursor": {
          "ref": "a04b351b-2a03-4764-9f39-50a7812c8543",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08240507-36e2-4983-9ccf-3fa0012826d1"
        },
        "item": {
          "id": "d82127bc-2017-47e3-af85-0d6552281c48",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9f395401-38fd-4bc6-a149-8bd10de6c174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4398e5b1-a1eb-43dd-b49b-3f4c066828fb",
        "cursor": {
          "ref": "39f27996-19bb-4e6d-b63d-c8a5f010b561",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e2066fa4-9454-48fe-b1b4-b7167c0b1a77"
        },
        "item": {
          "id": "4398e5b1-a1eb-43dd-b49b-3f4c066828fb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "491065d3-4fe3-42b8-8dde-87f7bad7d512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6ad2d2-b114-4118-8d47-3a87db574a70",
        "cursor": {
          "ref": "f1d39e6b-95cd-490e-8146-bf10bd6fbcc8",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1526702e-ef28-4bb3-9d4a-283dea11e4c5"
        },
        "item": {
          "id": "4c6ad2d2-b114-4118-8d47-3a87db574a70",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "03d0ef17-0202-4e92-8fe8-42ea708a0815",
          "status": "Created",
          "code": 201,
          "responseTime": 8512,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b9c0ab69-779c-4234-8a96-31bef7cb0f36",
        "cursor": {
          "ref": "ba7c8e02-f4d9-4856-b596-889d200dc032",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e293a5a7-72e3-43cb-a2ce-968c3ca71b07"
        },
        "item": {
          "id": "b9c0ab69-779c-4234-8a96-31bef7cb0f36",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "85549deb-4d8e-4069-807a-4bb68f4eec63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 702,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99419895-85d9-426e-ae95-8763bfcc1b0c",
        "cursor": {
          "ref": "8d6951a5-3552-4f94-95ef-0f8c9be6da9a",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e538b46d-360c-4e01-b395-1b0216100b7a"
        },
        "item": {
          "id": "99419895-85d9-426e-ae95-8763bfcc1b0c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dfab21a8-153c-40ce-a2aa-108345964f40",
          "status": "Created",
          "code": 201,
          "responseTime": 21334,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "3a0b3ad2-ef13-436b-93bf-18fd30dc52ba",
        "cursor": {
          "ref": "353b10c1-6c8d-4f18-97f4-be107cb49d7b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9d1e6dd9-d051-4ac2-a2c9-6f5d00237166"
        },
        "item": {
          "id": "3a0b3ad2-ef13-436b-93bf-18fd30dc52ba",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "547d4b03-ca30-4bdd-8f8f-ec458f3bd927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c354ac75-bc85-413b-8b74-5c4697fc9433",
        "cursor": {
          "ref": "8f111ca0-bc3e-471f-bc3c-648ead18aedc",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "332f60ad-ec61-4d40-b9b9-104bb148556d"
        },
        "item": {
          "id": "c354ac75-bc85-413b-8b74-5c4697fc9433",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4aa538d6-48fc-42dc-ad84-9b4c267ba39c",
          "status": "Created",
          "code": 201,
          "responseTime": 3087,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "dca9e3f7-2aae-480b-8fa9-3beb917c3ad4",
        "cursor": {
          "ref": "0b00dd19-60f1-45da-89aa-59640224d67f",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0874a850-b746-414d-91ec-0a8ff1e6b816"
        },
        "item": {
          "id": "dca9e3f7-2aae-480b-8fa9-3beb917c3ad4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "acf43209-42e5-46f9-a94c-cb250abcfea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7049eb55-554c-4f95-83dc-2dd51bbab575",
        "cursor": {
          "ref": "dbead226-ce7b-4a14-8f2c-ed2edd583d5b",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "11fa1c6c-98e8-44cc-ad1f-42faaa384c78"
        },
        "item": {
          "id": "7049eb55-554c-4f95-83dc-2dd51bbab575",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "182ccda4-2707-4ac7-aeaf-90e1df3038fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7ff362-0820-4ca7-8753-a2f239563725",
        "cursor": {
          "ref": "9b3f063a-bc21-47b7-be19-5ba19c72087e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4b0d72a-eb99-4769-a65c-ac86f592200e"
        },
        "item": {
          "id": "1d7ff362-0820-4ca7-8753-a2f239563725",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5dc1c07c-2958-43f0-b5c1-1ed0d33ead22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c50b6e-e5fa-4f60-be1a-ae109e7b3280",
        "cursor": {
          "ref": "dfc824e2-ad67-43a3-998f-e03c1ca5d094",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0dfe66a6-7c49-4745-8e89-9ba6b56420b0"
        },
        "item": {
          "id": "d1c50b6e-e5fa-4f60-be1a-ae109e7b3280",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f30af7a5-ca7f-4087-a666-df045a0eaa3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93efd21f-a826-48db-94d7-6f195c5e5723",
        "cursor": {
          "ref": "ca6076ad-7b38-4011-ab17-62e18ddfedad",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1b5e1ec5-0562-452d-92fe-96c7b1ab3c28"
        },
        "item": {
          "id": "93efd21f-a826-48db-94d7-6f195c5e5723",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e7a52be0-bb49-4abb-bc8e-2769309d8b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd71393-be4e-4163-aaf7-852568bbd088",
        "cursor": {
          "ref": "930e46ca-758e-4476-bd1d-dd038664f6ef",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "98584f86-c043-4692-902a-228296447254"
        },
        "item": {
          "id": "8bd71393-be4e-4163-aaf7-852568bbd088",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "37d51989-66ef-4b36-8ecf-8589f1501885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ca8bdd-13bb-45ba-b50c-c503c08bc911",
        "cursor": {
          "ref": "b4051eae-cff7-4b70-8d37-240ed328936f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9083982d-478c-4cf0-a3f5-060635e38867"
        },
        "item": {
          "id": "82ca8bdd-13bb-45ba-b50c-c503c08bc911",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1cf1a8b-af72-4fff-8b93-953028513125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0603a83d-0149-458d-a8ec-af24cdf17e03",
        "cursor": {
          "ref": "82b252d8-6dbb-420b-a48c-89bd1898c6b0",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ee504fd1-4ae1-4f96-b7e6-ee0351adae50"
        },
        "item": {
          "id": "0603a83d-0149-458d-a8ec-af24cdf17e03",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cb1b0ef2-96c2-48d3-a784-ccab8c64dd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e232748-ebef-4779-94ef-2bac25ff91b8",
        "cursor": {
          "ref": "552b46ab-1b47-42e5-aac0-ad84030c0889",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a0350307-c67e-47a1-8c71-aae5df07f065"
        },
        "item": {
          "id": "9e232748-ebef-4779-94ef-2bac25ff91b8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e9d84ce0-d063-402c-8826-83c18067119e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02efb93-afb5-48db-88b2-3ee3a861adf8",
        "cursor": {
          "ref": "e4171522-eefa-4dd8-87c9-269788d458ee",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "85506650-e9d3-481b-b0f9-360ed22abbb9"
        },
        "item": {
          "id": "d02efb93-afb5-48db-88b2-3ee3a861adf8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1fcdc949-a805-415a-8487-9d3ca9441913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d619f3ca-2f0d-423e-8838-1ef2803cf08f",
        "cursor": {
          "ref": "d54fc682-e5da-4c29-8963-e0172d520d91",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ff12b302-3c04-4312-a34b-dcb7286bd279"
        },
        "item": {
          "id": "d619f3ca-2f0d-423e-8838-1ef2803cf08f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "28556381-ca2d-4b8c-9d5e-e0ee72de0b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c0bd71-abaf-4103-b538-9420e7e43852",
        "cursor": {
          "ref": "03261e8c-eeb0-4dd1-bcee-f1727f2ee6b3",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d7f205da-8fe0-4e48-9e50-117ceecac90b"
        },
        "item": {
          "id": "76c0bd71-abaf-4103-b538-9420e7e43852",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1c7183f4-f180-4911-81d0-561efa3ab425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ec2699-b114-4d4d-872d-3d239fc215ff",
        "cursor": {
          "ref": "461ce713-5dde-49ab-ae25-52fcd67c37cb",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "04a60510-da05-4083-9563-c7d8ac946d64"
        },
        "item": {
          "id": "59ec2699-b114-4d4d-872d-3d239fc215ff",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2d23095a-df54-4ffa-a015-8b868009a814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a19889-7639-4f98-b653-2abedd005577",
        "cursor": {
          "ref": "c9d55777-b212-45d0-bec1-14a144eb79ca",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8ad0420d-b893-4c60-853c-89b2bfd015ec"
        },
        "item": {
          "id": "28a19889-7639-4f98-b653-2abedd005577",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1aa54cd7-7030-4eea-8945-b7364a24efe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bba5fcd-070f-4de2-9a45-a730b06862cd",
        "cursor": {
          "ref": "2c56bb60-8b3f-4225-aee7-5551285f2631",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0b8d441e-37d2-4c22-8328-d165263ce010"
        },
        "item": {
          "id": "6bba5fcd-070f-4de2-9a45-a730b06862cd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8a7b8f57-c6d3-46c1-880d-b8ae22d6bc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152d7015-6136-4924-a4c8-1cb1bbe4484b",
        "cursor": {
          "ref": "9dd2b720-0111-4656-95b7-9e019154f7ee",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e3a990e3-c44e-45cf-9950-3e091c9e0fa8"
        },
        "item": {
          "id": "152d7015-6136-4924-a4c8-1cb1bbe4484b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b32c1185-7f1a-4e3c-acd9-71fd0bc1c9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a345808-36df-402e-a2e7-94612bc39583",
        "cursor": {
          "ref": "3454c3e5-5d5f-4211-9910-725be2041454",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3c0db97c-24b4-4721-82dc-abb7c60a41f7"
        },
        "item": {
          "id": "5a345808-36df-402e-a2e7-94612bc39583",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "41f3d8a8-a316-4022-b2b6-e2f8070adf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d500d6c-6f6f-4ff3-bb89-acc8bda32f9c",
        "cursor": {
          "ref": "6c19aec4-9ab9-40ae-90c9-a6b90671463f",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9965ba98-f6a6-41b3-ac01-ea473db43ed2"
        },
        "item": {
          "id": "2d500d6c-6f6f-4ff3-bb89-acc8bda32f9c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2ce94b93-5ca5-4128-8757-20dbe485e1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7215a5-03de-4db2-acbc-58cea6103129",
        "cursor": {
          "ref": "56221e74-657e-4b23-98b0-59064e899ecf",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1c6b564c-1b14-459d-91eb-e8c811d128d9"
        },
        "item": {
          "id": "1c7215a5-03de-4db2-acbc-58cea6103129",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f274aff5-6158-422c-8bad-079de57aa32e",
          "status": "Created",
          "code": 201,
          "responseTime": 2023,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9f60a4dc-f00a-4f21-9d07-ae7676f3ac23",
        "cursor": {
          "ref": "d35d9d18-f663-4fc0-ab1b-9977909811af",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "10a038b8-9904-4351-a00a-eb6cc071bda0"
        },
        "item": {
          "id": "9f60a4dc-f00a-4f21-9d07-ae7676f3ac23",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f2591667-1c65-4a72-a283-a462379a3b57",
          "status": "Created",
          "code": 201,
          "responseTime": 2378,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8fc538ba-b51f-437f-8aed-f2348b4a150b",
        "cursor": {
          "ref": "fae66d07-656d-4add-91cf-6dc4f24e623f",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2ee3c709-8eaa-445b-a8f2-12e2fc734d8b"
        },
        "item": {
          "id": "8fc538ba-b51f-437f-8aed-f2348b4a150b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9713c9bc-63f1-4792-a2b5-bfa2cff60ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd2ad35-8c35-40f4-bbd5-732bec90a2fc",
        "cursor": {
          "ref": "3aa6b378-39ec-4cc4-a3f9-a3c50cab665d",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "91349f49-3b7a-4a77-9d46-e451b63ed541"
        },
        "item": {
          "id": "9fd2ad35-8c35-40f4-bbd5-732bec90a2fc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c2d49f75-1993-46d9-a680-96617d366ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d67c47-be5a-4ba8-8ee3-1c2ba545341f",
        "cursor": {
          "ref": "63ed81d4-9bc9-4dcb-93d3-f9ce960cb7c2",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a38bb3e5-b122-4959-b829-adde69bc151e"
        },
        "item": {
          "id": "16d67c47-be5a-4ba8-8ee3-1c2ba545341f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a95d9f1a-e41f-4410-84f0-2844201b5a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7d6eac-1198-42a6-82f4-63bb55fe8b98",
        "cursor": {
          "ref": "a9712bf0-ad8f-46ac-8395-9178aab4ca64",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7fa6cac2-cf4d-47c5-a302-909c5e24f663"
        },
        "item": {
          "id": "4b7d6eac-1198-42a6-82f4-63bb55fe8b98",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "83f85bef-c6a6-41c2-bf25-f4e29b078112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673f7250-9167-4ca2-8cad-e4d3e247b0e2",
        "cursor": {
          "ref": "d9162bf0-be9e-4573-90c5-6bf654299f74",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "42a240b0-4c78-4877-a4fa-110c49df95eb"
        },
        "item": {
          "id": "673f7250-9167-4ca2-8cad-e4d3e247b0e2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ddd059f6-5ec3-48c5-abf3-1d7dad908e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 888,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947d6366-163c-4ed2-948e-150c182394aa",
        "cursor": {
          "ref": "04c50eaa-eafe-45b1-ab0f-7d9ad9b6eb78",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23f84813-2c7c-4caf-98e1-717f4b1e56b4"
        },
        "item": {
          "id": "947d6366-163c-4ed2-948e-150c182394aa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "287e1674-e7b6-49d6-bee4-1e4c3070f40c",
          "status": "Created",
          "code": 201,
          "responseTime": 2006,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6d357b84-185b-4707-a3e4-9e1c20d051e0",
        "cursor": {
          "ref": "f586e978-86e4-4e05-966c-6aea52b28103",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "31ffc3ca-e4d6-4e0c-995f-e9fcc1757012"
        },
        "item": {
          "id": "6d357b84-185b-4707-a3e4-9e1c20d051e0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "69f2996e-ac31-41c3-ab86-432c9a185475",
          "status": "Created",
          "code": 201,
          "responseTime": 3382,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "884666a6-8144-40a0-ba36-8a2a37f30fc4",
        "cursor": {
          "ref": "5dff9903-df11-44c9-8f83-c6412c2a2c00",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8a524ebf-cf00-47bb-a6a9-d0167e233407"
        },
        "item": {
          "id": "884666a6-8144-40a0-ba36-8a2a37f30fc4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8a328d56-67a4-4cab-9996-1cb28db9316f",
          "status": "Created",
          "code": 201,
          "responseTime": 4109,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "4c8dd967-8733-4138-bfcd-4bd9fd46b1a8",
        "cursor": {
          "ref": "9989c128-c634-4059-ae84-51ed4b0df09f",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5923de4e-4b9e-4245-8bb4-702bafcec74f"
        },
        "item": {
          "id": "4c8dd967-8733-4138-bfcd-4bd9fd46b1a8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3bda5de7-a25e-4302-bede-1beb5fc89401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33c12d0-358b-47b1-9d5a-821113d92926",
        "cursor": {
          "ref": "5c49378a-de89-4eb9-b7ff-6786b34a0d7f",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "754fcc05-ba6c-4e07-a12e-ac08c13a7098"
        },
        "item": {
          "id": "f33c12d0-358b-47b1-9d5a-821113d92926",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6cfee67a-8d14-42c5-98f3-8abd96d4391d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0495145d-8910-4faf-a929-7b947dcc20d1",
        "cursor": {
          "ref": "94ee0038-c14d-4a03-8ebf-1bfa638f9388",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e5819f62-6ca5-4ce8-8826-7bd90782c892"
        },
        "item": {
          "id": "0495145d-8910-4faf-a929-7b947dcc20d1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bf2d2546-1257-49d0-92ab-d1a1143d8b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d18c41c-3d3d-402d-b4bf-0041fc4173cf",
        "cursor": {
          "ref": "094d17f5-0726-42bd-a4aa-36ef7181f295",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8627fc36-a618-41fa-8875-a645e8a7942e"
        },
        "item": {
          "id": "2d18c41c-3d3d-402d-b4bf-0041fc4173cf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "384b55a9-a7e8-4f62-9037-da5dca4474d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc24a15-5663-4a97-86a3-61dc966bdd1c",
        "cursor": {
          "ref": "57b4697d-dc68-4466-a7e3-0c21acafb42e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "51cecb6d-2183-47d6-8d54-b4382a48fd12"
        },
        "item": {
          "id": "0cc24a15-5663-4a97-86a3-61dc966bdd1c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "18015d2e-baac-4493-b067-76f1c79f1e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf06e2f-1a25-41c0-90f2-f79524142815",
        "cursor": {
          "ref": "94ebdd33-9896-4b4d-bd3d-ebd9f5cfc035",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "af2aefec-643c-42f4-addf-c8fb11b8d657"
        },
        "item": {
          "id": "6bf06e2f-1a25-41c0-90f2-f79524142815",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "343e5896-6de1-4ecd-a27b-89f5345e1477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72044795-31c4-4d78-a6bc-2d9b5112186d",
        "cursor": {
          "ref": "b65e47f5-aace-460e-9097-b994293a0a5f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d29baf80-03ca-4eb7-9c88-c57382f414b1"
        },
        "item": {
          "id": "72044795-31c4-4d78-a6bc-2d9b5112186d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cec6db95-61cf-4c81-9bb4-e07d3475ef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf961d9-806f-406a-a5d6-d7eaefce5ed5",
        "cursor": {
          "ref": "c042ed08-1e2d-4b9c-b4d1-cb61c2b83c63",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d79d4216-2963-470c-8c8e-7a135de9e173"
        },
        "item": {
          "id": "0bf961d9-806f-406a-a5d6-d7eaefce5ed5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8c72fcd6-c546-4a03-ae0d-6b1fe1bc266b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aead73-9297-4479-89f5-526bd51731a5",
        "cursor": {
          "ref": "fab8a0b0-aab5-42a5-9510-61ef5c39b14f",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "378d36d0-8146-4efe-823c-a59c93c4dce5"
        },
        "item": {
          "id": "88aead73-9297-4479-89f5-526bd51731a5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8780870d-335f-42ee-9a43-cfbe8fcb6d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d89848b-bb65-4c28-9fa9-770261b79c65",
        "cursor": {
          "ref": "5a608866-5e0b-464e-9a8f-40bb9982b9e7",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4e5dfcaf-3c50-42d7-8bc3-c5fc416699b8"
        },
        "item": {
          "id": "7d89848b-bb65-4c28-9fa9-770261b79c65",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2cd0e626-0bc5-4767-be44-064b2e0e673f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bddd01-f5ce-4e19-92ec-00a635455c31",
        "cursor": {
          "ref": "97361f3e-ad61-46db-8d31-f2d681bcbe4b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7a6fe7f9-50f5-4ba4-bc12-ed70b204a2bb"
        },
        "item": {
          "id": "23bddd01-f5ce-4e19-92ec-00a635455c31",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "959002ad-526e-4710-87d7-4c921144768b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9cec5d-a1c9-4315-92cc-4b48a8923525",
        "cursor": {
          "ref": "554cd085-7b9d-491c-9ed8-d25502bfd183",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a1565d7c-6213-4e1e-97a1-074edfdf9ddd"
        },
        "item": {
          "id": "0d9cec5d-a1c9-4315-92cc-4b48a8923525",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fed44f99-b349-4590-bf76-e19bdb7e7a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dda4b1-ca85-475a-ac9a-932ee93bc868",
        "cursor": {
          "ref": "18623952-59e2-47a1-a6c5-c7c97cf31b90",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "023479c6-334e-40c0-86ca-bfc0319d18bf"
        },
        "item": {
          "id": "95dda4b1-ca85-475a-ac9a-932ee93bc868",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9cea088b-24ef-4356-a3d6-af7229d9ae72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83c8efb-d70a-4c8e-858e-ef9198ab349d",
        "cursor": {
          "ref": "ab142c18-058b-4c18-a8d1-e078108e7a91",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a2264908-9e5a-4c10-8e14-fed82e1677dd"
        },
        "item": {
          "id": "c83c8efb-d70a-4c8e-858e-ef9198ab349d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fd9add02-0d50-4a7a-a2b1-00867b3e74b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795d182e-cff0-40c9-a6c9-d43e486bec58",
        "cursor": {
          "ref": "a4658022-51d7-42e6-82ac-55435583fe66",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cb6d6659-ca12-4850-853b-d6b5de63f2d5"
        },
        "item": {
          "id": "795d182e-cff0-40c9-a6c9-d43e486bec58",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "919852e7-3519-48bc-8fc0-7816e2554a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e996f5-4771-4bf8-9098-46bb2c257c29",
        "cursor": {
          "ref": "28ddbf90-ebd9-4afe-9e1d-0d3d033dfac6",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "032ebf0f-5469-4fa9-8301-a0b84544941c"
        },
        "item": {
          "id": "01e996f5-4771-4bf8-9098-46bb2c257c29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9f5be16b-45f3-4dc0-824d-d8e2c90361e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf2a953-9f3e-4db5-92a8-a599099fb879",
        "cursor": {
          "ref": "df887846-0962-4001-a34a-6a18dc01bc91",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "71787c55-b101-44ca-83ae-65b6762024f9"
        },
        "item": {
          "id": "8cf2a953-9f3e-4db5-92a8-a599099fb879",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "393f501b-3ad0-4f8d-97f7-8496cc006c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea6963b-35ea-459e-aebb-21c83234e92f",
        "cursor": {
          "ref": "1b235dff-fea8-47c8-a564-967b48889a66",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d3fe7053-e6ea-489d-ba27-d69a039bf2eb"
        },
        "item": {
          "id": "1ea6963b-35ea-459e-aebb-21c83234e92f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "46179ae5-07c5-4a3b-9e4c-475b7d4d1acf",
          "status": "Created",
          "code": 201,
          "responseTime": 1942,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a9a884c0-262b-4908-bc21-e82ed75534a6",
        "cursor": {
          "ref": "88d670b7-5d75-42c3-b380-d5d4a37b9f6f",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d5679fa4-7707-4fe0-ba4f-e63c3a7d83b1"
        },
        "item": {
          "id": "a9a884c0-262b-4908-bc21-e82ed75534a6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "008ddf82-a296-4cce-852a-776bccff57cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bd161c-c60f-460a-8e7e-3f68aa258e80",
        "cursor": {
          "ref": "b35319a0-c698-472b-8dc8-015698f1c6c0",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "775f59cd-a50c-4b63-b510-1eb4cff82a6f"
        },
        "item": {
          "id": "05bd161c-c60f-460a-8e7e-3f68aa258e80",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "df276803-1068-41f9-b47b-c690155c7fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd7ce06-af2d-4cb6-ac71-84ba930d8aa4",
        "cursor": {
          "ref": "c6246303-5c14-4462-8b4d-fc6b73f238a3",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9486b3b2-90c7-4891-b792-9a29fa3623bf"
        },
        "item": {
          "id": "5bd7ce06-af2d-4cb6-ac71-84ba930d8aa4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b081d09a-0e0c-42e4-ab00-f88d48a403ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20d4628-9c05-4716-985b-7d3548d6995a",
        "cursor": {
          "ref": "55ce9df1-6e4e-4d26-b817-bcd4778551e0",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1a9a777f-33cc-49b8-8ad6-79afccaff235"
        },
        "item": {
          "id": "a20d4628-9c05-4716-985b-7d3548d6995a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e402f5a8-5816-4e11-9389-2d6926d3d663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d839df75-9628-4a62-9370-6f47acbc7426",
        "cursor": {
          "ref": "26b09fa3-2f7d-4de3-84d4-d0f399c629c0",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7dd30b21-8b21-4399-9f2a-2ad3a385a857"
        },
        "item": {
          "id": "d839df75-9628-4a62-9370-6f47acbc7426",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7da20e74-3711-47bd-bfd7-734ed775713c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0791e4-5a09-4581-a0e5-63271b3852d3",
        "cursor": {
          "ref": "cf874278-ee79-497b-a371-5161e54f7a38",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "58b64453-42b5-4f44-b4a9-bf14eec8ed8a"
        },
        "item": {
          "id": "1c0791e4-5a09-4581-a0e5-63271b3852d3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d4c6087d-a4fe-46b7-a081-1fe0da5a4e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3431f205-3244-4c21-a535-e6f044a53f3c",
        "cursor": {
          "ref": "5ef46c36-cb19-49bd-9344-134b7112f8bc",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "39dc5683-2c3d-46dd-a8e9-84d2d9834ebd"
        },
        "item": {
          "id": "3431f205-3244-4c21-a535-e6f044a53f3c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "24cfd404-5378-41f5-842e-daa2b7f6b692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80692ef-c8fc-4007-b9b0-a334abff4429",
        "cursor": {
          "ref": "35090598-2a62-49c2-8365-c8e51226051b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f7602c2b-9b5d-44cd-81ab-4ab542643747"
        },
        "item": {
          "id": "b80692ef-c8fc-4007-b9b0-a334abff4429",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7f281eea-f04c-407f-89c5-bb3622c629ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead0af12-e74e-4c0e-9fdf-1dc652d1d563",
        "cursor": {
          "ref": "186fee5a-5858-4d1b-9dda-9cd5aa705ac7",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f77aa1a7-d570-4ab7-b459-14d5d4fe2391"
        },
        "item": {
          "id": "ead0af12-e74e-4c0e-9fdf-1dc652d1d563",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "05f02bca-dc58-4b10-881a-cb826dc77698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3dd553-aae1-495e-932b-a2167e2da859",
        "cursor": {
          "ref": "d148197a-c380-4154-83a2-bf141f5c53c1",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "285fe34c-c38f-4779-a0a6-9938604d18e0"
        },
        "item": {
          "id": "5b3dd553-aae1-495e-932b-a2167e2da859",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e01b2aca-523a-48a0-8daf-a23119be1b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45756c2b-066f-4dfa-9920-4f8f24295418",
        "cursor": {
          "ref": "7857394c-0b57-4dee-bc90-631fa12053e6",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "172e629d-1204-4e8c-98ed-9b0594617eef"
        },
        "item": {
          "id": "45756c2b-066f-4dfa-9920-4f8f24295418",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5bc70cf0-631d-472e-985e-67d16380fe3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177a2c79-08f6-4414-8588-0166c1d37e58",
        "cursor": {
          "ref": "80802ae9-dc73-4ea6-9ad7-d0b72cc28535",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f7b9fe60-eacc-4042-a06c-5015bf379f61"
        },
        "item": {
          "id": "177a2c79-08f6-4414-8588-0166c1d37e58",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "cc5be60c-ca40-4e9d-aff9-9a0ee4c3a3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baef411e-9e79-4b77-9166-350bdecbaf4e",
        "cursor": {
          "ref": "1c664eb0-e4c2-407f-80ad-3c20b94fff72",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "76c384ac-8935-48c3-8e54-356acd2110f3"
        },
        "item": {
          "id": "baef411e-9e79-4b77-9166-350bdecbaf4e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ead90761-4f81-4ed9-80f5-299925428bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060bd542-f630-467a-a786-f6ac4bb22793",
        "cursor": {
          "ref": "e16b42a7-3324-41ac-9c3e-4144bd091f84",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b241e39f-b7a1-40f2-8c01-892c7209efd5"
        },
        "item": {
          "id": "060bd542-f630-467a-a786-f6ac4bb22793",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "eccaa594-cd22-44c0-9fe0-455ddeb71d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf5bf36-bafe-417b-b489-7efdb757c0c7",
        "cursor": {
          "ref": "80d0809d-09de-4a0a-93bb-0218779fa8b4",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "29691cb5-155e-42df-b72e-d354127366f5"
        },
        "item": {
          "id": "7bf5bf36-bafe-417b-b489-7efdb757c0c7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "05048668-8906-43b3-976f-f5bdd6db91bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b07469b-25b4-445e-9b06-73505df7a578",
        "cursor": {
          "ref": "0f2343b9-2920-4c19-9273-81f8bd9a0780",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fb23d02a-33fa-41d7-8169-be853eeaaf1f"
        },
        "item": {
          "id": "6b07469b-25b4-445e-9b06-73505df7a578",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "856627c2-42d8-4d5b-8d29-e7a5258f5c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96a5cc0-3ffa-4f68-a730-d085837e413a",
        "cursor": {
          "ref": "37a03144-1012-45c5-aa42-abd2094ab329",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "29e8f084-82be-4641-8aa2-bfbcd2a76d75"
        },
        "item": {
          "id": "b96a5cc0-3ffa-4f68-a730-d085837e413a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "96dabc07-bca1-45d3-86e1-ec8a31daf779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ebf76b-ccee-4b65-aae7-a76538597ce6",
        "cursor": {
          "ref": "f3009c19-dde6-44f7-be14-950b1e9fbabb",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0bd38e58-1dc7-4d4f-8c47-b88542fbcb1d"
        },
        "item": {
          "id": "e6ebf76b-ccee-4b65-aae7-a76538597ce6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cc4fcc8a-440c-4e0e-a28a-60b5e215dc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f29f6f6-f5c6-4c6d-b043-9f685cc99eb0",
        "cursor": {
          "ref": "ffc1f0c0-9bb3-4fc0-bcbc-2144b478d6ed",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6cc1b9d1-c919-4de5-adb1-c29c67b83c6b"
        },
        "item": {
          "id": "2f29f6f6-f5c6-4c6d-b043-9f685cc99eb0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e71ab653-108b-4ddc-8808-748a0a76beda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8fb548-3a4f-42e1-8cf4-32a520c2c0bf",
        "cursor": {
          "ref": "56a3b9a4-c90c-4e31-841f-2c705b113d32",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7ad7373b-a342-415b-8f5c-be8449a54190"
        },
        "item": {
          "id": "0e8fb548-3a4f-42e1-8cf4-32a520c2c0bf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d66f09de-d0a1-4d5f-aa43-394789d1c398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0334037b-2af8-46c3-8a14-fbe6ec6c621d",
        "cursor": {
          "ref": "994db0d3-c851-4d94-a623-1bc1fb5f1023",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "167acd35-0993-44bc-93b4-b6bcb486602b"
        },
        "item": {
          "id": "0334037b-2af8-46c3-8a14-fbe6ec6c621d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c7a83f3f-d070-4023-9197-6af761408940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3e9bf1-7d76-4ca5-bacd-fed44869aec9",
        "cursor": {
          "ref": "1b0799b6-fed2-466e-adec-7fc17786d3b1",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "283f6dd8-32a5-4302-a243-e60d09a73fbc"
        },
        "item": {
          "id": "1b3e9bf1-7d76-4ca5-bacd-fed44869aec9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "885a74dc-c204-41a0-b01a-16fe53499221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22355e8-878f-4547-87dd-f5548431184a",
        "cursor": {
          "ref": "97c81116-6018-4542-83e8-4127fc73dd3d",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0b4a8bd0-3703-4921-8935-da69a086800a"
        },
        "item": {
          "id": "b22355e8-878f-4547-87dd-f5548431184a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "96227ddc-0a3b-4978-8bd7-40ddd991136b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc933d9-78cb-4895-8c92-cf21536f3959",
        "cursor": {
          "ref": "17febff5-8968-43bf-bfbc-c1ff445614af",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "088c4269-c61b-461b-9f69-b6434a2f82f0"
        },
        "item": {
          "id": "cbc933d9-78cb-4895-8c92-cf21536f3959",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "54fcc096-4309-4d81-b9c9-e74264a448ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e614f4-ff01-4d9e-8457-c1b764f837c0",
        "cursor": {
          "ref": "4c176f62-17e8-4d0f-984d-4b40b4d5a9cd",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "12af6b63-d412-4849-8ae7-38bbb4bb0446"
        },
        "item": {
          "id": "17e614f4-ff01-4d9e-8457-c1b764f837c0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c7640022-2a49-45b4-b9e5-5f79961039b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc86777-b1f8-402d-97da-da74cd49e738",
        "cursor": {
          "ref": "e55681d8-4db0-407e-b398-23e814ac8f0c",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f1d5495e-a7dc-4dfa-a997-72f5aa4d0238"
        },
        "item": {
          "id": "dcc86777-b1f8-402d-97da-da74cd49e738",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d64a650-7298-45fc-9282-b69ac290cb13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e141808e-2355-476d-be92-bafb10404a6e",
        "cursor": {
          "ref": "cff5f0e9-1193-406d-bd08-6a37290eddfc",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b07cfe1e-5780-4a8e-a442-f9e2d0758078"
        },
        "item": {
          "id": "e141808e-2355-476d-be92-bafb10404a6e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "72d40405-40fa-45cf-b988-b0cfc464a987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf11f50-56c8-4ff1-bdd9-34a2b390c302",
        "cursor": {
          "ref": "2a1dc17f-d908-47dd-befa-3860ae491944",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8121af1d-a3ff-4c6e-9109-af5c92c305aa"
        },
        "item": {
          "id": "9cf11f50-56c8-4ff1-bdd9-34a2b390c302",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bd5611cf-0bb9-4bcb-b56f-d645a591efab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646f1827-e4d3-4455-a6ea-e796e3e4715e",
        "cursor": {
          "ref": "94a5de83-58db-402a-a08a-9f8c41033bb1",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7fc6166e-985f-41fe-ae63-7b9d6992b2df"
        },
        "item": {
          "id": "646f1827-e4d3-4455-a6ea-e796e3e4715e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "976b153e-4a81-417c-9786-f7ce2bf21c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f78752a-f452-468f-8e95-4749e6fb7f1c",
        "cursor": {
          "ref": "106a18ca-38e0-4701-bde3-78b24b90060e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0d70ae6f-d519-46f9-81c7-aa3eb0f893f8"
        },
        "item": {
          "id": "4f78752a-f452-468f-8e95-4749e6fb7f1c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e187d02c-d326-4b6e-918d-9176e5e4476e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aebc741-1294-47a5-bd28-fd3fc4f6d737",
        "cursor": {
          "ref": "847707c1-8ea4-488f-865e-2822c4ec55fb",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7222022a-9689-456f-bbc3-726de7dca85d"
        },
        "item": {
          "id": "6aebc741-1294-47a5-bd28-fd3fc4f6d737",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1bbcb64e-82d1-43dc-85a8-9dd8e5658620",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1fc9d98b-0b9b-4216-9e8b-3cd4837cf28f",
        "cursor": {
          "ref": "8e52f5a7-a5a7-4952-8e86-b96586a30b23",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8694f884-54bb-47cc-b749-cd5bba3f06e9"
        },
        "item": {
          "id": "1fc9d98b-0b9b-4216-9e8b-3cd4837cf28f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "34a2af1a-33c0-4d7c-a047-7022544ace35",
          "status": "Created",
          "code": 201,
          "responseTime": 1887,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "40e5ec65-caed-4384-8d00-1277f823f93e",
        "cursor": {
          "ref": "996d56ba-b51e-4131-a181-c54cdad3ed4f",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "94cca5bc-360e-490c-aab6-0c13f9fa730f"
        },
        "item": {
          "id": "40e5ec65-caed-4384-8d00-1277f823f93e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c192923a-5aed-4b67-9881-3834b61060d9",
          "status": "Created",
          "code": 201,
          "responseTime": 2462,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3631ecf-cd64-456b-b4c8-7acf0c11d276",
        "cursor": {
          "ref": "aa7a2da4-9859-4071-954f-b755f7988519",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5261fefa-2a62-4c61-be0b-82f61e072822"
        },
        "item": {
          "id": "d3631ecf-cd64-456b-b4c8-7acf0c11d276",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a013f29f-3a27-4e03-9a8f-1b51d9239e3e",
          "status": "Created",
          "code": 201,
          "responseTime": 3128,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea3a250-b7b7-45cc-93fa-5955afc7eb55",
        "cursor": {
          "ref": "f8398ad3-114c-4274-bfc9-9389cbb705e5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "96467a6f-2921-4160-8df6-5c43851a5192"
        },
        "item": {
          "id": "eea3a250-b7b7-45cc-93fa-5955afc7eb55",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d970e4ad-9c40-47ac-8a76-0e3534e156d2",
          "status": "Created",
          "code": 201,
          "responseTime": 1963,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0183604e-a8d1-4e2e-8eb2-335b41f54ab6",
        "cursor": {
          "ref": "aabdb5bd-9a9a-4ee4-acf8-a3bfb24b99cf",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "af1c6b5f-d834-4c5a-8be7-c9608c32ec7f"
        },
        "item": {
          "id": "0183604e-a8d1-4e2e-8eb2-335b41f54ab6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c1d8c50-5db4-463a-a4e1-7422e9019c69",
          "status": "Created",
          "code": 201,
          "responseTime": 2572,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "584f7e3a-9ba2-4d52-b6db-07fd9c42cf5a",
        "cursor": {
          "ref": "5dc3b68c-2ac2-48ba-9a23-596a363218b9",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c9d14821-c0e2-45c1-98a7-7ad7f55931b2"
        },
        "item": {
          "id": "584f7e3a-9ba2-4d52-b6db-07fd9c42cf5a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1193363c-9a00-45df-baa3-dc6c0355bcb6",
          "status": "Created",
          "code": 201,
          "responseTime": 2702,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-22T00:40:25Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-22T00:40:25Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5143d428-beac-468c-a152-76bf7414dab1",
        "cursor": {
          "ref": "2948150e-9b9e-4c43-90c0-cda4dd8f092e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fb969aeb-03f9-4b53-a744-6fc4e6fd6eba"
        },
        "item": {
          "id": "5143d428-beac-468c-a152-76bf7414dab1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e1c4bdad-a998-449b-8829-b7cf7bbfd843",
          "status": "Created",
          "code": 201,
          "responseTime": 2419,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ba5718-f018-4d0a-a945-f1caea39dd03",
        "cursor": {
          "ref": "d9ff1144-f669-477f-99ac-da1225932356",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e9a8db44-5dc4-4c6a-885a-9681632333d9"
        },
        "item": {
          "id": "d6ba5718-f018-4d0a-a945-f1caea39dd03",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "703eeaf4-77f3-49f2-b5e2-f69112bd2080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ba5718-f018-4d0a-a945-f1caea39dd03",
        "cursor": {
          "ref": "d9ff1144-f669-477f-99ac-da1225932356",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e9a8db44-5dc4-4c6a-885a-9681632333d9"
        },
        "item": {
          "id": "d6ba5718-f018-4d0a-a945-f1caea39dd03",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "703eeaf4-77f3-49f2-b5e2-f69112bd2080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c522d3-182a-430f-a6c7-bc9103894217",
        "cursor": {
          "ref": "5a003968-1a74-48be-978f-f87d3d91c79a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "74d5e945-7cfb-44a5-b3d5-75a2d7eddcab"
        },
        "item": {
          "id": "78c522d3-182a-430f-a6c7-bc9103894217",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56d22d88-d10b-42c9-88e6-4b85cadf7b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca255389-0472-4b63-bd0a-d8c0fe51c878",
        "cursor": {
          "ref": "3ec5beaf-f390-4311-9b3e-fdc3171b14a1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d8dcc306-dae1-4c9e-9f48-eadd3be8f1ce"
        },
        "item": {
          "id": "ca255389-0472-4b63-bd0a-d8c0fe51c878",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "03b06df0-e2ec-4dbd-8fbd-aea5d960ec9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dae02f-3832-4c78-beb9-67b7d3ffbf3f",
        "cursor": {
          "ref": "a0ec608f-9633-4519-aeb7-bb0369b8e441",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2a81f7bc-f55a-44d6-bfc3-e1162b2a098e"
        },
        "item": {
          "id": "f7dae02f-3832-4c78-beb9-67b7d3ffbf3f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e97cea99-f19f-455b-abad-aa177549aa7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179a2d7e-7442-4a67-9bea-862e5a67eb36",
        "cursor": {
          "ref": "4ae04584-96bc-47b5-9907-4ce713d655b2",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "93c176c3-f78d-4e78-b420-27880747e168"
        },
        "item": {
          "id": "179a2d7e-7442-4a67-9bea-862e5a67eb36",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "256cc7c7-61ad-4835-8e8e-565093064715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7e73eb-6133-4d65-a958-2e5706e7d07f",
        "cursor": {
          "ref": "5f62a0ae-ee96-4712-ae6a-d08436598387",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "40192743-88d4-4d4a-822b-f0e91d96399e"
        },
        "item": {
          "id": "2d7e73eb-6133-4d65-a958-2e5706e7d07f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "55af0191-cb91-4e31-afb8-c9aee64f1741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5655efd6-dc17-4f6a-9566-819a116127b1",
        "cursor": {
          "ref": "cb6135d2-4a08-4b8f-a787-b0d48204f85e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "553ea0d1-83d8-44b8-af4b-83d86f3d5aa1"
        },
        "item": {
          "id": "5655efd6-dc17-4f6a-9566-819a116127b1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c49a49ae-422b-40a5-aa3a-41bee1f4cc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321b1ef2-207a-4a0d-b18e-169ad5b22096",
        "cursor": {
          "ref": "715347bb-dca7-4eaa-94b5-f021b9ab99c8",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8f020210-48b6-4a58-825c-36e8f49c7180"
        },
        "item": {
          "id": "321b1ef2-207a-4a0d-b18e-169ad5b22096",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e1e8b560-e66b-4409-a06c-250e5eb4d566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac41acff-8b9a-4929-862b-7f0e2cd21a23",
        "cursor": {
          "ref": "916aa4a5-0bb1-471e-b652-f2c0ceb519bf",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2213ff56-9d34-4eef-b897-3c79d7f849a2"
        },
        "item": {
          "id": "ac41acff-8b9a-4929-862b-7f0e2cd21a23",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f0a3b877-fa6d-4c1b-8da2-ef923b0c585b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f802f9-57c6-499f-830b-4b78dd9d9ebe",
        "cursor": {
          "ref": "b6c2b0e6-a327-4de5-b55c-99e8b1a8d30b",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5269d36b-3579-4e2b-86d4-a79288d1731b"
        },
        "item": {
          "id": "80f802f9-57c6-499f-830b-4b78dd9d9ebe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8d992de4-ba8a-4311-ba8e-a266c17de948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07ba8b1-90eb-4402-8aa5-2837545f1699",
        "cursor": {
          "ref": "97a39959-469d-4c82-b8f0-5041c9b9a9ec",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "952769c2-baf6-4f04-a755-7133f0210eef"
        },
        "item": {
          "id": "f07ba8b1-90eb-4402-8aa5-2837545f1699",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7a4d9d6c-510f-4a50-959e-1518a3daacdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa9729e-c3a8-4c29-89f4-e7ad76c42a73",
        "cursor": {
          "ref": "284972c1-d37d-4d37-a207-4988aeaabc5e",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d5f411cd-0187-4033-b3ba-7bc69c0fd433"
        },
        "item": {
          "id": "9fa9729e-c3a8-4c29-89f4-e7ad76c42a73",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2132b88e-0a4d-408a-ada9-9eab0dc42fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798f38ad-6dc4-469f-8873-addc1f71d271",
        "cursor": {
          "ref": "fcd014c7-59e5-4387-892e-31e51be15d42",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0f596738-2b63-49e2-825b-1267efc47f80"
        },
        "item": {
          "id": "798f38ad-6dc4-469f-8873-addc1f71d271",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fb9c0d7e-9303-442a-a587-5cbbb1af3f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be51f8b7-fe02-4949-ae25-a1cd08db6854",
        "cursor": {
          "ref": "e45ce83c-f038-42a3-aca7-6bb54f1c9183",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d9d2837c-fcb0-4b51-8ff7-ad4c2f30f221"
        },
        "item": {
          "id": "be51f8b7-fe02-4949-ae25-a1cd08db6854",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af4d5bc2-d4c0-4aba-8c31-4c9109e228a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c03f10-5011-404c-b07f-17a249076e90",
        "cursor": {
          "ref": "76ea58a0-a3b6-4551-984b-6d3b5f8a4e75",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "16232e33-b499-4ae3-9a4d-36bf75e4570b"
        },
        "item": {
          "id": "24c03f10-5011-404c-b07f-17a249076e90",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d1735773-d5c9-4720-8a52-e8bb71f5fc96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc460a5-abfb-4855-8e0c-034c84402a76",
        "cursor": {
          "ref": "f504c3ec-3031-43be-8139-a8aa0a296837",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "307c1c9b-4193-46a5-8dde-7c5bbd7dd78f"
        },
        "item": {
          "id": "9bc460a5-abfb-4855-8e0c-034c84402a76",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a3bc2c4f-0279-440e-90d5-cd7dc251f95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb856b5f-7e0a-459f-b818-34d469be2a4d",
        "cursor": {
          "ref": "daf439b1-af70-404c-879e-2bda061e22f5",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "32160d93-90d2-4749-8d01-263b5c352df8"
        },
        "item": {
          "id": "bb856b5f-7e0a-459f-b818-34d469be2a4d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f1d8ca75-67eb-414b-a9af-e6787cc0b228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df7f8cf-dae2-4af5-80a0-4f4a4fcda20a",
        "cursor": {
          "ref": "0cf210fa-d49e-4972-8de3-6e511d800eef",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "eb3cc086-9f95-4210-b398-68771e828d3b"
        },
        "item": {
          "id": "2df7f8cf-dae2-4af5-80a0-4f4a4fcda20a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23a0594d-6948-454a-8016-f035dee07820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 938,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3914d1-4f8a-4a8e-8404-2dd32e45a114",
        "cursor": {
          "ref": "8133118c-a4d4-42b7-9e23-55f2b9328475",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4a4d178a-feb3-4766-bc34-9a29ac8ada57"
        },
        "item": {
          "id": "ac3914d1-4f8a-4a8e-8404-2dd32e45a114",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3b579694-f7fa-446a-8e78-ef879955d097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85572490-3a71-4820-ab1a-de8ebfb882ff",
        "cursor": {
          "ref": "0c3c178a-783e-4583-8c20-7ff09e2a63e4",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ec5e3e3d-f508-4ad6-96f4-63a1c63041ab"
        },
        "item": {
          "id": "85572490-3a71-4820-ab1a-de8ebfb882ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "89f5ebf7-80d6-4dc0-a5b8-566b0281e366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69258d5-6fe2-4ad1-87ca-e56565e176a1",
        "cursor": {
          "ref": "bebb48c9-41ff-452a-bb0d-466031676d67",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "03b224ee-15ae-45d3-ba94-a06d15772701"
        },
        "item": {
          "id": "f69258d5-6fe2-4ad1-87ca-e56565e176a1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fc8e7049-988e-4a54-89dd-e1bc59516ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11e3124-5c84-4d33-b478-87b20f0451a1",
        "cursor": {
          "ref": "33ad0865-94ae-4bd2-af1d-9a2daa778a57",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d819a844-4539-4c8d-847f-c36840728200"
        },
        "item": {
          "id": "f11e3124-5c84-4d33-b478-87b20f0451a1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a3257665-f296-487e-8444-d8657ef1ce35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b2eb2c-21cd-4526-987a-c3d389a4ddfc",
        "cursor": {
          "ref": "47541eec-227e-4b84-809e-09cffa91a4fa",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b3d29cf7-c507-4405-9461-39435c2a0c8f"
        },
        "item": {
          "id": "e0b2eb2c-21cd-4526-987a-c3d389a4ddfc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a34d33b6-f632-4460-b101-7e476dd779d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09488caa-872d-49e7-a6fc-728b8de7c2f1",
        "cursor": {
          "ref": "965eb470-844a-41ce-98ab-47ce88e7767f",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7416d763-450a-4506-a634-f64ddc47ac16"
        },
        "item": {
          "id": "09488caa-872d-49e7-a6fc-728b8de7c2f1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "857e9e18-4c77-4f8f-aa83-bb570021c1fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235e1439-0aeb-4f48-bb97-2cccc46af269",
        "cursor": {
          "ref": "a46a62d6-e7dc-4b4c-9379-3b897eea36fb",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "aed9b298-5002-4591-aa63-8997792cab01"
        },
        "item": {
          "id": "235e1439-0aeb-4f48-bb97-2cccc46af269",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "09aa99e1-d86e-4ab8-b127-191629898b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568f6ae5-a906-4567-b9ea-63ee099c0707",
        "cursor": {
          "ref": "70809681-cf0a-4b5a-9c8f-dcde88da3264",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a3d4d7f7-eaba-49c8-84ef-0a16e27cab3c"
        },
        "item": {
          "id": "568f6ae5-a906-4567-b9ea-63ee099c0707",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7191bb27-fb9d-409b-be38-aeea6b2613da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fe2095-9d7c-48f0-ba20-c65ba9051132",
        "cursor": {
          "ref": "f2cd20d6-b8e2-47a1-ba06-e2f912994dd3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c990e33f-e0ff-46bb-b8b1-7fcc40f4b82a"
        },
        "item": {
          "id": "b0fe2095-9d7c-48f0-ba20-c65ba9051132",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "16b7a4ee-dee9-4953-943a-22cf547a45fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f70861e-73e8-488d-b9d7-795f3f280f97",
        "cursor": {
          "ref": "9d34ffb5-aa2f-4c72-877c-b600c9284172",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7b45ff54-a310-4b85-a71b-851ed800df50"
        },
        "item": {
          "id": "3f70861e-73e8-488d-b9d7-795f3f280f97",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "751c8a5e-a0a2-4fd8-9a75-7a137e384d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481d9fdb-12aa-42bc-8553-2b6fcf0c6f25",
        "cursor": {
          "ref": "f1a571ff-9560-4fac-b120-38ed79f13ae5",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2197f13-28ff-4423-b5a5-bddf7246bb3a"
        },
        "item": {
          "id": "481d9fdb-12aa-42bc-8553-2b6fcf0c6f25",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4df08a0e-1b5d-42f4-894e-a18726ddd7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262d0e0a-dab3-47e8-8bcb-95714137bde4",
        "cursor": {
          "ref": "a499f57c-67ec-465e-a532-2b78e151660b",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f1e5d77c-1988-4d56-8ca4-45bdfc027412"
        },
        "item": {
          "id": "262d0e0a-dab3-47e8-8bcb-95714137bde4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9801b8d5-e028-47af-a368-77f5f6dcb08b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287e1279-39eb-421a-9891-8b4b75409650",
        "cursor": {
          "ref": "1f1161b5-09e1-49f7-936b-fc29b618d679",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e160037b-8396-4599-8a61-a2f291748530"
        },
        "item": {
          "id": "287e1279-39eb-421a-9891-8b4b75409650",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5479f160-4aaf-4478-8621-7fdc911eee57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d3e9b5-a4cf-47e6-810f-f7bcbc0b918c",
        "cursor": {
          "ref": "ca3624a3-3fc0-4d99-882e-73dc356bbd4f",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1b32bbab-071a-4190-95ec-938eaba783a2"
        },
        "item": {
          "id": "e3d3e9b5-a4cf-47e6-810f-f7bcbc0b918c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "af9d78d6-f772-4a85-95e4-de50f0726732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e73587-998f-4747-80b9-e16be0e5be8c",
        "cursor": {
          "ref": "ebd5abe1-84c3-4719-bc59-ed516a3bb99a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "89b19020-4240-4b48-b188-816c1b0cde70"
        },
        "item": {
          "id": "47e73587-998f-4747-80b9-e16be0e5be8c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b98cd3e8-5b97-4ea1-986c-0eda9243adef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a6d06f5a-12b5-4c6f-aabf-5c175cf1c12d",
        "cursor": {
          "ref": "44a2f4e0-a3bd-42b0-9a94-efed57e9590b",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eb17367a-71fe-45e9-99b2-1e89f990fe81"
        },
        "item": {
          "id": "a6d06f5a-12b5-4c6f-aabf-5c175cf1c12d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c2b70211-db0d-4f95-9041-877089dee244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7b4780a3-e20f-4254-9ecc-6766383b81bd",
        "cursor": {
          "ref": "0c61575a-9f7e-4e30-ae2d-954f9858c305",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "004d860c-8d77-4056-8f10-8b651ec9bd88"
        },
        "item": {
          "id": "7b4780a3-e20f-4254-9ecc-6766383b81bd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "24636a3f-0a70-466f-b96c-d28147b099ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4780a3-e20f-4254-9ecc-6766383b81bd",
        "cursor": {
          "ref": "0c61575a-9f7e-4e30-ae2d-954f9858c305",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "004d860c-8d77-4056-8f10-8b651ec9bd88"
        },
        "item": {
          "id": "7b4780a3-e20f-4254-9ecc-6766383b81bd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "24636a3f-0a70-466f-b96c-d28147b099ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7183514d-3c05-418c-a3fb-ea5e5d35e666",
        "cursor": {
          "ref": "50a4c446-bc6a-46ba-809a-3429b9002c39",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c3ac673a-eb49-446e-bc53-871bc2cc986c"
        },
        "item": {
          "id": "7183514d-3c05-418c-a3fb-ea5e5d35e666",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cfee0812-85eb-44aa-ace0-3e258b85468d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cdb929-e2c2-4301-88f0-e34236eaab77",
        "cursor": {
          "ref": "13c719ca-9bf6-47be-ac7c-0a158cbad7fd",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "15e23dd0-514b-4da0-9cc5-2f0c99cbe6d8"
        },
        "item": {
          "id": "82cdb929-e2c2-4301-88f0-e34236eaab77",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a665bf9d-77f4-4999-a5fd-834b112b07d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792f5a11-c8f4-4f6d-ad4f-edc55193bbed",
        "cursor": {
          "ref": "cc92e848-fd2c-4e24-9ec3-ae927136c0bb",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b7209921-54e4-4cb1-b93f-c68ad579e5d4"
        },
        "item": {
          "id": "792f5a11-c8f4-4f6d-ad4f-edc55193bbed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2f2d36bf-b564-4e9c-9437-235f80ba3f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8c1261-31a7-4504-a5ea-80ea4159d361",
        "cursor": {
          "ref": "8c31348a-27c2-4bb8-a47e-49fb3983c9f4",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f4c623ef-db61-4145-9351-0e75315a3147"
        },
        "item": {
          "id": "1b8c1261-31a7-4504-a5ea-80ea4159d361",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e728d752-9a02-4bb8-af30-d9e2502e10e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044a3ba2-b11d-4a88-bb07-26362f458ecb",
        "cursor": {
          "ref": "50992878-10fb-416c-b306-3a53bea6b22b",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ab2c5774-4d67-4e76-a2ab-523bddeb8c2d"
        },
        "item": {
          "id": "044a3ba2-b11d-4a88-bb07-26362f458ecb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fdc459bf-24b7-41be-aec1-04455f3428bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df6a010-a70e-4cb6-be1d-625ce0893d6a",
        "cursor": {
          "ref": "cf1c10dd-f692-4887-9f32-eb3b63e25fe0",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "17575ec4-a897-49cc-a09f-2974661c475c"
        },
        "item": {
          "id": "0df6a010-a70e-4cb6-be1d-625ce0893d6a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5b333a3b-1aba-4e0e-90f7-f6561a32e552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fde6696-8052-4599-8c22-142ade748e3c",
        "cursor": {
          "ref": "b1649a5e-ab71-4a15-a3fb-9e6c9c7e9fb9",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7eccd3b1-08e5-4ccf-a49d-ccbe67e1f1cd"
        },
        "item": {
          "id": "0fde6696-8052-4599-8c22-142ade748e3c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7e97858e-caba-4d02-a315-b17e555fdbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d24ed22-2b38-4b2f-baed-61857cecac80",
        "cursor": {
          "ref": "9278bb81-da81-43d2-8cbb-033b354a5ca5",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1aa54ae9-4a4d-4fb2-b705-f971ff00aec5"
        },
        "item": {
          "id": "3d24ed22-2b38-4b2f-baed-61857cecac80",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c8c90827-5770-4b45-8d6d-d3d792844fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce4097a-cd30-460c-8bb6-9e01378606a7",
        "cursor": {
          "ref": "c72402e7-09b1-425d-aea7-17a82b71ef0e",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "52fa1143-c779-499a-9243-ff34ada93bfb"
        },
        "item": {
          "id": "3ce4097a-cd30-460c-8bb6-9e01378606a7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e197e258-cc25-476e-ab42-8d4cea413598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a755b9ae-99d4-49ef-80d1-d00a41783d86",
        "cursor": {
          "ref": "90417058-1050-4aca-b3f7-524678b3ddff",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "630963f4-6816-4fbd-95f5-fd3251471f4e"
        },
        "item": {
          "id": "a755b9ae-99d4-49ef-80d1-d00a41783d86",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2bfc25a4-2d29-4148-ac58-48651cfd176c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc6ae9a-aaf5-4069-9478-97e069b8071a",
        "cursor": {
          "ref": "8b265a8b-e3c0-4a6d-922c-9e7c299ff515",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5964765b-657d-45de-be88-0d89d05d6097"
        },
        "item": {
          "id": "4bc6ae9a-aaf5-4069-9478-97e069b8071a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c951a4e2-c8f1-4946-a1ad-2925c0740334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47a0b41-b055-446b-8f03-3bf3c829a78d",
        "cursor": {
          "ref": "4de16454-f064-4af9-84f0-01641ec4d14c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1767b20d-c52f-4e39-ab88-6da3ab4940a9"
        },
        "item": {
          "id": "b47a0b41-b055-446b-8f03-3bf3c829a78d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bfa89512-67e8-4ab2-9531-399f7ff4ef1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31ea9c8-db41-4a40-b70c-b6ce8d33855c",
        "cursor": {
          "ref": "fbb45c84-d956-4b4c-a132-6c3371e86eaa",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4c02aa10-cd7b-469e-8b36-485844124594"
        },
        "item": {
          "id": "f31ea9c8-db41-4a40-b70c-b6ce8d33855c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1eb614a3-c3c2-4350-b928-3ff9266fc61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc3fe29-bb0e-417f-81c4-1c2784b0fb5b",
        "cursor": {
          "ref": "710b2e62-3675-442b-9b71-d603d1ceecae",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ecba6cc6-e1ea-4bc1-a6d7-531311a07057"
        },
        "item": {
          "id": "4fc3fe29-bb0e-417f-81c4-1c2784b0fb5b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c07ed11d-837a-44e6-b4c5-904ef05c1443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35abcc51-75bc-4cb7-9cac-e4c93aa90ca8",
        "cursor": {
          "ref": "e467e613-5e8e-430c-b32f-ea44320d577d",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ed3c6c59-c166-4648-8bfc-589d445e3c9e"
        },
        "item": {
          "id": "35abcc51-75bc-4cb7-9cac-e4c93aa90ca8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "21373879-9a96-47f4-b6f5-eb8bc7601401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f64ef6-4e0b-4eeb-a3e1-d8bb280a709d",
        "cursor": {
          "ref": "f0762476-47b9-450f-b499-669e53bffc15",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "57a152cd-fd71-4266-b0af-9d7fb37a17c2"
        },
        "item": {
          "id": "26f64ef6-4e0b-4eeb-a3e1-d8bb280a709d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9fb1f25b-c250-405a-a453-2e18ac51600c",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7af3174f-f1cd-4ad0-9ef6-36106395162f",
        "cursor": {
          "ref": "ed709567-76f6-4b76-b62b-88423a75d376",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8c61c919-2d6c-4457-941f-27cc81537ea3"
        },
        "item": {
          "id": "7af3174f-f1cd-4ad0-9ef6-36106395162f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a215765-63c5-49c0-b3b7-e4e3dee318bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8111f77-1610-4606-b15d-7a9c76aa4399",
        "cursor": {
          "ref": "da1f89e3-20a1-44fd-8515-cb77f43c0b6b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0147be3f-0bd4-43ad-a8b0-bf1998300c27"
        },
        "item": {
          "id": "f8111f77-1610-4606-b15d-7a9c76aa4399",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6b77cfdd-3b7d-4812-9b5f-ca4b1cde3d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbc923e-3fd5-4606-9ea4-3e84c00489b7",
        "cursor": {
          "ref": "48578a3c-da69-41e0-9f67-eab69aa058e3",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1fd8c747-5ca7-49c3-a2dc-fe11df262cc9"
        },
        "item": {
          "id": "6fbc923e-3fd5-4606-9ea4-3e84c00489b7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7d6de27d-4b98-4d4c-8a8d-b21e02381dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4290aecc-c43e-4ca2-9964-1e1a19af44d1",
        "cursor": {
          "ref": "37c491bd-57c9-47cd-acb2-578500952327",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "77d5c4ae-a560-41ec-9460-bd9d74af4876"
        },
        "item": {
          "id": "4290aecc-c43e-4ca2-9964-1e1a19af44d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b9e985a6-17ef-400c-bb45-43bd1eb8cd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4932c4f4-8ca9-45e5-a4f5-fef9d7c735b8",
        "cursor": {
          "ref": "4d6dde6d-2f3d-42b1-8cf9-45046225382b",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9615e322-671e-4175-bef8-bbd5fb6a7c7e"
        },
        "item": {
          "id": "4932c4f4-8ca9-45e5-a4f5-fef9d7c735b8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bddaa6da-85b9-4c90-ad0c-c861ed1b1d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacdbe04-4e75-4cab-b147-56fc2ed69e23",
        "cursor": {
          "ref": "75b0e585-9473-4054-b434-5935e4b6b023",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "086a3add-912c-4c57-b43c-43939fa42684"
        },
        "item": {
          "id": "bacdbe04-4e75-4cab-b147-56fc2ed69e23",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "10fca672-71e7-47dc-a619-9a2a14d1ca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2d7bfd-d40b-4b88-8b0e-5fdbaafcf7db",
        "cursor": {
          "ref": "56f232e2-d996-4ec9-8740-275d6284b6bd",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "141e454d-e38c-4094-b8e6-bcef8e14439a"
        },
        "item": {
          "id": "ea2d7bfd-d40b-4b88-8b0e-5fdbaafcf7db",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e7d04ca8-5c04-46bb-b1f6-3fbef992e5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7155d615-618a-470f-ba2b-103c5c1bf70c",
        "cursor": {
          "ref": "374f14a4-1f9e-4265-92e3-b08d2c728528",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6c24c86c-3123-49b2-a5cd-2d60a155e6f6"
        },
        "item": {
          "id": "7155d615-618a-470f-ba2b-103c5c1bf70c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1c30bf46-dee6-4d5f-8922-c7925951a229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c32cafd-0624-45c2-9bbd-203d8fff4520",
        "cursor": {
          "ref": "203f3dc7-dc20-44ee-a56f-4284aa731be3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1ced1ca9-ca66-4c15-af80-62df20668163"
        },
        "item": {
          "id": "6c32cafd-0624-45c2-9bbd-203d8fff4520",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "40aaadcc-b19b-4671-8305-e3d8af166d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb10724-a13a-4b95-8500-0b4f999eafa5",
        "cursor": {
          "ref": "86dfa056-e490-4156-854a-4840d6091c41",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b4ddfa2b-03fe-4aa9-bb20-dad25a6bd1b6"
        },
        "item": {
          "id": "ddb10724-a13a-4b95-8500-0b4f999eafa5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "30a6c841-c2a1-402b-9079-7eed3eb51111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83613a52-cb3d-4c82-bbf1-d5f440c680ba",
        "cursor": {
          "ref": "0a750c34-8478-42e7-bf6c-2c6f949ac455",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "accc2f4c-cd37-4c06-93d3-f3b5dd113c74"
        },
        "item": {
          "id": "83613a52-cb3d-4c82-bbf1-d5f440c680ba",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ef22f368-527c-4326-b038-17e953834e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd17ae6e-c834-4ffd-aff0-ec2367980070",
        "cursor": {
          "ref": "6c9b498b-bc96-4ce1-ad09-b4f83c9c8505",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "97450c96-a1f3-4d6e-a5fe-61a3ec853a4c"
        },
        "item": {
          "id": "bd17ae6e-c834-4ffd-aff0-ec2367980070",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e47bd1db-1c1f-4800-b86d-765961379e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4f8857-a9b8-4a4c-a7d7-e765cd4a28a3",
        "cursor": {
          "ref": "cee86c69-0349-4e05-a3b1-94244c764122",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9fe5aa08-9263-4ba9-9044-9d608c14657c"
        },
        "item": {
          "id": "4a4f8857-a9b8-4a4c-a7d7-e765cd4a28a3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe4c9caf-f0ae-467d-8be9-d57f14396193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c5c17b-cf5b-436f-94e5-a33ad553fd1e",
        "cursor": {
          "ref": "08926c26-d94f-49b3-b129-d579348b36eb",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "27adacda-330f-4979-8e3f-6066d7230659"
        },
        "item": {
          "id": "57c5c17b-cf5b-436f-94e5-a33ad553fd1e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "71bfc08d-5ffa-4964-b81b-a0d78e164f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e465c1e-fee2-4800-97f4-893ae3d456ac",
        "cursor": {
          "ref": "aa6fa53e-8fc3-4bd9-a3bd-0629cea9c525",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2e51cbfa-0af4-4112-8369-1a34ac5cb467"
        },
        "item": {
          "id": "9e465c1e-fee2-4800-97f4-893ae3d456ac",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a272a2fd-6932-4101-a11f-19e39144f0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2918564a-83b4-44a4-b28d-b2514ad7fbc6",
        "cursor": {
          "ref": "23153777-8ebf-4180-88f4-f96573fab216",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2d12bdc0-34fc-4965-8b25-0a8fac3d48a6"
        },
        "item": {
          "id": "2918564a-83b4-44a4-b28d-b2514ad7fbc6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "db0ec0cd-0e11-447a-afdd-e97b41d5cbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6081985-05b7-4647-9777-1bad16833e36",
        "cursor": {
          "ref": "d4d100b5-bbe4-4024-87c2-a3a2860d5563",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a7fdd010-3fdf-446d-8f15-6ca7f3b9e5d4"
        },
        "item": {
          "id": "c6081985-05b7-4647-9777-1bad16833e36",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4f290b72-b628-41d6-a311-3c797511d0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e09cea8-8cd8-4a3e-aec7-46d66b4396a8",
        "cursor": {
          "ref": "7ea0f66b-43d4-4fd1-b5a6-4e9c5cbbbd5e",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1ab28019-3b78-4f47-82cb-63ebadeff30a"
        },
        "item": {
          "id": "2e09cea8-8cd8-4a3e-aec7-46d66b4396a8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bc0f132e-841d-40a1-8a78-773d43c8222f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c11c0a9-ba54-477d-868a-b0f55f1ab4b1",
        "cursor": {
          "ref": "bb576d9a-acd5-4697-afc2-bda03a299b27",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1f668bf8-afd3-4d1d-8519-a889fb7b5e90"
        },
        "item": {
          "id": "4c11c0a9-ba54-477d-868a-b0f55f1ab4b1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "98d67513-55a0-47d5-bcc6-d858a5ce7173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ca1c42-2ee0-4028-a3c3-21ae3cac2124",
        "cursor": {
          "ref": "33894b26-4a3e-4d8e-817a-3e2acca26adb",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9550f835-73a0-4648-8029-e323ad2841a7"
        },
        "item": {
          "id": "61ca1c42-2ee0-4028-a3c3-21ae3cac2124",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a6ce019-3f52-4416-a589-074205c2ae11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48f5e81-c2c9-4f38-a805-3653a2bbe67c",
        "cursor": {
          "ref": "0d8f30e2-80c8-49e4-93cd-f3b59038f335",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4f151599-30a9-4e62-90eb-3006685f02e4"
        },
        "item": {
          "id": "f48f5e81-c2c9-4f38-a805-3653a2bbe67c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "44305687-aa61-4dcf-9d50-02f9b5d8d6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d54fb68-0c99-4947-95e7-9e8bb9c34acb",
        "cursor": {
          "ref": "f74eb1ad-537e-451b-88cf-b8ee05372101",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4006eef4-c16f-4e0d-b673-e1f11fb53ece"
        },
        "item": {
          "id": "0d54fb68-0c99-4947-95e7-9e8bb9c34acb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3f75d3d6-b347-446e-9584-4375e6f2df30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9092e016-7b7f-4ee8-b311-54b430513a75",
        "cursor": {
          "ref": "0a02cf01-a047-47ef-9a84-e701c158abec",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dde6b25c-294c-4bb9-b94d-287a16e38b9f"
        },
        "item": {
          "id": "9092e016-7b7f-4ee8-b311-54b430513a75",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "27f79f34-75c4-4107-b60a-c7fb2fde988d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64f7c91-ee03-4b3f-a8b1-b8ff37386197",
        "cursor": {
          "ref": "e99d71bd-facc-474d-98d2-f5f5bacea90a",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "521ccc96-ee15-4676-91c3-2017bb7429fb"
        },
        "item": {
          "id": "f64f7c91-ee03-4b3f-a8b1-b8ff37386197",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fd9e730c-4b14-49cc-a035-1a928766a5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f37706-6760-473b-a3d0-330c4bbdb77b",
        "cursor": {
          "ref": "465c5049-3af5-48ac-93c2-f036f3d2ea07",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "28607543-117d-4cae-8622-19b98c20be98"
        },
        "item": {
          "id": "45f37706-6760-473b-a3d0-330c4bbdb77b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5e810c6f-6f63-4942-8aee-af005628e970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb68ed3-0c46-4617-b2c3-9d8a1cc99b45",
        "cursor": {
          "ref": "ff316497-1900-4df9-8b38-26f3f12c9d37",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "acd299a5-f1ab-4126-be9e-09d5e47df238"
        },
        "item": {
          "id": "adb68ed3-0c46-4617-b2c3-9d8a1cc99b45",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5448d8e9-e4e8-4dd6-8954-8ecd11ac9d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db19f3c5-c45f-4e1f-b67b-8683590870a1",
        "cursor": {
          "ref": "eb2d9570-1285-4169-8809-398cef74a2e5",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "09a13a58-129e-421c-aebf-3772ff25b9f9"
        },
        "item": {
          "id": "db19f3c5-c45f-4e1f-b67b-8683590870a1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "384ea2c0-3d14-48fb-b219-48ef07d05181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896bc688-06da-477c-8e35-dbfde9fe753c",
        "cursor": {
          "ref": "818d14b8-010d-4115-a00c-d1553275beab",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "291228e4-0007-44b7-83b6-8ad47389a1de"
        },
        "item": {
          "id": "896bc688-06da-477c-8e35-dbfde9fe753c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0b786556-4dbf-472f-8780-b00682082695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb793e79-a2f3-4aa5-b2a7-111a2f97c825",
        "cursor": {
          "ref": "27232a5a-d2e3-442d-bca8-a1b44b699d7a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "af326ce3-ccd6-4220-ada7-f65e8eb3bf66"
        },
        "item": {
          "id": "fb793e79-a2f3-4aa5-b2a7-111a2f97c825",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "574272d1-9f75-4048-b0d9-821c5faa51f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5d670b-aebc-42e7-9c2a-70f476d1d465",
        "cursor": {
          "ref": "aa11b28c-58cc-40a0-b2d4-88ddce793222",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dfdca3cb-0239-4360-8ce6-0cfd39de0d1d"
        },
        "item": {
          "id": "bf5d670b-aebc-42e7-9c2a-70f476d1d465",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2714f658-6c6a-444a-afa8-71a8c2a0e599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31beef9b-a410-46df-866d-e29bf483e1b1",
        "cursor": {
          "ref": "bfa60da0-273e-44cf-9b87-3e5d323146f5",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c29a25ec-0902-4a16-b1e3-5e02c335ce9f"
        },
        "item": {
          "id": "31beef9b-a410-46df-866d-e29bf483e1b1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "57204f1c-9793-44ad-a4c7-90bf8cacd0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b896279-3e85-48b6-b3d3-5319f2e50d0f",
        "cursor": {
          "ref": "51e670e6-0e11-4389-ad2b-98a139683ddf",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e17dbf84-1726-4a91-bbfd-b394924276af"
        },
        "item": {
          "id": "2b896279-3e85-48b6-b3d3-5319f2e50d0f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "91072bb1-b65a-4732-9517-a4b28fa0fd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d137a6d9-a4b7-4f7b-bfb0-824caf7f7b4e",
        "cursor": {
          "ref": "835f6ea2-e7eb-4679-9c17-edb9f91e23d7",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3f276e22-93b0-48f8-a4e8-79b53c14cacc"
        },
        "item": {
          "id": "d137a6d9-a4b7-4f7b-bfb0-824caf7f7b4e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8dd0a933-ea3b-46d1-aa55-73da2f2cd433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71753c4c-0ab8-452d-9323-ed640bdf10e6",
        "cursor": {
          "ref": "d50166f8-6a34-4549-8838-b789af76a7b8",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8a2c900b-c387-4211-90ef-233eebe0a91c"
        },
        "item": {
          "id": "71753c4c-0ab8-452d-9323-ed640bdf10e6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "765a8833-dcc1-497a-b1fb-e06e9edaac2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d17ac38-8924-40e7-a707-2468e8b6deed",
        "cursor": {
          "ref": "d93b926d-d17d-4aa8-ad21-88d5da27516a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "180fe8b2-9f0e-4fcb-b84d-ecaa00f76181"
        },
        "item": {
          "id": "8d17ac38-8924-40e7-a707-2468e8b6deed",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "43ea4a6a-a408-4769-867d-b4e7d17af83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb2bc38-06b4-4159-bba2-1a90104d19a4",
        "cursor": {
          "ref": "4a72e688-d2dd-489d-aaea-a494606365e6",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "bcd9548a-5f9f-4f27-89ca-67eba4767bdf"
        },
        "item": {
          "id": "5cb2bc38-06b4-4159-bba2-1a90104d19a4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "094f1932-d41e-47fd-8583-17e0ba61104a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f48ee1b-c2c1-421c-b357-af237a956446",
        "cursor": {
          "ref": "72f7a082-d444-409a-afbc-bfc083f3e26f",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4a4ba8a9-5d19-44a2-afb7-008ec49a80c8"
        },
        "item": {
          "id": "2f48ee1b-c2c1-421c-b357-af237a956446",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7669df35-826a-4f3c-9e4b-fe12cfc9f63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875943d6-1217-4d47-a884-4c052d5e68ac",
        "cursor": {
          "ref": "7e1f273a-154f-4340-9e7c-5db91c5e9a97",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "915f7156-1258-4011-8ccd-246f076e1a46"
        },
        "item": {
          "id": "875943d6-1217-4d47-a884-4c052d5e68ac",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "43efdb87-fadd-4932-965c-4ab57c0593dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae546e0d-ab9c-49d5-b29d-ad17ebfe6501",
        "cursor": {
          "ref": "bce4c337-9e53-4420-9b05-d3b85296af37",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a4ab66cb-9dba-498e-8db2-0ee8e191f5c3"
        },
        "item": {
          "id": "ae546e0d-ab9c-49d5-b29d-ad17ebfe6501",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "54a242f4-417f-42e2-a964-8e19ba9d5733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fd77e7-77af-49ba-818e-c96316831a01",
        "cursor": {
          "ref": "bc58ca10-817e-4320-b875-1ace625546b7",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3258db36-13ee-472c-b7a7-ee1d23999ed8"
        },
        "item": {
          "id": "e0fd77e7-77af-49ba-818e-c96316831a01",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "96354e3d-f3a4-428a-b566-b1332a7ee66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4347d7-e01d-476b-924f-4b563c0fae02",
        "cursor": {
          "ref": "677c99d7-48eb-4d08-8c96-1b39358340c0",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ff462ea2-e99a-4027-a3f3-83b33af1ce0d"
        },
        "item": {
          "id": "9d4347d7-e01d-476b-924f-4b563c0fae02",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8b6df3a5-313b-4ee5-b11c-e3963290493f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45462fd-386b-4450-84b5-a946963fb225",
        "cursor": {
          "ref": "263e54b7-8c4a-493c-b35a-e2b9425a1e47",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b8740eb6-2aad-4292-8f55-5a1d052198d5"
        },
        "item": {
          "id": "d45462fd-386b-4450-84b5-a946963fb225",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "55f5a210-ee3b-407c-96d7-88e32e587aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d86c4c7-5950-4fa4-bde1-3e2b540f448a",
        "cursor": {
          "ref": "6f8e0121-d7cf-46e3-98b3-f93edcee59cf",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b9b3b87b-b28d-44b3-a1d2-92de3eae976d"
        },
        "item": {
          "id": "1d86c4c7-5950-4fa4-bde1-3e2b540f448a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "26b87e9e-698c-42f9-9d2d-f7aea60dc1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de26a03-5a56-4d30-b5bb-06079149be24",
        "cursor": {
          "ref": "6bdc89b0-3f1a-4074-aab0-65d8774572e5",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "05ee1b3f-f74e-45b9-ad2a-8c62d182f8cc"
        },
        "item": {
          "id": "7de26a03-5a56-4d30-b5bb-06079149be24",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "498223b9-c4d0-43f8-aa50-c1ca7a8d1270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f377451-4a98-4ae9-87a0-d72f5dc04548",
        "cursor": {
          "ref": "e907f3aa-7db1-4354-839e-a49fdb9c1523",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f6268cf5-c9b1-4a8e-bcdb-a17ffdedeeee"
        },
        "item": {
          "id": "8f377451-4a98-4ae9-87a0-d72f5dc04548",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "52489f7b-1f09-467f-a671-2269298136dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa171bd8-e974-4e2d-bfb9-1dc4b96970ed",
        "cursor": {
          "ref": "8726cc79-31ab-45e3-9f06-0e639fe6c906",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "06e2f6e1-c07c-4c08-a6e4-12684758e04a"
        },
        "item": {
          "id": "aa171bd8-e974-4e2d-bfb9-1dc4b96970ed",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4d9d182a-7c33-4a72-93f9-8ce2ecaf60c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4942ccb-f141-44d6-8417-311670b0917b",
        "cursor": {
          "ref": "3c9503cb-42cb-4e47-8f66-ffd93c61d315",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3f576345-4e6d-49d9-92ff-12e7ab748759"
        },
        "item": {
          "id": "b4942ccb-f141-44d6-8417-311670b0917b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b77b7c95-6504-4d61-9213-b08439cb809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6446ff8-3998-415e-8520-bb3cdf2ecbea",
        "cursor": {
          "ref": "9ed7469a-6fb7-4836-85e1-6623f5bd6f31",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "28c720d0-dc73-4b60-a7de-23bb20da35cb"
        },
        "item": {
          "id": "b6446ff8-3998-415e-8520-bb3cdf2ecbea",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dff89e56-0d7e-4cfe-b6ea-fc9b8cb00d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27066b04-cd6c-4cca-97d7-04a3c8e69147",
        "cursor": {
          "ref": "c5c95b09-1e62-4fc0-8cfa-658ff249e6f5",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4660d312-feff-44e0-8f98-3a07add69e50"
        },
        "item": {
          "id": "27066b04-cd6c-4cca-97d7-04a3c8e69147",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "100a0208-d2e1-4dc1-a21b-2b4168e25585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec900309-038d-40c4-beb6-36def789ecba",
        "cursor": {
          "ref": "7887194e-37a9-4aab-b774-645da207a129",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "96535782-dc66-4dd4-946a-55c9b7f26f8c"
        },
        "item": {
          "id": "ec900309-038d-40c4-beb6-36def789ecba",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "882e888c-9a3f-4bb9-88bd-d31a79ac4b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377a4b35-06ac-4764-acc1-529a560d6d1a",
        "cursor": {
          "ref": "c7460377-4e91-46d8-a178-66c4b10a29a2",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "aead7c0f-e0a6-4f61-8164-3646cceaa4dd"
        },
        "item": {
          "id": "377a4b35-06ac-4764-acc1-529a560d6d1a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bd13b8ee-1dc9-4d76-b324-db24f0b9b856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d518f2-566f-4d20-8144-7951c7c67dfc",
        "cursor": {
          "ref": "20d17544-ff89-4a43-9810-cfe5a7902fc8",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8de8d8ce-23de-4427-bf18-b3a429797d27"
        },
        "item": {
          "id": "79d518f2-566f-4d20-8144-7951c7c67dfc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bf4b4c2c-7199-400f-914f-8fce338487be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f41e1eb-44dc-433a-9668-8288e2a0fa7c",
        "cursor": {
          "ref": "77176060-76d3-486d-9004-a346b2426429",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "98e10c07-65f2-4edc-9048-2b1297eb34e3"
        },
        "item": {
          "id": "5f41e1eb-44dc-433a-9668-8288e2a0fa7c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1d6db72a-783b-43e3-9341-c43d4a82dc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ea6e78-181c-47a8-8ef9-88dda97b640c",
        "cursor": {
          "ref": "8268bc02-295e-400c-84ef-556e8f037e1c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e5d65565-290e-484e-8d3f-75918cc0f97c"
        },
        "item": {
          "id": "d1ea6e78-181c-47a8-8ef9-88dda97b640c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3e0ca02c-a21d-4641-9b23-840dee2efd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be6557d-3b8c-4ea1-8fb9-04b1e1fb9e72",
        "cursor": {
          "ref": "bb6f9722-e199-4790-aae0-049f484685aa",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e124f83e-3c55-4d31-b00d-f9def84b7ea8"
        },
        "item": {
          "id": "0be6557d-3b8c-4ea1-8fb9-04b1e1fb9e72",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "94167780-5d11-47f9-9060-12e8577faa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b731650-264e-4525-a787-5f221beac14b",
        "cursor": {
          "ref": "76b7cc72-8a37-4bc2-8dcd-d25260f47ea7",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ef13e05b-38dc-46a3-b17b-a364e7b51f38"
        },
        "item": {
          "id": "7b731650-264e-4525-a787-5f221beac14b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4c68be5b-8b80-4551-9998-e048b43a13e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338f8149-dbdb-4539-b2c8-ac65399b3aca",
        "cursor": {
          "ref": "341cf5cc-ea3f-4b38-9373-b623982b6666",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a6aae6d2-354d-4706-8161-3829d8656f98"
        },
        "item": {
          "id": "338f8149-dbdb-4539-b2c8-ac65399b3aca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "319b74ac-d66e-452c-87a9-8c39421975d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5feba681-136b-421e-a2a2-bfb471237d27",
        "cursor": {
          "ref": "67eee366-8a9e-43de-b094-2949e5fa3c1c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "aec7083b-cb88-4258-87ff-d539ed1709d0"
        },
        "item": {
          "id": "5feba681-136b-421e-a2a2-bfb471237d27",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d7853e43-6c04-4301-b05f-e7159c920e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e43f6bc-e2c8-4195-b070-824eb68a5a6b",
        "cursor": {
          "ref": "069d4bc1-83e7-4033-8ea3-c6f4c21a563a",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "01dad486-f1f9-4c38-a5e4-2c28c8f615e0"
        },
        "item": {
          "id": "8e43f6bc-e2c8-4195-b070-824eb68a5a6b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4d583cf8-bcfa-4762-acaf-d39b2ff7a067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac84b80f-63e8-4518-b559-de276eae4418",
        "cursor": {
          "ref": "d9ebff20-9ed8-46fe-81da-9343db0e84c0",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2913c97f-096c-4753-b6f4-063884063a84"
        },
        "item": {
          "id": "ac84b80f-63e8-4518-b559-de276eae4418",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afb6c6bc-d0a6-43b2-9d6c-9af1a877dbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c61953-60e7-4596-a908-33c337744e40",
        "cursor": {
          "ref": "7b459c60-e8b4-4888-bd64-70ae8bdd0fdf",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4a5c11b2-1aad-4354-b51f-7a68027f92ae"
        },
        "item": {
          "id": "68c61953-60e7-4596-a908-33c337744e40",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3e4ebbff-85a9-46e4-8839-47a37a42a836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d63ad45-c1d8-43dd-91d4-4f7642237afe",
        "cursor": {
          "ref": "ca520234-a69f-42f7-b1cc-db11da2a6d0e",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "88e19c06-b5ac-42ae-b39a-56f22a30cb45"
        },
        "item": {
          "id": "3d63ad45-c1d8-43dd-91d4-4f7642237afe",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c8cb8a7d-fff7-40f6-841e-bd0e923eeaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf82d88-d5d6-4839-b361-385fd28ce286",
        "cursor": {
          "ref": "30ca7906-9956-49ed-9238-fcdab1d89d27",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "29ef7fcb-70f1-4224-8f7e-6c435c0ef056"
        },
        "item": {
          "id": "fbf82d88-d5d6-4839-b361-385fd28ce286",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "688421ac-8c8e-4717-a37e-fc2a9b50911b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6b8d8b-5ede-469f-9ce6-ccd4401edb27",
        "cursor": {
          "ref": "d79a1280-1f94-48ba-8a15-8597a57689ff",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6b902bf6-565e-450d-a875-d4d6447b90f8"
        },
        "item": {
          "id": "2c6b8d8b-5ede-469f-9ce6-ccd4401edb27",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "afcdae9b-d46d-4312-946c-1853b4e54b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e43a4d-3b7c-4c20-a948-32eabb84201f",
        "cursor": {
          "ref": "57255381-d30a-4cbf-bcab-960485efb79d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3e26e027-8c79-4e52-b9cc-2111e15e570f"
        },
        "item": {
          "id": "b1e43a4d-3b7c-4c20-a948-32eabb84201f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5c477c04-dc13-4861-931b-75609edbca41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae88d3f6-8d63-4b25-856b-90cbe39c7e60",
        "cursor": {
          "ref": "06a2afee-fa15-441d-86e6-214cbfbdad19",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "304c0d3c-cff3-4388-a786-6bb6b509f5a6"
        },
        "item": {
          "id": "ae88d3f6-8d63-4b25-856b-90cbe39c7e60",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2f9516a5-10ac-4804-b21b-d7f6efd9ddb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3a45f7-1ee1-4020-9a71-1f8e7e6cae2c",
        "cursor": {
          "ref": "6f9a5e6c-d9ec-45c3-88fa-19844fefa583",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d7510cbd-f370-455c-800b-d8bf11632d60"
        },
        "item": {
          "id": "4a3a45f7-1ee1-4020-9a71-1f8e7e6cae2c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ac6c6482-b563-4d32-8b65-78af6ae01a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b07e969-c90f-4c24-acae-3ca96ef95750",
        "cursor": {
          "ref": "f21b8f1e-002d-4dc9-ba9b-e274ccca94df",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "39196658-385e-4df1-89ec-7762c6547b73"
        },
        "item": {
          "id": "5b07e969-c90f-4c24-acae-3ca96ef95750",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "45cf0e08-ddb2-40b0-bfb5-1209b3cc50d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c5c5bc-7b6e-4a13-a8c2-0727716ba4e0",
        "cursor": {
          "ref": "7cf63e57-700d-41c0-9932-87916442a2d7",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ea43aebe-2742-4445-a272-90f239db23ab"
        },
        "item": {
          "id": "30c5c5bc-7b6e-4a13-a8c2-0727716ba4e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4521303f-8fda-44e3-8a6b-bab0979dff5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cb416c-7fa3-4eb8-97cf-dad5a148f169",
        "cursor": {
          "ref": "ccc72f03-d8a3-49d3-b6b8-f5d3e5247f90",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b42bb072-e34d-41fa-9a02-4aa40876d221"
        },
        "item": {
          "id": "85cb416c-7fa3-4eb8-97cf-dad5a148f169",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f0a2505e-6747-478a-96f9-4a810092a740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7809db73-890e-408d-a910-4f15b10f74e7",
        "cursor": {
          "ref": "a39e5355-7e88-4f6f-bec4-de3b39cf3cc0",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4e631770-c8d6-466e-89df-d5f4f032a6b9"
        },
        "item": {
          "id": "7809db73-890e-408d-a910-4f15b10f74e7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3ffef6ef-7556-4eee-ba3a-19b011a08920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd3fba0-670d-44b2-908d-c542ab9bad13",
        "cursor": {
          "ref": "9035fc24-5d48-4a93-9dec-07bd800d79da",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8149841b-36ba-48d5-b39f-c7414aca8885"
        },
        "item": {
          "id": "3cd3fba0-670d-44b2-908d-c542ab9bad13",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5afd69b8-be0b-40a5-959d-ae48109359c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4823147b-9284-4580-8f77-f9e87898af0b",
        "cursor": {
          "ref": "674bccfe-d042-4506-ace8-f40b7506f0a7",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9dfe46bf-3216-471a-95ca-7824c47ac4db"
        },
        "item": {
          "id": "4823147b-9284-4580-8f77-f9e87898af0b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "510bc6a9-661c-4043-8cdb-9b3842bd06b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064213d0-8868-4f2e-bd4e-2e3e48581bf1",
        "cursor": {
          "ref": "f0037152-afd9-4240-8e11-98f28c26bc74",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "44f55a49-eb79-4822-bad7-cdc1396d6604"
        },
        "item": {
          "id": "064213d0-8868-4f2e-bd4e-2e3e48581bf1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9eb405b4-75a2-4065-b95d-20e1e22d8baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bebd09-09e8-4f21-82cb-c9c44781613c",
        "cursor": {
          "ref": "5502bfb1-a1d4-4764-8524-0369f4ea3a46",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0e07b470-8d2a-4bd1-8eff-4d5f30b69cae"
        },
        "item": {
          "id": "b4bebd09-09e8-4f21-82cb-c9c44781613c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8acd16a6-6416-4063-aaca-b80d3afaa0b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48c90df-27f9-4c44-ab46-3a38857f3dda",
        "cursor": {
          "ref": "88b7a236-f45b-426b-81a7-ff86c2ee50d4",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "641e45b5-0f92-4cdb-9d64-4246975f632c"
        },
        "item": {
          "id": "c48c90df-27f9-4c44-ab46-3a38857f3dda",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6b622eb3-d874-4200-9e76-7c92277579ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa7b4cc-3c36-469c-be70-186b2f1094ca",
        "cursor": {
          "ref": "d5de8e27-e7cb-4c00-8260-e834f287abed",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6ec06c98-90c9-4450-a104-57c0103438e6"
        },
        "item": {
          "id": "afa7b4cc-3c36-469c-be70-186b2f1094ca",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb45d132-10b0-43d3-886f-21a51bd1f8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fabe96-0cbe-4de4-9f91-d20b33f2a992",
        "cursor": {
          "ref": "d085d276-0853-4b84-8d39-b57781c220ef",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3ee8e906-f58d-4017-83e5-b3df580660e9"
        },
        "item": {
          "id": "02fabe96-0cbe-4de4-9f91-d20b33f2a992",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "32efc0d5-13d2-4858-bb05-8e9158622578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f7ef9b-a700-4097-92ff-f2cc6f10d11f",
        "cursor": {
          "ref": "f354cabe-e807-4adb-98d0-5ca6a9e6cd02",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a3e68b4e-5e78-443d-8735-8dcb54478637"
        },
        "item": {
          "id": "d8f7ef9b-a700-4097-92ff-f2cc6f10d11f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "49d1aa6a-294b-41c8-a5a4-ceb6b43ea201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c73dc68-e84b-401a-9700-7be83453513d",
        "cursor": {
          "ref": "cf206ce5-46b6-4963-a31d-2561ff8e14fb",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4227134c-d4d1-4412-9574-7ac52c3fc421"
        },
        "item": {
          "id": "3c73dc68-e84b-401a-9700-7be83453513d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a5c7319-e363-4186-90d6-84e5a6d58dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d5723a-7866-4fca-a592-298331df4521",
        "cursor": {
          "ref": "2fa28122-54fb-472a-ac05-dd3ba347cdb4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6557685a-318c-4b5c-94f3-e980e486311d"
        },
        "item": {
          "id": "e9d5723a-7866-4fca-a592-298331df4521",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ce4f53ac-7d5f-41bf-beed-6a4cd0666f2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "37ee0fe8-e959-44b1-b249-bdd84d4b5ec3",
        "cursor": {
          "ref": "775193bb-93a7-4615-81e9-a519e6d9eec7",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "12c82328-25ca-4422-bf19-21dbe1717a78"
        },
        "item": {
          "id": "37ee0fe8-e959-44b1-b249-bdd84d4b5ec3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "83fb81b9-3dfc-4099-abc0-0f201b838523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "52f80fbf-48dc-46a1-94b2-98ef2de03c18",
        "cursor": {
          "ref": "e97cf123-7339-4cb1-9e83-27da530fb1a3",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6e580084-def9-4902-9917-b5378b0eac9d"
        },
        "item": {
          "id": "52f80fbf-48dc-46a1-94b2-98ef2de03c18",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c219178f-0947-4b75-aeb9-872575b0d69b",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaeb479e-4ce7-45b0-ac1b-934d2c67d3bd",
        "cursor": {
          "ref": "92b6d182-2489-42cd-a873-d0d73dc9aa7e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7602fb81-754a-4656-b9d6-6b66d753f87d"
        },
        "item": {
          "id": "eaeb479e-4ce7-45b0-ac1b-934d2c67d3bd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a7e8b597-a745-4a09-9ab5-05e8beb778d5",
          "status": "OK",
          "code": 200,
          "responseTime": 2342,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "458c5476-65ce-4386-82bd-2938fa5c39ec",
        "cursor": {
          "ref": "a2d09823-eada-42ca-bffc-c858b33aecf9",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a10b2fcc-51c8-48ad-b10c-ffd36de92f48"
        },
        "item": {
          "id": "458c5476-65ce-4386-82bd-2938fa5c39ec",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a18af7b8-ca53-48a7-b3d8-0016c9d4ee14",
          "status": "OK",
          "code": 200,
          "responseTime": 2285,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
        "cursor": {
          "ref": "36408e0c-c17a-4f22-af77-b6e084c435a3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cdcb09f7-705b-4413-8b27-161c6f207f29"
        },
        "item": {
          "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "81a84a81-11cf-412e-b589-8a527bd88c7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
        "cursor": {
          "ref": "36408e0c-c17a-4f22-af77-b6e084c435a3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cdcb09f7-705b-4413-8b27-161c6f207f29"
        },
        "item": {
          "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "81a84a81-11cf-412e-b589-8a527bd88c7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
        "cursor": {
          "ref": "36408e0c-c17a-4f22-af77-b6e084c435a3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cdcb09f7-705b-4413-8b27-161c6f207f29"
        },
        "item": {
          "id": "6b892e31-b9f4-4aa4-838e-7b590f9ac2ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "81a84a81-11cf-412e-b589-8a527bd88c7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "bc068a11-3a08-4a87-865b-0fd017b45187",
        "cursor": {
          "ref": "ca2e40b3-7a73-40f9-a92f-d437129cd4be",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "461831cc-8d82-4fa8-bab1-2a857ddb7bc7"
        },
        "item": {
          "id": "bc068a11-3a08-4a87-865b-0fd017b45187",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c894fc2a-9bf3-42dc-910d-76297d49902b",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "84d9221f-f995-40e8-9c36-52fc90eaae85",
        "cursor": {
          "ref": "9a25047f-7686-4e6f-9ba4-0e9458d526f7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f5a9f3a2-7eae-4372-ab99-b07b48ed8532"
        },
        "item": {
          "id": "84d9221f-f995-40e8-9c36-52fc90eaae85",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cc04aec-246f-48c8-a07c-d62c709d6027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "84d9221f-f995-40e8-9c36-52fc90eaae85",
        "cursor": {
          "ref": "9a25047f-7686-4e6f-9ba4-0e9458d526f7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f5a9f3a2-7eae-4372-ab99-b07b48ed8532"
        },
        "item": {
          "id": "84d9221f-f995-40e8-9c36-52fc90eaae85",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cc04aec-246f-48c8-a07c-d62c709d6027",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "499f97a5-2259-40bb-9c19-83c766c0628a",
        "cursor": {
          "ref": "b197fa79-c2ab-41ba-8513-25e491012e96",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c833d2c8-e674-426b-9498-7bc772db6578"
        },
        "item": {
          "id": "499f97a5-2259-40bb-9c19-83c766c0628a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "904ec7b8-a4d2-4bfb-84de-1422824f9f7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8736ced5-366b-4fd4-8365-6f06fce32639",
        "cursor": {
          "ref": "d85a1652-21fd-40c0-a5a8-9da4f3722b1d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e2e320a2-1edf-42b6-bb0c-936693b96ca9"
        },
        "item": {
          "id": "8736ced5-366b-4fd4-8365-6f06fce32639",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b842f989-0573-440c-a066-5f9b4bb462b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8736ced5-366b-4fd4-8365-6f06fce32639",
        "cursor": {
          "ref": "d85a1652-21fd-40c0-a5a8-9da4f3722b1d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e2e320a2-1edf-42b6-bb0c-936693b96ca9"
        },
        "item": {
          "id": "8736ced5-366b-4fd4-8365-6f06fce32639",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b842f989-0573-440c-a066-5f9b4bb462b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2f057acd-1c87-458e-a270-9f8376c14488",
        "cursor": {
          "ref": "b8c33f15-5a85-4674-948a-81989d650ff1",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a4c2ef9c-19d9-43fa-911c-de930c35a673"
        },
        "item": {
          "id": "2f057acd-1c87-458e-a270-9f8376c14488",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f7389ba1-7a2f-40b0-84d9-c52b9d031c1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}