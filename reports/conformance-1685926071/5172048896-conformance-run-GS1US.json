{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6c5579ae-6786-4ddd-92a0-3d6a2b4b8561",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2f291917-874b-4fa1-a14b-ece8db94b29f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76b9358e-8ee4-4234-8b0f-359e6132bcd5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "927252cc-da52-4131-b95a-ed82e0a9b70f"
                }
              }
            ]
          },
          {
            "id": "3abaeaf9-69f5-4467-a1f2-cbb3c0d94a54",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f5e4337d-28c2-4cec-b1d3-e0a796259a55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3be8f23-f491-407a-919b-a2e5ada53452"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "22e069bc-57db-41c4-a043-09497a86c12a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3951bc14-3507-4feb-aa06-80819695faaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c685ddd5-abf4-45e7-92f9-44518441e6b9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca0260d7-a504-44d9-b73e-e707d500455c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5dbf40bd-295a-4ac6-a9d9-88efcb9175b4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2c37330-55f3-490e-a2cf-f06ab08def7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9560a2a7-ae4e-4f92-8547-b545d8f1d9ec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a85f6cea-6cdf-4cef-8e9f-3d6ba7261964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3568291-2a9e-4368-b22e-0b7ab3acfd75"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e981f40a-1f1d-449f-99d2-9a882bb8ff34",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3b42d5bc-6f00-4dd6-8e13-4a194400f6aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b0012d4-1d42-4c90-a6a8-c7947c4a0de0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f250ae7-d57a-4bf9-b00d-4ba44295a723"
            }
          }
        ]
      },
      {
        "id": "31a59200-b2c3-4774-bf66-d9c23b77c805",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c3baff8f-115b-4764-b14b-de19b523d2a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "649a1261-759c-4d11-a786-5befd01bad1a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a523654f-7b0f-4391-ab66-6f3ee1af2ffb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad27418c-8c17-4311-86a6-4561080570c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1a1f8af-5634-4351-9d40-66b1ac9b2e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c05368-f559-4f54-a047-58fff94cc322",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337bb71e-77cd-4845-9526-0255a88c32d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ead3c696-de9c-42ae-bee8-568da1827ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9c8026-2b3e-4120-a37b-a71c0fede05f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea34a5c1-057a-44c3-8255-75f25f03e935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0bd3e560-36e1-426a-b5ef-8b59e67bd464"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "913ac3e9-3a81-4ab4-95bf-fccfbf217316",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c4b468b-54ac-4fa6-87f4-f371b7eba156",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dc003d-9d42-44b4-9aea-23d7dc61dffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37749506-e6ad-425e-9ac6-46d2a31d969f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7ce532-72cc-4e63-89ad-d44dc239af5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ac218d-247d-4102-addb-2172f567cfbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5e8b10c-bdab-4cdd-bfee-2bb1a18028e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56f68149-e2ac-473e-989c-30573bb63a8b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d5b5877-bc60-4e45-ad42-e23e086d02ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "815f784f-42ce-419d-a098-ac3cf778c6d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83456c47-3dab-4048-9493-59aab038b6ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e2e51c0f-15b4-4bb2-a85f-7c1036c8dbba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "673bf0b0-db82-44f1-9366-712dbdf6fdd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9929ccd3-a814-4457-a379-cf9eac7bf826"
            }
          }
        ]
      },
      {
        "id": "1681e78c-d807-4af0-9e11-a7df9fefa5ab",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "01384ff7-7ef7-42ad-bcb9-cbccc9a7cf2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db639059-0a09-47cd-aa1e-a6547bbf6a18",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ad7a274a-d6bb-4344-889d-a577c9c70a8c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e737a80f-7407-4af5-989f-4dcd36f88f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424c5a0c-8c24-4ca6-ad97-d5403391c9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4347fc4d-e56f-44ea-9a31-b406ba5ce262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48f72eab-451e-4591-8c64-5994c40d10a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68e1c12-a787-4b96-8352-0c42ee52fcc4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49174eec-8034-4ae4-8547-c9e845019357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3bfd6c-7dc5-4f7f-8aa5-50f3d94d2c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251612b0-974e-491f-b075-908163decfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a8c5220-5ba3-4984-b2ea-627337ef334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc1a5ce-05ca-4aab-ad7b-718b49195d85",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a029d072-7e15-4e7f-9d90-9003ad68418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a160c09-c788-4d6b-8799-00fa1d72e169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7f4ef1-cf3b-44f7-bc8a-cf71bd86c044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01099481-9e70-4f2c-8110-963595faf660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fee2b13-691c-4e38-8d2c-76d96ab24269",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c9b375-b892-49cb-94d6-9dffa3fc443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341f06a9-38fc-46f0-affc-d4d3dd97137f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8b6709-2a78-4c1b-b915-2cb8d8a68c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58d1b16a-66df-4501-a20b-9dae6c239885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f78c2c-2d18-4bcc-8ca5-463e72303b59",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fea5ff-f6fc-4510-8f34-7abc119058f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bda9d56-7d37-4204-adea-8d4b1a3d8c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cede80-1bce-4ebe-8b59-51847b624b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d8b6fcc-7f17-4791-ae70-ada4d7a8772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91f3526-6e6b-472a-81cd-1fbe397a7a91",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2015b811-86af-495e-a233-25f73a094fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a319e3-9f20-414d-a5d5-d556f621f6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4b1228-1cb7-4abf-972b-dc57ef93ae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fffde5c9-3c38-4f4e-8fe0-4fa00c1168d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877dc4d4-bf3f-493b-93a3-2e67794298dc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601e9ecf-75a0-41eb-9f01-8a0e7336f227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae780cc-ea79-4ddd-b63b-4cba9068e0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5db8c8-0924-41c4-b746-cd6f0bfcd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5958c4a-fe88-4c3e-b033-bdbddeade1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14075da-d290-4ec2-ab1c-784be572041c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62b4644-4b42-49fa-ae11-410d4302df6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6677fc-1e83-4449-aa6b-1ea93802389a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e505ca1d-f2e2-4c08-b0ff-ac638dc68994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ffac8c8-4fee-42c3-886b-df03c1849091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd77e9ec-9afe-4932-9ce0-2b57a3113286",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f7cf42-e4df-4b3f-af8c-0b87856f7f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58cb53ec-ef3a-4524-a03f-3a4d3b18e9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2337c393-8287-4b40-923b-fb4f9044f867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "803a1e56-ce08-4a72-abe6-b150041d96d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e725632-438b-4685-8845-990c5da9f4e6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1993da4-2178-4f43-8bef-9e93d2a00021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "165d8336-50ca-4789-a59e-9140d27fe4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dd70e3-b32e-4007-ad87-f6c99f57a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0075ee60-a2df-4d62-8b86-6965c44b1a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a43d808-749c-4e54-976f-d427f73b5c68",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7e0faa-4393-4bea-a99c-61fddd96a7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d78094-6a38-42ee-bb82-4ab9d8e502b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3a84f3-f749-466f-b378-8d540786a4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c25b803-25b1-4a5b-8517-9aa9285324b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa102e7-421e-403c-a2f3-dedcb0530b46",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6e8226-bba4-4c53-8655-e15ef65fa3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc557810-52b9-4764-802b-501758d1133f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90cbeb7-bf8a-4954-a58f-57d68dc1c48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b780215-7dfc-425d-b8da-9876505d4b4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a585f358-e5b8-400e-a9f5-3256172ba556",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3bf44c-00d3-4bd8-bcd8-8bc311d074c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d99dd4-6eee-44de-a6db-20597b55b1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b89da4-ae62-4da8-81d4-e8040ffeb711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cda978e-d94c-4d12-8d80-f42e0fd8212e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18304185-8d38-4cd1-9918-92bf1be31b68",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34f49ac-2a0e-4416-b317-b6ed6ab4ad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90b3dfe-f972-48be-92b0-11dd9a63c1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4135391-8c2a-49b8-a2fe-540242d81732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc3c44ea-69b6-43bc-a4c2-450dbcfde9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d30ff-bfb1-4f8c-8f51-124f0c908139",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4bb5fd-aecf-4762-8b1e-3b7a6cdaf114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c4bbce-8ffd-447c-96b7-5f2e133e7637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df8d967-a9f1-49f0-85ae-b86db32efaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6593d210-e275-4dff-be53-9827ed1e5de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8db0ce-faeb-495f-9964-b85f51bf882a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5740b0ba-2119-4cfa-b43f-95d6dc018612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e641c32-8cd6-47a9-9b4e-3755623e5bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0c1ef7-67c3-4b19-9a66-98b80f14e352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aa01210-8369-4e94-ae99-f510754ad760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aefec04-0a7c-4fd6-997d-119bfc4b59e2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351b4413-eaea-4387-9c75-4004f85339ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c30bd5e-bea4-42de-a9f4-125b63baadf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47fbe01-5c5c-4a9a-ac7d-7cfd8de0ca2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24718aec-b061-4dfe-aa63-2ac0ebcda0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a6b1b4-90d6-4627-a900-13a7839b4280",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7ae866-bbd0-42fa-929a-d11d995f4c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2aac622-00fb-47cf-a3d5-cd2f5029b609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265cdeb3-6ef9-4fd6-b0c9-cf285ade33db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15d93ef-3048-41a0-8b1a-de0a6ec4fe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4973b832-21ce-4c30-9248-64e84c2e1a16",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058fb55c-8792-4c27-bacd-acb41d978fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8ca8ff-0a5c-4db8-938a-375663cc9890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1a151e-1353-4b76-a538-f0b5936eebda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12c6b6d1-b9fd-44be-9fdf-866a3bb77dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481057a1-35d4-40f9-a90d-364171ed05ca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4939a1-743b-4ab2-9a81-7d49a1ea1f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75df7947-a6ae-45ff-a8ea-e5f5411cf52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a068b86-729a-4bdb-8af5-8eb6edf35ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "879146d2-5da6-4eef-bc39-a42eb83c67c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dc2266-d472-4d6a-8e2b-477d12b49db9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36675fcf-1b60-44fe-ba88-ab79806d156f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21a248d-bdf8-42e3-a0bd-3b88bac4de77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50df187d-3adf-42a3-929d-c7d9e71231bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3146d7-66e6-4f87-98b7-e1c7874a3aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f00dffc-49ef-49d4-9dae-6d263732d850",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85ae619-171a-40b4-a51f-ae8885448351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ece13d-f5da-480d-916a-3f498f1372d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe011ac8-94ef-4d68-a57d-553b248bcc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "461a68a7-ffb9-428e-8018-da51163e9b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53527710-44b4-4078-94bd-d2833e290a3d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ec3b2a-fc4e-406a-9c13-2d5e890223af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48f6b845-b153-4915-ba34-d1db9b1cbac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c8f4b2-2431-4326-99bd-0c05c13f22d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1efa3c88-cc6c-4c13-b3bc-0cf7a973989e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a6d447-af9c-4d53-b0e0-1b495582b385",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256a516e-57f3-42e8-bac7-501b0b2f77ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4138e261-4330-49ee-90f4-6a217d2a4a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5af835c-4030-4637-a6db-0488219c0e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cedac6a6-aaea-4f1f-b33c-1f20573ebaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c11f9a-f05e-406a-bf73-07606d5f1a65",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801d1c09-9c98-4a58-9786-c4d8311dbfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442b5b3b-3d64-401b-9d11-2b6376b9cb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1675114-199b-4dd7-9d19-6a0c612be9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11365c6b-3cd5-4138-901a-bf488525190f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faea5477-74e1-4bae-aa96-8f6201738b14",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e9c7b3-65cc-4e76-aa63-01a6f934aeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5283d2-2a2b-4ab2-abbd-9e530d383a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111fabfe-cc45-4086-a269-81183e0a5b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85d90140-eb4a-45f1-a775-c9478bd63898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63e144b-829f-4d2b-bfdf-c51fdc6f4acc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fcb413-1148-4a4c-9fd8-ecef7b16237d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf700b5-0e36-444c-b1eb-2d541ea4b434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33efc8ca-7bd5-4488-878f-20da0cc495ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb062fb-51b3-4505-a946-6a422edf1c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858889b0-4af3-4cc4-ab75-e37d97160dbd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f89b59d-c9a1-4518-86db-8690c451a223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aee72a4-fdf9-4dc1-80be-bcb562b35391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dd151d-a458-4234-a60f-783a041efba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05260734-2ab6-4e6b-8df9-bc7595492eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff32d3f-24d6-4fbb-a191-993a1e806dcf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d918ce4-3e48-4043-b553-039032c94343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49ee7bf-f8f9-4803-99a7-f3aac0eb97c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122c62f4-b9ec-44fa-9312-a58859049e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07540878-3fc5-42fe-851c-f58f464c0b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05159312-aa17-4522-aa3b-89ba24481539",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e931c782-8358-4c55-80e1-0815d12731f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85d785a-f4be-4ad5-86ed-edc3a4e550fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f6bb48-ebf0-40ec-9943-9e906132dd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f121b53-2c56-4380-8db0-fbdca766575f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ece83f1-e599-49d1-bbf9-44f1a9d004a6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577b9956-816d-48a0-a1be-4b70ed197406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809fa577-05b8-4d94-aabc-0e59ea2375b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf52d3c-7392-4ba3-a9a6-b9d54916ae8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a0110b-3f09-450a-bbf2-f64ab29d464a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d65e31b-6119-40f7-a3e4-b9a5182e0950",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe40592-ae09-4cd4-8f8d-52cd2152c87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084f7ed8-0cbb-4a0b-94c3-9c0392be3f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e83725-6483-45d6-916e-9c5836e6f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38540ebf-31f8-4c8f-a3fb-c63fc926fa3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2725bb-26ac-4658-a57a-ea4c405719d5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace75414-8d42-4600-9308-0bad1530e995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb59c42e-0131-44c5-bfe5-ecf663cfe469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b661a8cd-8c66-490e-92f4-ac30b0ea48c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5350c7b5-6fac-456f-be68-81ba4771196b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa09c5ee-d298-43d2-9a8b-9d10c971d941",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59253a5d-a05b-40f5-8bfd-2fe544b7522e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a46d31-3fa2-4ff2-8758-4af292655605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4198a8a-13e8-4646-a6a8-098e12a91aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7d36cd-8576-4d7a-8c5d-827e8f3ac3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147852ba-e4ad-4e7c-b30a-9bbd176d848e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152b6b61-8472-4b10-8cd0-51c15a4e0733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ebb692-3578-41df-ae2e-fe640429598d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1005bca1-e97d-47ac-9f46-1e4b36c22527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "58eb39a8-be84-45ba-9ae6-9104f08ded75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e56a0f-30cf-48d1-863d-ea8506cc5ab0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1296e50-9b62-4885-9830-76ee57c92c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9663ddbd-7fbb-4c2a-b409-f8fda3b2cfda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c4aab3-7f9f-42a4-a3a5-9b19598f225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8dc1a18-10c9-4161-9872-0b5e3fc31eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303e86d2-c445-4edf-8b64-96b5b4a9b971",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8aa1c61-aeaa-4358-b06f-fd170fcda55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0b09fe-f801-4085-99c5-d098b7818a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fa8cf5-7758-4621-b0bd-79d7e889c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09716eb4-93c5-4ad0-860b-cf6d14015bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689bb476-3df6-4fd6-ac6b-de42a3b47df1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead501e8-88b4-4faf-b7e0-4a59e37fc229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d428e4-1a72-4738-862e-988457c8bb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71eeb3f9-5cbc-4e1e-a64c-e6854b79f55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "62795a44-d5b6-45c7-a974-afdc0c3f57eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3ca311-e49a-4878-8458-ec3eb86264c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ecd97f-494a-49d0-94fa-70b4d6f660b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a292bcaa-829a-4e82-bdff-da2c48b0b879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1e782e-5b92-4a20-b9ba-ef3469965f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d32670a-415e-4a4d-b4f6-edccd7c77c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66b9a20-a1d0-43b1-8ba9-124e210d1cd6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041fb416-adcc-426a-bd6c-751a24b5487d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596bc94a-de33-4a40-bba6-67ba30c76d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480a3acd-d75e-4e2b-be6b-0fa8469487ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f8b29b-25d9-4133-aefc-7a496eeaba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c3a5bc-8348-4507-8962-1c2ab5d33f69",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28564e44-53e8-4f78-9958-1d0d7c60805b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395ee2cb-c419-4f01-8a4d-2c6f362dbe7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f691fe2-1f16-4622-852e-d494fc3948ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8df57763-6efa-4471-98ce-818afac6de91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b8bf5-2ac8-4d32-8df7-b892bda801f6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f9f952-b3ba-4914-9150-b083b9f6c032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd47631-87f4-48e8-b96e-434c5e0be038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7305da06-d4c6-4bee-a1b6-093c3e425585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "009ab275-96b2-4e47-8501-dee5c886cd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16076683-7cd8-47a5-a311-1a03d9f53841",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3508a6-29b1-4e5e-8f50-5f4e1cf62031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f3085b-9b0b-4fb9-9416-8345fc23ad94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d894b84-e269-4295-af99-7abb1a377f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5425d3-eb44-46f1-adfe-2942a12cde50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83566d6b-dfa6-417c-8e36-d8dad7bfa2b3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5148a8d-fd9f-4917-b48e-a07dc0b04a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a436ddc9-dde4-44a0-bebb-1e057adb6b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbc815a-3a49-4cd0-a93e-68f7e0128026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41ff17b-a0a5-4ea5-9708-5f5f003c8234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50d9f30-ccb6-4ede-8e59-0de4fd16c023",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f825ae7-80fc-4524-a056-12b7287f9aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4208db2a-de77-4dcf-8400-ed9a2c5c553b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3feb71d-dd76-44ab-a7b3-714bcf587944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd5561d-8f3a-4b8a-9cba-2abab33496c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7e3d78-4ec2-47f9-8b99-2ca453f43e05",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fae6b82-28db-458a-8097-85ab4709604f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5990d4fe-87ae-4864-94c7-796510f79f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70d5c1c-d5fa-4668-9734-79120a70a4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a69053e3-0f66-49a3-9d2a-54f7dc770922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93d9bab-1082-4930-b97e-c81340ca67e5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d641a9c3-269f-40b2-95c9-c6e26cf7c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb78084-8ce9-4e2b-b36f-ded833137b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc7f876-7c52-42f0-849a-0e4251677cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16639d1f-5ece-4d35-bde9-acfdc9ad7356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fcf33a-78a3-4581-a6c9-e3a11e106128",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c50b982-bbbf-4cc9-8548-05810becccdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d9f5ae-39a4-4ab3-8378-6f7e815b3c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc5a0d2-97f8-44cc-84d1-25842f8f15e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9da1d47c-7215-4f47-9373-bbcf29d6650a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b77069c-f83e-4b57-ae8a-53a7187f58ae",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966efff9-8aa2-4a2a-b4ee-32a2118b7300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72c53fe-94c1-4c0f-87a6-9eed5bc85b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156c55e3-4d04-4ee5-84f7-0a0dee236205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2af34a6b-8ddf-44bd-8deb-d58241fd9ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cad0ea-2fea-4f20-ab6b-d90efd2abe36",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa9e356-7b6b-4c2e-91b4-39aa34f4862c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584d374f-4e4d-4d85-b778-b4d8a68a0716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa56e07-d189-4d1c-b7f8-031e29dc0395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c6277f-9428-4e37-85e5-fb334bc983ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1935ca2d-648b-49c4-915f-ddf05054a560",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f45acbd-54b6-4f1f-875f-748e8e5c2ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2d649e-1a59-4ade-a152-40668fe04e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc68744c-5c85-4e23-a1b4-43c4a71ddefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05f1d82-56ef-454c-be1f-bf5b2c7fc95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b1008c-e23c-42aa-9ef7-0fa27822a1f9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8161a8-8423-44d4-8ea4-03f3b7f2430f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed72834-153c-4fa6-be62-3cdf8fc7d583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55774ec9-ec12-4bad-b41f-63f84125f022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1953d7-ae71-4fb5-93c4-15f77282975b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3fc2bd-6f58-4c2e-a2aa-73133d2d766c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecaf948-f617-45d1-9aa7-82e6786494d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93da8ced-96cd-4b8a-9eea-52bde2b1eac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f0eb31-2fb7-432e-aaae-ce594993f8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3f7b7f-f092-4ae5-8d29-7a5938a3fab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512867eb-5ead-4594-a9b3-9a4c3202cc9b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbb8efc-270d-4d6e-9754-4738f0aaf8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9633cc-3fbc-4edd-a5a1-48c7105e8ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fde5ff-8148-40d7-b2ed-059a8c6fa7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a140ea-6ec7-41b9-aa35-523c5e0c9fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb2be08-5a9e-4349-bd55-d922749af692",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd969cb3-3f8f-4831-8340-65f8b132f129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c70188-96ff-4e57-8d2c-f1420ec68c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb71a44-be1f-48d9-aa4c-b7ef1f6b209e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf37f3e6-2b34-4e62-b8b8-b0fe6c30d0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5005aa72-367d-45f7-8f05-e063f0ff51b9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f679d4cc-47f2-403e-886b-f7b3287fb3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a72676e-ba6e-498c-a513-4a9320fa5eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7484e2b4-26eb-473f-a61f-9aa0475dd1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e27225-9f14-4ed3-8df2-59bed02702d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78378b12-2567-45d5-ac51-a46e5bb4081e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4319c550-cd62-4fdb-9ff5-d4b347cf46b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1053b6e6-13ff-43af-a4cf-c9c17dbe4139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100c0ac7-cb0d-4d7f-b897-58a3f078d5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "db92bae6-936e-400d-9448-a3e816f75a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f78406a-bcea-4881-9a48-8978fe09ec5a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f12e363-ca24-4893-ad54-bdd770aadb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e2b4f4-af8a-4414-b3a2-e39329085a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e16917-74f5-49d8-bce2-448b0b209235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "364c34eb-1bfe-42b7-9ca7-902841919387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123cb02c-ad89-4f6a-8e4f-f77d44a9e5f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769e80bb-b836-4375-80bc-65597940e221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d2bb7e-f334-466c-b0d7-97e75374a061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decd40ba-d0ca-4f7b-a59f-53b67d821118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "345ec69b-ccf2-4a0f-b540-6bf28258ff63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94f7469-81c0-47e3-b7b6-4d2b89e08276",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42057de-1f09-4b00-ba4e-140cc93e0a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116e63fc-fa2b-45df-8b9b-26019e10e66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c73691-60cc-4b0c-b8e1-70ae9c193c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2fca6f1-641c-4066-91fd-3eb9ab1f42f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3989460-c6d5-4afb-8426-930b5eb228e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579b4b10-ad63-4117-8127-912b39cb7e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fb03ef-ea32-4a25-a2c1-410fe8e7104f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c140ed-9ab0-441e-9eb1-553319bb35aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea397773-488b-4840-ad04-8cca8f64467e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01f883d-a7e5-418d-b691-daa53e256bd3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eac0e4f-a462-4881-9a5f-b4194bf508fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25dd354-9c24-46b7-986a-f3444a363c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416049b7-a03f-4cb3-aa6f-9f61c0ce4ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac077c99-e120-435e-b807-cec78d9e8e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8ffea6-b8fd-413d-9632-42aefea8b925",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7d2616-9521-4e7c-808f-abb93a310999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbd9253-c20a-46d5-8a12-3bd24d2070dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b6787f-a872-4cbe-af4d-d13f734f32fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "28aecac8-3f89-4cf5-a3b0-b53b6877b188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbc7abf-35a2-4412-b023-6aa1a8079f4b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2d9807-6723-4bc7-ac57-cb7f25f32aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4e6e31-0f47-42c9-b24a-cb3599ffc8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c793c0cc-0093-4b27-90d6-43410e3cb781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa55214-bcf3-4ae5-b261-f3d0aa3fc618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62d17e6-a4c1-4888-a3c6-68ccbfca1c55",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc2a3c2-49ad-46eb-8204-a701662af262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15225b07-fec4-4d54-b7bb-0137622f53bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b3ce50-6545-49dd-9e54-5c87784ee898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfeeaf74-48f4-4c6d-97a6-9e22140aa9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c744ddb-183c-4b54-9084-6756d6ff2efc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770e6a79-7de0-48af-b023-10dfc67dfe2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4da0091-a8da-4560-af0e-f75390bc1d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb587ee-0793-49d6-b8c8-38133479a8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca332652-64c7-418f-8ddb-3f95dd4aa5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a668ec6d-261f-465f-a008-37787c014c4c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e21a1c0-7bc7-459f-a351-ba0a6b3ea5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd58de36-b469-46e0-9255-38f73def9462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d38b522-f2d7-41fd-9cee-60e9a462b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55ce7865-9fda-49f7-9903-187aac41772f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d564630-386d-4b11-8cc6-f1cae113457e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafb9ad1-d706-4644-8337-0016ccac581f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749238c5-5e8b-42e8-91ac-d1d14a47fcf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf562e81-4c5b-4e99-a2c0-8ebd308e3a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "58787b32-e0c2-4ca3-ba7f-71e6e919b7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f952d-9965-4c21-a832-4517155fb846",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54aa002-819e-453a-99c6-aa2e4315d290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a57f4718-6f09-4e32-a682-041680e99644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56216d8-248c-4008-a8d4-86a987f02adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af7c6a81-5a40-4842-b287-f33ce7b03073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc264bc-8d61-46d7-b920-7c3e6218e459",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f689c9-649a-4850-855f-01858b4626b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33840f91-d654-4939-a3a9-d61cabf512d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3498f6-0ba3-4772-aeb3-25717f0f9f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e5ffdb-b8dd-43ef-9935-cc13eef42e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c0b2f8-fee6-4fc2-a9db-3334c3cc853f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aa5221-7d1c-4b71-a516-bbe26a59bcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25653f34-336a-47df-b52b-fd275797b0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61507a33-8198-417e-9548-78651ed17966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "051f4d48-0654-43ee-8f81-2467c2c141fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f1754c-6f06-4bf0-93ce-03f846f0a924",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ac62e3-dcc5-4d09-baaf-f48b66c92f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3488852b-9efb-414f-b90d-6f1dbb99cb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bb26de-f2e0-458a-a0ad-446ce6c89a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d98fbd0f-b3d5-4a3b-acbd-f74335f3c6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e4dd1f-0fa9-4788-b31c-28bc848c43a7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82c18b3-5c6b-4501-b42e-274cc14f37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf09630-6ff2-4f96-ad0e-7ac8a2e0df85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99521ab0-47f8-4b8c-a42d-d9ccaba3d119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c4af09-7827-474c-9a65-1f831b023009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f664982-0c60-4c9c-9cb3-7c8f39a14c38",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4b007b-d83c-4519-a317-d2d004e0610b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4250c95e-a925-4d1d-96de-7ea8d25723b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad861fb8-35c2-4f95-a6d7-d42bf17092cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60597b34-d291-4bc7-b1a6-6924ab2a1f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e34f0d1-9114-44f1-9da4-ded767724ea3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9152ad-a376-4eba-aaad-8a91e9f293af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2abde1-eea0-4ac2-a6bf-7d02ca74a12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6907dc-ce62-4c82-91df-97790eb2a425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5dbff3-c746-4e97-8b11-1d11e06a507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11282d3-d769-4b99-8303-9ac5b5de2931",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea036f6-649f-4aec-ac42-6c10123e9da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f212af7-09d3-4487-8590-32cefcc05384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c875228-3862-4cbf-961e-16726756b17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe5a4ba-3f86-45de-aa20-85ded0c5a05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf7c9ee-9f3f-472e-8a05-b69eca1eb1b3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afa8938-f89a-4d35-8aba-354e259af1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af56f676-712f-4b92-8ea3-223b50ab8c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d1f269-f394-4aa3-83d6-94d2d03589e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c8b120-ba87-49d7-87a8-9b608633df3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7860968-d58a-4316-b960-2f41af11028d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd8b721-b12c-43a2-9bf9-935423713f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336aa3cf-aecf-4962-97fd-bea0f21ac9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d1a1c8-e943-4a8f-881c-fb6755ed4f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4324ddb2-8b24-408f-aba2-0ce332294eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcf988d-693f-43ef-b745-3f0bbb9eb55c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf0ef49-6e9c-4428-8829-1cc3b2869192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ad684f-4e41-4bdb-83ee-ee19aeecd8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6109eae7-0cdb-41fb-9751-6ea19bf0e2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19f77a47-8661-4969-86f4-592e0457ee8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19877523-bdbe-4117-8586-1338caa893fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb624e3-c0aa-4715-8bbb-fb1be8cc5f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f5f56b-b68f-4596-8f21-f1f4a3548536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113470e7-b7f3-488a-9e4c-498b35dbfba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "142b7930-bf22-4341-9742-2b058ecb663d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8f7a0c-c21d-4821-aff0-f9a4793931bb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f741415-f1e3-42d7-9665-ac3eef251fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ace899-9dd8-466d-9b7f-c52ac226d225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f68b693-d8fa-4907-ac24-b2b623dbc2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "719fc731-d94e-400c-a3a3-442192749d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51ac41e-7563-4f37-8f72-911e9f3d33ad",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cea532-bd7d-4677-8494-66c7d5e5111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710ba8fc-67ea-471f-8fae-f7fb4e9da4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f276361c-9a1c-4212-a521-0ffac2665013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d0b632-2788-4e79-9b68-12442b3e34df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ac70b4-014e-4f7a-842b-fcc112e0536a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8703865-cb9d-4f46-a091-afa184ab97d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c82fd4-cc51-4d08-804d-60bab966faa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd6419c-7d7d-4fe5-b15c-1d89cccb86da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c520e894-6455-45c1-b4c8-56730efa8836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a9fd0f-9229-4e9f-be04-001677daa112",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5bedf3-81ea-4de3-9b68-a9960e6e2888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a13781-f37e-463d-ba89-46a4cc9592bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e841699d-704e-4e1a-a964-e50d572cb8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "739382d5-a3c5-4b52-b5ec-30062a4db382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5667add1-792a-476a-a172-5957a388e280",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aae07e8-b470-467e-a38a-e0852334e0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22406cf9-6829-41eb-a2ea-ffec1eb71a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ace803e-7b80-44fa-b498-9c2f9179e460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b83ba1c-e25d-4680-9438-fe477a29dba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaaaba0-248f-4d73-899d-0ab8bcd4451b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6c9926-e7e0-4402-b877-858659ebffc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4393d616-8f81-4431-a411-3d5ce1c43e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853886d7-0df8-4191-82d7-441ce23f140d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88cfbcdc-32f1-47fc-99ad-2605fabc662e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc68dbea-3cf6-4261-990c-5b1ab5dedb26",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3d48ce-7ade-4bda-b362-a75c5bc973d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1815ea0c-5fef-45e2-a9e5-fefff9fef9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0366a1b-7a11-4f2e-b88a-e3c621b7ffdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8463c639-9fc9-44dc-bba1-fe575468d1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b21fb78-2499-4c53-8377-4d8932de60fb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de53def-4948-455f-9802-6c16499d0ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991ae5d2-dbda-472d-b706-83ab40e86513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dc7b01-8bc6-4063-aa68-aa1364efbd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a15f75e-f82c-4cd0-9d0e-cb80cc319759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442f1d28-6df1-44e7-8fd0-d0c6b8787484",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d016ac-f3c4-4862-b216-8160149b8527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d397fb-6b44-4a1a-9722-ca227af10025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0b01f6-e7bd-4a9f-8c42-c69caf109922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58821fc9-da35-4d22-bc0e-7afd36643faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4829b262-0771-46c9-b633-8c2360656e02",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30230b53-d5e6-4c73-840d-0692f0f72716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3eb1543-601c-40bc-a3c4-a1b29428a3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065fdbad-f890-435a-ad5f-b2ea21fba736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a84015a2-691f-463c-bf73-65bdb8d35190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896ad755-6f3a-4bdd-81ac-6d2cc9b8bffc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f036061-bc64-4651-93d0-b88e98d01de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dd5b33-ff6f-4d98-a6e5-0318d0460a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d53e12f-ea4b-4077-950a-cea7afe41215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "36515f75-6ffc-4fb0-98b6-724df08eef44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1fe1d5-049d-40c4-bfea-1f7a94e24465",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e64d0d4-7546-4a37-8132-63ab3992b53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f8249569-b272-44d2-b929-e76b6c1bae93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0471e8-e24c-4901-b0a9-2b980933d876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7df505-95b6-4ffb-8a49-46256478331e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1adf6d37-35dd-45e6-9ee6-450c52182c40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e120aaad-59b4-46c4-ac7f-e6d3ea8c86bc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad35971-7490-4375-94ef-b80ef4653a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d075d14-e39e-4aaa-b4ef-4789654d0a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee4e93d-a773-4b41-9059-2925a67948be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b731ae37-2c7c-494b-aa39-31c5e10d05c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20905960-1f27-4270-be25-b79d26ccf34a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8a8b1a2-350c-464b-a1fe-cc341c4ead81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f816018c-c709-48b4-880c-97762cad0afd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ad54a36-c659-4f48-a30b-3af8b50200d7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6fc6fd5-2721-47b1-97aa-b4bf58adbc2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97092d94-ad51-4b5a-960f-be133fe7ff7d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2c9fb3e-2071-41fa-9ad2-202e98fe7919",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3c8730d-961e-44d1-ae23-1b4795d3787e"
                }
              }
            ]
          },
          {
            "id": "b4ffc1b3-b909-4d43-9d1c-6433b7f8b52b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1be4d793-3882-4882-9093-34f4bedf7f9f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3edb27a3-7f2a-44fd-939c-89e40c70f9c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fb36933-cd30-457c-8d7a-41c8f126cdd7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2489d3f1-031c-4324-9592-7b90b06a632e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b04a6094-ec80-483f-af60-815cc0f02d70"
                    }
                  }
                ]
              },
              {
                "id": "5ad31dcf-0569-4124-b175-bf2a9c734258",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f94636e5-edea-4d71-9903-a13923ac9bf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "528da7e2-83f8-4a92-8bd1-e66248149dd0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a63bf85-b7ac-4df2-8f45-45ca2313f159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1581798f-d573-48af-a60e-439efa07cd8c"
                    }
                  }
                ]
              },
              {
                "id": "dbd7896d-cfb2-45da-93aa-08bdb0b2b192",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85336d9f-25b7-4cd0-9490-295aff6b4e6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd00e66a-ef13-4a90-b30e-a10ae9682863"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3ce2d51-ca98-4788-9cda-f6349056b2c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "68c0aa9a-86b4-42ae-9969-78e9edb3b731"
                    }
                  }
                ]
              },
              {
                "id": "ec85db87-d8a1-4b28-b81f-053c6e4bfc6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41465ffe-f3fe-4024-b1c1-dc8ac51b6512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b61045c4-544d-4add-8b80-4e1e9fbe83ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8aa88c5d-8753-4928-a203-cdfc3b9dd4a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ef182c34-2909-4884-b679-6f060bca0fc6"
                    }
                  }
                ]
              },
              {
                "id": "776d88b9-5313-4cab-86f4-eaf6960d1883",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5446ba7e-9558-4d43-a23d-4a757dda92d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0029c82b-ef9e-4400-af5e-b2d86f6dd466"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe15c9fe-dd9f-4deb-98f1-a3fbaadf7f98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "28448437-bce2-4180-be9f-0c3a3ca3b85f"
                    }
                  }
                ]
              },
              {
                "id": "6ffd00cb-b45e-4dbc-8109-c6ed97ad1e40",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b3f94d7-32d1-47c6-ab12-e96916b68c63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "207b3ca5-15b7-49ee-9584-bf6512e7c715"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a14b87f1-e9f7-4938-aa95-ec45aa3e4218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9cc8c1b9-93ae-418d-956f-31ae5395c494"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "766fbfa2-7104-4c70-99bd-9bed02f39d58",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a33ca70-5393-4f5f-b859-b4ebf725cc37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d45e0de-ec40-40ae-9da3-20679ca2bf3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "036839b7-ce5b-4f0b-ac15-19b981f62d93"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55ca4f81-c67b-4158-a22f-75911f34c065",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d8f174a4-2332-4743-ac59-7d34a0f56491"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1ebb9b6-5432-4da6-8b78-2770ac18d385",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ac93619-0d8a-4750-955e-3bcf67374c63"
            }
          }
        ]
      },
      {
        "id": "4fdfd70b-b046-497c-96f2-7cc6d87f55f7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7f6f53d7-587b-4670-ad0c-b162d6f28155",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9445908-e52c-4e94-9eaa-bbfe3227d49e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2fb023e1-9fc2-4c75-9302-c309f762a7e9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99655c66-cc2b-455f-8b4b-165bd06b1139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401150e9-13c9-4610-90cc-9822b8d38a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb93e895-54b0-4e3d-89a0-834f9eb8e850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "78e614ed-8322-4eb2-9a5a-90ecdad7de3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d9785e-3e04-4a6e-bca1-375eb2c66ab7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c6647f-0056-488b-9d3c-10c9a152ed37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236f4fd2-9d0e-4f07-a41f-03f0e2631c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c839c4c-7fe4-4b87-917a-96a4f2f34509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec63ebf9-dfee-4422-b1ee-fcec3929c083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba857995-da2c-4906-b265-44a01f9e9309",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe65ffe-34f1-48e9-bfb2-54ea2cfde9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731af905-bc65-4669-a9a6-357b027098d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6ef2ca-1f71-4834-b0ed-3c1fe73cc7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6242ace4-fa6f-4c64-8c8b-e01087bfdfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d7a001-f0bc-44c7-9d18-c0d6f16be170",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e439a768-03ef-4c71-b0a6-0a66d8472d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144d9bc2-f908-4aed-ae2c-564f527f8a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c281098-e4bc-4d81-906d-8a57200c2859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44cb5917-ff6b-400f-87db-c2d76fb29340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e5a947-7ab3-400a-b7b8-33572274f006",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c26c2f-9004-4d00-a075-ea7143856ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedf0014-1fed-47fa-83d7-6f999f0c870b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc78ccb4-7b0c-477a-bff7-6cf03f5f1fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c42aaa1-8692-4f1a-a62e-78ab1a342b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d5ce16-f98e-4219-9d17-d275c4db3da5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc90607-70e4-4063-a85c-190cd7cb4202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22c88e5-8254-4753-bb65-098b86dac48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d150ba-ec6c-4cd0-9611-bd8c62b7f71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6abc70-82b2-409a-8782-f7d17f1ec340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae0d3ba-69f3-446a-a088-a6e1cca922d0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05dee6f-a7b1-4825-a892-d1869379030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75b2fa7-c909-4e88-9be6-5711bad9f637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a3c2a3-0137-4065-9bf3-a6b0f9ecb630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbccca91-8fa0-446f-8a2b-f47167b68d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6923df-f0de-4cb4-b982-9f207abd4b47",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2252b1-40b3-4186-beac-d03b154ff429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b4ef04-f7cb-45ca-a420-b56635e0a996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a443a906-09d5-4287-b5b6-ad26fe3e213e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f067007-d128-4b79-8924-8b5df8b68b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ace5bc-a4e1-4b98-8db4-f1f62a7190d0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6a6b90-ba12-4d74-bece-bc830b843c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cb6e8c-7c6e-457c-8eee-bf2cfe21868f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59404aff-479f-4619-8219-1c585d475c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd844e15-9e7c-40d8-99fa-c6e30ed9f7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361fcb9f-a930-410f-b48b-2a40e8f38f36",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42a12d4-c729-43c8-90e2-ab264cf51410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95121dd4-f226-4136-bb4b-bc73222c98b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed446069-244a-4507-b2cd-b521913c18c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ff6629-146b-45ea-807f-c74c97e7253a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc74cab-1660-4a4d-aebf-fd93c83a2790",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6057ded2-6220-41ff-a27c-d459ad37c1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8a96f4-4887-4a12-8464-d269bccb16f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72280dda-1dc4-4c0b-84ec-007a77eff627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c73a7538-d3f0-43e4-9e18-ba7eb07b6379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eec460-637f-461d-89b8-a2b0916a766f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f56628-97bb-4e98-89cd-56ab00b016db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5425e82-d9bf-455f-9266-103174ef0d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1644d1ae-e7d4-43d2-9f32-c14c178c152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b82853-e21d-426d-befd-5f262f013689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b97f91a-a053-4087-b049-dc9ad3031437",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c66fdf3-fd53-41e8-83fc-561abf029f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7e946e-7d71-423f-b019-3b61376699cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b9816e-958c-4827-9219-e89ded68393a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "492ca5c2-ab15-472c-bb05-c8bf7e52d28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fdbafc-23f7-4213-ac16-1940f57156c0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b046ca9-a76a-41a0-87c1-a2fe88a49b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6452b0dd-8487-4d98-9339-a78948b4e00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220f4bcb-ef2a-49f4-92d2-b6e09f9a48a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cce5f0-33f4-450c-bdd0-5a1910bf445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4859867-efb8-438b-8703-5da6e70158da",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a88113d-c771-419f-ab2a-a1e4e8edd26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cc1107-cb2d-41c5-a134-ef526676c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440a4560-3fc7-4060-980b-e6341d258e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "17796080-7166-4fed-891d-2d4ae97d1c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8bdd084-4411-4635-b42d-448258bd4a7a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea08e11-965f-4a16-b12f-3f30021efcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed2213a-a579-430b-99bd-9f7dbddae652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afa9f82-d5ef-4490-a587-2241dd272d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b16006-03ba-4611-aa44-7383ebb36e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a891e4-5d06-45bc-bc7a-0f284945129c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a401b2-dd2b-4313-ac04-d51efc8b5a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098c1061-58d2-4ce0-9b8f-8875f1f669d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c89d4d1-2e6c-40f5-a7e5-de19445ddc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e3c980-ff6c-4aed-acfc-1f2bc4a720e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d952c2ac-bba0-4f05-8ce0-42cbc67ebc9b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fee18d-721b-43b4-a3a8-f40c42cd42d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5981342f-0dae-4c81-bcab-a67f0e8b6920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13cec68-cb9f-4b4d-8e17-1802d68ad3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a48dc2d-c609-4c74-9262-95da13305e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe3d24a-361c-4f10-88b7-7c59de3fb66b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f6482a-3a37-4cb4-80aa-959a4f1ee65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100325fc-c8bf-48f3-b2c0-70cb04aea446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b66a2a-92ae-42cb-b33d-da4e707c6b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "101fceb4-1979-46c8-97fc-929d55a16d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5356e2ec-3544-4dda-b1ca-7b59eac1c6f4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64886355-2554-49fd-8532-8508320f2043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82324cab-c842-4599-9705-a4a84f33a439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40be3da8-79dd-4c56-9e7d-fa341b96f066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f64900-59dd-4604-a5c4-96cd5083eba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26719798-7fd4-4ead-803d-0d2045b33631",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce5336f-6017-4144-8b87-d3f55c9a48e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d23c256-b472-4480-9602-e471f467bd1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7f11f4-0869-43a5-8961-691ea569a5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "243a9f2b-6083-4d65-a6bd-cf0be1f7c626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75e4311-404c-4533-85ea-f25aa9da539e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7c2f32-be08-4951-800c-6df234884e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9f91fd-69da-44d9-813d-3b14805372e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f57db36-799c-485a-ab22-64f2551d7d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa29b80-e607-40e8-8c61-e9b0801eb013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f108d51f-8446-4a80-b084-97f8820c2936",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2ef33e-0502-4bb0-953b-9fa1389d950c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dadb67e-957c-464b-9149-b4c1e4e5e969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca8493a-2649-44dc-916c-a5b3c06b1ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba5419c-20a8-4bb2-86d4-2060ea8bbaab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddad5e5-8758-43ef-b323-faec46b391f4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e37d57b-ad93-4f12-b227-45f354b6937a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5f5b4f-d9ea-46d4-ba34-34fb4c1460a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae31169-1925-49af-985a-414676df3279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b30535-3789-4259-b3c6-49322cffa8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245b35ba-00b9-4fab-a9f9-b42c1d68393f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab2a275-e3e0-4635-9853-fab1dd99c42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd24226b-8e2d-49a3-9dd1-035179dbd7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e413d99-09d5-47e2-8f6d-d2d3e0f399d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91ac1e2c-f23b-450d-bf2d-95ba86fbecc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25435fb2-0d12-45d9-a829-5151f896f8a6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce057d6f-0513-41ce-ac5c-97178c3702ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2fdbc1-4a3a-4d29-a3e1-90c0ad4b895b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cab143c-8984-4051-b32e-e02ef8f5f839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64705869-efe2-496e-a4de-cb5e4aa012d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d785615-311a-405f-a3fa-866ff2436eaa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246f38cb-8f06-4734-b651-218ce9cf1cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002b5346-fc9c-49f7-901a-29227ce07c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2988f3f6-fe23-447b-b4c5-d935fb2c64de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ae737f-88f4-4ac3-b5b7-c672aac0b502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be39c519-4aba-4be9-b401-d9d8bf6932d5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cfd11e-856f-4ef2-9994-08d9a1b96642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a64cee-341d-40a5-9966-a44a2f1d4deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007231dc-ffdb-43c9-b2f3-16267b78845a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc70edeb-bc9b-4a6b-b2b4-1350f3c8427b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b003a80-9c1c-49a1-a576-0ae3e0a5db38",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba9fdaf-7800-4530-811d-15e1b25c556e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c64cf6-907c-4b2e-826e-6a869798e1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935e7be9-f5a5-4c44-b109-31ac26201057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c39f17e2-ef99-43f3-addb-637c77e529e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546a49a2-8a1d-4f1c-ad92-c974136ab998",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb99918-8c91-424b-8b2a-8ca0a9825ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90072cee-8e36-4707-87af-effcb36dc442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577a5893-4118-49aa-b6d5-ac49952cef8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d85b0c8-d1a7-43e3-9253-cd63572f384b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdec6e7-2c93-4b93-92b7-a4e87d781759",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bec4e38-e15c-411a-aff5-715adee5262e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fcad39-97ce-4467-b2a7-74a0d815792e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8367b8f4-f210-4812-977a-8ef62c827fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5265c1bc-367c-469f-bc91-021aaf40e33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c487a4f-ab1d-46b8-9076-36647edc03b7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfd4da0-42ca-4190-917c-764820341a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b37064-edc4-4eee-aaf3-aaf735b09ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a103f3c0-3cd8-4903-9d24-a044891981a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "324974a7-9c20-4dd4-b058-c61499fcebef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a4c2fec-e240-4f6b-bb22-2bd20205dbb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ad5b607-74dd-4ace-9ad3-a88c4bf9afa5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbf5b9c-fc6a-422a-b526-f9611f20252a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "13994591-358b-4894-b89a-41ee80e0df3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73bd356-01ee-4e63-b584-3adb08c69d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c013877f-cb0b-45b4-9bfe-0bbcd914f012"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d778e449-3e43-429f-9f6e-eee788eecebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d44333f-eedb-414f-b8da-241178788681"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43debc47-f27d-48dd-b3c5-211adb09082d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e276920-adeb-402e-92ba-c3b22c84e269"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "626891c5-0493-46b3-9dec-9bcb392a0675",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1399d67-4bde-461f-918c-0da4ea847157"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "607642b4-ba87-4bd0-a166-0abff90104c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "414f56be-5d7f-4c16-add5-7ab5ff2e2855"
            }
          }
        ]
      },
      {
        "id": "af5eeb6c-b268-400a-ae04-8c15995d429e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f2a8f074-fafa-48f6-8003-4d859e2fc31c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22f44701-e8af-4861-90c4-e99a449d8f8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f099fe49-318a-4cb4-b6bd-29a74b76b8e9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf5c649-9055-4c21-bb43-e6f8c3018f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f19e4c0-46d5-4660-a9d7-12681de474ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0aedf8-b191-4ac1-ae70-4a30b0eac260",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd64d4-9785-4cc7-a586-3f0122d7c780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97801926-8d58-4eed-960e-ebdf4068ca21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b51a8f-a676-4d06-b2ac-dbf225c03230",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeac4b7-5608-453c-8849-5529c0469a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6176f860-9b45-422c-af51-14d050843284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511fc619-091e-4bfc-9464-8885e99e502c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e4009e-3f96-4484-b99d-f17bc045dbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f54fb64-6aaf-484b-b6d6-53513bdeee6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba89e20b-5509-49fa-9f5d-00ad4a3ac8e5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbf3dc9-416c-46cf-a48c-94fad586f5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4948fc88-dcdb-418e-bcbd-527e87005e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca8ce4c-c93f-415e-896f-59a1a9c36ab9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a7a1aa-94da-4d42-b15a-5ef4182795e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0bb149-6f75-4c37-9375-457fb3fffc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc49251-f703-486f-8ebf-41feed07475b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b13b1c-41a0-4896-9aa1-80edc1d42379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf79515a-6287-4cc4-9462-b558cc38fab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ca32f5-2857-4b88-955c-6aeffc39166f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb4a92e-9355-4eb1-ba80-b8f13aa45092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d932d6b7-2cd8-4db7-b24e-38428a6855df",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5364526c-eb53-4497-9fc4-ea0811bd74f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b45050-76ba-4c3c-86a8-8dab1177db67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69675fe-ee15-4871-97c2-7a041bcbf4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab39813e-74eb-452b-9698-d202d6dd2633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d9cfe9-1539-41d8-9fb9-6cba4e1fc95c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf61379c-f41e-4e33-8374-f3d79760d9c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afacb629-921d-4436-ab8d-4c1453f45424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ce5014-cf34-4cdf-b24c-8e832ae7f2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f596259-c782-4e6e-b84a-ecdd55acb076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97208b42-a2da-485b-9003-237fc7a70847",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b849347d-3344-40d3-9839-f2b7785f4c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a8aeee-4283-428f-a5b1-b46f55c6776f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7809b7b4-9228-464e-9e4c-3a0ea0f3b9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e09bb9-7a52-4b34-a5b2-5960ec34e7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bbc693-bf41-4db3-8ba2-2b8fc55d30da",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af347ee-0b7c-46f4-ad48-6d5f42ca98df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7f4300-cf6d-43f7-844e-1ca1957ff61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b02696f-de04-477f-a6de-a008a639521f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045e0aef-a933-4602-b148-fe23d94aecc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fe99c4-83d1-4ee2-8582-e962e1bbfb95",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f608cceb-a509-4dd5-9e9a-180000b4cff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49652571-1d4e-4809-824a-efb544c03b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9439b404-91fa-49ff-a4c4-e3b9b4043c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f95091-626e-4f41-82f0-ee4fc7a71e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b32c23b-4352-440a-8709-1a304dd49ad3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4127aa-eaa6-4415-b7c1-342f6244fbc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de60ecba-f364-4fa9-81f8-e57ff44d9e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659bc1ce-4c99-486b-9f42-da04e444570f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88117a41-395f-417c-846f-73a4d2569428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab4089-37f5-4bc6-be92-d040da8f5fb5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46493cb2-a4dc-4952-ab60-fd1a1c2e0e0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eafed8e-980d-442a-a7e9-3cce8881060e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6692b26-e59f-4a9e-a256-a913d1b6d16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1affd69-a3b5-4385-a18f-719c0e089220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c33c37-bbf4-4d5d-9eb2-d6441a5f5e78",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1714f769-9e60-46d7-adc9-345ea34e0c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74aa5747-f72b-4037-8089-3bf33dc10062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d57b43f-31ab-4d7b-9181-89582bef827d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a0fd73-9f8b-48e9-b611-3859a382f997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee39ef0-7317-4bcc-af26-04d12525ec8a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52abc8f2-e335-4c78-85ef-a3d11543e274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e72ca03e-a4d8-4aaa-8d92-6323af981a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78166c43-9eff-4fbb-a97a-ae5f31a4539f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f843f94-e246-4376-9375-f15f1b71332d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94afd76b-3f5f-4d9e-bfbc-9aebfcecb7f9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff01e1e-96e9-4b33-8566-95f1b7c72520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4940a9eb-25c2-4723-9834-3835559b5f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e07fd0-4293-434c-a99a-8fab8c2d32c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3154c504-ada4-47da-b265-859024f45a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0059d6be-1a35-43a0-a5b7-c34858a48506",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803fe22e-818c-4bdd-aa42-2d95ad9f0233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1e7e34-7e70-4890-ab62-7198c1debf85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f1b410-59b5-4122-9b05-8e6d29944804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26dd55a1-49fe-4538-b90e-7f50ba932c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c853ab-e69b-4b1c-83be-d1735853e24b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57136d42-790d-41ec-a292-df88e5c5a784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af57bdee-2c50-4934-adde-edd553880da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c618cb51-b63c-490a-9d58-ad30e7293314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe846f52-5894-4fd0-80d4-79444e7bf56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d99c8b-6f7d-4e31-bef6-b61376001292",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de470202-7caa-4176-ba6d-fc6122d776e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef11269-d3d3-4d1f-bf0c-325b7e9d9814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3642b04e-5ca1-416e-b07c-2acda05a58d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19622ccd-649b-451a-810e-aa8cfe6d87da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d400e80-f376-4272-90e4-cbfbb4d982bd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1464bd-a4c6-4bed-b885-98eb965dceff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0157aafe-13a4-4154-a8a0-6af6db3335c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f10afc-3718-42d3-8005-2cd1a475a6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6261ae75-98ce-47c4-b5e1-975f965b3d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd23112-7a65-47d8-984a-9fac6e780728",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54cfe790-44ee-4fc9-ae06-b8b00bb2b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835cdb00-dc8c-4ac7-b4be-8e62470a6b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5276681-3857-48aa-8493-3331cfbb9f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4501e966-fadc-42e8-a08c-9fc463a87174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4bf723-33ff-4480-86e9-84dff4372c2f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1eca7c-93cc-4f9b-acab-c36f8dd90c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db40048-d45c-40b7-b14f-d5200b8e01b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c14be8-6e07-4e2e-933c-a211db677932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403f4833-4f4c-41c4-a0d2-6f8396959a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fed648-3f45-4177-8815-4dc1dc8936b1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b626bf-0987-4415-988c-02c02e2ef991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a924b8-8349-4de8-9732-1c0c8379059d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e65a5f-5b2a-4524-8f7a-25ea8999718b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b88d6d0-3473-4b7a-bfad-2d97ccb58c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dbb36d-5c13-4f66-a5ad-40f506a3e492",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3442e740-9f5b-4847-aad3-c4bb9daaea9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c199a78-db8e-45cd-bfda-5774dad81be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e2be8a-dcf2-4df4-b819-e2f155997044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b70119-6fa8-47b6-a80d-d4642e93fed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fd0bcd-ea1d-45bb-ae74-73d8574af8ca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bbb4d5-80aa-4264-b621-084da68ad024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80cd70a5-7d26-455e-959c-fb7871b1ae25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064a9379-fc9b-4a53-8373-8ebcb540c730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d566d9-a2ca-4d98-9081-bba15b350f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4a470e-795f-44ce-85ef-32f9cee7dabd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94890a45-79e7-4584-8d3a-edfa2f0ea0db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96eadb16-578c-42af-b4e6-c18b3e6ef889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d23ff1-e30a-4986-980a-3a419a3c6830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca00c302-7aaf-42b7-bb12-c00e6fac9f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50ec53e-2f40-439a-a215-3f71ef8039bc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d37944-7957-402f-8c6c-a93aa28f7b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035200c8-c3f5-4ec9-aa62-bcbb984cb2f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbde3403-3bde-4f31-a2fe-c3f5c05606f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356770c6-8991-46e7-958a-b8aa2c515aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acfde02-b5ce-4b1a-923d-7c31222e606c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e5e28d-fd92-498d-b5e1-c26edc86d721",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b3b75fc-fe6c-4549-b64b-d5011d294a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8b19dc-c756-4a9b-a20e-12ef52d5ea32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc28486b-570b-4355-ad3d-0f79b774953c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7feba284-9ef8-4dcc-8684-63817b51e8c0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c73545a-7261-4737-b4a4-a699f676bd8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a0963c9-f9dd-46c8-adc8-7bea3818fa62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100c16ec-b06f-46ae-a13a-b36872d6bd91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d37e9a-c574-49b9-bdaa-b7f324bd3064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca50c82-9625-410d-a722-618225b476e6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b2ab35-2c21-480b-8e5d-c02ebd250a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c5d964-059a-4ee9-808f-815fab29773f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e727f43-e786-41b2-bb51-4170c4a0d695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae0e317-9608-4edc-80e6-f700729bab17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1a3ff4-0eec-414d-8767-8087d7456f9c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f3a135-b7eb-4fef-9587-92aa1edaf949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d7f0f1-60f1-46a2-a387-162b8e0c6821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe338794-008f-4a86-8566-33f8db896a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c401dc7-61f5-4ae9-8ac4-f94d90ed91bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cfe4b8-7ef1-479a-b7af-696985bf6245",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e1fd83-cf9c-49e1-a186-aec0d535bdef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69269bb2-bada-4aa5-8bf9-a2691b78f42d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3b5509-20b3-4458-9db1-c685e9b52edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60cadea2-fc89-4220-99dc-83e5140bcf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3451ab1f-7e75-4d0d-8d0f-0d1cea12298e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18a28c1-716e-46ac-9e44-d9141d5d984d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcb4b265-81e9-4908-8a7c-7b4c32652f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c68a9a-67de-4780-beef-cdffa64faeb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a15dff1d-fa61-4812-9aa7-b1871b3a4bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2f3bb3-0292-44ae-8c7f-c25e989096b1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88515c5-937e-47e6-93ad-5d5f8386076b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4878c458-bdce-49a4-87b3-3cf555c7c88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904cce26-709d-43a8-a878-42e6c4474700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dadc34ae-e3d1-44b4-b7d3-e1b3b92d0bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c43a307-e4e3-4a9f-ab7e-79f9c7f38489",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2fb0eb-13d7-460f-81d7-0ea26cfcb4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071a2178-4b6e-4115-9a57-1b20d28c1b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c413e90-5cbc-47c2-8e20-003de156e3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23efe39e-0b84-4222-8f46-967305b4dfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7296fc4f-544b-4560-a654-1398e53807d9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1204984f-7673-4898-b7fb-4737a6d68f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b01d5cd-164a-42df-9734-a3c0f43da4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4f7f80-d443-4428-84fd-87ef6836d42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4cc003-162f-4ce9-89e8-aeb2bd2e32ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a4d0ec-9ad5-4e57-8cd1-1da76a99486e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82350eea-49ec-47cc-8417-af013a7b8ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5231d3fb-5a26-4f78-a55f-785f7606250b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318c4e1c-a44d-47d2-996c-909b9dfb2999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965fa109-8a8d-4231-964c-727a02c6e8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be78fee-2b2b-411d-916e-273260881ecd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2682665d-6ae5-46ba-85ff-599b8d32ed77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b182e1-3d03-4f8f-a2bc-cca8cd038a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564bc928-0577-43c7-b314-039baeb944b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867b1d07-db21-4ce0-920a-d5dc8d741367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5f7f9e-e58b-4c01-8904-5a0eda0a1e5b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed70f64-9b3f-4a01-b2e0-ed6eb486c709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606e9e51-386e-4e0b-a0e3-615c7821fd85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd547f91-8eb4-4922-a639-2ec2fd448866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f157a1a-743d-4c93-9eb6-50488cf3c9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3c7d54-c357-4707-b8cf-e417db1fe8b9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545c5d49-46e8-466d-94cc-18c06db3b93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0e0f1a-98ae-48f2-b808-360d904668ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1f9827-1f94-4b9a-a1ee-e7ebc57ae0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47dc7b2-022a-403e-9115-d4673ef9afb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1e987d-5a75-4d95-9645-57a08e8e94d6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b7b4ff-dc9b-4552-9978-1a3ff450bdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fabc72fd-e448-4808-a563-f101b658ecb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eff4647-36cd-4f50-82ba-cc5ea52bd232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e160463d-ae8a-4fe3-bf0b-a48f81e5056e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9685b2-c494-48e7-91dd-2e2b7a03624f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff58641-3475-4e0d-8ea4-c84ea43957e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d29aad7-c834-4c42-b011-6a6cd377ed9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b05840-962e-45c2-b0a3-7db0db7ba666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717212f2-a8b6-4053-be3c-a28f023626c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da415389-59d8-47b0-8688-d2c857de0ef0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd604f4-57c2-43d4-ad20-f1a54804ca81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097ec62a-2316-48cc-b981-be90ebd75529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072eb8af-a5cf-42d0-96f0-beb1164380dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b61f10-f0b0-47f7-9849-2437ec6e86af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa29f289-7c43-4a28-be6f-4adbfc852584",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7d3a88-540a-47e4-851c-ae8254ede8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf2e7a8-ce05-476e-97f8-d536df7b2532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5f12ff-8bb4-4c21-965b-314dc19168b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ad2f2f-f165-4a86-9d53-0be67e055adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc00da4c-f646-4b4a-bf22-85e1c73f4721",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7145a58c-06ee-4b12-8244-b8ede2efa455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ad2a79-1793-4ff9-a392-a7686f36ee85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5593ec5d-9d39-426c-b1fc-b59790a0b5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0e08fa-c6b8-474d-8d1b-3ad34b876a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c95c52-f8be-40a1-a4dc-993d36393039",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5623f2ae-8fd0-41c6-9d65-3be92579c3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8798149-8377-4790-a594-15344b33d135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86d2728-3b03-4101-882c-2a7a7d81d461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6580aa2-d790-4925-bd2f-bd186b997623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acac27e1-70a8-4499-b5e5-5f5c2c64d333",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e83ec0-25b8-485e-a2ca-33d5b26543dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0aae51-d519-4c7f-99a3-4f47b93034c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45bcca6-970f-4c5e-9317-c6a9612e9566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d5089b-e880-4189-ad5e-c1e6fc86d248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c94a9b3-eb51-4648-8642-c9ebb01d50c4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8225f05-02f9-452c-b346-dcb27185bfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379e4c26-aaa1-4bf7-9029-7e975689db1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf22da6-849e-41d5-845e-b0d0af29615b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f54597-8fda-4948-af71-ce8c35eaceff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13154ce8-0b91-469a-bc2d-38bc39e45f72",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59f7615-ff15-4a22-81d8-43aa2caf596c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75a1a26-ea0d-4eeb-90a1-79690fd92287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e289511-3369-4a0e-872f-e90609663456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16b70fb-9dd0-4fca-b511-a6f6c72c0a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dee61f-aae5-4588-9480-d7eab4f5ef39",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15bfe85-f72b-439d-8a1a-930586861722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fbd877-adda-42f7-b637-feb68229f9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b3413b-e8b6-473f-a113-796c46f31cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5a7613-7780-4b53-9ce7-5ab1f6af069a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c8e42-1bd3-4435-8ff3-fb78bd5bd201",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c50705-6cae-4c0f-ba62-77edac30de3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b709269f-f8b1-4225-951a-6cbe8ecb696f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9fcf60-b43f-4776-ba0a-0cfb7ef1c8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7417e60e-7821-4bdc-a397-2915163b11e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc01bbc-c17f-4e5f-9cc5-cb295a984e13",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b286ee1-4a85-4a22-9f96-aa44894ff619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c06b41-115b-4aed-a1e4-0291cadd538b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacae901-5e4d-4d14-a2d1-96f24f16438b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59535481-49db-476f-82b7-f1486851eed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e2f287-a775-43cd-b0e1-819d363beb7d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99179c1-b824-4b83-aa45-be940e0d0faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91964a1e-bd7f-438b-a58d-e623d701e1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a27d7d1-f7d5-4b05-a6ba-d33af376eca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8197bb7d-35bc-4ea0-8636-d79193f66b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88c3fb0-24e9-4c48-b9b1-889f76228099",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c56154e-154d-4ed3-a56d-e9a3f2ae706f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857b99e6-55bf-47df-a6a2-abc53bfbb221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aececc8d-063e-4aff-aed3-7559061413eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5250d7a0-cf40-4241-a5e3-c51ccde28f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461058d2-4968-4456-9ebc-3bed27dc2fb3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13044e5a-ba66-4df5-b128-43c5c34cc294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa704290-3437-41dd-a36d-28af32e51a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743a0c55-0c25-41b4-b8a4-3dfbb9805fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aede360-f70e-4bcd-b691-1d9bcb9343de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddf3ef4-8687-419f-bbef-788d36d77a41",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4122c280-e9be-44c3-9c54-b939f5a42bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded86518-563b-4a0a-ae4c-733f599a0968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca00b3-d63d-4145-b799-d1c237bb59ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28691f49-e205-4afd-b217-e79d4f56422b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0c8de7-0db4-4617-bf09-9bdd946794ff",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc2b69f-c562-4481-a6e8-6790cf01a5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcccb4fe-a585-4f92-b70e-14f77f9c1337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3d7429-8890-429e-81a5-be8b985e4f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b2b986-4b85-4467-bb36-bf93208a1925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7afdc8c5-db8b-4e28-8559-fa840db96aa2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2060e422-077b-4c17-95a4-8657d3f76ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89dbef1-6b5d-4516-b0e5-ed6cf83dead9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4c1457-35f3-49e3-b2c1-a5cdad4ff3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd2e07be-6726-4be9-8487-0f739dc010c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f44b66-b84a-4733-b644-1586cc392f43",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5863da-ee7d-44d1-9711-a9f25275c665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8dc0e4-73dc-4412-8309-7260a8631305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ecef56-2d6f-45ca-8365-8729f106cdf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8e7795-8d16-4970-a0a6-17b8b40150ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e666cd7-44b1-4788-9b49-c38e8b442f4e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91a0380-97a6-4be2-9597-bf7feb701324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d80394c-4fcb-4c57-840e-896caeefdb55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89b3747-2af2-4b5c-89b8-f7e5e1847e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3c58d1-6d91-42a8-9493-0fb335adf310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda3a8b1-3db0-4825-80a0-78f6e6fc0976",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0285c07-65e5-4592-9461-82f5062c3ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28063d6f-c7ec-4210-9914-2eb9e0d2419e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1a0599-74a7-4cac-b3a9-cd0b4f2621e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c68e59-69eb-4c69-be78-4063b81b6c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e22cdab-eb8c-432a-b7ac-18c6c0e192b2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d3b2ae-ef76-4322-b59f-fcdc52770dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac23aaf-ccfe-42f8-8f67-3f2ddd23037c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e88da73-46fe-4102-ad9f-c09d7f9e3706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20735a5d-fe2e-4b84-934a-76bcfc681121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a8fbcc-8719-4672-ad5c-bdaadbe143e4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927a4d77-7d7b-4d71-8790-76aa22db7cb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ae161d-bdb9-4c52-9620-dfc03dba1c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9b4902-151d-4590-8bfd-3843e4d32970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6913d14f-9146-4524-a142-8b4f9ef9fc13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe26cfa-2e57-43a3-8625-6cf08e1c0382",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab1788b-d683-4d24-85c0-19919da4e4ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad8881b-cc71-4c04-943c-84d8639b671a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f401c36-68a2-479d-8f64-77d1d1eb90c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47aa38f9-e56a-4498-a2e6-8df6910e6c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7340b273-ee7f-4c8b-ad6e-bae5c8a51e41",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96abd558-14ca-45e4-9abc-73dc93f86e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5481772f-1c60-4b80-adae-ecaf815182c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15399d6-a70c-4ec3-a165-a1e10f0dd7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef92dd20-4ff3-4f30-b8ce-824dbbcc013f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969fda16-a4b5-4c31-a1da-72d71b0beb1c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37507cfc-79b0-41b1-bfc3-a390b8487b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c5ea62-46c1-4790-a487-e795a2cd8c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66e5673-0f63-4a06-9d49-c23dfda4fb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc515354-23a2-4d20-907e-245b63e97c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f27b6d-f886-48d8-a731-f2dbd4c0ce77",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8979ede-041f-4c84-bdc4-f690269e5d29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ecd731f-560a-4625-be7f-20dd2a6bf86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87147266-9ca3-4dcc-8f01-faadff5d4acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39059b4-8357-48ca-ad52-59d8bb9d1d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2c8560-24ad-4922-aefe-dff73e0c0dee",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d837a6-3fe4-4b50-8049-4b93773467da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5be5a03-57e1-4ad8-a818-b5f724b0dbf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686e06ea-9952-409b-b782-4400a54ce51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b12e97-7f8e-4c69-b5bd-b6ab6e36cbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a61a13-0fd4-4e25-9a91-5eea0d856b29",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce25ab8a-4901-42fa-9232-61ab9e9404d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b85b18e-3254-458f-ae56-704a19cf0aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb29428a-5bb3-474b-aef7-68828d7795d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40699b36-8712-45bd-9aee-49dfb1d952dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695fee29-08ad-474c-8dcd-f9fbb21b5c6d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc03a48-2905-4edd-bc17-c3a97ed8deff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20546a73-be5c-4db0-b1b0-b9b9609366b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187202cf-fe06-49f9-9640-72406a4fe0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afffd3a-025e-44a8-97bc-4fe014135f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f735e84-02fb-48ac-82ac-df1830232d01",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543dc51a-4f29-4d12-9905-82d8c2df1099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57525d1-9a97-4283-8e98-cbe7424e600a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ef6e57-0562-4208-b2d3-2c700fc234cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c744713-836c-4e65-9c82-9a6d40c0d018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3ffa74-dba4-4bc6-b9ea-6de72c533878",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60fb087-e4cc-470d-9659-c206c73f6126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "254c2de3-5c25-4585-810e-84ea03fa0ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3e29e7-3faf-4db5-a19b-ebb57d41ae17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b79674-863b-496b-9ead-58696ee92b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e98441-5f89-4b45-83ca-eaf6612d35ed",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2fb6c1-d7b3-496b-aecc-1aa80644155c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a453b9a-54ed-49cc-9008-f267eb121d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b243c6b-4fdb-4a26-b406-1754d77a334b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe0120c-b0df-4d3f-9ab7-7474018638e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b28926e-9543-4537-a09b-85453d1ffe77",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e6f5a9-9233-45f0-b5de-c00dba30ae4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f41e3b0-5d66-4410-b0da-37f2cb4a4ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2124160a-d5f4-455d-80a4-5ec3d8499be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd438b22-cdd0-4aa5-97b6-ba7b68fe87c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d59181-110c-4c43-aacf-97f290f65da3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237ff59c-d499-4488-a58d-0a0c5b97fe9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf34e0e-caea-4ae8-bbe8-49037db445b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beec4924-68a2-4fc8-9e09-4d0d07bcddb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa688f7-03e4-4d98-adac-f03db1ed5739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc33262-08c9-449f-ad80-4a1e2c8676f6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc95b414-069c-4e8c-a19a-3037a6793730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6f9db9-450c-4edd-a564-f3dab592f396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375b2431-2d73-4e7e-904d-0de74872ab51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95ae233-511f-4eea-b133-a2b970a80434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cbac75-e4b6-4fe8-8546-6193150bf3b3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953e9a10-2e34-4505-aabd-94d7be835a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17be8600-638c-4a8e-9318-d495347015b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8718ba59-c02a-4fab-b0be-27fd414c342b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b245587-111e-40fa-9460-c664f5bf45ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a1db91-bfb6-4ac4-a2a2-ef1ea1b50c3c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6f9d29-ff4d-4445-8ca2-2ccb407980ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7084954-a683-4768-9a18-8590b3276136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c488c9-6f39-4a9e-a2db-888787166b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cd6894-9a3b-4cfe-9862-ede9221aaec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b75f378-ebde-48ae-b655-add3a25c9416",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c867f695-fd6e-49f9-ae16-9fb49adb442f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c8bd485-8393-4416-ba6d-fc443289b4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212705cf-b26c-4f44-85ab-d12d2d58791a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3877bb-2faa-4005-a32c-913d8b4961e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e25cf7f-ba77-4a4c-aa71-5551832c3f6f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebb9710-c1d2-47b5-9038-29a8c1ece50b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b7749e-3207-474c-9b37-5d4e60de5b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d428aa-11da-4ccd-ab15-152af2333c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c351dc-e0de-4822-98ba-4be79b4ff219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d498dd-b9c0-4462-813d-854322fad257",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbc62eb-823e-4e8c-87a0-cef4b8ac3524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2801f56d-bdcf-449d-a80c-090639cc7974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5ea2f1-383d-428a-8f4d-d93f65f38237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c508a9-4a86-48aa-9a7d-880727fc4695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f44f17-340c-4521-a22b-af2a206bde0f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a006a6e3-4c91-45f5-a64b-90fe3a24a615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28542a38-32da-4839-9f2b-3eda271dad84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c944f3f-b77e-42f0-a523-553155c0bd34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f68b53b-e786-462f-ae1a-7f20863bab99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ee2642-8679-49e1-b90f-bd0b960ff5f6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2616c918-2bb8-4bf4-b6ae-626ce4d40016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd61baf6-0178-44d2-8179-0fd7c7b6fc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1561672-4273-4bc0-81d0-2a1e4281c9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab37b30d-0626-4e68-9bcb-17c3baf80b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4079c521-baf4-448e-ba62-89c57c77edb8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed649fdf-9d2c-49e2-88a7-6f6e50e1b380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b769ab94-c6df-4557-991c-a3a73f9b96b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3683fd-48d3-492e-8b20-84767dfd4b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6b6023-5391-4b6b-997a-92eddac8a2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a8ac2d-2623-4528-a062-2da7b78285ac",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee71e41-c08f-49f1-b6f4-60975b956185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17929dfd-190e-4f90-a0b0-6dd1588d610b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41e77a8-1b10-420d-884d-cecacdee4719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97be7f69-9aa2-449d-b955-3c22c9b1b6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf9d256-a1a7-4f48-aeba-36781f5f2545",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a127d26-5009-40db-9697-03ac85af5c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4951bb-7d5e-49f9-b6c4-020cedd21287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbf91d0-cedf-4e23-9f32-80130f5e02ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f65b300-c778-4c5c-bcb6-eccaec439a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc98de2-3502-477b-8b3e-067eddafdf36",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71f718e-534b-4798-be9d-57560028dc47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b00afb-e018-4ad6-ad9d-62e69995e9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045bf675-26c2-4569-aeb9-331c5feaa61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de93457-8654-4287-8195-4942f71107b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98220001-bb4b-4fc4-987f-ccc1eeea6dd3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e947d69-5f7d-4cff-8df6-09875a9ccbf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5a892f-c18e-47ea-9576-500781f542bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da15b99-3d7d-4ad2-aa8a-387698ef17d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba91c890-a90f-48a6-bf1e-c70b5fec0c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0277e92c-ca2f-4caf-b478-5d69b7c6e9b0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c946374-d661-4f4d-b6dc-3b2476d41b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e57066ec-1154-416d-a09b-66488331f821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a567e62-e166-48c5-895f-127384b1766e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17864f18-e41d-4fc1-bf51-efd680768f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70b08a6-3815-4480-9f39-f8d3b9f65434",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161f420f-d882-4c58-adb9-311dc481e7dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c3e574a-3032-4d0e-97ab-8c8c7eed07d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9165b4-ce80-43d5-bc70-727dfd96ae5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c404b5e9-db65-4a14-a58c-2e420095f0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e38b30b-1128-4949-a217-d8376e9fb85b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6609aeff-975a-42d7-ad38-0f872699e827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e2245a3-98bb-4723-973e-19f3fe65c5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d27099e-f2b5-4ac1-94de-3551b87a052b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a7eb78-8cc7-4d3c-a749-d0ea782f955a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c402fc23-5077-4dcc-ad3d-a41c7d8df7ab",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bb1d3f-3f9d-4e7d-b438-6148117c5fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab92f36-ef48-4480-96b3-442f6862e0db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390a2c3a-6f91-40fd-a6da-4aad3297b2f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c69afb9-cd0f-47d6-b9f4-6f098aed51b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf58c7c-29a4-464c-9f37-122b5706103d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28a6963-99a5-415a-a474-1928ff21bf20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a05666-e697-4bc1-b6c7-9428eb3cbfca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789c18d0-874d-4c30-a7b1-bac930c5e20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb073a0f-ca8e-49ac-9da6-153a2dfdaab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bb8618-e8f9-43b7-b4c4-e30879939010",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edf073a-9694-433b-8ed0-1ebe8a2b0c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dee085c3-4cc7-45c1-a18c-b0356cf37d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5e26bd-4f6b-402e-86d2-73cdb3856f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6d388b-53f3-4d48-ac91-c62cf936ff0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3664541-aaa4-4c3e-a2d9-76044a2b493c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a48ed93-f953-496b-b6d3-28e5d4dbf68f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f621059-d3c5-48c8-a332-9cc84b43ec8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feedcfdc-d5c6-4c96-9a6b-4e5deabe97fe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7394cd85-d9ad-4307-a826-6eea404003a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1d9271-01b7-4159-9bdf-00960c169bda",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b52a03-c445-42f4-85ca-13bbd4d12535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8d55630-1ff7-46b5-bd7d-2914d6b73f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7eb2af4-d88f-4efa-8bb3-09ff5d10973f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6160044e-a3a3-4a94-a07d-536186fc543a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70ad377a-2cf0-4e6a-a228-981b1ee081ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abf86353-e2ab-4723-85a2-20f12caa5c31"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8097c5b7-11f8-4d23-8eeb-f080a5cc12ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da0eecee-8f93-4a2f-9da7-8fdc19c8c5f8"
                    }
                  }
                ]
              },
              {
                "id": "3bc57d50-a2d5-4c12-87f9-a7bc9c9ec775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43aa867a-55d5-4740-97a3-5b3b26cd4a31",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb7f2dd-6125-43f4-9bca-b911155a9487",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ba45752c-cdcb-4746-84ab-ce0e509089e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f2f1e6-9c4e-434c-af88-48d5bd212c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5d60d55-3118-4354-a0b8-04c626b39b23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8460ac9e-0fb0-4e7d-8e23-d8b3982372df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e4e193e-4cb3-4063-8970-f731b34ba41d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21c6eed9-e910-46cd-9bc7-719ad03878ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a64a206-9ec6-490d-b646-750a17339437"
                    }
                  }
                ]
              },
              {
                "id": "2e8bf00d-ee3b-491a-b156-aec9d83de0fa",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "36d78463-8ca6-4075-8e54-5ff183fd6efb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c94ee90-2cb8-46a5-989a-aa99e6a45f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "901dc6f0-7784-41fd-bf1b-f0f8797733f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8461515-9deb-4d49-898d-d8fe87ac9af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99007f26-02b1-4850-a221-f7083e06bf95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b9436c2f-9e7c-4ace-9203-f4f4143c58d9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "01b16369-1c7d-48ab-897a-606edbb64844",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f1e3340-78be-4de4-be14-94d30c30181e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cd512ef7-00fd-45f5-bcb6-c0e4ebe537c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7933ffe4-714c-4870-a5fa-a97c42d7bf83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae05463e-26fe-49ca-acaa-dd79188ba051"
                    }
                  }
                ]
              },
              {
                "id": "116d08c1-79cb-433e-8f44-c6c82fe584fe",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9267568b-68e3-4b7f-b175-ff2cb4945e13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "18614826-c62c-436b-b3c1-ec2a9a8709b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52ab0334-ca86-40fb-a9bc-b6176647b8ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23488fba-6519-4756-b65c-0528c6243c5e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bbb24bbc-6e1a-4e82-af8f-4e85d9b0f196",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9ff01843-fe9d-4040-9f35-4e82a29a929a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85dc76c1-9c57-45f0-939b-9bd0b591c89b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5d63ca1-cb46-4c88-a312-5e8300fed79c"
            }
          }
        ]
      },
      {
        "id": "3f97c6dc-9d69-43f5-b000-9b3e311c096a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0768ce2a-437e-41b1-81b7-67cbec0e4d86",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24b65c99-65de-45dc-8018-abe28776847e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57819a31-dec1-45a2-81c5-7bc8ff32e890",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79e18ef-7fe5-4e69-9332-985083dcd724",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "910a9130-9b0e-424c-b18f-8af2cf11c2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fb3506-8237-4983-9c8e-5ac7ad3638aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ee45f1e-8acc-440a-a5b4-408f06c14f06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53fb6092-267f-4f8a-b531-bf35483f053a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdd0e043-e2f9-412c-b42c-bb2bb71cf989"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9863b8aa-d3ae-4317-997e-7332b7d105fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbf075c0-5994-4d0a-a998-3720c4e3a473"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3261abc-02e4-48cf-aac3-ee148a835890",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d257bd6b-538d-425e-a324-2dbb29ac9627"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ecab9e0-d21b-4438-9c5a-a3820bc553f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8eda351-eaba-4d2b-bc9b-455fba5a231c"
            }
          }
        ]
      },
      {
        "id": "2de5bb3b-d18b-490f-ad7d-a016a5dd6fbf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1898d5b3-254e-49d4-b9ca-233730e1ef63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23d084a4-8e0a-4c5a-b4fa-9989f58e99d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aaf1d6d2-c411-451d-8515-8de94a2d9754",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fd1fc5-e054-41de-b9eb-a81a99f19c92",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60f94d03-d138-462d-8101-c84d9b307bef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2234acc5-1245-4319-882c-1a7880eb7330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa0624c8-e502-4848-a322-fb4c05aeced9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52c199bf-0c5e-4540-bf8f-9144359d3aab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "695a6606-13b8-43f4-a067-34d69abbb3f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b3d8709-093f-42fe-86f3-e36aaa6ac185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26732158-b1d3-4b80-badd-a5d49b0b8a44"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "724dd473-77f1-4bae-9a07-e494eb9c23b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "079d3c1b-797b-44db-889f-5680608f592a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6c63049-7619-43ed-8487-a09daf80507d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "115ee1af-f936-4b84-9979-12ceb5def8d1"
            }
          }
        ]
      },
      {
        "id": "e39737db-e664-47f4-ba77-5d52fb11df8d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b8e95e64-fd35-4f87-8110-85096ff4df55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d000d981-9e7f-4096-8462-76ff0f2980a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "268b4be1-3323-4293-8c5d-c40399dfa897",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aded031-2c73-41bd-a1e3-b8b0159de2c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cf0c578-3afe-4b74-8694-8e38ea3e20a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8649d7-1a33-42bd-a4b0-b1c1e59b58aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9a0ab42-fe7c-4ad1-84b9-283f77191997"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df9db3ac-c999-4d05-84aa-aefbff92e315",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d4cc7c9-b5f2-41b3-9beb-4c57e272384a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdd97dd5-8696-4db6-b821-25953dbf88b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ec7d95b-90c1-42f7-a8c0-4df57604eac4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80d54326-788b-4977-b6da-6b6541b93315",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "26af7042-8d7d-4e2f-b5f5-8ec6c2800601"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39263ffa-4ca2-4f7f-b2ed-81ac0a244bcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a3360fc-b923-47c7-9388-d8041f224a7e"
            }
          }
        ]
      },
      {
        "id": "e98b165d-537f-42c8-8bf6-77c5e4e9b476",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f424cdc2-44c3-483c-86a3-060aa0d7ea73",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e993fb8-9ac0-4d4c-b5e3-0988ed7ee406",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0f01741b-de59-49b8-910a-0001a0c58a33",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fed3bcd-978f-4a07-8b10-65eb342993c9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48da6c84-9e1d-4528-891d-22c79412c681",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 269.52032520325196,
      "responseMin": 21,
      "responseMax": 5574,
      "responseSd": 720.151896235737,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685925760303,
      "completed": 1685925836938
    },
    "executions": [
      {
        "id": "2f291917-874b-4fa1-a14b-ece8db94b29f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1eb7e7a2-0cbe-4377-92d9-65c1fdd5f392",
          "httpRequestId": "2180b7aa-ced6-4a1e-88d0-c6277762b363"
        },
        "item": {
          "id": "2f291917-874b-4fa1-a14b-ece8db94b29f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c584e83c-bfbf-4ced-b87f-7bed21e62ee4",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 0
        }
      },
      {
        "id": "3abaeaf9-69f5-4467-a1f2-cbb3c0d94a54",
        "cursor": {
          "ref": "0ef17694-a377-4fbe-8506-8f3047f250e4",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6672e380-af83-4a5d-ba20-e488adb01511"
        },
        "item": {
          "id": "3abaeaf9-69f5-4467-a1f2-cbb3c0d94a54",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "482bee99-eb85-42fe-b2a7-0de8e79bc6cd",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "c685ddd5-abf4-45e7-92f9-44518441e6b9",
        "cursor": {
          "ref": "4d892cb0-b453-4bac-bc21-750d3a47f0f0",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff921b4e-d17a-4c20-a0c6-eb9f14791059"
        },
        "item": {
          "id": "c685ddd5-abf4-45e7-92f9-44518441e6b9",
          "name": "did_json"
        },
        "response": {
          "id": "d1e5a4ab-c5e6-4b75-b489-953775be5024",
          "status": "OK",
          "code": 200,
          "responseTime": 679,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a523654f-7b0f-4391-ab66-6f3ee1af2ffb",
        "cursor": {
          "ref": "036aa489-ff61-404e-a3d0-276e8c0fb6ac",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ff60a462-2d18-4bab-9f39-76bdf92d875b"
        },
        "item": {
          "id": "a523654f-7b0f-4391-ab66-6f3ee1af2ffb",
          "name": "did:invalid"
        },
        "response": {
          "id": "43cccc60-c9da-4963-8ca1-368b7ba71d88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1700,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a523654f-7b0f-4391-ab66-6f3ee1af2ffb",
        "cursor": {
          "ref": "036aa489-ff61-404e-a3d0-276e8c0fb6ac",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ff60a462-2d18-4bab-9f39-76bdf92d875b"
        },
        "item": {
          "id": "a523654f-7b0f-4391-ab66-6f3ee1af2ffb",
          "name": "did:invalid"
        },
        "response": {
          "id": "43cccc60-c9da-4963-8ca1-368b7ba71d88",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1700,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "76c05368-f559-4f54-a047-58fff94cc322",
        "cursor": {
          "ref": "96a9295e-87ec-4f4e-8831-09b906026f4c",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dd6bf89e-c194-4d07-905e-a8ee77a01d39"
        },
        "item": {
          "id": "76c05368-f559-4f54-a047-58fff94cc322",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d7730b5f-ca74-4ddc-b33e-38b9b1edee51",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9c8026-2b3e-4120-a37b-a71c0fede05f",
        "cursor": {
          "ref": "6afbafdc-176c-4def-94a6-ebc549c71719",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4a1e63b8-0eb6-4eca-a3d5-9537a53dd818"
        },
        "item": {
          "id": "fa9c8026-2b3e-4120-a37b-a71c0fede05f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bfb874bd-cfd4-47a9-9b92-ac90b68323df",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4b468b-54ac-4fa6-87f4-f371b7eba156",
        "cursor": {
          "ref": "a5a33c76-c9df-49f8-b6d9-ac807da18d08",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "10a0b1c7-da4f-4875-a834-aaaa425e2ab3"
        },
        "item": {
          "id": "8c4b468b-54ac-4fa6-87f4-f371b7eba156",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7484c0ad-a50c-4b1b-8d1b-aba9af2f69f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "56f68149-e2ac-473e-989c-30573bb63a8b",
        "cursor": {
          "ref": "84f3d855-d187-43b1-9416-4a2df9cb1cfa",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7bd2218a-0d99-4362-a1ed-4147712a6207"
        },
        "item": {
          "id": "56f68149-e2ac-473e-989c-30573bb63a8b",
          "name": "identifiers"
        },
        "response": {
          "id": "532fadef-dacd-4119-a3b2-6599d4c2981c",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7a274a-d6bb-4344-889d-a577c9c70a8c",
        "cursor": {
          "ref": "5ae0c441-31c6-491a-8be8-76482422bf55",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7697005b-a0c5-4989-bf7f-05ff097ec850"
        },
        "item": {
          "id": "ad7a274a-d6bb-4344-889d-a577c9c70a8c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cc56b6d4-8a0f-4fe1-bcc1-ca14c59a7c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68e1c12-a787-4b96-8352-0c42ee52fcc4",
        "cursor": {
          "ref": "4350b708-4baf-414d-9df3-a05b2be3e946",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "07493d56-b3b5-4cdd-87fc-214b5fd65033"
        },
        "item": {
          "id": "b68e1c12-a787-4b96-8352-0c42ee52fcc4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "35826080-1861-434c-8fbe-6a14e6ebdbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc1a5ce-05ca-4aab-ad7b-718b49195d85",
        "cursor": {
          "ref": "57e7b444-0a20-4292-b270-4e965c81af15",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b795ee44-e64c-42ec-be46-d6fa55fe04a7"
        },
        "item": {
          "id": "1bc1a5ce-05ca-4aab-ad7b-718b49195d85",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0374d18e-2111-40da-a927-071c789251b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fee2b13-691c-4e38-8d2c-76d96ab24269",
        "cursor": {
          "ref": "4769fd49-8ee2-4696-972e-1a2eb24064bf",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3d5b6263-8434-4319-a252-8b7c7c8c6850"
        },
        "item": {
          "id": "0fee2b13-691c-4e38-8d2c-76d96ab24269",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fd78d6ff-6424-4bfd-ac71-1fd083df42a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f78c2c-2d18-4bcc-8ca5-463e72303b59",
        "cursor": {
          "ref": "e9a9e3f2-1bdb-4894-b7d8-8ba950942bc7",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8d38e6e2-65a1-4108-84aa-955aadc0a5bf"
        },
        "item": {
          "id": "15f78c2c-2d18-4bcc-8ca5-463e72303b59",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4ca3f32d-ef54-46c0-a152-be146ae32d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91f3526-6e6b-472a-81cd-1fbe397a7a91",
        "cursor": {
          "ref": "c8e4b6b4-4f81-4b7e-a20a-b42a292a7c1c",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "739e1722-dc7a-445f-bc41-feeca25932ad"
        },
        "item": {
          "id": "f91f3526-6e6b-472a-81cd-1fbe397a7a91",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "db12ac4f-5b8a-4ae1-99e8-6cc541a5c4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877dc4d4-bf3f-493b-93a3-2e67794298dc",
        "cursor": {
          "ref": "1eed42ce-087e-40ca-beb6-a01feba3660c",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "220338b9-a17c-43c1-828e-cf99c33ba203"
        },
        "item": {
          "id": "877dc4d4-bf3f-493b-93a3-2e67794298dc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bb74a9eb-3d50-492f-83cb-29cf6417b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14075da-d290-4ec2-ab1c-784be572041c",
        "cursor": {
          "ref": "b7bdc1c8-ddff-49cd-9254-58d5c17456a8",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d465f40c-e7b2-4fb2-ab20-e954b9ee7374"
        },
        "item": {
          "id": "a14075da-d290-4ec2-ab1c-784be572041c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b094e3c0-4c82-48e7-9c83-c2ef613a1dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd77e9ec-9afe-4932-9ce0-2b57a3113286",
        "cursor": {
          "ref": "c5498de4-0e59-436a-9d5d-cf338a1ce513",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1ea42e76-d203-4d55-ab83-61d6518e8244"
        },
        "item": {
          "id": "fd77e9ec-9afe-4932-9ce0-2b57a3113286",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "88d84e67-21ec-4fc2-9f74-653a1683bfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e725632-438b-4685-8845-990c5da9f4e6",
        "cursor": {
          "ref": "5803a79e-e63f-4bb8-b0d3-ea7fdbfbf37f",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "793b88b4-b4e4-4c1f-b47d-a86fc46a90f8"
        },
        "item": {
          "id": "7e725632-438b-4685-8845-990c5da9f4e6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8e33e5f-4198-4db8-8a94-8bde2aaa1395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a43d808-749c-4e54-976f-d427f73b5c68",
        "cursor": {
          "ref": "8006ecf9-8462-4ff9-a73d-b29d87550b13",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "636bdf54-74e8-4375-8c43-42039f8935f7"
        },
        "item": {
          "id": "9a43d808-749c-4e54-976f-d427f73b5c68",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2669fad5-9647-4fea-b27f-54eaa099ee1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa102e7-421e-403c-a2f3-dedcb0530b46",
        "cursor": {
          "ref": "8b84d611-a5b3-44e9-87c1-7de42b4d92d0",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cdb423d1-0351-4b32-85d5-1da434bdd8c0"
        },
        "item": {
          "id": "faa102e7-421e-403c-a2f3-dedcb0530b46",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "11e5cf7b-c640-41fd-a0f7-131d4b945d1c",
          "status": "Created",
          "code": 201,
          "responseTime": 1175,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a585f358-e5b8-400e-a9f5-3256172ba556",
        "cursor": {
          "ref": "9a0acf9b-b47b-4535-b409-ddfe4e9ca2ea",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b419dd90-103d-46a2-9b10-436fa8ce60d6"
        },
        "item": {
          "id": "a585f358-e5b8-400e-a9f5-3256172ba556",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ca1549ed-2662-4119-a549-168686208f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18304185-8d38-4cd1-9918-92bf1be31b68",
        "cursor": {
          "ref": "9dfe1384-e228-4f1a-a4ff-2f1486b41e5c",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a5189c26-0179-4102-b1e1-209d54e29129"
        },
        "item": {
          "id": "18304185-8d38-4cd1-9918-92bf1be31b68",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "efdfb0ee-519d-4062-8ada-21699b5c9f72",
          "status": "Created",
          "code": 201,
          "responseTime": 5574,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5b7d30ff-bfb1-4f8c-8f51-124f0c908139",
        "cursor": {
          "ref": "6dae3be6-eb17-4b7b-bc30-afc56375acef",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a69d5340-8593-44c2-893c-ed39e5e32530"
        },
        "item": {
          "id": "5b7d30ff-bfb1-4f8c-8f51-124f0c908139",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f0eade66-82ed-4f5e-8ec5-0e63a676b205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8db0ce-faeb-495f-9964-b85f51bf882a",
        "cursor": {
          "ref": "b020c011-20d1-47a9-b2fd-b1d04a5bfc3d",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f5b3bede-bf84-4221-8f66-1a919f2c0c25"
        },
        "item": {
          "id": "9f8db0ce-faeb-495f-9964-b85f51bf882a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8f6d3a74-f65a-42c2-aa58-cc666b757cc7",
          "status": "Created",
          "code": 201,
          "responseTime": 4080,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4aefec04-0a7c-4fd6-997d-119bfc4b59e2",
        "cursor": {
          "ref": "b3d5bcdd-bb79-4b8d-974b-0229c2fb6af3",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "522cf45a-45ed-4b42-b2fb-4dd159bad121"
        },
        "item": {
          "id": "4aefec04-0a7c-4fd6-997d-119bfc4b59e2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "00337d63-ea36-4be9-aaed-afabedd0383c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a6b1b4-90d6-4627-a900-13a7839b4280",
        "cursor": {
          "ref": "48bc7373-cef8-4d8c-9c76-b37026a065e9",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "27df157d-79c3-4634-a948-338581ed6a32"
        },
        "item": {
          "id": "d1a6b1b4-90d6-4627-a900-13a7839b4280",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ae909a12-0ce3-42c8-a4c6-493ca7793076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4973b832-21ce-4c30-9248-64e84c2e1a16",
        "cursor": {
          "ref": "2999ecad-a986-494b-8bb1-cd8049d6ce29",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8b919615-800a-40bb-be4f-1957d7b25534"
        },
        "item": {
          "id": "4973b832-21ce-4c30-9248-64e84c2e1a16",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ca7512be-91ed-468c-9da7-5943bcfc3764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481057a1-35d4-40f9-a90d-364171ed05ca",
        "cursor": {
          "ref": "b005c336-f35d-4ec9-b4cf-24014b9e98c8",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f4516cc9-5ad4-4fff-9f4e-188ef887a7a9"
        },
        "item": {
          "id": "481057a1-35d4-40f9-a90d-364171ed05ca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1eeb2240-7aec-4574-b7d6-4dd461ca48b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dc2266-d472-4d6a-8e2b-477d12b49db9",
        "cursor": {
          "ref": "41d052c6-7e3d-4bd5-8fc2-db2cd47c1178",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "01c54008-5de0-4d5c-b8d6-85ed515d7c0d"
        },
        "item": {
          "id": "30dc2266-d472-4d6a-8e2b-477d12b49db9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "41d8d44e-d7ca-4baf-82e3-5c9968976d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f00dffc-49ef-49d4-9dae-6d263732d850",
        "cursor": {
          "ref": "44882984-12d1-41ba-abed-e9b7476a9134",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2636699c-8852-405e-8441-79ab83c357f2"
        },
        "item": {
          "id": "8f00dffc-49ef-49d4-9dae-6d263732d850",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "829b7c84-fc89-4390-844d-a28d9a2c404a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53527710-44b4-4078-94bd-d2833e290a3d",
        "cursor": {
          "ref": "c2c1ec92-0839-445d-a0dc-ef5e4f1022d8",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "97dfbfb2-e69e-41aa-a7b2-1ce6c71cdbe7"
        },
        "item": {
          "id": "53527710-44b4-4078-94bd-d2833e290a3d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "881bde03-7a53-4e0d-a912-20fac7768a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a6d447-af9c-4d53-b0e0-1b495582b385",
        "cursor": {
          "ref": "be13db40-345c-4dfa-89c9-bbe2111a23b7",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e8f2314b-f8f9-4daa-8dfe-0865f3b85fd5"
        },
        "item": {
          "id": "92a6d447-af9c-4d53-b0e0-1b495582b385",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "dfe22f4a-bbe6-446f-b075-21c6d06436ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c11f9a-f05e-406a-bf73-07606d5f1a65",
        "cursor": {
          "ref": "9d669d14-21b9-405f-8945-1ddaaae2fc83",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4321dda3-128e-4ead-b68d-a89b8b0f88da"
        },
        "item": {
          "id": "a6c11f9a-f05e-406a-bf73-07606d5f1a65",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0d33e9a2-1c08-4e4a-a7ff-1f2c37edb912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faea5477-74e1-4bae-aa96-8f6201738b14",
        "cursor": {
          "ref": "7932b15e-bff7-4b73-9282-4dbf7f7a65c2",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e4122a0d-4b6a-4cd7-a02c-5017ad106125"
        },
        "item": {
          "id": "faea5477-74e1-4bae-aa96-8f6201738b14",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "aff46484-5fd5-4272-b95f-e187dcd7c407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63e144b-829f-4d2b-bfdf-c51fdc6f4acc",
        "cursor": {
          "ref": "be5e89a4-af0e-47ed-8b21-441800675c7c",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bbebf3c4-ab1e-4409-b290-41721d47acd9"
        },
        "item": {
          "id": "b63e144b-829f-4d2b-bfdf-c51fdc6f4acc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0572f1f2-2b3f-4b17-99b5-a781a6e7c381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858889b0-4af3-4cc4-ab75-e37d97160dbd",
        "cursor": {
          "ref": "54f72985-227a-429d-9de7-741d2bcef569",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b9320a0-30d4-4790-877b-3c0963246c16"
        },
        "item": {
          "id": "858889b0-4af3-4cc4-ab75-e37d97160dbd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "06a6ba3f-5464-4377-8c13-e7021bb395e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff32d3f-24d6-4fbb-a191-993a1e806dcf",
        "cursor": {
          "ref": "001faee2-8f80-4628-bd5d-9d998c98bf1d",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4c7ff5f0-fe22-417d-b334-76c5f5533c9d"
        },
        "item": {
          "id": "1ff32d3f-24d6-4fbb-a191-993a1e806dcf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f60c2ff8-c651-41b0-b994-39a662971cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05159312-aa17-4522-aa3b-89ba24481539",
        "cursor": {
          "ref": "0e105412-be3f-4b79-80b1-98ea5bfb2c94",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "180dfdb0-00b5-446a-90a9-3369d0f804b8"
        },
        "item": {
          "id": "05159312-aa17-4522-aa3b-89ba24481539",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e3840d03-5b88-48ba-bc97-00ae7697cee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ece83f1-e599-49d1-bbf9-44f1a9d004a6",
        "cursor": {
          "ref": "17d5b041-9afd-49df-9cae-225e20ba9155",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a6a2a63-fb52-4387-8066-2812786fffe6"
        },
        "item": {
          "id": "1ece83f1-e599-49d1-bbf9-44f1a9d004a6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "073e7f11-b6a4-4e28-96b3-3c320231a713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d65e31b-6119-40f7-a3e4-b9a5182e0950",
        "cursor": {
          "ref": "3829f377-791a-4d04-ae46-bc61d1a86dbd",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4068a9c1-7ea8-4bcb-8aa0-9b6f54a2bbd3"
        },
        "item": {
          "id": "7d65e31b-6119-40f7-a3e4-b9a5182e0950",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "737ded05-934b-4b80-929f-3d5a80b8b03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2725bb-26ac-4658-a57a-ea4c405719d5",
        "cursor": {
          "ref": "9e73a314-38a3-45b4-9a43-febdc43dcfae",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dbcce059-8cb6-41ff-898b-45fcc1bff9c6"
        },
        "item": {
          "id": "7f2725bb-26ac-4658-a57a-ea4c405719d5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "33466f97-fc9b-4400-8326-c52293631b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa09c5ee-d298-43d2-9a8b-9d10c971d941",
        "cursor": {
          "ref": "31994333-879f-4973-806b-8db0ca81c647",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "efe4b0f7-7609-4152-8bc2-62f2065063f6"
        },
        "item": {
          "id": "aa09c5ee-d298-43d2-9a8b-9d10c971d941",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b3ce6133-b8db-41c2-bccf-df94fe12f5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147852ba-e4ad-4e7c-b30a-9bbd176d848e",
        "cursor": {
          "ref": "97407462-c992-4ee3-8b9c-0426f0260e26",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "32e716c8-ec39-4ae3-a25c-af91d07d238f"
        },
        "item": {
          "id": "147852ba-e4ad-4e7c-b30a-9bbd176d848e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "25fa8eaf-200f-4f46-8f59-bd8f70e72078",
          "status": "Created",
          "code": 201,
          "responseTime": 2748,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c6e56a0f-30cf-48d1-863d-ea8506cc5ab0",
        "cursor": {
          "ref": "5e51b3f5-38f8-4309-8f9d-c5c8fc915d47",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "25283b0d-7212-4e2a-9b8b-2c8db1a67002"
        },
        "item": {
          "id": "c6e56a0f-30cf-48d1-863d-ea8506cc5ab0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "17b00c5d-3069-4b6a-ac31-8e98d654473a",
          "status": "Created",
          "code": 201,
          "responseTime": 2812,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "303e86d2-c445-4edf-8b64-96b5b4a9b971",
        "cursor": {
          "ref": "a5b2c8c4-214f-40c8-a488-671e21ca50ad",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "edec010b-a05e-426f-b850-f5ae5e7d0967"
        },
        "item": {
          "id": "303e86d2-c445-4edf-8b64-96b5b4a9b971",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e5e4803b-b579-4bd8-8aee-0ae596bfdcc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689bb476-3df6-4fd6-ac6b-de42a3b47df1",
        "cursor": {
          "ref": "9dc8dede-e9ff-4f79-84e2-d3ed2b7e7cbd",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "57b0d2dd-401f-45ad-b075-04420c1f3ad9"
        },
        "item": {
          "id": "689bb476-3df6-4fd6-ac6b-de42a3b47df1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c813c86a-fc1e-4f1e-bda9-4ac203368176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3ca311-e49a-4878-8458-ec3eb86264c2",
        "cursor": {
          "ref": "bf6dd44c-6ace-4cf6-9233-f0f5c1ece3bf",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f16c530e-3ac1-448d-a353-080fa44bdd38"
        },
        "item": {
          "id": "cf3ca311-e49a-4878-8458-ec3eb86264c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0dc84e59-5266-4d86-8d08-c86015019526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66b9a20-a1d0-43b1-8ba9-124e210d1cd6",
        "cursor": {
          "ref": "0089fea9-2194-4492-94dd-5b22ebedcc3b",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ec2902fc-b7ef-4faf-8742-0a0820c3daef"
        },
        "item": {
          "id": "b66b9a20-a1d0-43b1-8ba9-124e210d1cd6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5e40ce3c-94b6-41ae-b822-7b9ecdc1d04b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c3a5bc-8348-4507-8962-1c2ab5d33f69",
        "cursor": {
          "ref": "6117fecc-5bc0-4f2e-a903-2cdb03d37bd0",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "74427ce7-64bb-43a3-92f8-d3a1fa1e92c1"
        },
        "item": {
          "id": "07c3a5bc-8348-4507-8962-1c2ab5d33f69",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e079030c-86ea-45e9-8507-2a0950aad0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b8bf5-2ac8-4d32-8df7-b892bda801f6",
        "cursor": {
          "ref": "b30ce423-b59e-479b-b3d8-46743bdea5b8",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fbdbbd1c-920e-4646-a42f-559f7b33696b"
        },
        "item": {
          "id": "c69b8bf5-2ac8-4d32-8df7-b892bda801f6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b987e101-0302-429b-87cb-fb2c24249daf",
          "status": "Created",
          "code": 201,
          "responseTime": 2452,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "16076683-7cd8-47a5-a311-1a03d9f53841",
        "cursor": {
          "ref": "c223dfd4-e950-4343-911e-864a3ebe61b1",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "330657fd-0ce3-445f-ac3b-1e0b48da82ca"
        },
        "item": {
          "id": "16076683-7cd8-47a5-a311-1a03d9f53841",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9398e8d5-d91f-4daf-88a3-cafaa23c0aee",
          "status": "Created",
          "code": 201,
          "responseTime": 2204,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "83566d6b-dfa6-417c-8e36-d8dad7bfa2b3",
        "cursor": {
          "ref": "4c8de6c0-d64d-4fc7-89d3-7dfe0f644b7d",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "30937a58-d1ca-4cd0-9801-fbb67367d553"
        },
        "item": {
          "id": "83566d6b-dfa6-417c-8e36-d8dad7bfa2b3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7534be30-08ce-4143-b997-a7f08883a945",
          "status": "Created",
          "code": 201,
          "responseTime": 2013,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a50d9f30-ccb6-4ede-8e59-0de4fd16c023",
        "cursor": {
          "ref": "83d97cad-dce0-45a5-8344-ec98f71f11cb",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2631f7c9-d93d-4ed7-a062-1b3b5299443d"
        },
        "item": {
          "id": "a50d9f30-ccb6-4ede-8e59-0de4fd16c023",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5d129e99-7ce8-4815-acf3-ee506add009f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7e3d78-4ec2-47f9-8b99-2ca453f43e05",
        "cursor": {
          "ref": "f264f6c6-a1cb-444d-94ce-cf098ab253ac",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bd3b1f11-1d6c-4b6b-a73e-ba4e0f1952ed"
        },
        "item": {
          "id": "6e7e3d78-4ec2-47f9-8b99-2ca453f43e05",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7f22140a-8237-4b3e-b20f-ac04ffc6b72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93d9bab-1082-4930-b97e-c81340ca67e5",
        "cursor": {
          "ref": "55046fec-bb84-44db-b49e-2c3dcf80cb64",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2ca39375-7c0c-40f8-aee0-59f0b17bf1c4"
        },
        "item": {
          "id": "b93d9bab-1082-4930-b97e-c81340ca67e5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "996fba74-538c-4e29-bdda-298d1c5842be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fcf33a-78a3-4581-a6c9-e3a11e106128",
        "cursor": {
          "ref": "47aded0f-9717-4c38-bdfb-b3b35806c183",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a14edc26-9c0a-4ed8-b9ee-e5765b12121d"
        },
        "item": {
          "id": "42fcf33a-78a3-4581-a6c9-e3a11e106128",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f0b2ba04-8264-4fc2-b1a8-eb7954416320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b77069c-f83e-4b57-ae8a-53a7187f58ae",
        "cursor": {
          "ref": "7cbb7da0-3189-4e7a-820e-8f3f53b59999",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3003d194-31b6-4d1e-b702-f8e209828732"
        },
        "item": {
          "id": "1b77069c-f83e-4b57-ae8a-53a7187f58ae",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "caf5bdf9-29a7-41e0-b8b6-dcfad6e55476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cad0ea-2fea-4f20-ab6b-d90efd2abe36",
        "cursor": {
          "ref": "af0d1a46-8327-41da-bc59-9d8d9373d050",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8e0cb25f-52d8-4711-a8a7-be1c35f72396"
        },
        "item": {
          "id": "a6cad0ea-2fea-4f20-ab6b-d90efd2abe36",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b2f766fd-17b2-4416-8ddb-b891529538e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1935ca2d-648b-49c4-915f-ddf05054a560",
        "cursor": {
          "ref": "19c46244-a5a5-4f1f-9ce2-94e1b7ea4eb5",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9e7d0133-557c-45c8-a27a-a9f632cb0ee8"
        },
        "item": {
          "id": "1935ca2d-648b-49c4-915f-ddf05054a560",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d024a7b0-7a44-43d1-bc8d-ae05419314c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b1008c-e23c-42aa-9ef7-0fa27822a1f9",
        "cursor": {
          "ref": "6e234f55-58f5-4b49-be56-e5fd298f31ed",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c14c860d-de74-44e0-ad68-6a55a3052282"
        },
        "item": {
          "id": "a3b1008c-e23c-42aa-9ef7-0fa27822a1f9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "88db357a-ae2f-46fd-8c66-9b958bd059a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3fc2bd-6f58-4c2e-a2aa-73133d2d766c",
        "cursor": {
          "ref": "c1fe3d3f-a790-4c24-ad9f-ba0ce608f6ac",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9cd1fdcf-c08b-4d40-b6bb-787f17eced73"
        },
        "item": {
          "id": "ea3fc2bd-6f58-4c2e-a2aa-73133d2d766c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "46d2e783-52fe-4313-91d5-e73ddbf0a5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512867eb-5ead-4594-a9b3-9a4c3202cc9b",
        "cursor": {
          "ref": "c184be5b-f07d-4232-947c-fae3a3b7a00a",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "37d771a3-40f3-4ff9-bc43-14966e482748"
        },
        "item": {
          "id": "512867eb-5ead-4594-a9b3-9a4c3202cc9b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "97818dec-04bf-4006-881b-bc834646f08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb2be08-5a9e-4349-bd55-d922749af692",
        "cursor": {
          "ref": "0f2fce29-27cb-4042-be0b-3586a4e9a055",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ff71eae4-ec5b-4aca-bf02-3c31f6b2fe89"
        },
        "item": {
          "id": "4fb2be08-5a9e-4349-bd55-d922749af692",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a643f8a3-57ca-40d1-a565-3a8dfb63164f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5005aa72-367d-45f7-8f05-e063f0ff51b9",
        "cursor": {
          "ref": "f16d5e8e-3ec1-4456-a99c-589dd4de422a",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aecd7d65-11a9-4386-bc30-deb6a4a4f66f"
        },
        "item": {
          "id": "5005aa72-367d-45f7-8f05-e063f0ff51b9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "47343769-edf4-4da3-8b2a-6328f21fcb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78378b12-2567-45d5-ac51-a46e5bb4081e",
        "cursor": {
          "ref": "e9c86693-164d-4bdc-96a9-88f84cfb01df",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e61b587c-6fcb-479d-b914-8483a122ad4d"
        },
        "item": {
          "id": "78378b12-2567-45d5-ac51-a46e5bb4081e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a1dc33ea-703f-43e3-92f3-d48fa8597b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f78406a-bcea-4881-9a48-8978fe09ec5a",
        "cursor": {
          "ref": "64560612-463e-446d-9ea7-18b8cf523864",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "01621ae7-217e-4e6d-9b26-d081fc943ee2"
        },
        "item": {
          "id": "5f78406a-bcea-4881-9a48-8978fe09ec5a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "80a3000e-4884-4883-8f09-4fce40f0ba70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123cb02c-ad89-4f6a-8e4f-f77d44a9e5f9",
        "cursor": {
          "ref": "8a19737e-85df-480b-b554-7ea592365585",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c107025a-e0b5-4c3c-803a-5445c536a52b"
        },
        "item": {
          "id": "123cb02c-ad89-4f6a-8e4f-f77d44a9e5f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "67187d6a-7c7b-43cc-be82-451a5cb49fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94f7469-81c0-47e3-b7b6-4d2b89e08276",
        "cursor": {
          "ref": "aef16e22-a9a5-4c5f-ad96-741771b3e89f",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "97afae02-8a68-4f53-91c0-a0a74227cfd1"
        },
        "item": {
          "id": "b94f7469-81c0-47e3-b7b6-4d2b89e08276",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1b3c90ff-e9a9-466d-b36a-6c1f2b48110d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3989460-c6d5-4afb-8426-930b5eb228e6",
        "cursor": {
          "ref": "515c95c0-d0e6-49ef-8e30-b8cfc970b509",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e8ad8079-dd6f-42d6-bf87-b6c86039d4a9"
        },
        "item": {
          "id": "e3989460-c6d5-4afb-8426-930b5eb228e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6d8255d4-45bb-4c0c-bcd1-dfd14a04bfba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01f883d-a7e5-418d-b691-daa53e256bd3",
        "cursor": {
          "ref": "6c476010-d950-494f-819b-0e2b201e1dc5",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6b24a88a-044f-472d-914d-ab471ced2bc1"
        },
        "item": {
          "id": "a01f883d-a7e5-418d-b691-daa53e256bd3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c3462cb6-6df6-4346-ad03-a639f0802b5c",
          "status": "Created",
          "code": 201,
          "responseTime": 2569,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "0e8ffea6-b8fd-413d-9632-42aefea8b925",
        "cursor": {
          "ref": "a591093f-8360-4cb9-a98e-d4a4f31d8e70",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "30eb7a01-42c0-4349-84d8-bd3f0834dc4d"
        },
        "item": {
          "id": "0e8ffea6-b8fd-413d-9632-42aefea8b925",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1e66eace-eefe-4da8-a874-a911e687ce2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbc7abf-35a2-4412-b023-6aa1a8079f4b",
        "cursor": {
          "ref": "1ef139b1-1dbb-40ab-a924-8c798220f8e6",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "da221be7-e52d-4ccb-82ea-efe49580af89"
        },
        "item": {
          "id": "1fbc7abf-35a2-4412-b023-6aa1a8079f4b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8ea530cf-726c-40d5-b2cb-6ded9c59fe02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62d17e6-a4c1-4888-a3c6-68ccbfca1c55",
        "cursor": {
          "ref": "fbf03398-3cd6-4c59-9630-ae4bce8a8be3",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "67b17267-8304-4f2f-9feb-4c0fce51ea05"
        },
        "item": {
          "id": "b62d17e6-a4c1-4888-a3c6-68ccbfca1c55",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "035436d5-d799-40a4-829d-4ed1aacc908f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c744ddb-183c-4b54-9084-6756d6ff2efc",
        "cursor": {
          "ref": "24da0c5c-eb72-454e-92d0-b204e5ddeb8d",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9799d141-a2bd-4528-8425-35d30ee6178a"
        },
        "item": {
          "id": "7c744ddb-183c-4b54-9084-6756d6ff2efc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9fb2fe61-a677-4f7a-8b37-99c7079a87d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a668ec6d-261f-465f-a008-37787c014c4c",
        "cursor": {
          "ref": "de3a4ca6-02dc-47fa-842a-baae66c7f609",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0aac7ca5-b552-40f7-8f32-69c9170b1ff0"
        },
        "item": {
          "id": "a668ec6d-261f-465f-a008-37787c014c4c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2972ce40-f1d7-46ac-a2da-8a3556670252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d564630-386d-4b11-8cc6-f1cae113457e",
        "cursor": {
          "ref": "42d71ac8-2c9c-497d-8107-814dad9d6492",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2880baa5-6231-4dab-ba26-1545f57cfcd2"
        },
        "item": {
          "id": "6d564630-386d-4b11-8cc6-f1cae113457e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f1d837d8-ccbe-44a4-b4cb-01d27afb5ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f952d-9965-4c21-a832-4517155fb846",
        "cursor": {
          "ref": "74d59f9f-6033-4bd2-925f-3753771ad6be",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dc243e10-32d7-43f1-a50c-af0777889c31"
        },
        "item": {
          "id": "a09f952d-9965-4c21-a832-4517155fb846",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "85dd43f3-d259-4e1c-8ea5-152dda8e9ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc264bc-8d61-46d7-b920-7c3e6218e459",
        "cursor": {
          "ref": "c3034b0b-66d2-4791-b1d2-4a96a8555699",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0d7f74b7-b1de-4906-a87d-65144413ca60"
        },
        "item": {
          "id": "1dc264bc-8d61-46d7-b920-7c3e6218e459",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6feacd2f-1d9b-475f-8afd-5914c40d5b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c0b2f8-fee6-4fc2-a9db-3334c3cc853f",
        "cursor": {
          "ref": "c11b71b1-d736-4564-b8ec-61930683528a",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "16e84367-5899-48fe-83e2-0255a7e67ae0"
        },
        "item": {
          "id": "57c0b2f8-fee6-4fc2-a9db-3334c3cc853f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "035ddccd-fccc-494f-a5d4-5377d47426d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f1754c-6f06-4bf0-93ce-03f846f0a924",
        "cursor": {
          "ref": "554e7d64-d2f1-479f-984d-66513f8478bc",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6cc76f84-6357-407b-bf0e-88a7e85fa38c"
        },
        "item": {
          "id": "f4f1754c-6f06-4bf0-93ce-03f846f0a924",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "588bc27f-1390-49ca-8eb0-e09da7b7bb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e4dd1f-0fa9-4788-b31c-28bc848c43a7",
        "cursor": {
          "ref": "3016bc50-241f-4d40-bbec-be23f43c5f2f",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "614b39d0-9ad6-48a3-881b-703cea38ae4c"
        },
        "item": {
          "id": "31e4dd1f-0fa9-4788-b31c-28bc848c43a7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "16192c98-e0e0-4fa2-aa57-bcda1b74a763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f664982-0c60-4c9c-9cb3-7c8f39a14c38",
        "cursor": {
          "ref": "3c256314-cd66-4af8-9869-4c81c7358a92",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c19cdbe1-8963-41d8-ae59-bfd49eefbb42"
        },
        "item": {
          "id": "4f664982-0c60-4c9c-9cb3-7c8f39a14c38",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8590f58b-7b54-4732-b907-5168d9ccd473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e34f0d1-9114-44f1-9da4-ded767724ea3",
        "cursor": {
          "ref": "67cd32ef-92a5-4647-9ef7-d754b2a2cbe1",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "fd761b1e-100f-4421-baf1-8f17e77e4310"
        },
        "item": {
          "id": "1e34f0d1-9114-44f1-9da4-ded767724ea3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "72976f8c-56a8-4746-90b0-79c6e18691a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11282d3-d769-4b99-8303-9ac5b5de2931",
        "cursor": {
          "ref": "65ded84f-f02a-48bf-8290-865cefa6de81",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9cf6bcc6-17bb-4bc4-811b-e226c0a2bd4d"
        },
        "item": {
          "id": "f11282d3-d769-4b99-8303-9ac5b5de2931",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0904cb59-1a34-4d2d-9d80-1d19005c4ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf7c9ee-9f3f-472e-8a05-b69eca1eb1b3",
        "cursor": {
          "ref": "ccf87296-12c9-448d-be0b-a82ebc518099",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9905790e-5921-4c1a-b429-ec08b548631e"
        },
        "item": {
          "id": "bcf7c9ee-9f3f-472e-8a05-b69eca1eb1b3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "345696de-5059-4844-adb0-eb1f103ad57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7860968-d58a-4316-b960-2f41af11028d",
        "cursor": {
          "ref": "c03a7192-21ed-487d-be7d-96c4f9654109",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "af1fa109-237d-4154-bf22-c5a6e9a68118"
        },
        "item": {
          "id": "e7860968-d58a-4316-b960-2f41af11028d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f3718e86-6388-4ee2-a76c-58a3310b8409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcf988d-693f-43ef-b745-3f0bbb9eb55c",
        "cursor": {
          "ref": "1b083ac4-ada7-4ada-bbb9-ec5a0b0dfe51",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1604bde6-b104-4a09-8ee0-c9ac7ddf5069"
        },
        "item": {
          "id": "fbcf988d-693f-43ef-b745-3f0bbb9eb55c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "076b1ff1-f4d4-4ca0-8568-59cce42f3d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19877523-bdbe-4117-8586-1338caa893fb",
        "cursor": {
          "ref": "671d5c2a-24b2-41df-95a3-4f9eef82f64a",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "34a1051a-9ec7-44f9-bed7-7dda6ce57203"
        },
        "item": {
          "id": "19877523-bdbe-4117-8586-1338caa893fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "33ddf441-dc21-4004-bcb2-5a88af873bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8f7a0c-c21d-4821-aff0-f9a4793931bb",
        "cursor": {
          "ref": "ac87d6d4-6bab-4352-95be-7d113f2ad024",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7775fc76-de60-49fb-a522-1d4a870897c2"
        },
        "item": {
          "id": "5d8f7a0c-c21d-4821-aff0-f9a4793931bb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dce58d30-d382-4217-8ab5-d8ae59eb3cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a51ac41e-7563-4f37-8f72-911e9f3d33ad",
        "cursor": {
          "ref": "7c060da3-eded-4bb6-b46a-f9c6b68f114c",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c7378f27-25d9-4634-912b-ad428e3998df"
        },
        "item": {
          "id": "a51ac41e-7563-4f37-8f72-911e9f3d33ad",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8760da8a-3ebd-4e37-a17f-5bd0a4c1b83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ac70b4-014e-4f7a-842b-fcc112e0536a",
        "cursor": {
          "ref": "cabb880b-a039-42a4-b3e7-f50c5797b436",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4d5700c1-13c4-45d3-96d0-7572050427e7"
        },
        "item": {
          "id": "d1ac70b4-014e-4f7a-842b-fcc112e0536a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "57c8012b-830e-46c2-992e-80ca7d9dc5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a9fd0f-9229-4e9f-be04-001677daa112",
        "cursor": {
          "ref": "c880ce55-ab69-4d64-a878-2ab4f31f813b",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "66a26db8-20b9-4c0d-ae86-cb4f85436836"
        },
        "item": {
          "id": "55a9fd0f-9229-4e9f-be04-001677daa112",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3afdab9c-b2f9-4f1d-8663-59d8f05e93a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5667add1-792a-476a-a172-5957a388e280",
        "cursor": {
          "ref": "e11c7a2c-fe15-405c-9d53-26aa32e164fc",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9481e5c6-3a4b-4794-9e48-6355a3c1eb8b"
        },
        "item": {
          "id": "5667add1-792a-476a-a172-5957a388e280",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6514e36b-d867-462c-a0a7-a386bbe1c003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaaaba0-248f-4d73-899d-0ab8bcd4451b",
        "cursor": {
          "ref": "96e2992b-94c2-4672-9cad-327ce6e1fa43",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "23200350-562b-43a0-b5af-703cdc71aafc"
        },
        "item": {
          "id": "fcaaaba0-248f-4d73-899d-0ab8bcd4451b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "68975c7b-6479-46e2-a521-86f8ce015d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc68dbea-3cf6-4261-990c-5b1ab5dedb26",
        "cursor": {
          "ref": "fc6299ec-ea09-45a3-8068-e323735ec3ba",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0112717d-894a-4d99-9ca2-b790d1ab6b7a"
        },
        "item": {
          "id": "cc68dbea-3cf6-4261-990c-5b1ab5dedb26",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "32e0a857-0010-4a4f-9d0d-abdfcf516d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b21fb78-2499-4c53-8377-4d8932de60fb",
        "cursor": {
          "ref": "84ecb801-9e6d-4015-b1b5-43f463177677",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2c66588e-b5ab-4fad-93b7-5c5c3e852efe"
        },
        "item": {
          "id": "4b21fb78-2499-4c53-8377-4d8932de60fb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "953ef174-d895-44d8-9342-920fea10d659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442f1d28-6df1-44e7-8fd0-d0c6b8787484",
        "cursor": {
          "ref": "fcb6e82c-3c19-416a-b1bb-e0b7eb3eca3a",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "15409c95-4680-4ccb-8aa6-a5782fe510e3"
        },
        "item": {
          "id": "442f1d28-6df1-44e7-8fd0-d0c6b8787484",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ac59f38c-efe1-4023-8bf6-04befa74d705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4829b262-0771-46c9-b633-8c2360656e02",
        "cursor": {
          "ref": "c65d7af0-a8dc-4f68-829f-e7e331f25a0f",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fbe8b3f6-279a-4472-8387-e2b77666449f"
        },
        "item": {
          "id": "4829b262-0771-46c9-b633-8c2360656e02",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "72cae20f-76c2-4c53-8ab0-65631033cad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896ad755-6f3a-4bdd-81ac-6d2cc9b8bffc",
        "cursor": {
          "ref": "9e6fd1f3-bd9b-4913-9b93-621a1e9b3713",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c8bd1d70-4492-4137-9441-2380e0a388f4"
        },
        "item": {
          "id": "896ad755-6f3a-4bdd-81ac-6d2cc9b8bffc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a85e4c92-6ae2-4c11-81f0-e9d51b9fb5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1fe1d5-049d-40c4-bfea-1f7a94e24465",
        "cursor": {
          "ref": "5211afdd-be22-4197-8d19-4238e91b170d",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e9518839-02a8-45b0-9885-48e3b79cb8b3"
        },
        "item": {
          "id": "ad1fe1d5-049d-40c4-bfea-1f7a94e24465",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3bbf3b45-fcb7-4fd5-8cea-db663f5c0844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e120aaad-59b4-46c4-ac7f-e6d3ea8c86bc",
        "cursor": {
          "ref": "3d836d40-e0b9-4ee6-a1ca-fd87d59b84ac",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1be8e39a-4e82-44d8-b5ef-48b1eb3cd6c9"
        },
        "item": {
          "id": "e120aaad-59b4-46c4-ac7f-e6d3ea8c86bc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "adc1be9f-94e6-488d-8ae4-7e24b43384f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1be4d793-3882-4882-9093-34f4bedf7f9f",
        "cursor": {
          "ref": "0ad8ab0a-66a4-4742-891c-a82c64a6dece",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "50142f06-95cf-4a17-9457-af1845216b9c"
        },
        "item": {
          "id": "1be4d793-3882-4882-9093-34f4bedf7f9f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2201ee31-a8b9-484c-a6df-a902ae70f056",
          "status": "Created",
          "code": 201,
          "responseTime": 1913,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad31dcf-0569-4124-b175-bf2a9c734258",
        "cursor": {
          "ref": "4f40a323-b1b7-4e7b-9c4d-d7e51334bbb8",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "111fa6f2-ae7e-40ec-848b-d8d563c137d6"
        },
        "item": {
          "id": "5ad31dcf-0569-4124-b175-bf2a9c734258",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1a1790ed-e272-44d9-8073-bfbe6412ee66",
          "status": "Created",
          "code": 201,
          "responseTime": 2464,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd7896d-cfb2-45da-93aa-08bdb0b2b192",
        "cursor": {
          "ref": "8d2f242f-9691-443b-b06b-f01a8a2ecc81",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "39a16b3d-ec3e-42c1-a426-16bbc4eb5d2d"
        },
        "item": {
          "id": "dbd7896d-cfb2-45da-93aa-08bdb0b2b192",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8a5966df-7c57-438c-af9f-36e66725da22",
          "status": "Created",
          "code": 201,
          "responseTime": 3273,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec85db87-d8a1-4b28-b81f-053c6e4bfc6c",
        "cursor": {
          "ref": "ed99a0ff-c821-4501-ae03-309b66f66763",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "46438af0-13fc-480c-98d2-90e479be0028"
        },
        "item": {
          "id": "ec85db87-d8a1-4b28-b81f-053c6e4bfc6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7ec38d44-f6e0-47cf-a64c-0dc1808e60e1",
          "status": "Created",
          "code": 201,
          "responseTime": 2552,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "776d88b9-5313-4cab-86f4-eaf6960d1883",
        "cursor": {
          "ref": "f58efc40-93af-42b3-a0e5-f0038a2bc585",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b5ad4eac-629c-47d7-9701-0cbf009ac3cc"
        },
        "item": {
          "id": "776d88b9-5313-4cab-86f4-eaf6960d1883",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "28dca058-cdff-404d-8ce1-ffeb82a5f7f6",
          "status": "Created",
          "code": 201,
          "responseTime": 2413,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-05T00:43:32Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-05T00:43:32Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6ffd00cb-b45e-4dbc-8109-c6ed97ad1e40",
        "cursor": {
          "ref": "c6545a68-e425-4435-92c9-01472eb18bf1",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a9541f5b-d6d4-454b-bd91-f4fe74768def"
        },
        "item": {
          "id": "6ffd00cb-b45e-4dbc-8109-c6ed97ad1e40",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1993353d-9b74-4297-8ed4-5c9487a39745",
          "status": "Created",
          "code": 201,
          "responseTime": 2298,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb023e1-9fc2-4c75-9302-c309f762a7e9",
        "cursor": {
          "ref": "f99783ac-1692-40cf-bb0e-1c53878cfe53",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bb7017dd-d63c-4c5e-b98a-eebf4a788a25"
        },
        "item": {
          "id": "2fb023e1-9fc2-4c75-9302-c309f762a7e9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ec537922-7cab-471c-87e3-1c60e567daf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d9785e-3e04-4a6e-bca1-375eb2c66ab7",
        "cursor": {
          "ref": "b1320f1f-8bd0-40f9-986f-4a0b3157b019",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bcc6ae81-0be3-4d48-8895-6771b72d3494"
        },
        "item": {
          "id": "29d9785e-3e04-4a6e-bca1-375eb2c66ab7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dc52b8e2-cf5f-4cfe-94f6-759b5790e29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba857995-da2c-4906-b265-44a01f9e9309",
        "cursor": {
          "ref": "d61ddf34-2781-429b-8c0f-29da6e7b1c3d",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "546f806a-41d2-473a-80d5-89e2ca23698b"
        },
        "item": {
          "id": "ba857995-da2c-4906-b265-44a01f9e9309",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bb3628e8-5512-4879-9781-ee1d55f601f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d7a001-f0bc-44c7-9d18-c0d6f16be170",
        "cursor": {
          "ref": "bf7aa86e-5f87-452d-9ece-f22ff9b17999",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "57d40498-5ff7-4c48-bf31-d2fc979efce7"
        },
        "item": {
          "id": "55d7a001-f0bc-44c7-9d18-c0d6f16be170",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1652c4e1-3d28-490b-9781-67df8e2aff95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e5a947-7ab3-400a-b7b8-33572274f006",
        "cursor": {
          "ref": "6a64ea53-7611-4c4b-8eb7-a10d8ab81d36",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "70474353-f8b9-47a1-9511-b67942dbd32d"
        },
        "item": {
          "id": "a1e5a947-7ab3-400a-b7b8-33572274f006",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c8df327e-b8cd-42aa-8f4d-ff8c263e7ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d5ce16-f98e-4219-9d17-d275c4db3da5",
        "cursor": {
          "ref": "70a29403-f061-42cb-9f8b-d5bd59a6b9f6",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1e128833-6aa5-49d4-95d2-4abbb9784ab3"
        },
        "item": {
          "id": "12d5ce16-f98e-4219-9d17-d275c4db3da5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e5d567bc-c251-48fd-845c-2ccd871f936f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae0d3ba-69f3-446a-a088-a6e1cca922d0",
        "cursor": {
          "ref": "c8c4d335-87cf-4321-963d-c127399a324c",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f5bda847-9105-4b68-a26c-1af815da847a"
        },
        "item": {
          "id": "dae0d3ba-69f3-446a-a088-a6e1cca922d0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ae525e9e-8ed3-44df-bd0d-5fe321ae8e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6923df-f0de-4cb4-b982-9f207abd4b47",
        "cursor": {
          "ref": "0a684f6b-c32a-4c32-9334-b027b4841786",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "17ce9d06-7b8d-4066-a69d-c598795178da"
        },
        "item": {
          "id": "7f6923df-f0de-4cb4-b982-9f207abd4b47",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4bdc1bf8-7109-4450-b2e7-85b5d380dba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ace5bc-a4e1-4b98-8db4-f1f62a7190d0",
        "cursor": {
          "ref": "0deec000-0847-49d4-a4dc-c78850a465a6",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "18ba7fd7-6b75-4891-90e0-02b6064d5d91"
        },
        "item": {
          "id": "30ace5bc-a4e1-4b98-8db4-f1f62a7190d0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cf4c18b9-04d0-4ae7-b919-c594794643d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361fcb9f-a930-410f-b48b-2a40e8f38f36",
        "cursor": {
          "ref": "7acf7799-53bf-4f92-a879-34591d4c5dee",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "46a45362-84ce-4fb0-9d95-9f07df8e72b9"
        },
        "item": {
          "id": "361fcb9f-a930-410f-b48b-2a40e8f38f36",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01f6e857-ceb3-41d7-a689-c1ea325b1a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc74cab-1660-4a4d-aebf-fd93c83a2790",
        "cursor": {
          "ref": "a8574256-cc35-426b-ade5-731ee38a6afc",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe589475-b48e-43b5-99cf-e8dac8817861"
        },
        "item": {
          "id": "bfc74cab-1660-4a4d-aebf-fd93c83a2790",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "013619a3-c84a-44be-8048-f908bb4bc084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eec460-637f-461d-89b8-a2b0916a766f",
        "cursor": {
          "ref": "1cda4092-4e65-4d65-aca4-b648d054deac",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bffb061c-d8ff-41fd-bfba-d6aefdba22f1"
        },
        "item": {
          "id": "90eec460-637f-461d-89b8-a2b0916a766f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6400903e-815e-42b4-8bde-33f1107aee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b97f91a-a053-4087-b049-dc9ad3031437",
        "cursor": {
          "ref": "5063737c-0f5c-47e7-af16-993580eb0cd4",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "979c58e9-ef1c-4d9e-b948-1918bfdb8186"
        },
        "item": {
          "id": "9b97f91a-a053-4087-b049-dc9ad3031437",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d4286625-0fe5-4cc0-a712-fce56cce344b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78fdbafc-23f7-4213-ac16-1940f57156c0",
        "cursor": {
          "ref": "2dbabad6-cbea-4d54-8947-622ffae10b55",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1650d92f-4f19-4a56-abb1-420e22167112"
        },
        "item": {
          "id": "78fdbafc-23f7-4213-ac16-1940f57156c0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1e176201-04a2-4c4f-aebe-94a68b1e5ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4859867-efb8-438b-8703-5da6e70158da",
        "cursor": {
          "ref": "4fbfebb9-c3ff-4f0e-bbcc-7bb02bcd9c4b",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "68107bf2-13da-494f-bfc5-165cd2368509"
        },
        "item": {
          "id": "d4859867-efb8-438b-8703-5da6e70158da",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cee7bfdf-6b9e-4199-b330-2bfb06bb94d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8bdd084-4411-4635-b42d-448258bd4a7a",
        "cursor": {
          "ref": "68073d09-f574-472a-80a3-7afa0c6d29d3",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "158f879d-28ae-4d51-ae77-6f9ca31d186f"
        },
        "item": {
          "id": "d8bdd084-4411-4635-b42d-448258bd4a7a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1690226c-7e98-4fe0-9dd9-b03eb070853d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a891e4-5d06-45bc-bc7a-0f284945129c",
        "cursor": {
          "ref": "4b3f62e1-6742-436b-ac01-65b14edce933",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f087a881-fa82-47bf-b816-a760cfd0533a"
        },
        "item": {
          "id": "e4a891e4-5d06-45bc-bc7a-0f284945129c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c8c88e68-7062-401f-8c48-02157142f0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d952c2ac-bba0-4f05-8ce0-42cbc67ebc9b",
        "cursor": {
          "ref": "fb5d20c7-8191-47f7-8378-5f8d3c237a8b",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "478a82c4-fe72-428f-845f-027b4bcad886"
        },
        "item": {
          "id": "d952c2ac-bba0-4f05-8ce0-42cbc67ebc9b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b85a578c-7d93-42c1-9d4e-b03b20f0670a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe3d24a-361c-4f10-88b7-7c59de3fb66b",
        "cursor": {
          "ref": "2855a140-6b34-4df3-b3c5-8180b21f5fa5",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ddaf44ef-5097-4915-8fa9-b8bcfad94a40"
        },
        "item": {
          "id": "fbe3d24a-361c-4f10-88b7-7c59de3fb66b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "08433682-0550-4492-bfe0-9aa9988df142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5356e2ec-3544-4dda-b1ca-7b59eac1c6f4",
        "cursor": {
          "ref": "4849078b-88dc-47af-9bdf-ae8421064375",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "be8e69ae-e895-49e4-a905-cda9cca9763b"
        },
        "item": {
          "id": "5356e2ec-3544-4dda-b1ca-7b59eac1c6f4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "634a4441-b9a9-4863-b766-53f8b4e93166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26719798-7fd4-4ead-803d-0d2045b33631",
        "cursor": {
          "ref": "1a28a797-696b-4c45-8398-8be88853ccec",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "52c261e0-0a11-47dd-b2d6-d5c7cf38e9ec"
        },
        "item": {
          "id": "26719798-7fd4-4ead-803d-0d2045b33631",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "54ec7187-bbc3-4aa0-ae43-564563bbc5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75e4311-404c-4533-85ea-f25aa9da539e",
        "cursor": {
          "ref": "0d637e75-029a-4dbd-8c27-5620c27db234",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3baff28e-d927-4ba7-99d6-331f1153b17a"
        },
        "item": {
          "id": "b75e4311-404c-4533-85ea-f25aa9da539e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "89bc716d-9dec-4be0-ac31-bc387a099438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f108d51f-8446-4a80-b084-97f8820c2936",
        "cursor": {
          "ref": "e39d31da-a6d6-41ad-8318-1f8cbfb512ae",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ecf86411-127e-480d-aa15-90d49d1a65f6"
        },
        "item": {
          "id": "f108d51f-8446-4a80-b084-97f8820c2936",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "196d44f1-1621-4426-8918-e9e160642042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddad5e5-8758-43ef-b323-faec46b391f4",
        "cursor": {
          "ref": "bf604216-f4b4-4c3d-9955-3baabd2a45ec",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "127a5169-039f-4226-8c94-2474580b5ab8"
        },
        "item": {
          "id": "4ddad5e5-8758-43ef-b323-faec46b391f4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "88fbf4bb-c968-4d9b-ba71-816ac2b7a02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245b35ba-00b9-4fab-a9f9-b42c1d68393f",
        "cursor": {
          "ref": "37e07110-dfde-4ec6-9dba-f5a9ab66891a",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "312c9dd7-79b2-468e-b358-671944a3f7b9"
        },
        "item": {
          "id": "245b35ba-00b9-4fab-a9f9-b42c1d68393f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2ef980bd-6128-4737-aaef-da0928b2ff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25435fb2-0d12-45d9-a829-5151f896f8a6",
        "cursor": {
          "ref": "32ea2a9d-db67-4644-8a78-63d60e36d954",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "38b83581-4230-4e49-8772-cad83ac5256d"
        },
        "item": {
          "id": "25435fb2-0d12-45d9-a829-5151f896f8a6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0e1f0fb0-9d9c-47e4-90dc-bd3f70d76fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d785615-311a-405f-a3fa-866ff2436eaa",
        "cursor": {
          "ref": "e7068c90-29af-415f-98bf-dabb0f0cd40a",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6607d982-980d-4722-8fd4-a69ab5bdd85b"
        },
        "item": {
          "id": "9d785615-311a-405f-a3fa-866ff2436eaa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "448b5f7b-adc9-4ec6-b671-507db6c01030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be39c519-4aba-4be9-b401-d9d8bf6932d5",
        "cursor": {
          "ref": "a13a12f5-7c18-4b54-8aba-5fa64b4af56b",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "59e1861b-2170-4a82-8b84-c6d81ad7140d"
        },
        "item": {
          "id": "be39c519-4aba-4be9-b401-d9d8bf6932d5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "237e0765-f5c8-48a2-a5cc-8ead43ae4d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b003a80-9c1c-49a1-a576-0ae3e0a5db38",
        "cursor": {
          "ref": "56f939ec-8690-499f-bfc2-04883e7ac366",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "95c72617-ea14-448d-af1b-e21fabc4910b"
        },
        "item": {
          "id": "6b003a80-9c1c-49a1-a576-0ae3e0a5db38",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "427759b2-4a0f-43f9-b7ca-8ad3c6bb1194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546a49a2-8a1d-4f1c-ad92-c974136ab998",
        "cursor": {
          "ref": "f1303451-15ee-4c7e-bcbe-12ec16974a5e",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c6174b2e-5721-4654-94ba-bdc3c3631618"
        },
        "item": {
          "id": "546a49a2-8a1d-4f1c-ad92-c974136ab998",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "924b0f39-e0c3-4fcd-9464-849ba5fcb8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdec6e7-2c93-4b93-92b7-a4e87d781759",
        "cursor": {
          "ref": "f6d2ccfe-9828-4507-aaa6-61b6b0dbc86c",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9d446909-ed46-41a3-9a5d-d602f3266f44"
        },
        "item": {
          "id": "9cdec6e7-2c93-4b93-92b7-a4e87d781759",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a72136f9-8855-49ce-93de-14a446583462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c487a4f-ab1d-46b8-9076-36647edc03b7",
        "cursor": {
          "ref": "0e48f0ad-98f3-4556-a58e-7c6d5a9ebbe2",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "88c41301-bc91-44d9-8dc4-67fca24bfe9d"
        },
        "item": {
          "id": "7c487a4f-ab1d-46b8-9076-36647edc03b7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8fc45946-381d-432c-a12a-4a0794704511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad5b607-74dd-4ace-9ad3-a88c4bf9afa5",
        "cursor": {
          "ref": "6dd8016c-4bca-4a47-ab57-f5307419a211",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bc9d1155-7fda-4eb0-8a4a-0ebe02906fc5"
        },
        "item": {
          "id": "8ad5b607-74dd-4ace-9ad3-a88c4bf9afa5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ebfc1067-772e-4e6b-9f8d-1b72234b356e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f099fe49-318a-4cb4-b6bd-29a74b76b8e9",
        "cursor": {
          "ref": "1b3862ab-0cca-47b0-8069-90e8ab017fb8",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7abd7f9e-7fc3-4bb7-9d66-7de916686715"
        },
        "item": {
          "id": "f099fe49-318a-4cb4-b6bd-29a74b76b8e9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "fb7ed335-49c9-42fb-999d-186cb7f6a436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0aedf8-b191-4ac1-ae70-4a30b0eac260",
        "cursor": {
          "ref": "4f7b998f-6037-4606-a5fa-8cedca0d0ba1",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b5c17476-6310-464f-9620-5d056d053895"
        },
        "item": {
          "id": "ea0aedf8-b191-4ac1-ae70-4a30b0eac260",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "590da3a9-dc58-4415-bbef-3c257b763ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b51a8f-a676-4d06-b2ac-dbf225c03230",
        "cursor": {
          "ref": "2fb97d32-e292-4d2d-b824-058bff7c4c1a",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b8729507-e575-42da-9ec6-620a19d47c64"
        },
        "item": {
          "id": "25b51a8f-a676-4d06-b2ac-dbf225c03230",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c1bbbb16-83de-47bf-bbca-0dfd56749153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511fc619-091e-4bfc-9464-8885e99e502c",
        "cursor": {
          "ref": "029d321e-8735-4453-9e1e-99559dea1ac2",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b3e54345-7437-4f35-81ca-9f20733a922c"
        },
        "item": {
          "id": "511fc619-091e-4bfc-9464-8885e99e502c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "57554404-6898-4d26-8288-507c649f4365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba89e20b-5509-49fa-9f5d-00ad4a3ac8e5",
        "cursor": {
          "ref": "3165b615-84e8-4159-a403-4b72bce0f42f",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d5275f4c-1a94-4ae1-8166-c08a16b96975"
        },
        "item": {
          "id": "ba89e20b-5509-49fa-9f5d-00ad4a3ac8e5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4fd61b40-27b5-4dc0-864f-49511c90caab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca8ce4c-c93f-415e-896f-59a1a9c36ab9",
        "cursor": {
          "ref": "97f5bffd-764e-4d95-bbfb-f1f5d2acb496",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e83cc768-15fa-4954-9df9-452ea37376a2"
        },
        "item": {
          "id": "aca8ce4c-c93f-415e-896f-59a1a9c36ab9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "43dab0da-abcf-4847-b9af-aa361bf00dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc49251-f703-486f-8ebf-41feed07475b",
        "cursor": {
          "ref": "1f61d621-4bc7-4772-b847-9fb88bc135db",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "be612604-742f-45b9-95fc-10043afcc510"
        },
        "item": {
          "id": "6cc49251-f703-486f-8ebf-41feed07475b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d347622c-1147-466c-b969-0472ae51f08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d932d6b7-2cd8-4db7-b24e-38428a6855df",
        "cursor": {
          "ref": "73e2ccd4-6e99-4c93-adc0-c9c7a20ba270",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "66700395-e1bd-472d-b18d-d028d764d0ed"
        },
        "item": {
          "id": "d932d6b7-2cd8-4db7-b24e-38428a6855df",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dfe73fe7-3c31-4bd0-a62b-96fe29ce006e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d9cfe9-1539-41d8-9fb9-6cba4e1fc95c",
        "cursor": {
          "ref": "04f7d8d1-8561-46d4-aeb8-cfc56293a487",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ad98bc05-a34d-4f30-9d52-1aacce9860ff"
        },
        "item": {
          "id": "15d9cfe9-1539-41d8-9fb9-6cba4e1fc95c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c89aed81-d910-4547-9545-12a239f80d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97208b42-a2da-485b-9003-237fc7a70847",
        "cursor": {
          "ref": "26780464-849e-4590-aade-566522516e08",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9c9c2ea6-4979-4b5a-b608-9e539dfaae4a"
        },
        "item": {
          "id": "97208b42-a2da-485b-9003-237fc7a70847",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5ea88482-c23c-41a4-ade8-fd67a578c4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bbc693-bf41-4db3-8ba2-2b8fc55d30da",
        "cursor": {
          "ref": "5df0b099-9df3-4004-8fd3-5167b916180b",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "52308f3d-c92c-47f6-850c-037f0eef36b0"
        },
        "item": {
          "id": "08bbc693-bf41-4db3-8ba2-2b8fc55d30da",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "993c44cb-423b-430c-a900-e4f142d45502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fe99c4-83d1-4ee2-8582-e962e1bbfb95",
        "cursor": {
          "ref": "28075ab4-5812-472f-9664-757b3e69bb5f",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "02b70571-729b-4f51-9b82-b45dd0a5f925"
        },
        "item": {
          "id": "16fe99c4-83d1-4ee2-8582-e962e1bbfb95",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f41d6b95-de7c-497b-a3e3-72236a0d4c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b32c23b-4352-440a-8709-1a304dd49ad3",
        "cursor": {
          "ref": "1d8036db-3ecb-409e-bc12-ff8fd5ca47a5",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7e906327-6ffb-4214-9897-31cbe92ccd32"
        },
        "item": {
          "id": "8b32c23b-4352-440a-8709-1a304dd49ad3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "62ed8d1a-65d2-4cbc-93e7-336eff129017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab4089-37f5-4bc6-be92-d040da8f5fb5",
        "cursor": {
          "ref": "b9e360cd-1dc7-400e-9cad-446862ca214f",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "56b7f393-7854-44f4-b709-e35687432481"
        },
        "item": {
          "id": "73ab4089-37f5-4bc6-be92-d040da8f5fb5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "56c32502-8459-40bc-b6f6-f1de49422e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c33c37-bbf4-4d5d-9eb2-d6441a5f5e78",
        "cursor": {
          "ref": "09eafca5-a67f-4faa-b13f-f4949612ca0b",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "785b9c79-462c-415f-85fd-1211ae5f021e"
        },
        "item": {
          "id": "24c33c37-bbf4-4d5d-9eb2-d6441a5f5e78",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "01635ec2-d22c-4d2b-8e4e-db7d89409500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee39ef0-7317-4bcc-af26-04d12525ec8a",
        "cursor": {
          "ref": "3e9d4a36-8473-44ea-b934-85afc3e468ba",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1c158cef-341d-4114-84a9-a1b34014ff6b"
        },
        "item": {
          "id": "fee39ef0-7317-4bcc-af26-04d12525ec8a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "523903ba-78df-47db-9da6-753141b083b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94afd76b-3f5f-4d9e-bfbc-9aebfcecb7f9",
        "cursor": {
          "ref": "c890e7d6-1010-484e-9ed1-87f233edef42",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fe68e590-bb08-4291-bd1e-a0f9c8eaaa9f"
        },
        "item": {
          "id": "94afd76b-3f5f-4d9e-bfbc-9aebfcecb7f9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a885068e-5460-4ac2-bdcc-2f53bb0c4e0f",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0059d6be-1a35-43a0-a5b7-c34858a48506",
        "cursor": {
          "ref": "058802a7-fda8-4cbf-9169-be9c4cde58b8",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c4d8be0b-6b44-4131-a249-4de3f2a13813"
        },
        "item": {
          "id": "0059d6be-1a35-43a0-a5b7-c34858a48506",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "760750db-6671-4357-a5c0-5282431447e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c853ab-e69b-4b1c-83be-d1735853e24b",
        "cursor": {
          "ref": "001f6f97-e6fa-427c-ba35-9db576466852",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "eb5b2e2c-be62-4873-8694-076a772af978"
        },
        "item": {
          "id": "c1c853ab-e69b-4b1c-83be-d1735853e24b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4cce9d1b-1383-490d-9d19-c10c311936f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d99c8b-6f7d-4e31-bef6-b61376001292",
        "cursor": {
          "ref": "4f5d0377-5582-44d5-9a56-c0a4aa9f3436",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8a476dbd-6e5b-444f-be86-3cbdcdc8edd9"
        },
        "item": {
          "id": "71d99c8b-6f7d-4e31-bef6-b61376001292",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "acc7f905-145f-4007-b154-95c3df902850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d400e80-f376-4272-90e4-cbfbb4d982bd",
        "cursor": {
          "ref": "a6cacd94-1e0a-4ff5-b855-02f442dbf479",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b3f195d8-1173-4adc-8cce-321197248a2c"
        },
        "item": {
          "id": "3d400e80-f376-4272-90e4-cbfbb4d982bd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6bc275ae-c972-4aab-9972-5a339ff34475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd23112-7a65-47d8-984a-9fac6e780728",
        "cursor": {
          "ref": "5e70733f-1527-452f-8bcd-69e062b57101",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3061d3aa-d311-494b-b7ab-d2af6e2fe9b1"
        },
        "item": {
          "id": "9dd23112-7a65-47d8-984a-9fac6e780728",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "509346ec-afdb-482a-bf77-6bf4bc09051b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4bf723-33ff-4480-86e9-84dff4372c2f",
        "cursor": {
          "ref": "cbd35033-7d75-483c-986a-5fdc0055ab05",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a8d9faea-915b-445a-9359-84001d97968c"
        },
        "item": {
          "id": "7b4bf723-33ff-4480-86e9-84dff4372c2f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8101fd3f-a073-42b6-805b-a1d8d944677b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fed648-3f45-4177-8815-4dc1dc8936b1",
        "cursor": {
          "ref": "9b9798c8-8a45-4bae-a4c8-689ed54d54c3",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d36c6257-f4d9-4c6b-99c9-e97b244178fd"
        },
        "item": {
          "id": "55fed648-3f45-4177-8815-4dc1dc8936b1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1cca1bbe-5122-4c1a-9a73-71e73c3a740c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dbb36d-5c13-4f66-a5ad-40f506a3e492",
        "cursor": {
          "ref": "6c08023e-2673-4ae9-8d55-16ebb8d721c4",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a1bc54c4-2a43-402e-8e76-43900b940004"
        },
        "item": {
          "id": "f4dbb36d-5c13-4f66-a5ad-40f506a3e492",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "06fd5c9f-20a7-4743-a845-6f8d08d8a35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fd0bcd-ea1d-45bb-ae74-73d8574af8ca",
        "cursor": {
          "ref": "841d5a4b-47ac-4f67-a53f-0499df44c5f2",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6e361ef7-6e5e-41fa-bd9e-5c07c5473515"
        },
        "item": {
          "id": "80fd0bcd-ea1d-45bb-ae74-73d8574af8ca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c7551601-0fd5-461b-b8a2-09284574a691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4a470e-795f-44ce-85ef-32f9cee7dabd",
        "cursor": {
          "ref": "dae75fcd-743b-42a0-8625-f408f85b1ab5",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d3cbc5ae-de60-4876-946b-a5ff8d477cf3"
        },
        "item": {
          "id": "ad4a470e-795f-44ce-85ef-32f9cee7dabd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8b7cb5e5-d2d6-44f3-ab18-00619530cfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50ec53e-2f40-439a-a215-3f71ef8039bc",
        "cursor": {
          "ref": "c5349eaf-7ed0-4167-ae37-d95673d65d41",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fcfd15ca-ad52-464e-b04e-01720c4ca19f"
        },
        "item": {
          "id": "e50ec53e-2f40-439a-a215-3f71ef8039bc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b53905d3-9596-4183-bc0c-ecf274801d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acfde02-b5ce-4b1a-923d-7c31222e606c",
        "cursor": {
          "ref": "a3f336c8-baea-467f-b598-0e129b8a3866",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f3dacf6c-e61b-489c-a896-06a14b6092b5"
        },
        "item": {
          "id": "7acfde02-b5ce-4b1a-923d-7c31222e606c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4dcc6ad8-6250-4d78-acb3-75f8ae6ed6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7feba284-9ef8-4dcc-8684-63817b51e8c0",
        "cursor": {
          "ref": "1a2da166-5b95-435f-8273-873a0aef8cf2",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ba3bba6c-f0cf-4414-849f-1b3f61fcea49"
        },
        "item": {
          "id": "7feba284-9ef8-4dcc-8684-63817b51e8c0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8c21dc14-25cb-4a6b-a7c5-26f4f7953611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca50c82-9625-410d-a722-618225b476e6",
        "cursor": {
          "ref": "f5ad9782-d853-4678-89db-331936beab74",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "325ffda1-7a90-4a25-bb3e-551c3aac4d2d"
        },
        "item": {
          "id": "dca50c82-9625-410d-a722-618225b476e6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c889213b-fd2b-4be5-9582-3da52c8ed480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1a3ff4-0eec-414d-8767-8087d7456f9c",
        "cursor": {
          "ref": "2db06e75-b85b-4a12-883b-1c445461d115",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0873550b-97b9-4a05-b9c5-267a0d47fc21"
        },
        "item": {
          "id": "ee1a3ff4-0eec-414d-8767-8087d7456f9c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3bc4459b-73fd-44a8-96c5-908325d2343b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cfe4b8-7ef1-479a-b7af-696985bf6245",
        "cursor": {
          "ref": "a1f1e8d5-5262-4ed1-ac2d-5feac07fde95",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8521bf1b-08b8-4000-b092-2abd22535f1f"
        },
        "item": {
          "id": "89cfe4b8-7ef1-479a-b7af-696985bf6245",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dbc71010-c904-4d1f-aac3-a544d4897132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3451ab1f-7e75-4d0d-8d0f-0d1cea12298e",
        "cursor": {
          "ref": "37593359-8398-4352-b5ea-054ad6aa644d",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3aa39081-b555-486d-a2ee-acaf88d4c657"
        },
        "item": {
          "id": "3451ab1f-7e75-4d0d-8d0f-0d1cea12298e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3a90b752-b3a8-4fc5-b807-861b133c1fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2f3bb3-0292-44ae-8c7f-c25e989096b1",
        "cursor": {
          "ref": "f40fb53e-5ca0-4a07-9882-3528126e02b6",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0396b27e-b2a2-4a0c-ba2c-b2877fc6343d"
        },
        "item": {
          "id": "7a2f3bb3-0292-44ae-8c7f-c25e989096b1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "15ae5009-ba01-4b86-bf1e-dc3adfc50893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c43a307-e4e3-4a9f-ab7e-79f9c7f38489",
        "cursor": {
          "ref": "b4f27130-e7d3-4942-bca8-75706ef960b6",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "160ff9e8-5a27-4613-a48d-719efb4d6259"
        },
        "item": {
          "id": "8c43a307-e4e3-4a9f-ab7e-79f9c7f38489",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b8f50ce2-8630-45a8-871e-d857d97ec027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7296fc4f-544b-4560-a654-1398e53807d9",
        "cursor": {
          "ref": "637cfa90-dbaf-4503-9a6f-60be66a78c31",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6ecb7f34-c054-49da-9acb-db21db1ae1cd"
        },
        "item": {
          "id": "7296fc4f-544b-4560-a654-1398e53807d9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1d082a3e-2f62-4259-882d-50986a35abba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a4d0ec-9ad5-4e57-8cd1-1da76a99486e",
        "cursor": {
          "ref": "f46a1ee5-ec11-4295-97d2-02c6b5659f80",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "539f23f2-157c-42d5-9a0a-244e81c998dc"
        },
        "item": {
          "id": "22a4d0ec-9ad5-4e57-8cd1-1da76a99486e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f6477957-2ca2-43b6-aaac-f59363807166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be78fee-2b2b-411d-916e-273260881ecd",
        "cursor": {
          "ref": "c8ed7d54-7ff3-4862-9724-ab03c094a329",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "66658704-f0ae-4683-86df-52086d76d428"
        },
        "item": {
          "id": "7be78fee-2b2b-411d-916e-273260881ecd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f0adf89c-1b2f-4b75-928f-e1d829a83dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5f7f9e-e58b-4c01-8904-5a0eda0a1e5b",
        "cursor": {
          "ref": "72f3d2eb-c2ce-46e9-ac9a-de0410ee2704",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6aa6a619-11cf-4271-8dad-ad5c8cfad422"
        },
        "item": {
          "id": "dc5f7f9e-e58b-4c01-8904-5a0eda0a1e5b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5a34596b-7e0f-4ea8-b867-6818be9028d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3c7d54-c357-4707-b8cf-e417db1fe8b9",
        "cursor": {
          "ref": "1d53d21c-20d2-4b7d-9b09-2164a455dfbc",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b61c7c7d-a726-4667-b1c6-9a64f2653834"
        },
        "item": {
          "id": "da3c7d54-c357-4707-b8cf-e417db1fe8b9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "26589365-e43f-4944-8b8b-41aeb49ee049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1e987d-5a75-4d95-9645-57a08e8e94d6",
        "cursor": {
          "ref": "75314953-ef69-4b5b-a567-7e9b024e4737",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f01fc4a0-0111-424b-ac8a-06437b2587b8"
        },
        "item": {
          "id": "1b1e987d-5a75-4d95-9645-57a08e8e94d6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "606316ff-8303-4c70-8fa2-1597efb6407a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9685b2-c494-48e7-91dd-2e2b7a03624f",
        "cursor": {
          "ref": "d1ab95ed-25c4-4096-bf43-7e1af3a8b5bc",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5b698444-5bdb-4de4-8d56-42c999024b2f"
        },
        "item": {
          "id": "8f9685b2-c494-48e7-91dd-2e2b7a03624f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6ddc5e0f-c1e4-4a05-96ce-fbb22a9bccb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da415389-59d8-47b0-8688-d2c857de0ef0",
        "cursor": {
          "ref": "4b7473fe-b5da-4352-a117-cec1e7a19c83",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fcbdad27-11e5-4dee-9be4-1843772df667"
        },
        "item": {
          "id": "da415389-59d8-47b0-8688-d2c857de0ef0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "37ae322d-0609-444b-bfaa-2faa7270e650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa29f289-7c43-4a28-be6f-4adbfc852584",
        "cursor": {
          "ref": "eb686f03-e319-4947-937c-de1d3f0aa194",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2975346a-1cb1-4b38-95a1-9585ec5e4715"
        },
        "item": {
          "id": "fa29f289-7c43-4a28-be6f-4adbfc852584",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d6090af2-d178-4655-820e-e3a11f3f769f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc00da4c-f646-4b4a-bf22-85e1c73f4721",
        "cursor": {
          "ref": "616a615c-343c-4de1-b66d-90fe6c75750f",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "75732265-49d4-4864-821d-921e1f9d190d"
        },
        "item": {
          "id": "dc00da4c-f646-4b4a-bf22-85e1c73f4721",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "973b24d8-8780-4138-9b4d-77bfc6f9c129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c95c52-f8be-40a1-a4dc-993d36393039",
        "cursor": {
          "ref": "7598d97d-f436-4b6b-bb26-db1b286adc1c",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "89d522cd-df0a-4a9c-aad8-9a89c16ba545"
        },
        "item": {
          "id": "61c95c52-f8be-40a1-a4dc-993d36393039",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8d4d8729-dfdf-491b-aaec-bbb203fd01de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acac27e1-70a8-4499-b5e5-5f5c2c64d333",
        "cursor": {
          "ref": "2f0b8e2a-9d6a-47af-9409-2b6975726674",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5585641e-e437-481e-8d92-4f2aed996a98"
        },
        "item": {
          "id": "acac27e1-70a8-4499-b5e5-5f5c2c64d333",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "efe65c5c-8688-496c-a84a-805478841a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c94a9b3-eb51-4648-8642-c9ebb01d50c4",
        "cursor": {
          "ref": "d1b8df7e-0e32-4131-b51f-55ad1f76abe5",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f20d72ba-7755-48bc-9f25-e5f54ce556cd"
        },
        "item": {
          "id": "7c94a9b3-eb51-4648-8642-c9ebb01d50c4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b740760-4706-4de1-a7ec-cd6a635fabbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13154ce8-0b91-469a-bc2d-38bc39e45f72",
        "cursor": {
          "ref": "f66ec56e-bdbb-4f89-8ef1-84af22acb094",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1e6fefc5-604d-46ed-853e-798f0f10c7b2"
        },
        "item": {
          "id": "13154ce8-0b91-469a-bc2d-38bc39e45f72",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9c84238d-0a44-4364-be48-314f7c21c0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dee61f-aae5-4588-9480-d7eab4f5ef39",
        "cursor": {
          "ref": "582aaf88-b098-4cdb-8b1a-af8e5b0b1e8f",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "880c3aef-38e8-4cb3-960e-6d76524d77d7"
        },
        "item": {
          "id": "94dee61f-aae5-4588-9480-d7eab4f5ef39",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ad746e28-a5a6-4574-bf37-ae415d86705f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c8e42-1bd3-4435-8ff3-fb78bd5bd201",
        "cursor": {
          "ref": "e83b19f5-f1c0-4a9e-9f48-4358a6bfe663",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3b85bcda-6c17-49d3-a7fd-ae5cddf854db"
        },
        "item": {
          "id": "b14c8e42-1bd3-4435-8ff3-fb78bd5bd201",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1aaa2a0e-845d-486e-9d6e-c7e70ab56369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc01bbc-c17f-4e5f-9cc5-cb295a984e13",
        "cursor": {
          "ref": "97860a96-7298-4db4-a070-57aecce5fe80",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4a25fe26-6e9a-4dc5-983e-c512540062d2"
        },
        "item": {
          "id": "7bc01bbc-c17f-4e5f-9cc5-cb295a984e13",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "77705b38-6927-4460-9cd8-c7c1200abf8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e2f287-a775-43cd-b0e1-819d363beb7d",
        "cursor": {
          "ref": "aa7d507e-b0b6-4f3a-8b48-0e5afa2e7a90",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1238055c-f13d-41fd-ade2-a3c123f9ad4f"
        },
        "item": {
          "id": "06e2f287-a775-43cd-b0e1-819d363beb7d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4257da56-bb13-40e1-a06d-2e346bc3cc08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88c3fb0-24e9-4c48-b9b1-889f76228099",
        "cursor": {
          "ref": "4c1d36f7-02fc-4f5f-8476-72c55fca48d7",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a85eec3f-c497-49c1-965e-887ac2389853"
        },
        "item": {
          "id": "b88c3fb0-24e9-4c48-b9b1-889f76228099",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a2029b9b-4e12-4413-8b85-f5ba50f9b558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461058d2-4968-4456-9ebc-3bed27dc2fb3",
        "cursor": {
          "ref": "5105e7ae-eec4-4faa-b1eb-8d9e2c2c322a",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c9a5441f-dc51-41f6-bbcc-db689a4e95ba"
        },
        "item": {
          "id": "461058d2-4968-4456-9ebc-3bed27dc2fb3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2bdf3e43-de19-4108-a5d3-073fedad0563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddf3ef4-8687-419f-bbef-788d36d77a41",
        "cursor": {
          "ref": "48af9751-baad-4a14-b2ef-637e7d1d67b4",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "91d85ec2-cc2c-4b9d-921e-7ee7ba6befeb"
        },
        "item": {
          "id": "6ddf3ef4-8687-419f-bbef-788d36d77a41",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "081093bd-8253-4df5-822d-5cb79c74ecb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0c8de7-0db4-4617-bf09-9bdd946794ff",
        "cursor": {
          "ref": "850474e9-aa24-4cde-a854-ed806387131d",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9f9a1ad3-da89-45b2-b3c5-9caa58d999eb"
        },
        "item": {
          "id": "0b0c8de7-0db4-4617-bf09-9bdd946794ff",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "44d47a17-af68-456d-bbb9-a5912d6c9626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7afdc8c5-db8b-4e28-8559-fa840db96aa2",
        "cursor": {
          "ref": "37282d72-fb63-4c3b-94ee-308034587e7a",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8c4e2916-d687-4ce7-ac0f-4ca683651daa"
        },
        "item": {
          "id": "7afdc8c5-db8b-4e28-8559-fa840db96aa2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8899a660-bbdf-4740-8600-f118258a80df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f44b66-b84a-4733-b644-1586cc392f43",
        "cursor": {
          "ref": "f611c4c0-deff-4549-9502-e53cf3a5139d",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "09c3e2cf-697e-48c7-ad23-aa0d518e1fd1"
        },
        "item": {
          "id": "e1f44b66-b84a-4733-b644-1586cc392f43",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2727ae15-21a6-4222-b943-4483aa1f1301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e666cd7-44b1-4788-9b49-c38e8b442f4e",
        "cursor": {
          "ref": "b9af986d-919e-4fe6-bad8-b2fb2b56fab3",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d8ea8ae0-9af4-4966-8629-4f2aae9b2fbf"
        },
        "item": {
          "id": "4e666cd7-44b1-4788-9b49-c38e8b442f4e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "950a316f-572a-4c9f-910f-26a148165c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda3a8b1-3db0-4825-80a0-78f6e6fc0976",
        "cursor": {
          "ref": "58645b8d-2091-4363-9387-429200b54ced",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f248376b-b623-4a5f-ae3d-d9f8b0804228"
        },
        "item": {
          "id": "cda3a8b1-3db0-4825-80a0-78f6e6fc0976",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "73dd0698-2314-4bd8-be08-75baf78a24c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e22cdab-eb8c-432a-b7ac-18c6c0e192b2",
        "cursor": {
          "ref": "58524716-5298-44a0-a4f3-67f62cfe5c4a",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2974776d-b640-44ec-a973-fa8511f4a833"
        },
        "item": {
          "id": "3e22cdab-eb8c-432a-b7ac-18c6c0e192b2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e2e83b2a-757d-4ffd-9a44-bd5f4f93c3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a8fbcc-8719-4672-ad5c-bdaadbe143e4",
        "cursor": {
          "ref": "75fc0e9f-5346-40bd-a3e2-87f48c338464",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b259dd67-6123-4561-9e52-d8c184c21b4c"
        },
        "item": {
          "id": "a2a8fbcc-8719-4672-ad5c-bdaadbe143e4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f57019ab-60d3-4ddb-8dd7-9545b57e6363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe26cfa-2e57-43a3-8625-6cf08e1c0382",
        "cursor": {
          "ref": "6693ed56-d404-47b3-9f8d-c0a57a1d4e45",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3f710cdd-7fb2-4da3-bf5e-383f24671dc2"
        },
        "item": {
          "id": "bfe26cfa-2e57-43a3-8625-6cf08e1c0382",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c86cf73a-3e97-476a-9ec1-084c738b8bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7340b273-ee7f-4c8b-ad6e-bae5c8a51e41",
        "cursor": {
          "ref": "2884c564-3bd0-415b-aad4-4afcef8d74ec",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "64e0ff63-2573-43a7-bacd-d2bc33a3c6bb"
        },
        "item": {
          "id": "7340b273-ee7f-4c8b-ad6e-bae5c8a51e41",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a3bb98e1-c707-4905-9cd7-a7401a274447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969fda16-a4b5-4c31-a1da-72d71b0beb1c",
        "cursor": {
          "ref": "35453889-c225-4a73-a4b5-8015df16dcac",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ea1e8ac6-7a17-4073-a723-53775286e1bd"
        },
        "item": {
          "id": "969fda16-a4b5-4c31-a1da-72d71b0beb1c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5c1e9f9c-f48c-4421-a884-30a469d33a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f27b6d-f886-48d8-a731-f2dbd4c0ce77",
        "cursor": {
          "ref": "358f346b-7484-49a4-b0d0-a5aa3a3e68cb",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cc950b75-52b8-44c4-aad0-89066711a406"
        },
        "item": {
          "id": "13f27b6d-f886-48d8-a731-f2dbd4c0ce77",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0377fbf5-774d-4982-97c3-912304c1c779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2c8560-24ad-4922-aefe-dff73e0c0dee",
        "cursor": {
          "ref": "c877e887-79f2-4bc6-a1ca-bd151b9d8c5d",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "418a8312-1563-467d-8efd-215c61bf46d0"
        },
        "item": {
          "id": "1e2c8560-24ad-4922-aefe-dff73e0c0dee",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9bf27728-8a82-44c7-8d87-11394dac8403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a61a13-0fd4-4e25-9a91-5eea0d856b29",
        "cursor": {
          "ref": "216bc7d7-a296-4110-8abe-3b16e095d493",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "87350e08-f16c-484b-a20d-f2045e5c2c24"
        },
        "item": {
          "id": "74a61a13-0fd4-4e25-9a91-5eea0d856b29",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "97f3ffdb-2b46-4faf-b006-3a06a10b64bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695fee29-08ad-474c-8dcd-f9fbb21b5c6d",
        "cursor": {
          "ref": "83d27840-8f87-4cea-9ac9-cfafc3c299ad",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ccd1fbca-041f-47aa-a61e-b5b90bbd0200"
        },
        "item": {
          "id": "695fee29-08ad-474c-8dcd-f9fbb21b5c6d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "72855910-0f9b-48fb-b838-8f101683dfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f735e84-02fb-48ac-82ac-df1830232d01",
        "cursor": {
          "ref": "483579f2-55b9-46e7-9546-1e6c4a72cda0",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "529393e1-fca3-4bd2-8d7d-00b3fee805b1"
        },
        "item": {
          "id": "0f735e84-02fb-48ac-82ac-df1830232d01",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e432728a-6a40-4056-94e8-e827ac294c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3ffa74-dba4-4bc6-b9ea-6de72c533878",
        "cursor": {
          "ref": "a7ab1746-fd94-45e8-9357-71f49f24e96f",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2f510c3e-5a66-4a70-959d-81c7c788bb81"
        },
        "item": {
          "id": "6c3ffa74-dba4-4bc6-b9ea-6de72c533878",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "195eeefe-cb11-4a8d-9901-c8610a5938d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e98441-5f89-4b45-83ca-eaf6612d35ed",
        "cursor": {
          "ref": "2d955ed8-9117-446d-9047-303768e55bcb",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4a22f7c8-81d8-4266-8666-98237a6a9b40"
        },
        "item": {
          "id": "71e98441-5f89-4b45-83ca-eaf6612d35ed",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "74cab5de-1d3f-4784-a224-9b7b683b4707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b28926e-9543-4537-a09b-85453d1ffe77",
        "cursor": {
          "ref": "cabbd370-852d-4949-8963-953dc13b4762",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "316556f8-7ed9-42c4-a177-0d1efd1785d8"
        },
        "item": {
          "id": "1b28926e-9543-4537-a09b-85453d1ffe77",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "812ba714-b506-4443-982d-0539d19b934d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d59181-110c-4c43-aacf-97f290f65da3",
        "cursor": {
          "ref": "22d948c3-e791-473f-ac90-e4f367bd0166",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9583be76-7727-4c47-887e-7ff5e5781e0a"
        },
        "item": {
          "id": "34d59181-110c-4c43-aacf-97f290f65da3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0cbe2e6b-7b36-49fa-b4b5-b57271f82c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc33262-08c9-449f-ad80-4a1e2c8676f6",
        "cursor": {
          "ref": "01e7ba17-d8bf-4a38-9902-930819df8d7a",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "76f81a23-25df-4bb9-892b-db89bd849086"
        },
        "item": {
          "id": "3fc33262-08c9-449f-ad80-4a1e2c8676f6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8ff6f19f-9809-4305-a089-b90fd9f50e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cbac75-e4b6-4fe8-8546-6193150bf3b3",
        "cursor": {
          "ref": "a0755b2f-0190-4557-b572-98b0293df000",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f0028e35-455a-4e16-9040-df7975c7935a"
        },
        "item": {
          "id": "34cbac75-e4b6-4fe8-8546-6193150bf3b3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e137f7d7-5623-431e-8ded-366a2e751d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a1db91-bfb6-4ac4-a2a2-ef1ea1b50c3c",
        "cursor": {
          "ref": "5c576bbd-ef0c-4216-80fb-779bd77c1a2e",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bcf98986-ee38-49c0-8442-3425db3700d2"
        },
        "item": {
          "id": "97a1db91-bfb6-4ac4-a2a2-ef1ea1b50c3c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "379d3a00-6ff3-4109-b141-74766aaccfb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b75f378-ebde-48ae-b655-add3a25c9416",
        "cursor": {
          "ref": "e93dab9e-93ac-43d6-bdee-c9105e1cb825",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ab55a2ae-ebd0-47e6-8fc5-ea0d9d00ffe0"
        },
        "item": {
          "id": "5b75f378-ebde-48ae-b655-add3a25c9416",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4b447777-3659-4c58-a4a8-4ef9f517a69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e25cf7f-ba77-4a4c-aa71-5551832c3f6f",
        "cursor": {
          "ref": "a59a6f63-67f1-433c-852b-5507a39131d9",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95adb0a0-947c-4cc9-a0d2-c34cea477cf2"
        },
        "item": {
          "id": "7e25cf7f-ba77-4a4c-aa71-5551832c3f6f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "316ec5ad-4f57-48f8-9ac6-d994cf2db2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d498dd-b9c0-4462-813d-854322fad257",
        "cursor": {
          "ref": "12b044cc-dd87-43d0-bee9-b6cd886f6dc5",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a091e441-38bd-4d7c-998b-5847a174c611"
        },
        "item": {
          "id": "35d498dd-b9c0-4462-813d-854322fad257",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d07254a1-d959-460a-906b-5c01d1336c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f44f17-340c-4521-a22b-af2a206bde0f",
        "cursor": {
          "ref": "d56dc5df-07fc-4712-8f42-655a6dfadc30",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "81949395-7f2a-41d2-9a55-9cae60a65fd3"
        },
        "item": {
          "id": "15f44f17-340c-4521-a22b-af2a206bde0f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6d7e3ff9-16d3-4e86-bc32-303346523441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ee2642-8679-49e1-b90f-bd0b960ff5f6",
        "cursor": {
          "ref": "31380f73-f802-48b5-8ba1-555c620ff280",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "58a16e6d-9924-4dd8-abfc-bd2966f99a09"
        },
        "item": {
          "id": "d6ee2642-8679-49e1-b90f-bd0b960ff5f6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "737776b7-4903-46b4-a0c3-1a9981230d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4079c521-baf4-448e-ba62-89c57c77edb8",
        "cursor": {
          "ref": "9819cfca-753c-4aad-b297-c6b1729bfd51",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "99064815-c41c-4f6a-bf6c-b90f644cd5ba"
        },
        "item": {
          "id": "4079c521-baf4-448e-ba62-89c57c77edb8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "41f05895-8238-40b9-9c3e-68414d867b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a8ac2d-2623-4528-a062-2da7b78285ac",
        "cursor": {
          "ref": "53de48f0-474f-432e-a469-de60a3317597",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ec0221af-3e6c-409b-8208-40eba5355cc6"
        },
        "item": {
          "id": "44a8ac2d-2623-4528-a062-2da7b78285ac",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dce1ecd5-f3d3-4850-9d65-bdd3779e97fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf9d256-a1a7-4f48-aeba-36781f5f2545",
        "cursor": {
          "ref": "a902254a-6a29-4ef6-ad1d-a50e6073d681",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "078537e9-282f-4d33-b0c7-75c1d1545651"
        },
        "item": {
          "id": "ddf9d256-a1a7-4f48-aeba-36781f5f2545",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c3065fd4-3205-4b1d-8090-fb6947868f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc98de2-3502-477b-8b3e-067eddafdf36",
        "cursor": {
          "ref": "bbd21572-d477-4da9-af86-365b9af81462",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fddbb038-6bc5-4790-a6ce-fe22fcae7e16"
        },
        "item": {
          "id": "bfc98de2-3502-477b-8b3e-067eddafdf36",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b757225a-e361-4f64-b354-11d33b3d0bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98220001-bb4b-4fc4-987f-ccc1eeea6dd3",
        "cursor": {
          "ref": "1d9976c5-0f1e-4a05-9289-d340510877e4",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fb7e0832-47ea-4e05-a4cf-a63a2cf65dd1"
        },
        "item": {
          "id": "98220001-bb4b-4fc4-987f-ccc1eeea6dd3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fdad37d3-5178-46d9-828b-b5de891ae634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0277e92c-ca2f-4caf-b478-5d69b7c6e9b0",
        "cursor": {
          "ref": "33d042d1-d115-4304-b9bb-bdc39136baad",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "353168b4-451c-46e7-a089-1416199034c3"
        },
        "item": {
          "id": "0277e92c-ca2f-4caf-b478-5d69b7c6e9b0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "156ade11-97ee-4627-bc8d-df0745b5ed0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70b08a6-3815-4480-9f39-f8d3b9f65434",
        "cursor": {
          "ref": "293b4fc0-62cf-4752-a472-753aa1d08de9",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0c5f08af-ccdc-4894-bdbf-f18729c40351"
        },
        "item": {
          "id": "a70b08a6-3815-4480-9f39-f8d3b9f65434",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "09d09840-ed79-405d-af80-9163883da6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e38b30b-1128-4949-a217-d8376e9fb85b",
        "cursor": {
          "ref": "ec8141c9-5da0-43be-aeae-5dfb4a27e272",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4a4b1cf0-3ddc-4f6c-85db-80c729d6f4b8"
        },
        "item": {
          "id": "9e38b30b-1128-4949-a217-d8376e9fb85b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e80e1938-b804-4268-9819-4cb156623c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c402fc23-5077-4dcc-ad3d-a41c7d8df7ab",
        "cursor": {
          "ref": "c48bc5ad-8da4-46ac-ba5a-2cba847c740a",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9a5b39d7-7657-42fb-a50a-e6198c0c1b72"
        },
        "item": {
          "id": "c402fc23-5077-4dcc-ad3d-a41c7d8df7ab",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "df4d73bf-47bc-47dc-a861-2e88f351ff0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf58c7c-29a4-464c-9f37-122b5706103d",
        "cursor": {
          "ref": "deddec3b-49fc-4f94-88a4-5ea2258461e9",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "80d5cd1a-aa01-4bfb-86e7-fd9613dd1128"
        },
        "item": {
          "id": "4bf58c7c-29a4-464c-9f37-122b5706103d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0cd1757a-95aa-40b5-b711-31235089160c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bb8618-e8f9-43b7-b4c4-e30879939010",
        "cursor": {
          "ref": "f486c6cd-09e0-40b9-8cb6-754918a7637a",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e12db484-e1ca-4256-8e63-bbc75f193a0f"
        },
        "item": {
          "id": "49bb8618-e8f9-43b7-b4c4-e30879939010",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5b95d2f1-fab5-47c0-84f4-6ee55b72c9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3664541-aaa4-4c3e-a2d9-76044a2b493c",
        "cursor": {
          "ref": "5ebf960b-3974-4127-ac97-a61a34aa6749",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a32f5179-16c8-43d2-a21a-e10bc8df29d7"
        },
        "item": {
          "id": "f3664541-aaa4-4c3e-a2d9-76044a2b493c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c7fa57c5-c6e8-4ffb-b423-a85e586e997c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1d9271-01b7-4159-9bdf-00960c169bda",
        "cursor": {
          "ref": "22baac5b-cc1e-48ba-8dc7-002bf343f3b3",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "886fafec-f11e-4db2-b0f5-fdc98a0b44c2"
        },
        "item": {
          "id": "4a1d9271-01b7-4159-9bdf-00960c169bda",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "47efb902-eb2b-4258-9597-b9ff0c7865cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43aa867a-55d5-4740-97a3-5b3b26cd4a31",
        "cursor": {
          "ref": "1edb40ff-3822-4c6e-b1f2-bc5bf4c2eef8",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e7bce7a8-2ac9-4f63-92f0-2b475973a4b4"
        },
        "item": {
          "id": "43aa867a-55d5-4740-97a3-5b3b26cd4a31",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b9c9e125-e66f-46c3-b180-5356870b319b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "36d78463-8ca6-4075-8e54-5ff183fd6efb",
        "cursor": {
          "ref": "a37ec0d3-68e4-4b16-85f7-b2b8eceb7987",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0b032e48-84a6-4d22-a352-58adf0397a67"
        },
        "item": {
          "id": "36d78463-8ca6-4075-8e54-5ff183fd6efb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6859dc36-4a4f-4dd4-8d38-1aae7e910bb9",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b16369-1c7d-48ab-897a-606edbb64844",
        "cursor": {
          "ref": "a94e3dba-2bf4-4162-aab7-e05509c9218c",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fabc1960-d724-45a9-af17-a6da436b27ab"
        },
        "item": {
          "id": "01b16369-1c7d-48ab-897a-606edbb64844",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2f0a5b63-b67c-43e2-9da9-77fe32ea3855",
          "status": "OK",
          "code": 200,
          "responseTime": 2228,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "116d08c1-79cb-433e-8f44-c6c82fe584fe",
        "cursor": {
          "ref": "b58497ca-8de1-4a5c-94cb-d5be6892b6c4",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cf3e25e1-989f-4e5e-bb29-358dad518883"
        },
        "item": {
          "id": "116d08c1-79cb-433e-8f44-c6c82fe584fe",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f0e792d3-d731-4311-b4f0-afa46c865b20",
          "status": "OK",
          "code": 200,
          "responseTime": 2396,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "57819a31-dec1-45a2-81c5-7bc8ff32e890",
        "cursor": {
          "ref": "9887e6ae-cc9a-4076-b089-1de3f36a09aa",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9e7fd94c-0f94-4208-817c-e7cee5b8b7b4"
        },
        "item": {
          "id": "57819a31-dec1-45a2-81c5-7bc8ff32e890",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "773c2538-065f-4f8e-bedc-7b0b7fda9eda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "57819a31-dec1-45a2-81c5-7bc8ff32e890",
        "cursor": {
          "ref": "9887e6ae-cc9a-4076-b089-1de3f36a09aa",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9e7fd94c-0f94-4208-817c-e7cee5b8b7b4"
        },
        "item": {
          "id": "57819a31-dec1-45a2-81c5-7bc8ff32e890",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "773c2538-065f-4f8e-bedc-7b0b7fda9eda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "aaf1d6d2-c411-451d-8515-8de94a2d9754",
        "cursor": {
          "ref": "7572bfab-31ba-4242-b605-2bb32047110d",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a099c361-b27a-4e98-80fe-ec7c017b94b1"
        },
        "item": {
          "id": "aaf1d6d2-c411-451d-8515-8de94a2d9754",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6e301a06-1068-4314-8df0-92d096256721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "268b4be1-3323-4293-8c5d-c40399dfa897",
        "cursor": {
          "ref": "81c7d3e0-0077-4402-9111-2ef8b62bf1a2",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "179a7cdf-2662-4529-b775-48e13ba695ac"
        },
        "item": {
          "id": "268b4be1-3323-4293-8c5d-c40399dfa897",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a767c8e0-f481-4f67-a45b-279fb598b43e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}